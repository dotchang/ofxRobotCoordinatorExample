/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 60 generated on 2012-09-02 10:04:06.122772
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==60);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_LEFT5DF18 {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51;
x0=IKcos(j[0]);
x1=IKcos(j[2]);
x2=IKsin(j[1]);
x3=IKcos(j[1]);
x4=IKsin(j[2]);
x5=IKsin(j[4]);
x6=IKcos(j[4]);
x7=IKcos(j[3]);
x8=IKsin(j[0]);
x9=IKsin(j[3]);
x10=((IkReal(0.965925532213041))*(x6));
x11=((IkReal(0.258820142606703))*(x6));
x12=((IkReal(0.258820142606703))*(x5));
x13=((IkReal(0.0400000000000000))*(x2));
x14=((IkReal(0.965925532213041))*(x5));
x15=((IkReal(0.0289777659663912))*(x8));
x16=((IkReal(0.00776460427820108))*(x8));
x17=((IkReal(1.00000000000000))*(x8));
x18=((IkReal(0.226992500070065))*(x8));
x19=((IkReal(0.0300000000000000))*(x0));
x20=((IkReal(0.235000000000000))*(x0));
x21=((IkReal(0.0900000000000000))*(x7));
x22=((IkReal(0.0900000000000000))*(x8));
x23=((IkReal(1.00000000000000))*(x0));
x24=((IkReal(0.0900000000000000))*(x0));
x25=((IkReal(0.0608227335125751))*(x8));
x26=((IkReal(1.00000000000000))*(x7));
x27=((IkReal(0.0400000000000000))*(x8));
x28=((x0)*(x9));
x29=((x2)*(x4));
x30=((x1)*(x3));
x31=((x3)*(x4));
x32=((x1)*(x2));
x33=((x2)*(x8));
x34=((IkReal(-0.0400000000000000))*(x7));
x35=((((IkReal(-0.0900000000000000))*(x30)))+(((IkReal(0.0900000000000000))*(x29))));
x36=((((IkReal(0.0400000000000000))*(x30)))+(((IkReal(-1.00000000000000))*(x13)*(x4))));
x37=((((IkReal(-1.00000000000000))*(x29)))+(((IkReal(1.00000000000000))*(x30))));
x38=((((x1)*(x13)))+(((IkReal(0.0400000000000000))*(x31))));
x39=((((IkReal(0.0900000000000000))*(x32)))+(((IkReal(0.0900000000000000))*(x31))));
x40=((((IkReal(1.00000000000000))*(x31)))+(((IkReal(1.00000000000000))*(x32))));
x41=((x35)*(x6));
x42=((((x0)*(x30)))+(((IkReal(-1.00000000000000))*(x23)*(x29))));
x43=((((x30)*(x8)))+(((IkReal(-1.00000000000000))*(x17)*(x29))));
x44=((x39)*(x7));
x45=((x40)*(x7));
x46=((x38)*(x7));
x47=((x22)*(((((IkReal(-1.00000000000000))*(x32)))+(((IkReal(-1.00000000000000))*(x31))))));
x48=((((x27)*(x31)))+(((x1)*(x13)*(x8))));
x49=((x17)*(((x32)+(x31))));
x50=((x43)*(x7));
x51=((((IkReal(-1.00000000000000))*(x26)*(x43)))+(((IkReal(-1.00000000000000))*(x23)*(x9))));
IkReal x52=((IkReal(1.00000000000000))*(x24));
IkReal x53=((IkReal(1.00000000000000))*(x20));
eetrans[0]=((((x6)*(((((x27)*(x9)))+(((x34)*(x42)))))))+(((x19)*(x29)))+(((x5)*(((((x0)*(x1)*(x13)))+(((IkReal(0.0400000000000000))*(x0)*(x31)))))))+(((IkReal(-1.00000000000000))*(x32)*(x53)))+(((x6)*(((((IkReal(-1.00000000000000))*(x32)*(x52)))+(((IkReal(-1.00000000000000))*(x31)*(x52)))))))+(((IkReal(-1.00000000000000))*(x31)*(x53)))+(((IkReal(-1.00000000000000))*(x19)*(x30)))+(((x5)*(((((x22)*(x9)))+(((IkReal(-1.00000000000000))*(x21)*(x42)))))))+(((IkReal(-0.250000000000000))*(x0)*(x2)))+(((IkReal(-0.0950000000000000))*(x8))));
IkReal x54=((IkReal(1.00000000000000))*(x18));
eetrans[1]=((IkReal(0.145000000000000))+(((IkReal(0.0917629255602389))*(x0)))+(((IkReal(-0.0647050356516757))*(x3)))+(((IkReal(0.0608227335125751))*(x29)))+(((IkReal(-0.0608227335125751))*(x30)))+(((x14)*(((((IkReal(-0.0900000000000000))*(x28)))+(((IkReal(-0.0900000000000000))*(x50)))))))+(((x10)*(x47)))+(((IkReal(-1.00000000000000))*(x32)*(x54)))+(((x11)*(x46)))+(((x11)*(x35)))+(((IkReal(-1.00000000000000))*(x31)*(x54)))+(((x14)*(x48)))+(((x10)*(((((IkReal(-0.0400000000000000))*(x28)))+(((IkReal(-0.0400000000000000))*(x50)))))))+(((IkReal(0.00776460427820108))*(x32)))+(((IkReal(0.00776460427820108))*(x31)))+(((IkReal(-0.241481383053260))*(x33)))+(((x12)*(x44)))+(((x12)*(x36)))+(((x15)*(x29)))+(((IkReal(-1.00000000000000))*(x15)*(x30))));
IkReal x55=((IkReal(1.00000000000000))*(x11));
IkReal x56=((IkReal(1.00000000000000))*(x12));
eetrans[2]=((IkReal(0.370296000000000))+(((IkReal(0.226992500070065))*(x29)))+(((x10)*(x35)))+(((x10)*(x46)))+(((IkReal(-1.00000000000000))*(x48)*(x56)))+(((x16)*(x30)))+(((IkReal(-0.0245879135476367))*(x0)))+(((IkReal(-0.226992500070065))*(x30)))+(((x14)*(x44)))+(((IkReal(-1.00000000000000))*(x16)*(x29)))+(((x14)*(x36)))+(((IkReal(-1.00000000000000))*(x47)*(x55)))+(((IkReal(-0.241481383053260))*(x3)))+(((IkReal(0.0289777659663912))*(x32)))+(((IkReal(0.0289777659663912))*(x31)))+(((x25)*(x32)))+(((x25)*(x31)))+(((IkReal(-1.00000000000000))*(x55)*(((((x34)*(x43)))+(((IkReal(-0.0400000000000000))*(x28)))))))+(((IkReal(-1.00000000000000))*(x56)*(((((IkReal(-1.00000000000000))*(x24)*(x9)))+(((IkReal(-1.00000000000000))*(x21)*(x43)))))))+(((IkReal(0.0647050356516757))*(x33))));
eerot[0]=((((x6)*(((((x17)*(x9)))+(((IkReal(-1.00000000000000))*(x26)*(x42)))))))+(((x5)*(((((x23)*(x31)))+(((x23)*(x32))))))));
eerot[1]=((((x11)*(x45)))+(((x14)*(x49)))+(((x10)*(x51)))+(((x12)*(x37))));
eerot[2]=((((IkReal(-1.00000000000000))*(x12)*(x49)))+(((IkReal(-1.00000000000000))*(x11)*(x51)))+(((x10)*(x45)))+(((x14)*(x37))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {5}; return freeparams; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j13,cj13,sj13,htj13,j14,cj14,sj14,htj14,j15,cj15,sj15,htj15,j16,cj16,sj16,htj16,j17,cj17,sj17,htj17,j18,cj18,sj18,htj18,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij13[2], _nj13,_ij14[2], _nj14,_ij15[2], _nj15,_ij16[2], _nj16,_ij17[2], _nj17,_ij18[2], _nj18;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1; j14=numeric_limits<IkReal>::quiet_NaN(); _ij14[0] = -1; _ij14[1] = -1; _nj14 = -1; j15=numeric_limits<IkReal>::quiet_NaN(); _ij15[0] = -1; _ij15[1] = -1; _nj15 = -1; j16=numeric_limits<IkReal>::quiet_NaN(); _ij16[0] = -1; _ij16[1] = -1; _nj16 = -1; j17=numeric_limits<IkReal>::quiet_NaN(); _ij17[0] = -1; _ij17[1] = -1; _nj17 = -1;  _ij18[0] = -1; _ij18[1] = -1; _nj18 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

j18=pfree[0]; cj18=cos(pfree[0]); sj18=sin(pfree[0]);
r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=((((IkReal(-0.0500000000000000))*(r00)))+(px));
new_r01=((((IkReal(0.965925532213041))*(r01)))+(((IkReal(-0.258820142606703))*(r02))));
new_py=((IkReal(-0.0442191386441994))+(((IkReal(-0.258820142606703))*(pz)))+(((IkReal(-0.0482962766106520))*(r01)))+(((IkReal(0.0129410071303351))*(r02)))+(((IkReal(0.965925532213041))*(py))));
new_r02=((((IkReal(0.965925532213041))*(r02)))+(((IkReal(0.258820142606703))*(r01))));
new_pz=((IkReal(-0.395207281554332))+(((IkReal(-0.0482962766106520))*(r02)))+(((IkReal(-0.0129410071303351))*(r01)))+(((IkReal(0.258820142606703))*(py)))+(((IkReal(0.965925532213041))*(pz))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
IkReal op[72], zeror[48];
int numroots;
IkReal x57=((IkReal(0.196063829787234))*(r02));
IkReal x58=((IkReal(0.170212765957447))*(py));
IkReal x59=((IkReal(0.458723404255319))*(r01));
IkReal x60=((IkReal(0.0950000000000000))*(r00));
IkReal x61=((IkReal(0.0300000000000000))*(r01));
IkReal x62=(py)*(py);
IkReal x63=((IkReal(0.0446500000000000))*(r00));
IkReal x64=((IkReal(0.0141000000000000))*(r01));
IkReal x65=((IkReal(0.00285000000000000))*(r02));
IkReal x66=((IkReal(0.0194000000000000))*(r01));
IkReal x67=((IkReal(0.0800000000000000))*(py));
IkReal x68=(pz)*(pz);
IkReal x69=(px)*(px);
IkReal x70=((IkReal(0.235450000000000))*(r00));
IkReal x71=((IkReal(0.0800000000000000))*(px));
IkReal x72=((IkReal(0.0475000000000000))*(r01));
IkReal x73=((IkReal(0.00705000000000000))*(r02));
IkReal x74=((IkReal(0.0150000000000000))*(r00));
IkReal x75=((IkReal(0.0800000000000000))*(pz));
IkReal x76=((pp)*(r02));
IkReal x77=((pp)*(r00));
IkReal x78=((IkReal(0.160000000000000))*(px));
IkReal x79=((IkReal(0.0300000000000000))*(r02));
IkReal x80=((IkReal(0.0141000000000000))*(r00));
IkReal x81=((IkReal(0.160000000000000))*(pz));
IkReal x82=((IkReal(0.000450000000000000))*(r00));
IkReal x83=((IkReal(0.917446808510638))*(r00));
IkReal x84=((IkReal(0.340425531914894))*(px));
IkReal x85=((IkReal(0.190000000000000))*(r01));
IkReal x86=((IkReal(0.0600000000000000))*(r00));
IkReal x87=((IkReal(0.0893000000000000))*(r01));
IkReal x88=((IkReal(0.0282000000000000))*(r00));
IkReal x89=((IkReal(0.0388000000000000))*(r00));
IkReal x90=((IkReal(0.470900000000000))*(r01));
IkReal x91=((IkReal(0.160000000000000))*(py));
IkReal x92=((IkReal(0.000900000000000000))*(r01));
IkReal x93=((py)*(r00));
IkReal x94=((IkReal(0.392127659574468))*(r00));
IkReal x95=((IkReal(0.190000000000000))*(r02));
IkReal x96=((px)*(r01));
IkReal x97=((IkReal(0.0893000000000000))*(r02));
IkReal x98=((IkReal(0.00570000000000000))*(r00));
IkReal x99=((pp)*(r01));
IkReal x100=((IkReal(0.470900000000000))*(r02));
IkReal x101=((IkReal(0.000900000000000000))*(r02));
IkReal x102=((pz)*(r01));
IkReal x103=((IkReal(4.00000000000000))*(py));
IkReal x104=((py)*(r02));
IkReal x105=((px)*(r02));
IkReal x106=((pz)*(r02));
IkReal x107=((pz)*(r00));
IkReal x108=((IkReal(2.00000000000000))*(py));
IkReal x109=((py)*(r01));
IkReal x110=((px)*(r00));
IkReal x111=((IkReal(2.00000000000000))*(px));
IkReal x112=((IkReal(2.00000000000000))*(pz));
IkReal x113=((IkReal(2.06382978723404))*(x102));
IkReal x114=((IkReal(0.404255319148936))*(x109));
IkReal x115=((IkReal(2.06382978723404))*(x104));
IkReal x116=((IkReal(0.404255319148936))*(x106));
IkReal x117=((IkReal(2.12765957446809))*(x99));
IkReal x118=((IkReal(0.404255319148936))*(x110));
IkReal x119=((IkReal(0.470000000000000))*(x96));
IkReal x120=((IkReal(0.470000000000000))*(x93));
IkReal x121=((pz)*(x61));
IkReal x122=((IkReal(0.190000000000000))*(x110));
IkReal x123=((py)*(x85));
IkReal x124=((pz)*(x95));
IkReal x125=((IkReal(1.00000000000000))*(x99));
IkReal x126=((py)*(x79));
IkReal x127=((px)*(x85));
IkReal x128=((IkReal(0.970000000000000))*(x105));
IkReal x129=((IkReal(0.970000000000000))*(x107));
IkReal x130=((IkReal(0.190000000000000))*(x93));
IkReal x131=((py)*(x95));
IkReal x132=((pz)*(x86));
IkReal x133=((IkReal(0.0600000000000000))*(x105));
IkReal x134=((pz)*(x85));
IkReal x135=((IkReal(0.500000000000000))*(x106));
IkReal x136=((IkReal(0.500000000000000))*(x109));
IkReal x137=((IkReal(0.500000000000000))*(x110));
IkReal x138=((IkReal(2.00000000000000))*(x77));
IkReal x139=((IkReal(0.380000000000000))*(x96));
IkReal x140=((IkReal(0.380000000000000))*(x93));
IkReal x141=((IkReal(2.00000000000000))*(x76));
IkReal x142=((IkReal(0.380000000000000))*(x102));
IkReal x143=((IkReal(1.00000000000000))*(x76));
IkReal x144=((IkReal(0.0300000000000000))*(x107));
IkReal x145=((px)*(x79));
IkReal x146=((IkReal(1.00000000000000))*(x77));
IkReal x147=((IkReal(4.12765957446809))*(x105));
IkReal x148=((IkReal(4.25531914893617))*(x77));
IkReal x149=((IkReal(4.12765957446809))*(x107));
IkReal x150=((IkReal(1.94000000000000))*(x104));
IkReal x151=((IkReal(2.00000000000000))*(x99));
IkReal x152=((IkReal(1.94000000000000))*(x102));
IkReal x153=((IkReal(0.120000000000000))*(x102));
IkReal x154=((IkReal(0.380000000000000))*(x107));
IkReal x155=((IkReal(0.120000000000000))*(x104));
IkReal x156=((IkReal(0.380000000000000))*(x105));
IkReal x157=((IkReal(0.760000000000000))*(x107));
IkReal x158=((IkReal(0.760000000000000))*(x105));
IkReal x159=((IkReal(0.0600000000000000))*(x102));
IkReal x160=((IkReal(0.0600000000000000))*(x104));
IkReal x161=((IkReal(1.00000000000000))*(x96));
IkReal x162=((IkReal(4.12765957446809))*(x93));
IkReal x163=((IkReal(4.12765957446809))*(x96));
IkReal x164=((IkReal(2.00000000000000))*(x104));
IkReal x165=((IkReal(2.00000000000000))*(x102));
IkReal x166=((IkReal(1.00000000000000))*(x93));
IkReal x167=((IkReal(0.940000000000000))*(x104));
IkReal x168=((IkReal(0.940000000000000))*(x102));
IkReal x169=((py)*(x86));
IkReal x170=((IkReal(0.0600000000000000))*(x96));
IkReal x171=((IkReal(0.380000000000000))*(x104));
IkReal x172=((IkReal(0.0200000000000000))+(x74));
IkReal x173=((IkReal(0.0200000000000000))+(x76));
IkReal x174=((r02)*(x68));
IkReal x175=((r00)*(x69));
IkReal x176=((r01)*(x62));
IkReal x177=((IkReal(4.25531914893617))*(x176));
IkReal x178=((IkReal(4.25531914893617))*(pz)*(x104));
IkReal x179=((IkReal(4.25531914893617))*(px)*(x93));
IkReal x180=((x111)*(x93));
IkReal x181=((IkReal(2.00000000000000))*(x176));
IkReal x182=((x104)*(x112));
IkReal x183=((x108)*(x96));
IkReal x184=((IkReal(2.00000000000000))*(x175));
IkReal x185=((x105)*(x112));
IkReal x186=((x107)*(x111));
IkReal x187=((IkReal(2.00000000000000))*(x174));
IkReal x188=((x102)*(x108));
IkReal x189=((IkReal(4.00000000000000))*(pz)*(x105));
IkReal x190=((IkReal(4.00000000000000))*(x175));
IkReal x191=((x103)*(x96));
IkReal x192=((IkReal(8.51063829787234))*(x175));
IkReal x193=((IkReal(8.51063829787234))*(py)*(x96));
IkReal x194=((IkReal(8.51063829787234))*(pz)*(x105));
IkReal x195=((x103)*(x106));
IkReal x196=((IkReal(4.00000000000000))*(px)*(x93));
IkReal x197=((IkReal(4.00000000000000))*(x176));
IkReal x198=((x102)*(x103));
IkReal x199=((IkReal(4.00000000000000))*(px)*(x107));
IkReal x200=((IkReal(4.00000000000000))*(x174));
IkReal x201=((x60)+(x61));
IkReal x202=((IkReal(0.0161702127659574))+(x115));
IkReal x203=((IkReal(0.0200000000000000))+(x132));
IkReal x204=((IkReal(0.0161702127659574))+(x113));
IkReal x205=((x120)+(x63));
IkReal x206=((x121)+(x65));
IkReal x207=((x129)+(x70));
IkReal x208=((x133)+(x72));
IkReal x209=((x139)+(x79));
IkReal x210=((x145)+(x82));
IkReal x211=((x138)+(x78));
IkReal x212=((x140)+(x79));
IkReal x213=((x131)+(x75));
IkReal x214=((x132)+(x76));
IkReal x215=((x143)+(x74));
IkReal x216=((x151)+(x91));
IkReal x217=((x130)+(x71));
IkReal x218=((x128)+(x70));
IkReal x219=((x134)+(x75));
IkReal x220=((x119)+(x64));
IkReal x221=((x144)+(x82));
IkReal x222=((x132)+(x72));
IkReal x223=((IkReal(0.00760000000000000))+(x67)+(x99));
IkReal x224=((x126)+(x65));
IkReal x225=((x156)+(x155));
IkReal x226=((x156)+(x153));
IkReal x227=((x154)+(x153));
IkReal x228=((x155)+(x154));
IkReal x229=((x148)+(x83)+(x84));
IkReal x230=((x117)+(x59)+(x58));
IkReal x231=((x127)+(x77)+(x71));
IkReal x232=((x146)+(x127)+(x71));
IkReal x233=((x171)+(x141)+(x81));
IkReal x234=((x141)+(x142)+(x81));
IkReal x235=((x135)+(x137)+(x136));
IkReal x236=((x113)+(x116)+(x114)+(x118));
IkReal x237=((x179)+(x178)+(x177));
IkReal x238=((x199)+(x198)+(x200));
IkReal x239=((x197)+(x196)+(x195));
IkReal x240=((x116)+(x115)+(x114)+(x118));
IkReal x241=((x193)+(x192)+(x194));
IkReal x242=((x124)+(x125)+(x122)+(x123)+(x67));
IkReal x243=((x191)+(x190)+(x189)+(x80));
IkReal x244=((x191)+(x190)+(x189)+(x89));
IkReal x245=((x171)+(x238));
IkReal x246=((x142)+(x238));
IkReal x247=((IkReal(0.00760000000000000))+(x180)+(x181)+(x182)+(x66));
IkReal x248=((x130)+(x184)+(x185)+(x183));
IkReal x249=((x127)+(x184)+(x185)+(x183));
IkReal x250=((x134)+(x186)+(x187)+(x188)+(x73));
IkReal x251=((x131)+(x186)+(x187)+(x188)+(x73));
IkReal x252=((((IkReal(-8.00000000000000))*(x176)))+(((IkReal(-8.00000000000000))*(pz)*(x104)))+(((IkReal(-0.0282000000000000))*(r01)))+(((IkReal(4.00000000000000))*(x99)))+(((IkReal(0.320000000000000))*(py)))+(((IkReal(-8.00000000000000))*(px)*(x93))));
IkReal x253=((x133)+(x251));
IkReal x254=((x124)+(x122)+(x123)+(x180)+(x181)+(x182)+(x66));
op[0]=((((IkReal(-1.00000000000000))*(x230)))+(((IkReal(-1.00000000000000))*(x236)))+(x237)+(x202)+(((IkReal(-1.00000000000000))*(x57))));
op[1]=((((IkReal(-1.00000000000000))*(x161)))+(x61)+(x93)+(((IkReal(-1.00000000000000))*(x60))));
op[2]=((((IkReal(-1.00000000000000))*(x163)))+(x162)+(((IkReal(-1.00000000000000))*(x94))));
op[3]=((((IkReal(-1.00000000000000))*(x164)))+(x165)+(x95));
op[4]=((((IkReal(-1.00000000000000))*(x230)))+(x237)+(x204)+(x57)+(((IkReal(-1.00000000000000))*(x240))));
op[5]=((((IkReal(-1.00000000000000))*(x166)))+(x201)+(x96));
op[6]=((x120)+(((IkReal(-1.00000000000000))*(x63)))+(((IkReal(-1.00000000000000))*(x220))));
op[7]=((x126)+(((IkReal(-1.00000000000000))*(x206)))+(x247)+(((IkReal(-1.00000000000000))*(x242))));
op[8]=((((IkReal(-1.00000000000000))*(x167)))+(x168)+(x97));
op[9]=((((IkReal(-1.00000000000000))*(x170)))+(x169)+(((IkReal(-1.00000000000000))*(x98))));
op[10]=((((IkReal(-1.00000000000000))*(x120)))+(x119)+(x63)+(((IkReal(-1.00000000000000))*(x64))));
op[11]=((((IkReal(-1.00000000000000))*(x126)))+(x206)+(x247)+(((IkReal(-1.00000000000000))*(x242))));
op[12]=((x128)+(((IkReal(-1.00000000000000))*(x207)))+(((IkReal(-1.00000000000000))*(x232)))+(x248));
op[13]=((x172)+(((IkReal(-1.00000000000000))*(x235)))+(x214)+(x219)+(x72)+(((IkReal(-1.00000000000000))*(x253))));
op[14]=((x100)+(x234)+(((IkReal(-1.00000000000000))*(x245))));
op[15]=((x139)+(x211)+(((IkReal(-1.00000000000000))*(x243)))+(((IkReal(-1.00000000000000))*(x212))));
op[16]=((((IkReal(-1.00000000000000))*(x129)))+(x218)+(x231)+(((IkReal(-1.00000000000000))*(x248))));
op[17]=((((IkReal(-1.00000000000000))*(x133)))+(((IkReal(-1.00000000000000))*(x235)))+(x251)+(x203)+(x72)+(((IkReal(-1.00000000000000))*(x219)))+(((IkReal(-1.00000000000000))*(x215))));
op[18]=((((IkReal(-1.00000000000000))*(x74)))+(x173)+(((IkReal(-1.00000000000000))*(x132)))+(((IkReal(-1.00000000000000))*(x235)))+(x219)+(x208)+(((IkReal(-1.00000000000000))*(x251))));
op[19]=((((IkReal(-1.00000000000000))*(x145)))+(x221)+(x231)+(((IkReal(-1.00000000000000))*(x248))));
op[20]=((((IkReal(-1.00000000000000))*(x140)))+(x211)+(x209)+(((IkReal(-1.00000000000000))*(x243))));
op[21]=((((IkReal(-1.00000000000000))*(x101)))+(((IkReal(-1.00000000000000))*(x234)))+(x245));
op[22]=((((IkReal(-1.00000000000000))*(x143)))+(x172)+(((IkReal(-1.00000000000000))*(x132)))+(((IkReal(-1.00000000000000))*(x235)))+(x251)+(x208)+(((IkReal(-1.00000000000000))*(x219))));
op[23]=((x144)+(((IkReal(-1.00000000000000))*(x232)))+(x248)+(((IkReal(-1.00000000000000))*(x210))));
op[24]=((((IkReal(-1.00000000000000))*(x147)))+(x149)+(x229)+(((IkReal(-1.00000000000000))*(x241))));
op[25]=((((IkReal(-1.00000000000000))*(x86)))+(((IkReal(-1.00000000000000))*(x85))));
op[26]=((IkReal(-0.784255319148936))*(r01));
op[27]=((((IkReal(4.00000000000000))*(x105)))+(((IkReal(-4.00000000000000))*(x107))));
op[28]=((((IkReal(-1.00000000000000))*(x149)))+(x147)+(x229)+(((IkReal(-1.00000000000000))*(x241))));
op[29]=((x85)+(((IkReal(-1.00000000000000))*(x86))));
op[30]=((x88)+(((IkReal(-1.00000000000000))*(x87))));
op[31]=((x132)+(((IkReal(-1.00000000000000))*(x133)))+(x211)+(((IkReal(-1.00000000000000))*(x244))));
op[32]=((((IkReal(1.88000000000000))*(x105)))+(((IkReal(-1.88000000000000))*(x107))));
op[33]=((IkReal(-0.0114000000000000))*(r01));
op[34]=((x88)+(x87));
op[35]=((x133)+(((IkReal(-1.00000000000000))*(x132)))+(x211)+(((IkReal(-1.00000000000000))*(x244))));
op[36]=((((IkReal(-1.00000000000000))*(x152)))+(x150)+(x239)+(((IkReal(-1.00000000000000))*(x90)))+(((IkReal(-1.00000000000000))*(x216))));
op[37]=((x226)+(x61)+(((IkReal(-1.00000000000000))*(x60)))+(((IkReal(-1.00000000000000))*(x228))));
op[38]=((((IkReal(-1.00000000000000))*(x157)))+(x158));
op[39]=x252;
op[40]=((((IkReal(-1.00000000000000))*(x152)))+(x150)+(((IkReal(-1.00000000000000))*(x239)))+(x216)+(x90));
op[41]=((((IkReal(-1.00000000000000))*(x201)))+(x227)+(((IkReal(-1.00000000000000))*(x225))));
op[42]=((((IkReal(-1.00000000000000))*(x201)))+(x225)+(((IkReal(-1.00000000000000))*(x227))));
op[43]=((((IkReal(-1.00000000000000))*(x160)))+(x159)+(((IkReal(-1.00000000000000))*(x239)))+(x216)+(x92));
op[44]=x252;
op[45]=((((IkReal(-1.00000000000000))*(x158)))+(x157));
op[46]=((x228)+(x61)+(((IkReal(-1.00000000000000))*(x60)))+(((IkReal(-1.00000000000000))*(x226))));
op[47]=((((IkReal(-1.00000000000000))*(x160)))+(x159)+(x239)+(((IkReal(-1.00000000000000))*(x92)))+(((IkReal(-1.00000000000000))*(x216))));
op[48]=((((IkReal(-1.00000000000000))*(x237)))+(x230)+(x204)+(((IkReal(-1.00000000000000))*(x240)))+(((IkReal(-1.00000000000000))*(x57))));
op[49]=((((IkReal(-1.00000000000000))*(x161)))+(x60)+(x93)+(((IkReal(-1.00000000000000))*(x61))));
op[50]=((((IkReal(-1.00000000000000))*(x163)))+(x162)+(x94));
op[51]=((((IkReal(-1.00000000000000))*(x165)))+(x164)+(x95));
op[52]=((((IkReal(-1.00000000000000))*(x237)))+(((IkReal(-1.00000000000000))*(x236)))+(x230)+(x202)+(x57));
op[53]=((((IkReal(-1.00000000000000))*(x166)))+(((IkReal(-1.00000000000000))*(x201)))+(x96));
op[54]=((((IkReal(-1.00000000000000))*(x119)))+(x205)+(x64));
op[55]=((x121)+(x223)+(((IkReal(-1.00000000000000))*(x224)))+(((IkReal(-1.00000000000000))*(x254))));
op[56]=((((IkReal(-1.00000000000000))*(x168)))+(x167)+(x97));
op[57]=((((IkReal(-1.00000000000000))*(x170)))+(x169)+(x98));
op[58]=((((IkReal(-1.00000000000000))*(x205)))+(x220));
op[59]=((((IkReal(-1.00000000000000))*(x121)))+(x223)+(x224)+(((IkReal(-1.00000000000000))*(x254))));
op[60]=((((IkReal(-1.00000000000000))*(x128)))+(x217)+(x207)+(x77)+(((IkReal(-1.00000000000000))*(x249))));
op[61]=((((IkReal(-1.00000000000000))*(x74)))+(x173)+(x133)+(((IkReal(-1.00000000000000))*(x235)))+(x213)+(((IkReal(-1.00000000000000))*(x222)))+(((IkReal(-1.00000000000000))*(x250))));
op[62]=((x100)+(x233)+(((IkReal(-1.00000000000000))*(x246))));
op[63]=((x139)+(x243)+(((IkReal(-1.00000000000000))*(x212)))+(((IkReal(-1.00000000000000))*(x211))));
op[64]=((((IkReal(-1.00000000000000))*(x146)))+(x129)+(x249)+(((IkReal(-1.00000000000000))*(x218)))+(((IkReal(-1.00000000000000))*(x217))));
op[65]=((((IkReal(-1.00000000000000))*(x143)))+(x172)+(x133)+(((IkReal(-1.00000000000000))*(x235)))+(x250)+(((IkReal(-1.00000000000000))*(x213)))+(((IkReal(-1.00000000000000))*(x222))));
op[66]=((x172)+(((IkReal(-1.00000000000000))*(x208)))+(((IkReal(-1.00000000000000))*(x235)))+(x213)+(x214)+(((IkReal(-1.00000000000000))*(x250))));
op[67]=((((IkReal(-1.00000000000000))*(x146)))+(x145)+(x249)+(((IkReal(-1.00000000000000))*(x217)))+(((IkReal(-1.00000000000000))*(x221))));
op[68]=((((IkReal(-1.00000000000000))*(x140)))+(x209)+(x243)+(((IkReal(-1.00000000000000))*(x211))));
op[69]=((((IkReal(-1.00000000000000))*(x101)))+(((IkReal(-1.00000000000000))*(x233)))+(x246));
op[70]=((((IkReal(-1.00000000000000))*(x208)))+(((IkReal(-1.00000000000000))*(x235)))+(x250)+(x203)+(((IkReal(-1.00000000000000))*(x215)))+(((IkReal(-1.00000000000000))*(x213))));
op[71]=((((IkReal(-1.00000000000000))*(x144)))+(x210)+(x217)+(x77)+(((IkReal(-1.00000000000000))*(x249))));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j13array[16], cj13array[16], sj13array[16], j14array[16], cj14array[16], sj14array[16], j15array[16], cj15array[16], sj15array[16];
int numsolutions = 0;
for(int ij13 = 0; ij13 < numroots; ij13 += 3)
{
IkReal htj13 = zeror[ij13+0], htj14 = zeror[ij13+1], htj15 = zeror[ij13+2];
j13array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj13)));
j14array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj14)));
j15array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj15)));
IkReal x255=(htj13)*(htj13);
IkReal x256=(htj14)*(htj14);
IkReal x257=(htj15)*(htj15);
cj13array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x255))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x255)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x255))))));
cj14array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x256))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x256)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x256))))));
cj15array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x257))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x257)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x257))))));
sj13array[numsolutions]=((IkReal(2.00000000000000))*(htj13)*(((IKabs(((IkReal(1.00000000000000))+((htj13)*(htj13)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj13)*(htj13))))):(IkReal)1.0e30)));
sj14array[numsolutions]=((IkReal(2.00000000000000))*(htj14)*(((IKabs(((IkReal(1.00000000000000))+((htj14)*(htj14)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj14)*(htj14))))):(IkReal)1.0e30)));
sj15array[numsolutions]=((IkReal(2.00000000000000))*(htj15)*(((IKabs(((IkReal(1.00000000000000))+((htj15)*(htj15)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj15)*(htj15))))):(IkReal)1.0e30)));
if( j13array[numsolutions] > IKPI )
{
    j13array[numsolutions]-=IK2PI;
}
else if( j13array[numsolutions] < -IKPI )
{
    j13array[numsolutions]+=IK2PI;
}
if( j14array[numsolutions] > IKPI )
{
    j14array[numsolutions]-=IK2PI;
}
else if( j14array[numsolutions] < -IKPI )
{
    j14array[numsolutions]+=IK2PI;
}
if( j15array[numsolutions] > IKPI )
{
    j15array[numsolutions]-=IK2PI;
}
else if( j15array[numsolutions] < -IKPI )
{
    j15array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j13valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj13 = 16;
_nj14 = 1;
_nj15 = 1;
for(int ij13 = 0; ij13 < numsolutions; ++ij13)
    {
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
_ij14[0] = 0; _ij14[1] = -1;
_ij15[0] = 0; _ij15[1] = -1;
for(int iij13 = ij13+1; iij13 < numsolutions; ++iij13)
{
if( !j13valid[iij13] ) { continue; }
if( IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(cj14array[ij13]-cj14array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj14array[ij13]-sj14array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(cj15array[ij13]-cj15array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj15array[ij13]-sj15array[iij13]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j13valid[iij13]=false; _ij13[1] = iij13; _ij14[1] = 0; _ij15[1] = 0;  break; 
}
}
    j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

    j14 = j14array[ij13]; cj14 = cj14array[ij13]; sj14 = sj14array[ij13];

    j15 = j15array[ij13]; cj15 = cj15array[ij13]; sj15 = sj15array[ij13];

{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj15)*(cj15))))+(((IkReal(-1.00000000000000))*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj15)*(cj15))))+(((IkReal(-1.00000000000000))*((sj15)*(sj15)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x258=(sj15)*(sj15);
IkReal x259=(cj15)*(cj15);
IkReal x260=((cj14)*(sj15));
IkReal x261=((cj15)*(sj14));
IkReal x262=((cj13)*(r00));
IkReal x263=((sj14)*(sj15));
IkReal x264=((r01)*(sj13));
IkReal x265=((cj14)*(cj15));
IkReal x266=((IkReal(0.0900000000000000))*(pz));
IkReal x267=((IkReal(0.0900000000000000))*(cj13)*(px));
IkReal x268=((IkReal(0.0900000000000000))*(py)*(sj13));
IkReal x269=((IkReal(1.00000000000000))*(r02)*(x263));
IkReal x270=((((IkReal(1.00000000000000))*(x259)))+(((IkReal(1.00000000000000))*(x258))));
IkReal x271=((IkReal(-1.00000000000000))*(((IKabs(x270) != 0)?((IkReal)1/(x270)):(IkReal)1.0e30)));
if( IKabs(((x271)*(((x269)+(((IkReal(-1.00000000000000))*(x260)*(x262)))+(((IkReal(-1.00000000000000))*(x260)*(x264)))+(((IkReal(-1.00000000000000))*(x261)*(x262)))+(((IkReal(-1.00000000000000))*(x261)*(x264)))+(((IkReal(-1.00000000000000))*(r02)*(x265))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x271)*(((IKabs(((((IkReal(0.00810000000000000))*(x258)))+(((IkReal(0.00810000000000000))*(x259))))) != 0)?((IkReal)1/(((((IkReal(0.00810000000000000))*(x258)))+(((IkReal(0.00810000000000000))*(x259)))))):(IkReal)1.0e30))*(((((((((IkReal(-0.00360000000000000))*(x258)))+(((IkReal(-0.00360000000000000))*(x259)))))*(((((x260)*(x262)))+(((x260)*(x264)))+(((r02)*(x265)))+(((x261)*(x264)))+(((x261)*(x262)))+(((IkReal(-1.00000000000000))*(x269)))))))+(((x270)*(((((IkReal(-1.00000000000000))*(x263)*(x266)))+(((x260)*(x267)))+(((x260)*(x268)))+(((IkReal(0.0225000000000000))*(cj15)))+(((IkReal(0.0211500000000000))*(x259)))+(((IkReal(0.0211500000000000))*(x258)))+(((x261)*(x267)))+(((x261)*(x268)))+(((x265)*(x266))))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x271)*(((x269)+(((IkReal(-1.00000000000000))*(x260)*(x262)))+(((IkReal(-1.00000000000000))*(x260)*(x264)))+(((IkReal(-1.00000000000000))*(x261)*(x262)))+(((IkReal(-1.00000000000000))*(x261)*(x264)))+(((IkReal(-1.00000000000000))*(r02)*(x265)))))))+IKsqr(((x271)*(((IKabs(((((IkReal(0.00810000000000000))*(x258)))+(((IkReal(0.00810000000000000))*(x259))))) != 0)?((IkReal)1/(((((IkReal(0.00810000000000000))*(x258)))+(((IkReal(0.00810000000000000))*(x259)))))):(IkReal)1.0e30))*(((((((((IkReal(-0.00360000000000000))*(x258)))+(((IkReal(-0.00360000000000000))*(x259)))))*(((((x260)*(x262)))+(((x260)*(x264)))+(((r02)*(x265)))+(((x261)*(x264)))+(((x261)*(x262)))+(((IkReal(-1.00000000000000))*(x269)))))))+(((x270)*(((((IkReal(-1.00000000000000))*(x263)*(x266)))+(((x260)*(x267)))+(((x260)*(x268)))+(((IkReal(0.0225000000000000))*(cj15)))+(((IkReal(0.0211500000000000))*(x259)))+(((IkReal(0.0211500000000000))*(x258)))+(((x261)*(x267)))+(((x261)*(x268)))+(((x265)*(x266)))))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((x271)*(((x269)+(((IkReal(-1.00000000000000))*(x260)*(x262)))+(((IkReal(-1.00000000000000))*(x260)*(x264)))+(((IkReal(-1.00000000000000))*(x261)*(x262)))+(((IkReal(-1.00000000000000))*(x261)*(x264)))+(((IkReal(-1.00000000000000))*(r02)*(x265)))))), ((x271)*(((IKabs(((((IkReal(0.00810000000000000))*(x258)))+(((IkReal(0.00810000000000000))*(x259))))) != 0)?((IkReal)1/(((((IkReal(0.00810000000000000))*(x258)))+(((IkReal(0.00810000000000000))*(x259)))))):(IkReal)1.0e30))*(((((((((IkReal(-0.00360000000000000))*(x258)))+(((IkReal(-0.00360000000000000))*(x259)))))*(((((x260)*(x262)))+(((x260)*(x264)))+(((r02)*(x265)))+(((x261)*(x264)))+(((x261)*(x262)))+(((IkReal(-1.00000000000000))*(x269)))))))+(((x270)*(((((IkReal(-1.00000000000000))*(x263)*(x266)))+(((x260)*(x267)))+(((x260)*(x268)))+(((IkReal(0.0225000000000000))*(cj15)))+(((IkReal(0.0211500000000000))*(x259)))+(((IkReal(0.0211500000000000))*(x258)))+(((x261)*(x267)))+(((x261)*(x268)))+(((x265)*(x266)))))))))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[3];
IkReal x272=(cj15)*(cj15);
IkReal x273=(sj15)*(sj15);
IkReal x274=IKsin(j17);
IkReal x275=IKcos(j17);
IkReal x276=((cj13)*(px));
IkReal x277=((sj14)*(sj15));
IkReal x278=((IkReal(0.0400000000000000))*(pz));
IkReal x279=((py)*(sj13));
IkReal x280=((cj15)*(sj14));
IkReal x281=((cj13)*(r00));
IkReal x282=((cj14)*(sj15));
IkReal x283=((cj14)*(cj15));
IkReal x284=((r01)*(sj13));
IkReal x285=((IkReal(0.0900000000000000))*(pz));
IkReal x286=((IkReal(0.0900000000000000))*(x282));
IkReal x287=((((IkReal(0.00360000000000000))*(x272)))+(((IkReal(0.00360000000000000))*(x273))));
evalcond[0]=((((x274)*(((((IkReal(-1.00000000000000))*(x272)))+(((IkReal(-1.00000000000000))*(x273)))))))+(((r02)*(x283)))+(((x280)*(x284)))+(((x280)*(x281)))+(((x281)*(x282)))+(((x282)*(x284)))+(((IkReal(-1.00000000000000))*(r02)*(x277))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x277)*(x278)))+(((x278)*(x283)))+(((x274)*(((((IkReal(-0.00160000000000000))*(x272)))+(((IkReal(-0.00160000000000000))*(x273)))))))+(((IkReal(0.0400000000000000))*(x279)*(x282)))+(((IkReal(0.0400000000000000))*(x279)*(x280)))+(((IkReal(0.0400000000000000))*(x276)*(x282)))+(((IkReal(0.0400000000000000))*(x276)*(x280)))+(((x275)*(x287)))+(((IkReal(0.00940000000000000))*(x272)))+(((IkReal(0.00940000000000000))*(x273)))+(((IkReal(0.0100000000000000))*(cj15))));
evalcond[2]=((((IkReal(0.0211500000000000))*(x273)))+(((IkReal(0.0211500000000000))*(x272)))+(((IkReal(-1.00000000000000))*(x277)*(x285)))+(((IkReal(0.0900000000000000))*(x276)*(x280)))+(((x279)*(x286)))+(((IkReal(0.0225000000000000))*(cj15)))+(((x275)*(((((IkReal(0.00810000000000000))*(x272)))+(((IkReal(0.00810000000000000))*(x273)))))))+(((IkReal(0.0900000000000000))*(x279)*(x280)))+(((x276)*(x286)))+(((x283)*(x285)))+(((IkReal(-1.00000000000000))*(x274)*(x287))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[2];
dummyeval[0]=cj17;
dummyeval[1]=sj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj17;
dummyeval[1]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[3];
dummyeval[0]=((((IkReal(2.25000000000000))*(sj17)))+(cj17));
dummyeval[1]=cj17;
dummyeval[2]=sj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  || IKabs(dummyeval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.55981698316902))+(j17)), IkReal(6.28318530717959))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
IkReal x288=((IkReal(1.00000000000000))*(sj14));
IkReal x289=((cj13)*(cj14));
IkReal x290=((cj14)*(sj13));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.406138466127514))+(((IkReal(-1.00000000000000))*(r02)*(x288)))+(((r00)*(x289)))+(((r01)*(x290))));
evalcond[2]=((IkReal(0.333488578145101))+(((py)*(x290)))+(((IkReal(-1.00000000000000))*(pz)*(x288)))+(((px)*(x289))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x291=((IkReal(1.09431753188062))*(r01));
IkReal x292=((IkReal(1.09431753188062))*(r00));
if( IKabs(((((sj13)*(x292)))+(((IkReal(-1.00000000000000))*(cj13)*(x291))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj13)*(sj14)*(x292)))+(((IkReal(1.09431753188062))*(cj14)*(r02)))+(((sj13)*(sj14)*(x291))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((sj13)*(x292)))+(((IkReal(-1.00000000000000))*(cj13)*(x291)))))+IKsqr(((((cj13)*(sj14)*(x292)))+(((IkReal(1.09431753188062))*(cj14)*(r02)))+(((sj13)*(sj14)*(x291)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((sj13)*(x292)))+(((IkReal(-1.00000000000000))*(cj13)*(x291)))), ((((cj13)*(sj14)*(x292)))+(((IkReal(1.09431753188062))*(cj14)*(r02)))+(((sj13)*(sj14)*(x291)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x293=IKsin(j16);
IkReal x294=IKcos(j16);
IkReal x295=((IkReal(1.00000000000000))*(cj14));
IkReal x296=((IkReal(1.00000000000000))*(sj13));
IkReal x297=((sj14)*(x296));
IkReal x298=((IkReal(1.00000000000000))*(cj13)*(sj14));
evalcond[0]=((((IkReal(0.913811550000000))*(x293)))+(((IkReal(-1.00000000000000))*(r00)*(x296)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(4.85237587652042e-11))*(x293)))+(((IkReal(-1.00000000000000))*(px)*(x296))));
evalcond[2]=((((IkReal(0.913811550000000))*(x294)))+(((IkReal(-1.00000000000000))*(r00)*(x298)))+(((IkReal(-1.00000000000000))*(r02)*(x295)))+(((IkReal(-1.00000000000000))*(r01)*(x297))));
evalcond[3]=((IkReal(-0.220000000000000))+(((IkReal(-1.00000000000000))*(py)*(x297)))+(((IkReal(4.85237587652042e-11))*(x294)))+(((IkReal(-1.00000000000000))*(pz)*(x295)))+(((IkReal(-1.00000000000000))*(px)*(x298))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x299=((IkReal(1.00000000000000))*(sj14));
IkReal x300=((cj13)*(cj14));
IkReal x301=((cj14)*(sj13));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.406138466127514))+(((IkReal(-1.00000000000000))*(r02)*(x299)))+(((r01)*(x301)))+(((r00)*(x300))));
evalcond[2]=((IkReal(-0.333488578145101))+(((px)*(x300)))+(((IkReal(-1.00000000000000))*(pz)*(x299)))+(((py)*(x301))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x302=((IkReal(1.09431753188062))*(r01));
IkReal x303=((IkReal(1.09431753188062))*(r00));
if( IKabs(((((IkReal(-1.00000000000000))*(cj13)*(x302)))+(((sj13)*(x303))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(sj13)*(sj14)*(x302)))+(((IkReal(-1.00000000000000))*(cj13)*(sj14)*(x303)))+(((IkReal(-1.09431753188062))*(cj14)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj13)*(x302)))+(((sj13)*(x303)))))+IKsqr(((((IkReal(-1.00000000000000))*(sj13)*(sj14)*(x302)))+(((IkReal(-1.00000000000000))*(cj13)*(sj14)*(x303)))+(((IkReal(-1.09431753188062))*(cj14)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj13)*(x302)))+(((sj13)*(x303)))), ((((IkReal(-1.00000000000000))*(sj13)*(sj14)*(x302)))+(((IkReal(-1.00000000000000))*(cj13)*(sj14)*(x303)))+(((IkReal(-1.09431753188062))*(cj14)*(r02)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x304=IKsin(j16);
IkReal x305=IKcos(j16);
IkReal x306=((IkReal(1.00000000000000))*(cj14));
IkReal x307=((IkReal(1.00000000000000))*(sj13));
IkReal x308=((sj14)*(x307));
IkReal x309=((IkReal(1.00000000000000))*(cj13)*(sj14));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x307)))+(((IkReal(0.913811550000000))*(x304)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x307)))+(((IkReal(4.85237587652042e-11))*(x304))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(x308)))+(((IkReal(-1.00000000000000))*(r00)*(x309)))+(((IkReal(-1.00000000000000))*(r02)*(x306)))+(((IkReal(-0.913811550000000))*(x305))));
evalcond[3]=((IkReal(-0.280000000000000))+(((IkReal(-4.85237587652042e-11))*(x305)))+(((IkReal(-1.00000000000000))*(px)*(x309)))+(((IkReal(-1.00000000000000))*(py)*(x308)))+(((IkReal(-1.00000000000000))*(pz)*(x306))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x310=((IkReal(1.00000000000000))*(sj14));
IkReal x311=((IkReal(1.00000000000000))*(cj14));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.406138466127514))+(((IkReal(-1.00000000000000))*(r02)*(x311)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x310)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x310))));
evalcond[2]=((IkReal(-0.583488578145101))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x310)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x310)))+(((IkReal(-1.00000000000000))*(pz)*(x311))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x312=((IkReal(1.09431753188062))*(cj13));
IkReal x313=((IkReal(1.09431753188062))*(sj13));
if( IKabs(((((IkReal(-1.00000000000000))*(r01)*(x312)))+(((r00)*(x313))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj14)*(r01)*(x313)))+(((IkReal(-1.00000000000000))*(cj14)*(r00)*(x312)))+(((IkReal(1.09431753188062))*(r02)*(sj14))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r01)*(x312)))+(((r00)*(x313)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj14)*(r01)*(x313)))+(((IkReal(-1.00000000000000))*(cj14)*(r00)*(x312)))+(((IkReal(1.09431753188062))*(r02)*(sj14)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r01)*(x312)))+(((r00)*(x313)))), ((((IkReal(-1.00000000000000))*(cj14)*(r01)*(x313)))+(((IkReal(-1.00000000000000))*(cj14)*(r00)*(x312)))+(((IkReal(1.09431753188062))*(r02)*(sj14)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x314=IKsin(j16);
IkReal x315=IKcos(j16);
IkReal x316=((cj14)*(sj13));
IkReal x317=((IkReal(1.00000000000000))*(sj14));
IkReal x318=((cj13)*(cj14));
IkReal x319=((IkReal(1.00000000000000))*(sj13));
evalcond[0]=((((IkReal(0.913811550000000))*(x314)))+(((IkReal(-1.00000000000000))*(r00)*(x319)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(4.85237587652042e-11))*(x314)))+(((IkReal(-1.00000000000000))*(px)*(x319))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x317)))+(((IkReal(0.913811550000000))*(x315)))+(((r01)*(x316)))+(((r00)*(x318))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(4.85237587652042e-11))*(x315)))+(((py)*(x316)))+(((IkReal(-1.00000000000000))*(pz)*(x317)))+(((px)*(x318))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x320=((IkReal(1.00000000000000))*(sj14));
IkReal x321=((IkReal(1.00000000000000))*(cj14));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j15, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.406138466127514))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x320)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x320)))+(((IkReal(-1.00000000000000))*(r02)*(x321))));
evalcond[2]=((IkReal(0.0834885781451006))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x320)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x320)))+(((IkReal(-1.00000000000000))*(pz)*(x321))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x322=((IkReal(1.09431753188062))*(cj13));
IkReal x323=((IkReal(1.09431753188062))*(sj13));
if( IKabs(((((r00)*(x323)))+(((IkReal(-1.00000000000000))*(r01)*(x322))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.09431753188062))*(r02)*(sj14)))+(((cj14)*(r01)*(x323)))+(((cj14)*(r00)*(x322))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(x323)))+(((IkReal(-1.00000000000000))*(r01)*(x322)))))+IKsqr(((((IkReal(-1.09431753188062))*(r02)*(sj14)))+(((cj14)*(r01)*(x323)))+(((cj14)*(r00)*(x322)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((r00)*(x323)))+(((IkReal(-1.00000000000000))*(r01)*(x322)))), ((((IkReal(-1.09431753188062))*(r02)*(sj14)))+(((cj14)*(r01)*(x323)))+(((cj14)*(r00)*(x322)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x324=IKsin(j16);
IkReal x325=IKcos(j16);
IkReal x326=((cj14)*(sj13));
IkReal x327=((IkReal(1.00000000000000))*(sj14));
IkReal x328=((cj13)*(cj14));
IkReal x329=((IkReal(1.00000000000000))*(sj13));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x329)))+(((IkReal(0.913811550000000))*(x324)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(4.85237587652042e-11))*(x324)))+(((IkReal(-1.00000000000000))*(px)*(x329))));
evalcond[2]=((((r00)*(x328)))+(((r01)*(x326)))+(((IkReal(-1.00000000000000))*(r02)*(x327)))+(((IkReal(-0.913811550000000))*(x325))));
evalcond[3]=((IkReal(-0.0300000000000000))+(((py)*(x326)))+(((IkReal(-4.85237587652042e-11))*(x325)))+(((IkReal(-1.00000000000000))*(pz)*(x327)))+(((px)*(x328))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x330=((IkReal(20000000.0000000))*(cj14));
if( IKabs(((IkReal(1957803814.40943))+(((IkReal(-20608461204.3098))*(cj13)*(py)))+(((IkReal(20608461204.3098))*(px)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.47158765940308e-8))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj15)))+(((IkReal(20000000.0000000))*(r02)*(sj14)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x330)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x330))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1957803814.40943))+(((IkReal(-20608461204.3098))*(cj13)*(py)))+(((IkReal(20608461204.3098))*(px)*(sj13)))))+IKsqr(((IkReal(5.47158765940308e-8))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj15)))+(((IkReal(20000000.0000000))*(r02)*(sj14)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x330)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x330)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(1957803814.40943))+(((IkReal(-20608461204.3098))*(cj13)*(py)))+(((IkReal(20608461204.3098))*(px)*(sj13)))), ((IkReal(5.47158765940308e-8))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj15)))+(((IkReal(20000000.0000000))*(r02)*(sj14)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x330)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x330)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x331=IKsin(j16);
IkReal x332=IKcos(j16);
IkReal x333=((r01)*(sj13));
IkReal x334=((cj13)*(r00));
IkReal x335=((IkReal(1.00000000000000))*(sj14));
IkReal x336=((IkReal(1.00000000000000))*(cj14));
IkReal x337=((IkReal(1.00000000000000))*(sj13));
IkReal x338=((cj13)*(px));
IkReal x339=((py)*(sj13));
IkReal x340=((sj15)*(x332));
IkReal x341=((cj15)*(x332));
evalcond[0]=((((IkReal(0.913811550000000))*(x331)))+(((IkReal(-1.00000000000000))*(r00)*(x337)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x337)))+(((IkReal(4.85237587652042e-11))*(x331))));
evalcond[2]=((((IkReal(0.406138466127514))*(sj15)))+(((IkReal(-1.00000000000000))*(r02)*(x335)))+(((cj14)*(x334)))+(((cj14)*(x333)))+(((IkReal(0.913811550000000))*(x341))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x333)*(x335)))+(((IkReal(-0.406138466127514))*(cj15)))+(((IkReal(-1.00000000000000))*(r02)*(x336)))+(((IkReal(0.913811550000000))*(x340)))+(((IkReal(-1.00000000000000))*(x334)*(x335))));
evalcond[4]=((((IkReal(0.333488578145101))*(sj15)))+(((IkReal(-1.00000000000000))*(pz)*(x335)))+(((cj14)*(x339)))+(((cj14)*(x338)))+(((IkReal(0.0300000000000000))*(cj15)))+(((IkReal(4.85237587652042e-11))*(x341))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x336)))+(((IkReal(0.0300000000000000))*(sj15)))+(((IkReal(-0.333488578145101))*(cj15)))+(((IkReal(4.85237587652042e-11))*(x340)))+(((IkReal(-1.00000000000000))*(x335)*(x339)))+(((IkReal(-1.00000000000000))*(x335)*(x338))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x342=((IkReal(20000000.0000000))*(sj14));
if( IKabs(((((IkReal(-1.09431753188062))*(cj13)*(r01)))+(((IkReal(1.09431753188062))*(r00)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.47158765940308e-8))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((IkReal(20000000.0000000))*(cj14)*(r02)))+(((cj13)*(r00)*(x342)))+(((r01)*(sj13)*(x342)))+(((IkReal(8122769.32255028))*(cj15))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.09431753188062))*(cj13)*(r01)))+(((IkReal(1.09431753188062))*(r00)*(sj13)))))+IKsqr(((IkReal(5.47158765940308e-8))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((IkReal(20000000.0000000))*(cj14)*(r02)))+(((cj13)*(r00)*(x342)))+(((r01)*(sj13)*(x342)))+(((IkReal(8122769.32255028))*(cj15)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IkReal(-1.09431753188062))*(cj13)*(r01)))+(((IkReal(1.09431753188062))*(r00)*(sj13)))), ((IkReal(5.47158765940308e-8))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((IkReal(20000000.0000000))*(cj14)*(r02)))+(((cj13)*(r00)*(x342)))+(((r01)*(sj13)*(x342)))+(((IkReal(8122769.32255028))*(cj15)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x343=IKsin(j16);
IkReal x344=IKcos(j16);
IkReal x345=((r01)*(sj13));
IkReal x346=((cj13)*(r00));
IkReal x347=((IkReal(1.00000000000000))*(sj14));
IkReal x348=((IkReal(1.00000000000000))*(cj14));
IkReal x349=((IkReal(1.00000000000000))*(sj13));
IkReal x350=((cj13)*(px));
IkReal x351=((py)*(sj13));
IkReal x352=((sj15)*(x344));
IkReal x353=((cj15)*(x344));
evalcond[0]=((((IkReal(0.913811550000000))*(x343)))+(((IkReal(-1.00000000000000))*(r00)*(x349)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(x349)))+(((cj13)*(py)))+(((IkReal(4.85237587652042e-11))*(x343))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x347)))+(((cj14)*(x346)))+(((cj14)*(x345)))+(((IkReal(0.406138466127514))*(sj15)))+(((IkReal(0.913811550000000))*(x353))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r02)*(x348)))+(((IkReal(-0.406138466127514))*(cj15)))+(((IkReal(0.913811550000000))*(x352)))+(((IkReal(-1.00000000000000))*(x345)*(x347)))+(((IkReal(-1.00000000000000))*(x346)*(x347))));
evalcond[4]=((((IkReal(0.333488578145101))*(sj15)))+(((IkReal(4.85237587652042e-11))*(x353)))+(((IkReal(0.0300000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(pz)*(x347)))+(((cj14)*(x351)))+(((cj14)*(x350))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(4.85237587652042e-11))*(x352)))+(((IkReal(-1.00000000000000))*(x347)*(x350)))+(((IkReal(-1.00000000000000))*(x347)*(x351)))+(((IkReal(0.0300000000000000))*(sj15)))+(((IkReal(-0.333488578145101))*(cj15)))+(((IkReal(-1.00000000000000))*(pz)*(x348))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x354=((IkReal(20000000.0000000))*(cj14));
if( IKabs(((((IkReal(-1.09431753188062))*(cj13)*(r01)))+(((IkReal(1.09431753188062))*(r00)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.47158765940308e-8))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj15)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x354)))+(((IkReal(20000000.0000000))*(r02)*(sj14)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x354))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.09431753188062))*(cj13)*(r01)))+(((IkReal(1.09431753188062))*(r00)*(sj13)))))+IKsqr(((IkReal(5.47158765940308e-8))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj15)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x354)))+(((IkReal(20000000.0000000))*(r02)*(sj14)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x354)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IkReal(-1.09431753188062))*(cj13)*(r01)))+(((IkReal(1.09431753188062))*(r00)*(sj13)))), ((IkReal(5.47158765940308e-8))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj15)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x354)))+(((IkReal(20000000.0000000))*(r02)*(sj14)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x354)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x355=IKsin(j16);
IkReal x356=IKcos(j16);
IkReal x357=((r01)*(sj13));
IkReal x358=((cj13)*(r00));
IkReal x359=((IkReal(1.00000000000000))*(sj14));
IkReal x360=((IkReal(1.00000000000000))*(cj14));
IkReal x361=((IkReal(1.00000000000000))*(sj13));
IkReal x362=((cj13)*(px));
IkReal x363=((py)*(sj13));
IkReal x364=((sj15)*(x356));
IkReal x365=((cj15)*(x356));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x361)))+(((IkReal(0.913811550000000))*(x355)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(4.85237587652042e-11))*(x355)))+(((IkReal(-1.00000000000000))*(px)*(x361))));
evalcond[2]=((((IkReal(0.406138466127514))*(sj15)))+(((IkReal(0.913811550000000))*(x365)))+(((IkReal(-1.00000000000000))*(r02)*(x359)))+(((cj14)*(x357)))+(((cj14)*(x358))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r02)*(x360)))+(((IkReal(-1.00000000000000))*(x357)*(x359)))+(((IkReal(-1.00000000000000))*(x358)*(x359)))+(((IkReal(-0.406138466127514))*(cj15)))+(((IkReal(0.913811550000000))*(x364))));
evalcond[4]=((((IkReal(0.333488578145101))*(sj15)))+(((IkReal(0.0300000000000000))*(cj15)))+(((IkReal(4.85237587652042e-11))*(x365)))+(((cj14)*(x362)))+(((cj14)*(x363)))+(((IkReal(-1.00000000000000))*(pz)*(x359))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(-1.00000000000000))*(x359)*(x363)))+(((IkReal(-1.00000000000000))*(x359)*(x362)))+(((IkReal(4.85237587652042e-11))*(x364)))+(((IkReal(-1.00000000000000))*(pz)*(x360)))+(((IkReal(0.0300000000000000))*(sj15)))+(((IkReal(-0.333488578145101))*(cj15))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(0.418224329579229))+(j17)), IkReal(6.28318530717959))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
IkReal x366=((IkReal(1.00000000000000))*(sj14));
IkReal x367=((cj13)*(cj14));
IkReal x368=((cj14)*(sj13));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.406138466127514))+(((r01)*(x368)))+(((IkReal(-1.00000000000000))*(r02)*(x366)))+(((r00)*(x367))));
evalcond[2]=((IkReal(0.136511421854899))+(((py)*(x368)))+(((px)*(x367)))+(((IkReal(-1.00000000000000))*(pz)*(x366))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x369=((IkReal(1.09431753188062))*(r01));
IkReal x370=((IkReal(1.09431753188062))*(r00));
if( IKabs(((((cj13)*(x369)))+(((IkReal(-1.00000000000000))*(sj13)*(x370))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(sj13)*(sj14)*(x369)))+(((IkReal(-1.00000000000000))*(cj13)*(sj14)*(x370)))+(((IkReal(-1.09431753188062))*(cj14)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj13)*(x369)))+(((IkReal(-1.00000000000000))*(sj13)*(x370)))))+IKsqr(((((IkReal(-1.00000000000000))*(sj13)*(sj14)*(x369)))+(((IkReal(-1.00000000000000))*(cj13)*(sj14)*(x370)))+(((IkReal(-1.09431753188062))*(cj14)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((cj13)*(x369)))+(((IkReal(-1.00000000000000))*(sj13)*(x370)))), ((((IkReal(-1.00000000000000))*(sj13)*(sj14)*(x369)))+(((IkReal(-1.00000000000000))*(cj13)*(sj14)*(x370)))+(((IkReal(-1.09431753188062))*(cj14)*(r02)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x371=IKsin(j16);
IkReal x372=IKcos(j16);
IkReal x373=((IkReal(1.00000000000000))*(cj14));
IkReal x374=((IkReal(1.00000000000000))*(sj13));
IkReal x375=((sj14)*(x374));
IkReal x376=((IkReal(1.00000000000000))*(cj13)*(sj14));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x374)))+(((IkReal(-0.913811550000000))*(x371)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-4.85237587652042e-11))*(x371)))+(((IkReal(-1.00000000000000))*(px)*(x374))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r00)*(x376)))+(((IkReal(-1.00000000000000))*(r02)*(x373)))+(((IkReal(-1.00000000000000))*(r01)*(x375)))+(((IkReal(-0.913811550000000))*(x372))));
evalcond[3]=((IkReal(-0.220000000000000))+(((IkReal(-4.85237587652042e-11))*(x372)))+(((IkReal(-1.00000000000000))*(pz)*(x373)))+(((IkReal(-1.00000000000000))*(py)*(x375)))+(((IkReal(-1.00000000000000))*(px)*(x376))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x377=((IkReal(1.00000000000000))*(sj14));
IkReal x378=((cj13)*(cj14));
IkReal x379=((cj14)*(sj13));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.406138466127514))+(((r00)*(x378)))+(((r01)*(x379)))+(((IkReal(-1.00000000000000))*(r02)*(x377))));
evalcond[2]=((IkReal(-0.136511421854899))+(((px)*(x378)))+(((py)*(x379)))+(((IkReal(-1.00000000000000))*(pz)*(x377))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x380=((IkReal(1.09431753188062))*(r01));
IkReal x381=((IkReal(1.09431753188062))*(r00));
if( IKabs(((((cj13)*(x380)))+(((IkReal(-1.00000000000000))*(sj13)*(x381))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj13)*(sj14)*(x381)))+(((IkReal(1.09431753188062))*(cj14)*(r02)))+(((sj13)*(sj14)*(x380))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj13)*(x380)))+(((IkReal(-1.00000000000000))*(sj13)*(x381)))))+IKsqr(((((cj13)*(sj14)*(x381)))+(((IkReal(1.09431753188062))*(cj14)*(r02)))+(((sj13)*(sj14)*(x380)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((cj13)*(x380)))+(((IkReal(-1.00000000000000))*(sj13)*(x381)))), ((((cj13)*(sj14)*(x381)))+(((IkReal(1.09431753188062))*(cj14)*(r02)))+(((sj13)*(sj14)*(x380)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x382=IKsin(j16);
IkReal x383=IKcos(j16);
IkReal x384=((IkReal(1.00000000000000))*(cj14));
IkReal x385=((IkReal(1.00000000000000))*(sj13));
IkReal x386=((sj14)*(x385));
IkReal x387=((IkReal(1.00000000000000))*(cj13)*(sj14));
evalcond[0]=((((IkReal(-0.913811550000000))*(x382)))+(((IkReal(-1.00000000000000))*(r00)*(x385)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-4.85237587652042e-11))*(x382)))+(((IkReal(-1.00000000000000))*(px)*(x385))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r00)*(x387)))+(((IkReal(-1.00000000000000))*(r02)*(x384)))+(((IkReal(-1.00000000000000))*(r01)*(x386)))+(((IkReal(0.913811550000000))*(x383))));
evalcond[3]=((IkReal(-0.280000000000000))+(((IkReal(-1.00000000000000))*(py)*(x386)))+(((IkReal(4.85237587652042e-11))*(x383)))+(((IkReal(-1.00000000000000))*(px)*(x387)))+(((IkReal(-1.00000000000000))*(pz)*(x384))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x388=((IkReal(1.00000000000000))*(sj14));
IkReal x389=((IkReal(1.00000000000000))*(cj14));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.406138466127514))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x388)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x388)))+(((IkReal(-1.00000000000000))*(r02)*(x389))));
evalcond[2]=((IkReal(-0.386511421854899))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x388)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x388)))+(((IkReal(-1.00000000000000))*(pz)*(x389))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x390=((IkReal(1.09431753188062))*(cj13));
IkReal x391=((IkReal(1.09431753188062))*(sj13));
if( IKabs(((((IkReal(-1.00000000000000))*(r00)*(x391)))+(((r01)*(x390))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj14)*(r01)*(x391)))+(((IkReal(-1.09431753188062))*(r02)*(sj14)))+(((cj14)*(r00)*(x390))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r00)*(x391)))+(((r01)*(x390)))))+IKsqr(((((cj14)*(r01)*(x391)))+(((IkReal(-1.09431753188062))*(r02)*(sj14)))+(((cj14)*(r00)*(x390)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r00)*(x391)))+(((r01)*(x390)))), ((((cj14)*(r01)*(x391)))+(((IkReal(-1.09431753188062))*(r02)*(sj14)))+(((cj14)*(r00)*(x390)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x392=IKsin(j16);
IkReal x393=IKcos(j16);
IkReal x394=((cj14)*(sj13));
IkReal x395=((IkReal(1.00000000000000))*(sj14));
IkReal x396=((cj13)*(cj14));
IkReal x397=((IkReal(1.00000000000000))*(sj13));
evalcond[0]=((((IkReal(-0.913811550000000))*(x392)))+(((IkReal(-1.00000000000000))*(r00)*(x397)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x397)))+(((IkReal(-4.85237587652042e-11))*(x392))));
evalcond[2]=((((IkReal(-0.913811550000000))*(x393)))+(((r00)*(x396)))+(((IkReal(-1.00000000000000))*(r02)*(x395)))+(((r01)*(x394))));
evalcond[3]=((IkReal(0.0300000000000000))+(((py)*(x394)))+(((IkReal(-1.00000000000000))*(pz)*(x395)))+(((px)*(x396)))+(((IkReal(-4.85237587652042e-11))*(x393))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x398=((IkReal(1.00000000000000))*(sj14));
IkReal x399=((IkReal(1.00000000000000))*(cj14));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j15, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.406138466127514))+(((IkReal(-1.00000000000000))*(r02)*(x399)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x398)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x398))));
evalcond[2]=((IkReal(-0.113488578145101))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x398)))+(((IkReal(-1.00000000000000))*(pz)*(x399)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x398))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x400=((IkReal(1.09431753188062))*(cj13));
IkReal x401=((IkReal(1.09431753188062))*(sj13));
if( IKabs(((((r01)*(x400)))+(((IkReal(-1.00000000000000))*(r00)*(x401))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(1.09431753188062))*(r02)*(sj14)))+(((IkReal(-1.00000000000000))*(cj14)*(r00)*(x400)))+(((IkReal(-1.00000000000000))*(cj14)*(r01)*(x401))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r01)*(x400)))+(((IkReal(-1.00000000000000))*(r00)*(x401)))))+IKsqr(((((IkReal(1.09431753188062))*(r02)*(sj14)))+(((IkReal(-1.00000000000000))*(cj14)*(r00)*(x400)))+(((IkReal(-1.00000000000000))*(cj14)*(r01)*(x401)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((r01)*(x400)))+(((IkReal(-1.00000000000000))*(r00)*(x401)))), ((((IkReal(1.09431753188062))*(r02)*(sj14)))+(((IkReal(-1.00000000000000))*(cj14)*(r00)*(x400)))+(((IkReal(-1.00000000000000))*(cj14)*(r01)*(x401)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x402=IKsin(j16);
IkReal x403=IKcos(j16);
IkReal x404=((cj14)*(sj13));
IkReal x405=((IkReal(1.00000000000000))*(sj14));
IkReal x406=((cj13)*(cj14));
IkReal x407=((IkReal(1.00000000000000))*(sj13));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x407)))+(((IkReal(-0.913811550000000))*(x402)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x407)))+(((IkReal(-4.85237587652042e-11))*(x402))));
evalcond[2]=((((IkReal(0.913811550000000))*(x403)))+(((IkReal(-1.00000000000000))*(r02)*(x405)))+(((r00)*(x406)))+(((r01)*(x404))));
evalcond[3]=((IkReal(-0.0300000000000000))+(((py)*(x404)))+(((px)*(x406)))+(((IkReal(4.85237587652042e-11))*(x403)))+(((IkReal(-1.00000000000000))*(pz)*(x405))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x408=((IkReal(20000000.0000000))*(cj14));
if( IKabs(((IkReal(-1957803814.40943))+(((IkReal(-20608461204.3098))*(px)*(sj13)))+(((IkReal(20608461204.3098))*(cj13)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.47158765940308e-8))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj15)))+(((r01)*(sj13)*(x408)))+(((cj13)*(r00)*(x408)))+(((IkReal(-20000000.0000000))*(r02)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1957803814.40943))+(((IkReal(-20608461204.3098))*(px)*(sj13)))+(((IkReal(20608461204.3098))*(cj13)*(py)))))+IKsqr(((IkReal(5.47158765940308e-8))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj15)))+(((r01)*(sj13)*(x408)))+(((cj13)*(r00)*(x408)))+(((IkReal(-20000000.0000000))*(r02)*(sj14)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-1957803814.40943))+(((IkReal(-20608461204.3098))*(px)*(sj13)))+(((IkReal(20608461204.3098))*(cj13)*(py)))), ((IkReal(5.47158765940308e-8))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj15)))+(((r01)*(sj13)*(x408)))+(((cj13)*(r00)*(x408)))+(((IkReal(-20000000.0000000))*(r02)*(sj14)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x409=IKsin(j16);
IkReal x410=IKcos(j16);
IkReal x411=((r01)*(sj13));
IkReal x412=((cj13)*(r00));
IkReal x413=((IkReal(1.00000000000000))*(sj14));
IkReal x414=((IkReal(1.00000000000000))*(sj13));
IkReal x415=((cj13)*(px));
IkReal x416=((py)*(sj13));
IkReal x417=((IkReal(1.00000000000000))*(cj14));
IkReal x418=((IkReal(4.85237587652042e-11))*(x410));
IkReal x419=((IkReal(0.913811550000000))*(x410));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x414)))+(((IkReal(-0.913811550000000))*(x409)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x414)))+(((IkReal(-4.85237587652042e-11))*(x409))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x413)))+(((cj14)*(x411)))+(((cj14)*(x412)))+(((IkReal(-0.406138466127514))*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(x419))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj15)*(x419)))+(((IkReal(-1.00000000000000))*(x412)*(x413)))+(((IkReal(-1.00000000000000))*(r02)*(x417)))+(((IkReal(-1.00000000000000))*(x411)*(x413)))+(((IkReal(0.406138466127514))*(cj15))));
evalcond[4]=((((IkReal(0.136511421854899))*(sj15)))+(((cj14)*(x416)))+(((cj14)*(x415)))+(((IkReal(0.0300000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(pz)*(x413)))+(((IkReal(-1.00000000000000))*(cj15)*(x418))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(-1.00000000000000))*(sj15)*(x418)))+(((IkReal(-0.136511421854899))*(cj15)))+(((IkReal(-1.00000000000000))*(x413)*(x415)))+(((IkReal(-1.00000000000000))*(x413)*(x416)))+(((IkReal(0.0300000000000000))*(sj15)))+(((IkReal(-1.00000000000000))*(pz)*(x417))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x420=((IkReal(20000000.0000000))*(sj14));
if( IKabs(((((IkReal(-1.09431753188062))*(r00)*(sj13)))+(((IkReal(1.09431753188062))*(cj13)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.47158765940308e-8))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj13)*(x420)))+(((IkReal(-20000000.0000000))*(cj14)*(r02)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x420)))+(((IkReal(8122769.32255028))*(cj15))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.09431753188062))*(r00)*(sj13)))+(((IkReal(1.09431753188062))*(cj13)*(r01)))))+IKsqr(((IkReal(5.47158765940308e-8))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj13)*(x420)))+(((IkReal(-20000000.0000000))*(cj14)*(r02)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x420)))+(((IkReal(8122769.32255028))*(cj15)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IkReal(-1.09431753188062))*(r00)*(sj13)))+(((IkReal(1.09431753188062))*(cj13)*(r01)))), ((IkReal(5.47158765940308e-8))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj13)*(x420)))+(((IkReal(-20000000.0000000))*(cj14)*(r02)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x420)))+(((IkReal(8122769.32255028))*(cj15)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x421=IKsin(j16);
IkReal x422=IKcos(j16);
IkReal x423=((r01)*(sj13));
IkReal x424=((cj13)*(r00));
IkReal x425=((IkReal(1.00000000000000))*(sj14));
IkReal x426=((IkReal(1.00000000000000))*(sj13));
IkReal x427=((cj13)*(px));
IkReal x428=((py)*(sj13));
IkReal x429=((IkReal(1.00000000000000))*(cj14));
IkReal x430=((IkReal(4.85237587652042e-11))*(x422));
IkReal x431=((IkReal(0.913811550000000))*(x422));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x426)))+(((IkReal(-0.913811550000000))*(x421)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x426)))+(((IkReal(-4.85237587652042e-11))*(x421))));
evalcond[2]=((((IkReal(-0.406138466127514))*(sj15)))+(((IkReal(-1.00000000000000))*(r02)*(x425)))+(((IkReal(-1.00000000000000))*(cj15)*(x431)))+(((cj14)*(x424)))+(((cj14)*(x423))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r02)*(x429)))+(((IkReal(-1.00000000000000))*(x424)*(x425)))+(((IkReal(0.406138466127514))*(cj15)))+(((IkReal(-1.00000000000000))*(x423)*(x425)))+(((IkReal(-1.00000000000000))*(sj15)*(x431))));
evalcond[4]=((((IkReal(0.136511421854899))*(sj15)))+(((IkReal(0.0300000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(cj15)*(x430)))+(((cj14)*(x427)))+(((cj14)*(x428)))+(((IkReal(-1.00000000000000))*(pz)*(x425))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(-1.00000000000000))*(x425)*(x428)))+(((IkReal(-1.00000000000000))*(x425)*(x427)))+(((IkReal(-0.136511421854899))*(cj15)))+(((IkReal(0.0300000000000000))*(sj15)))+(((IkReal(-1.00000000000000))*(sj15)*(x430)))+(((IkReal(-1.00000000000000))*(pz)*(x429))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x432=((IkReal(20000000.0000000))*(cj14));
if( IKabs(((((IkReal(-1.09431753188062))*(r00)*(sj13)))+(((IkReal(1.09431753188062))*(cj13)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.47158765940308e-8))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj15)))+(((r01)*(sj13)*(x432)))+(((cj13)*(r00)*(x432)))+(((IkReal(-20000000.0000000))*(r02)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.09431753188062))*(r00)*(sj13)))+(((IkReal(1.09431753188062))*(cj13)*(r01)))))+IKsqr(((IkReal(5.47158765940308e-8))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj15)))+(((r01)*(sj13)*(x432)))+(((cj13)*(r00)*(x432)))+(((IkReal(-20000000.0000000))*(r02)*(sj14)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IkReal(-1.09431753188062))*(r00)*(sj13)))+(((IkReal(1.09431753188062))*(cj13)*(r01)))), ((IkReal(5.47158765940308e-8))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj15)))+(((r01)*(sj13)*(x432)))+(((cj13)*(r00)*(x432)))+(((IkReal(-20000000.0000000))*(r02)*(sj14)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x433=IKsin(j16);
IkReal x434=IKcos(j16);
IkReal x435=((r01)*(sj13));
IkReal x436=((cj13)*(r00));
IkReal x437=((IkReal(1.00000000000000))*(sj14));
IkReal x438=((IkReal(1.00000000000000))*(sj13));
IkReal x439=((cj13)*(px));
IkReal x440=((py)*(sj13));
IkReal x441=((IkReal(1.00000000000000))*(cj14));
IkReal x442=((IkReal(4.85237587652042e-11))*(x434));
IkReal x443=((IkReal(0.913811550000000))*(x434));
evalcond[0]=((((IkReal(-0.913811550000000))*(x433)))+(((IkReal(-1.00000000000000))*(r00)*(x438)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-4.85237587652042e-11))*(x433)))+(((IkReal(-1.00000000000000))*(px)*(x438))));
evalcond[2]=((((IkReal(-0.406138466127514))*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(x443)))+(((IkReal(-1.00000000000000))*(r02)*(x437)))+(((cj14)*(x435)))+(((cj14)*(x436))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x435)*(x437)))+(((IkReal(-1.00000000000000))*(x436)*(x437)))+(((IkReal(-1.00000000000000))*(r02)*(x441)))+(((IkReal(0.406138466127514))*(cj15)))+(((IkReal(-1.00000000000000))*(sj15)*(x443))));
evalcond[4]=((((IkReal(0.136511421854899))*(sj15)))+(((cj14)*(x440)))+(((IkReal(0.0300000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(cj15)*(x442)))+(((IkReal(-1.00000000000000))*(pz)*(x437)))+(((cj14)*(x439))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(-1.00000000000000))*(x437)*(x439)))+(((IkReal(-1.00000000000000))*(x437)*(x440)))+(((IkReal(-0.136511421854899))*(cj15)))+(((IkReal(-1.00000000000000))*(pz)*(x441)))+(((IkReal(0.0300000000000000))*(sj15)))+(((IkReal(-1.00000000000000))*(sj15)*(x442))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x444=((IkReal(1.00000000000000))*(sj14));
IkReal x445=((r01)*(sj13));
IkReal x446=((cj13)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j17)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj13)))+(((cj13)*(r01))));
evalcond[2]=((((cj14)*(x445)))+(((cj14)*(x446)))+(((IkReal(-1.00000000000000))*(r02)*(x444)))+(((IkReal(-1.00000000000000))*(sj15))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x444)*(x446)))+(((IkReal(-1.00000000000000))*(x444)*(x445)))+(cj15)+(((IkReal(-1.00000000000000))*(cj14)*(r02))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x447=((IkReal(1.00000000000000))*(sj14));
IkReal x448=((r01)*(sj13));
IkReal x449=((IkReal(1.00000000000000))*(cj14));
IkReal x450=((cj13)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj13)))+(((cj13)*(r01))));
evalcond[2]=((((cj14)*(x448)))+(((cj14)*(x450)))+(((IkReal(-1.00000000000000))*(r02)*(x447))));
evalcond[3]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x447)*(x450)))+(((IkReal(-1.00000000000000))*(r02)*(x449)))+(((IkReal(-1.00000000000000))*(x447)*(x448))));
evalcond[4]=((IkReal(-0.445000000000000))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x447)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x447)))+(((IkReal(-1.00000000000000))*(pz)*(x449))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x451=((IkReal(11.1111111111111))*(cj13));
IkReal x452=((IkReal(11.1111111111111))*(sj13));
if( IKabs(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(py)*(x451)))+(((px)*(x452))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.333333333333333))+(((IkReal(-1.00000000000000))*(cj14)*(py)*(x452)))+(((IkReal(-1.00000000000000))*(cj14)*(px)*(x451)))+(((IkReal(11.1111111111111))*(pz)*(sj14))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(py)*(x451)))+(((px)*(x452)))))+IKsqr(((IkReal(-0.333333333333333))+(((IkReal(-1.00000000000000))*(cj14)*(py)*(x452)))+(((IkReal(-1.00000000000000))*(cj14)*(px)*(x451)))+(((IkReal(11.1111111111111))*(pz)*(sj14)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(py)*(x451)))+(((px)*(x452)))), ((IkReal(-0.333333333333333))+(((IkReal(-1.00000000000000))*(cj14)*(py)*(x452)))+(((IkReal(-1.00000000000000))*(cj14)*(px)*(x451)))+(((IkReal(11.1111111111111))*(pz)*(sj14)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(0.0900000000000000))*(IKsin(j16))))+(((IkReal(-1.00000000000000))*(px)*(sj13))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(0.0900000000000000))*(IKcos(j16))))+(((IkReal(-1.00000000000000))*(pz)*(sj14)))+(((cj13)*(cj14)*(px)))+(((cj14)*(py)*(sj13))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x453=((IkReal(1.00000000000000))*(sj14));
IkReal x454=((r01)*(sj13));
IkReal x455=((IkReal(1.00000000000000))*(cj14));
IkReal x456=((cj13)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j15, IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj13)))+(((cj13)*(r01))));
evalcond[2]=((((cj14)*(x456)))+(((cj14)*(x454)))+(((IkReal(-1.00000000000000))*(r02)*(x453))));
evalcond[3]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x453)*(x454)))+(((IkReal(-1.00000000000000))*(x453)*(x456)))+(((IkReal(-1.00000000000000))*(r02)*(x455))));
evalcond[4]=((IkReal(-0.0550000000000000))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x453)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x453)))+(((IkReal(-1.00000000000000))*(pz)*(x455))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x457=((IkReal(11.1111111111111))*(cj13));
IkReal x458=((IkReal(11.1111111111111))*(sj13));
if( IKabs(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(py)*(x457)))+(((px)*(x458))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.333333333333333))+(((cj14)*(px)*(x457)))+(((IkReal(-11.1111111111111))*(pz)*(sj14)))+(((cj14)*(py)*(x458))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(py)*(x457)))+(((px)*(x458)))))+IKsqr(((IkReal(-0.333333333333333))+(((cj14)*(px)*(x457)))+(((IkReal(-11.1111111111111))*(pz)*(sj14)))+(((cj14)*(py)*(x458)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(py)*(x457)))+(((px)*(x458)))), ((IkReal(-0.333333333333333))+(((cj14)*(px)*(x457)))+(((IkReal(-11.1111111111111))*(pz)*(sj14)))+(((cj14)*(py)*(x458)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(0.0900000000000000))*(IKsin(j16))))+(((IkReal(-1.00000000000000))*(px)*(sj13))));
evalcond[1]=((IkReal(-0.0300000000000000))+(((IkReal(-0.0900000000000000))*(IKcos(j16))))+(((IkReal(-1.00000000000000))*(pz)*(sj14)))+(((cj13)*(cj14)*(px)))+(((cj14)*(py)*(sj13))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x459=((IkReal(1.00000000000000))*(sj14));
IkReal x460=((r01)*(sj13));
IkReal x461=((cj13)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj13)))+(((cj13)*(r01))));
evalcond[2]=((IkReal(-1.00000000000000))+(((cj14)*(x461)))+(((cj14)*(x460)))+(((IkReal(-1.00000000000000))*(r02)*(x459))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x459)*(x460)))+(((IkReal(-1.00000000000000))*(x459)*(x461)))+(((IkReal(-1.00000000000000))*(cj14)*(r02))));
evalcond[4]=((IkReal(0.195000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x459)))+(((cj13)*(cj14)*(px)))+(((cj14)*(py)*(sj13))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x462=((IkReal(11.1111111111111))*(cj13));
IkReal x463=((IkReal(11.1111111111111))*(sj13));
if( IKabs(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(py)*(x462)))+(((px)*(x463))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(2.44444444444444))+(((py)*(sj14)*(x463)))+(((IkReal(11.1111111111111))*(cj14)*(pz)))+(((px)*(sj14)*(x462))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(py)*(x462)))+(((px)*(x463)))))+IKsqr(((IkReal(2.44444444444444))+(((py)*(sj14)*(x463)))+(((IkReal(11.1111111111111))*(cj14)*(pz)))+(((px)*(sj14)*(x462)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(py)*(x462)))+(((px)*(x463)))), ((IkReal(2.44444444444444))+(((py)*(sj14)*(x463)))+(((IkReal(11.1111111111111))*(cj14)*(pz)))+(((px)*(sj14)*(x462)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
IkReal x464=((IkReal(1.00000000000000))*(sj14));
evalcond[0]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(0.0900000000000000))*(IKsin(j16))))+(((IkReal(-1.00000000000000))*(px)*(sj13))));
evalcond[1]=((IkReal(-0.220000000000000))+(((IkReal(0.0900000000000000))*(IKcos(j16))))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x464)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x464)))+(((IkReal(-1.00000000000000))*(cj14)*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x465=((IkReal(1.00000000000000))*(sj14));
IkReal x466=((r01)*(sj13));
IkReal x467=((cj13)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj13)))+(((cj13)*(r01))));
evalcond[2]=((IkReal(1.00000000000000))+(((cj14)*(x467)))+(((cj14)*(x466)))+(((IkReal(-1.00000000000000))*(r02)*(x465))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x465)*(x467)))+(((IkReal(-1.00000000000000))*(x465)*(x466)))+(((IkReal(-1.00000000000000))*(cj14)*(r02))));
evalcond[4]=((IkReal(-0.195000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x465)))+(((cj13)*(cj14)*(px)))+(((cj14)*(py)*(sj13))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x468=((IkReal(11.1111111111111))*(cj13));
IkReal x469=((IkReal(11.1111111111111))*(sj13));
if( IKabs(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(py)*(x468)))+(((px)*(x469))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-3.11111111111111))+(((IkReal(-11.1111111111111))*(cj14)*(pz)))+(((IkReal(-1.00000000000000))*(px)*(sj14)*(x468)))+(((IkReal(-1.00000000000000))*(py)*(sj14)*(x469))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(py)*(x468)))+(((px)*(x469)))))+IKsqr(((IkReal(-3.11111111111111))+(((IkReal(-11.1111111111111))*(cj14)*(pz)))+(((IkReal(-1.00000000000000))*(px)*(sj14)*(x468)))+(((IkReal(-1.00000000000000))*(py)*(sj14)*(x469)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(py)*(x468)))+(((px)*(x469)))), ((IkReal(-3.11111111111111))+(((IkReal(-11.1111111111111))*(cj14)*(pz)))+(((IkReal(-1.00000000000000))*(px)*(sj14)*(x468)))+(((IkReal(-1.00000000000000))*(py)*(sj14)*(x469)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
IkReal x470=((IkReal(1.00000000000000))*(sj14));
evalcond[0]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(0.0900000000000000))*(IKsin(j16))))+(((IkReal(-1.00000000000000))*(px)*(sj13))));
evalcond[1]=((IkReal(-0.280000000000000))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x470)))+(((IkReal(-0.0900000000000000))*(IKcos(j16))))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x470)))+(((IkReal(-1.00000000000000))*(cj14)*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x471=((IkReal(100.000000000000))*(sj14));
if( IKabs(((IkReal(1.05555555555556))+(((IkReal(-11.1111111111111))*(cj13)*(py)))+(((IkReal(11.1111111111111))*(px)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.111111111111111))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((IkReal(25.0000000000000))+(((py)*(sj13)*(x471)))+(((IkReal(-3.00000000000000))*(sj15)))+(((cj13)*(px)*(x471)))+(((IkReal(19.5000000000000))*(cj15)))+(((IkReal(100.000000000000))*(cj14)*(pz))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.05555555555556))+(((IkReal(-11.1111111111111))*(cj13)*(py)))+(((IkReal(11.1111111111111))*(px)*(sj13)))))+IKsqr(((IkReal(0.111111111111111))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((IkReal(25.0000000000000))+(((py)*(sj13)*(x471)))+(((IkReal(-3.00000000000000))*(sj15)))+(((cj13)*(px)*(x471)))+(((IkReal(19.5000000000000))*(cj15)))+(((IkReal(100.000000000000))*(cj14)*(pz)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(1.05555555555556))+(((IkReal(-11.1111111111111))*(cj13)*(py)))+(((IkReal(11.1111111111111))*(px)*(sj13)))), ((IkReal(0.111111111111111))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((IkReal(25.0000000000000))+(((py)*(sj13)*(x471)))+(((IkReal(-3.00000000000000))*(sj15)))+(((cj13)*(px)*(x471)))+(((IkReal(19.5000000000000))*(cj15)))+(((IkReal(100.000000000000))*(cj14)*(pz)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[3];
IkReal x472=IKcos(j16);
IkReal x473=((py)*(sj13));
IkReal x474=((IkReal(1.00000000000000))*(sj14));
IkReal x475=((cj13)*(px));
IkReal x476=((IkReal(0.0900000000000000))*(x472));
evalcond[0]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(0.0900000000000000))*(IKsin(j16))))+(((IkReal(-1.00000000000000))*(px)*(sj13))));
evalcond[1]=((((IkReal(0.195000000000000))*(sj15)))+(((IkReal(-1.00000000000000))*(pz)*(x474)))+(((IkReal(0.0300000000000000))*(cj15)))+(((cj14)*(x473)))+(((cj14)*(x475)))+(((cj15)*(x476))));
evalcond[2]=((IkReal(-0.250000000000000))+(((sj15)*(x476)))+(((IkReal(-0.195000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(cj14)*(pz)))+(((IkReal(-1.00000000000000))*(x473)*(x474)))+(((IkReal(0.0300000000000000))*(sj15)))+(((IkReal(-1.00000000000000))*(x474)*(x475))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x477=((IkReal(100.000000000000))*(cj14));
if( IKabs(((IkReal(1.05555555555556))+(((IkReal(-11.1111111111111))*(cj13)*(py)))+(((IkReal(11.1111111111111))*(px)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.111111111111111))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(100.000000000000))*(pz)*(sj14)))+(((IkReal(-19.5000000000000))*(sj15)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x477)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x477)))+(((IkReal(-3.00000000000000))*(cj15))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.05555555555556))+(((IkReal(-11.1111111111111))*(cj13)*(py)))+(((IkReal(11.1111111111111))*(px)*(sj13)))))+IKsqr(((IkReal(0.111111111111111))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(100.000000000000))*(pz)*(sj14)))+(((IkReal(-19.5000000000000))*(sj15)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x477)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x477)))+(((IkReal(-3.00000000000000))*(cj15)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(1.05555555555556))+(((IkReal(-11.1111111111111))*(cj13)*(py)))+(((IkReal(11.1111111111111))*(px)*(sj13)))), ((IkReal(0.111111111111111))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(100.000000000000))*(pz)*(sj14)))+(((IkReal(-19.5000000000000))*(sj15)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x477)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x477)))+(((IkReal(-3.00000000000000))*(cj15)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[3];
IkReal x478=IKcos(j16);
IkReal x479=((py)*(sj13));
IkReal x480=((IkReal(1.00000000000000))*(sj14));
IkReal x481=((cj13)*(px));
IkReal x482=((IkReal(0.0900000000000000))*(x478));
evalcond[0]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(0.0900000000000000))*(IKsin(j16))))+(((IkReal(-1.00000000000000))*(px)*(sj13))));
evalcond[1]=((((IkReal(-1.00000000000000))*(pz)*(x480)))+(((IkReal(0.195000000000000))*(sj15)))+(((cj15)*(x482)))+(((IkReal(0.0300000000000000))*(cj15)))+(((cj14)*(x479)))+(((cj14)*(x481))));
evalcond[2]=((IkReal(-0.250000000000000))+(((IkReal(-0.195000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(cj14)*(pz)))+(((IkReal(-1.00000000000000))*(x480)*(x481)))+(((IkReal(-1.00000000000000))*(x479)*(x480)))+(((sj15)*(x482)))+(((IkReal(0.0300000000000000))*(sj15))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x483=((IkReal(1.00000000000000))*(sj14));
IkReal x484=((r01)*(sj13));
IkReal x485=((cj13)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j17)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj13)))+(((cj13)*(r01))));
evalcond[2]=((sj15)+(((cj14)*(x485)))+(((cj14)*(x484)))+(((IkReal(-1.00000000000000))*(r02)*(x483))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x483)*(x484)))+(((IkReal(-1.00000000000000))*(x483)*(x485)))+(((IkReal(-1.00000000000000))*(cj14)*(r02)))+(((IkReal(-1.00000000000000))*(cj15))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x486=((IkReal(1.00000000000000))*(sj14));
IkReal x487=((r01)*(sj13));
IkReal x488=((IkReal(1.00000000000000))*(cj14));
IkReal x489=((cj13)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj13)))+(((cj13)*(r01))));
evalcond[2]=((((cj14)*(x487)))+(((cj14)*(x489)))+(((IkReal(-1.00000000000000))*(r02)*(x486))));
evalcond[3]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x486)*(x489)))+(((IkReal(-1.00000000000000))*(x486)*(x487)))+(((IkReal(-1.00000000000000))*(r02)*(x488))));
evalcond[4]=((IkReal(-0.525000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x488)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x486)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x486))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x490=((IkReal(11.1111111111111))*(cj13));
IkReal x491=((IkReal(11.1111111111111))*(sj13));
if( IKabs(((IkReal(-1.05555555555556))+(((py)*(x490)))+(((IkReal(-1.00000000000000))*(px)*(x491))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.333333333333333))+(((IkReal(-11.1111111111111))*(pz)*(sj14)))+(((cj14)*(px)*(x490)))+(((cj14)*(py)*(x491))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.05555555555556))+(((py)*(x490)))+(((IkReal(-1.00000000000000))*(px)*(x491)))))+IKsqr(((IkReal(0.333333333333333))+(((IkReal(-11.1111111111111))*(pz)*(sj14)))+(((cj14)*(px)*(x490)))+(((cj14)*(py)*(x491)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-1.05555555555556))+(((py)*(x490)))+(((IkReal(-1.00000000000000))*(px)*(x491)))), ((IkReal(0.333333333333333))+(((IkReal(-11.1111111111111))*(pz)*(sj14)))+(((cj14)*(px)*(x490)))+(((cj14)*(py)*(x491)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-0.0900000000000000))*(IKsin(j16))))+(((IkReal(-1.00000000000000))*(px)*(sj13))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0900000000000000))*(IKcos(j16))))+(((IkReal(-1.00000000000000))*(pz)*(sj14)))+(((cj13)*(cj14)*(px)))+(((cj14)*(py)*(sj13))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x492=((IkReal(1.00000000000000))*(sj14));
IkReal x493=((r01)*(sj13));
IkReal x494=((IkReal(1.00000000000000))*(cj14));
IkReal x495=((cj13)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j15, IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj13)))+(((cj13)*(r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x492)))+(((cj14)*(x495)))+(((cj14)*(x493))));
evalcond[3]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r02)*(x494)))+(((IkReal(-1.00000000000000))*(x492)*(x495)))+(((IkReal(-1.00000000000000))*(x492)*(x493))));
evalcond[4]=((IkReal(0.0250000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x492)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x492)))+(((IkReal(-1.00000000000000))*(pz)*(x494))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x496=((IkReal(11.1111111111111))*(cj13));
IkReal x497=((IkReal(11.1111111111111))*(sj13));
if( IKabs(((IkReal(-1.05555555555556))+(((py)*(x496)))+(((IkReal(-1.00000000000000))*(px)*(x497))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.333333333333333))+(((IkReal(-1.00000000000000))*(cj14)*(px)*(x496)))+(((IkReal(-1.00000000000000))*(cj14)*(py)*(x497)))+(((IkReal(11.1111111111111))*(pz)*(sj14))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.05555555555556))+(((py)*(x496)))+(((IkReal(-1.00000000000000))*(px)*(x497)))))+IKsqr(((IkReal(0.333333333333333))+(((IkReal(-1.00000000000000))*(cj14)*(px)*(x496)))+(((IkReal(-1.00000000000000))*(cj14)*(py)*(x497)))+(((IkReal(11.1111111111111))*(pz)*(sj14)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-1.05555555555556))+(((py)*(x496)))+(((IkReal(-1.00000000000000))*(px)*(x497)))), ((IkReal(0.333333333333333))+(((IkReal(-1.00000000000000))*(cj14)*(px)*(x496)))+(((IkReal(-1.00000000000000))*(cj14)*(py)*(x497)))+(((IkReal(11.1111111111111))*(pz)*(sj14)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-0.0900000000000000))*(IKsin(j16))))+(((IkReal(-1.00000000000000))*(px)*(sj13))));
evalcond[1]=((IkReal(-0.0300000000000000))+(((IkReal(0.0900000000000000))*(IKcos(j16))))+(((IkReal(-1.00000000000000))*(pz)*(sj14)))+(((cj13)*(cj14)*(px)))+(((cj14)*(py)*(sj13))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x498=((IkReal(1.00000000000000))*(sj14));
IkReal x499=((r01)*(sj13));
IkReal x500=((cj13)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj13)))+(((cj13)*(r01))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r02)*(x498)))+(((cj14)*(x500)))+(((cj14)*(x499))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x498)*(x499)))+(((IkReal(-1.00000000000000))*(cj14)*(r02)))+(((IkReal(-1.00000000000000))*(x498)*(x500))));
evalcond[4]=((IkReal(0.275000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x498)))+(((cj13)*(cj14)*(px)))+(((cj14)*(py)*(sj13))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x501=((IkReal(11.1111111111111))*(cj13));
IkReal x502=((IkReal(11.1111111111111))*(sj13));
if( IKabs(((IkReal(-1.05555555555556))+(((py)*(x501)))+(((IkReal(-1.00000000000000))*(px)*(x502))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-2.44444444444444))+(((IkReal(-1.00000000000000))*(px)*(sj14)*(x501)))+(((IkReal(-1.00000000000000))*(py)*(sj14)*(x502)))+(((IkReal(-11.1111111111111))*(cj14)*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.05555555555556))+(((py)*(x501)))+(((IkReal(-1.00000000000000))*(px)*(x502)))))+IKsqr(((IkReal(-2.44444444444444))+(((IkReal(-1.00000000000000))*(px)*(sj14)*(x501)))+(((IkReal(-1.00000000000000))*(py)*(sj14)*(x502)))+(((IkReal(-11.1111111111111))*(cj14)*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-1.05555555555556))+(((py)*(x501)))+(((IkReal(-1.00000000000000))*(px)*(x502)))), ((IkReal(-2.44444444444444))+(((IkReal(-1.00000000000000))*(px)*(sj14)*(x501)))+(((IkReal(-1.00000000000000))*(py)*(sj14)*(x502)))+(((IkReal(-11.1111111111111))*(cj14)*(pz)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
IkReal x503=((IkReal(1.00000000000000))*(sj14));
evalcond[0]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-0.0900000000000000))*(IKsin(j16))))+(((IkReal(-1.00000000000000))*(px)*(sj13))));
evalcond[1]=((IkReal(-0.220000000000000))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x503)))+(((IkReal(-0.0900000000000000))*(IKcos(j16))))+(((IkReal(-1.00000000000000))*(cj14)*(pz)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x503))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x504=((IkReal(1.00000000000000))*(sj14));
IkReal x505=((r01)*(sj13));
IkReal x506=((cj13)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj13)))+(((cj13)*(r01))));
evalcond[2]=((IkReal(-1.00000000000000))+(((cj14)*(x505)))+(((cj14)*(x506)))+(((IkReal(-1.00000000000000))*(r02)*(x504))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj14)*(r02)))+(((IkReal(-1.00000000000000))*(x504)*(x506)))+(((IkReal(-1.00000000000000))*(x504)*(x505))));
evalcond[4]=((IkReal(-0.275000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x504)))+(((cj13)*(cj14)*(px)))+(((cj14)*(py)*(sj13))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x507=((IkReal(11.1111111111111))*(cj13));
IkReal x508=((IkReal(11.1111111111111))*(sj13));
if( IKabs(((IkReal(-1.05555555555556))+(((py)*(x507)))+(((IkReal(-1.00000000000000))*(px)*(x508))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(3.11111111111111))+(((IkReal(11.1111111111111))*(cj14)*(pz)))+(((px)*(sj14)*(x507)))+(((py)*(sj14)*(x508))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.05555555555556))+(((py)*(x507)))+(((IkReal(-1.00000000000000))*(px)*(x508)))))+IKsqr(((IkReal(3.11111111111111))+(((IkReal(11.1111111111111))*(cj14)*(pz)))+(((px)*(sj14)*(x507)))+(((py)*(sj14)*(x508)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-1.05555555555556))+(((py)*(x507)))+(((IkReal(-1.00000000000000))*(px)*(x508)))), ((IkReal(3.11111111111111))+(((IkReal(11.1111111111111))*(cj14)*(pz)))+(((px)*(sj14)*(x507)))+(((py)*(sj14)*(x508)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
IkReal x509=((IkReal(1.00000000000000))*(sj14));
evalcond[0]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-0.0900000000000000))*(IKsin(j16))))+(((IkReal(-1.00000000000000))*(px)*(sj13))));
evalcond[1]=((IkReal(-0.280000000000000))+(((IkReal(0.0900000000000000))*(IKcos(j16))))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x509)))+(((IkReal(-1.00000000000000))*(cj14)*(pz)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x509))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x510=((IkReal(100.000000000000))*(sj14));
if( IKabs(((IkReal(-1.05555555555556))+(((IkReal(-11.1111111111111))*(px)*(sj13)))+(((IkReal(11.1111111111111))*(cj13)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.111111111111111))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((IkReal(-25.0000000000000))+(((IkReal(-100.000000000000))*(cj14)*(pz)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x510)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x510)))+(((IkReal(-27.5000000000000))*(cj15)))+(((IkReal(3.00000000000000))*(sj15))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.05555555555556))+(((IkReal(-11.1111111111111))*(px)*(sj13)))+(((IkReal(11.1111111111111))*(cj13)*(py)))))+IKsqr(((IkReal(0.111111111111111))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((IkReal(-25.0000000000000))+(((IkReal(-100.000000000000))*(cj14)*(pz)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x510)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x510)))+(((IkReal(-27.5000000000000))*(cj15)))+(((IkReal(3.00000000000000))*(sj15)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-1.05555555555556))+(((IkReal(-11.1111111111111))*(px)*(sj13)))+(((IkReal(11.1111111111111))*(cj13)*(py)))), ((IkReal(0.111111111111111))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((IkReal(-25.0000000000000))+(((IkReal(-100.000000000000))*(cj14)*(pz)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x510)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x510)))+(((IkReal(-27.5000000000000))*(cj15)))+(((IkReal(3.00000000000000))*(sj15)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[3];
IkReal x511=IKcos(j16);
IkReal x512=((IkReal(1.00000000000000))*(sj14));
IkReal x513=((cj13)*(px));
IkReal x514=((py)*(sj13));
IkReal x515=((IkReal(0.0900000000000000))*(x511));
evalcond[0]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-0.0900000000000000))*(IKsin(j16))))+(((IkReal(-1.00000000000000))*(px)*(sj13))));
evalcond[1]=((((cj14)*(x514)))+(((cj14)*(x513)))+(((IkReal(0.275000000000000))*(sj15)))+(((IkReal(0.0300000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(pz)*(x512)))+(((IkReal(-1.00000000000000))*(cj15)*(x515))));
evalcond[2]=((IkReal(-0.250000000000000))+(((IkReal(-1.00000000000000))*(cj14)*(pz)))+(((IkReal(-0.275000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(x512)*(x514)))+(((IkReal(-1.00000000000000))*(x512)*(x513)))+(((IkReal(-1.00000000000000))*(sj15)*(x515)))+(((IkReal(0.0300000000000000))*(sj15))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x516=((IkReal(100.000000000000))*(cj14));
if( IKabs(((IkReal(-1.05555555555556))+(((IkReal(-11.1111111111111))*(px)*(sj13)))+(((IkReal(11.1111111111111))*(cj13)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.111111111111111))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(3.00000000000000))*(cj15)))+(((IkReal(27.5000000000000))*(sj15)))+(((IkReal(-100.000000000000))*(pz)*(sj14)))+(((cj13)*(px)*(x516)))+(((py)*(sj13)*(x516))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.05555555555556))+(((IkReal(-11.1111111111111))*(px)*(sj13)))+(((IkReal(11.1111111111111))*(cj13)*(py)))))+IKsqr(((IkReal(0.111111111111111))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(3.00000000000000))*(cj15)))+(((IkReal(27.5000000000000))*(sj15)))+(((IkReal(-100.000000000000))*(pz)*(sj14)))+(((cj13)*(px)*(x516)))+(((py)*(sj13)*(x516)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-1.05555555555556))+(((IkReal(-11.1111111111111))*(px)*(sj13)))+(((IkReal(11.1111111111111))*(cj13)*(py)))), ((IkReal(0.111111111111111))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(3.00000000000000))*(cj15)))+(((IkReal(27.5000000000000))*(sj15)))+(((IkReal(-100.000000000000))*(pz)*(sj14)))+(((cj13)*(px)*(x516)))+(((py)*(sj13)*(x516)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[3];
IkReal x517=IKcos(j16);
IkReal x518=((IkReal(1.00000000000000))*(sj14));
IkReal x519=((cj13)*(px));
IkReal x520=((py)*(sj13));
IkReal x521=((IkReal(0.0900000000000000))*(x517));
evalcond[0]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-0.0900000000000000))*(IKsin(j16))))+(((IkReal(-1.00000000000000))*(px)*(sj13))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj15)*(x521)))+(((cj14)*(x519)))+(((IkReal(0.275000000000000))*(sj15)))+(((cj14)*(x520)))+(((IkReal(0.0300000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(pz)*(x518))));
evalcond[2]=((IkReal(-0.250000000000000))+(((IkReal(-1.00000000000000))*(sj15)*(x521)))+(((IkReal(-1.00000000000000))*(cj14)*(pz)))+(((IkReal(-0.275000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(x518)*(x519)))+(((IkReal(-1.00000000000000))*(x518)*(x520)))+(((IkReal(0.0300000000000000))*(sj15))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x522=((IkReal(1.00000000000000))*(sj14));
IkReal x523=((IkReal(1.00000000000000))*(cj14));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj13)*(r00)*(x522)))+(((IkReal(-1.00000000000000))*(r02)*(x523)))+(sj17)+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x522))));
evalcond[2]=((IkReal(-0.485000000000000))+(((IkReal(-0.0900000000000000))*(cj17)))+(((IkReal(0.0400000000000000))*(sj17)))+(((IkReal(-1.00000000000000))*(pz)*(x523)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x522)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x522))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(cj17);
dummyeval[0]=cj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x524=((IkReal(1.00000000000000))*(r01));
if( IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(cj13)*(x524)))+(((r00)*(sj13))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((r02)*(sj14)))+(((IkReal(-1.00000000000000))*(cj14)*(sj13)*(x524)))+(((IkReal(-1.00000000000000))*(cj13)*(cj14)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j16array[0]=IKatan2(((gconst0)*(((((IkReal(-1.00000000000000))*(cj13)*(x524)))+(((r00)*(sj13)))))), ((gconst0)*(((((r02)*(sj14)))+(((IkReal(-1.00000000000000))*(cj14)*(sj13)*(x524)))+(((IkReal(-1.00000000000000))*(cj13)*(cj14)*(r00)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x525=IKsin(j16);
IkReal x526=IKcos(j16);
IkReal x527=((cj14)*(sj13));
IkReal x528=((IkReal(1.00000000000000))*(sj14));
IkReal x529=((IkReal(0.0900000000000000))*(sj17));
IkReal x530=((cj13)*(cj14));
IkReal x531=((IkReal(1.00000000000000))*(sj13));
IkReal x532=((cj17)*(x526));
IkReal x533=((cj17)*(x525));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x531)))+(x533)+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(0.0400000000000000))*(x533)))+(((IkReal(-1.00000000000000))*(px)*(x531)))+(((x525)*(x529))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x528)))+(x532)+(((r01)*(x527)))+(((r00)*(x530))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(0.0400000000000000))*(x532)))+(((x526)*(x529)))+(((px)*(x530)))+(((IkReal(-1.00000000000000))*(pz)*(x528)))+(((py)*(x527))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x534=((IkReal(1.00000000000000))*(sj14));
IkReal x535=((IkReal(1.00000000000000))*(cj14));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j15, IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj13)*(r00)*(x534)))+(((IkReal(-1.00000000000000))*(r02)*(x535)))+(((IkReal(-1.00000000000000))*(sj17)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x534))));
evalcond[2]=((IkReal(-0.0150000000000000))+(((IkReal(0.0900000000000000))*(cj17)))+(((IkReal(-1.00000000000000))*(pz)*(x535)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x534)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x534)))+(((IkReal(-0.0400000000000000))*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(cj17);
dummyeval[0]=cj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
if( IKabs(((gconst1)*(((((r00)*(sj13)))+(((IkReal(-1.00000000000000))*(cj13)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((cj13)*(cj14)*(r00)))+(((cj14)*(r01)*(sj13)))+(((IkReal(-1.00000000000000))*(r02)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j16array[0]=IKatan2(((gconst1)*(((((r00)*(sj13)))+(((IkReal(-1.00000000000000))*(cj13)*(r01)))))), ((gconst1)*(((((cj13)*(cj14)*(r00)))+(((cj14)*(r01)*(sj13)))+(((IkReal(-1.00000000000000))*(r02)*(sj14)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x536=IKsin(j16);
IkReal x537=IKcos(j16);
IkReal x538=((cj14)*(sj13));
IkReal x539=((IkReal(1.00000000000000))*(sj14));
IkReal x540=((cj13)*(cj14));
IkReal x541=((IkReal(1.00000000000000))*(sj13));
IkReal x542=((IkReal(0.0900000000000000))*(sj17));
IkReal x543=((cj17)*(x536));
IkReal x544=((cj17)*(x537));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x541)))+(x543)+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(0.0400000000000000))*(x543)))+(((x536)*(x542)))+(((IkReal(-1.00000000000000))*(px)*(x541))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x544)))+(((IkReal(-1.00000000000000))*(r02)*(x539)))+(((r00)*(x540)))+(((r01)*(x538))));
evalcond[3]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x537)*(x542)))+(((px)*(x540)))+(((IkReal(-1.00000000000000))*(pz)*(x539)))+(((IkReal(-0.0400000000000000))*(x544)))+(((py)*(x538))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x545=((IkReal(1.00000000000000))*(sj14));
IkReal x546=((cj13)*(cj14));
IkReal x547=((cj14)*(sj13));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r02)*(x545)))+(((IkReal(-1.00000000000000))*(sj17)))+(((r00)*(x546)))+(((r01)*(x547))));
evalcond[2]=((IkReal(0.235000000000000))+(((py)*(x547)))+(((IkReal(0.0900000000000000))*(cj17)))+(((px)*(x546)))+(((IkReal(-1.00000000000000))*(pz)*(x545)))+(((IkReal(-0.0400000000000000))*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(cj17);
dummyeval[0]=cj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
if( IKabs(((gconst2)*(((((r00)*(sj13)))+(((IkReal(-1.00000000000000))*(cj13)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((r01)*(sj13)*(sj14)))+(((cj13)*(r00)*(sj14)))+(((cj14)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j16array[0]=IKatan2(((gconst2)*(((((r00)*(sj13)))+(((IkReal(-1.00000000000000))*(cj13)*(r01)))))), ((gconst2)*(((((r01)*(sj13)*(sj14)))+(((cj13)*(r00)*(sj14)))+(((cj14)*(r02)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x548=IKsin(j16);
IkReal x549=IKcos(j16);
IkReal x550=((IkReal(1.00000000000000))*(sj14));
IkReal x551=((IkReal(0.0900000000000000))*(sj17));
IkReal x552=((IkReal(1.00000000000000))*(cj14));
IkReal x553=((IkReal(1.00000000000000))*(sj13));
IkReal x554=((cj17)*(x549));
IkReal x555=((cj17)*(x548));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x553)))+(x555)+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((x548)*(x551)))+(((cj13)*(py)))+(((IkReal(0.0400000000000000))*(x555)))+(((IkReal(-1.00000000000000))*(px)*(x553))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x552)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x550)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x550)))+(x554));
evalcond[3]=((IkReal(-0.220000000000000))+(((IkReal(0.0400000000000000))*(x554)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x550)))+(((x549)*(x551)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x550)))+(((IkReal(-1.00000000000000))*(pz)*(x552))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x556=((IkReal(1.00000000000000))*(sj14));
IkReal x557=((cj13)*(cj14));
IkReal x558=((cj14)*(sj13));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r02)*(x556)))+(sj17)+(((r01)*(x558)))+(((r00)*(x557))));
evalcond[2]=((IkReal(-0.235000000000000))+(((IkReal(-0.0900000000000000))*(cj17)))+(((py)*(x558)))+(((IkReal(0.0400000000000000))*(sj17)))+(((px)*(x557)))+(((IkReal(-1.00000000000000))*(pz)*(x556))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(cj17);
dummyeval[0]=cj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x559=((IkReal(1.00000000000000))*(r01));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(cj13)*(x559)))+(((r00)*(sj13))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(cj13)*(r00)*(sj14)))+(((IkReal(-1.00000000000000))*(cj14)*(r02)))+(((IkReal(-1.00000000000000))*(sj13)*(sj14)*(x559))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j16array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(cj13)*(x559)))+(((r00)*(sj13)))))), ((gconst3)*(((((IkReal(-1.00000000000000))*(cj13)*(r00)*(sj14)))+(((IkReal(-1.00000000000000))*(cj14)*(r02)))+(((IkReal(-1.00000000000000))*(sj13)*(sj14)*(x559)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x560=IKsin(j16);
IkReal x561=IKcos(j16);
IkReal x562=((IkReal(1.00000000000000))*(sj14));
IkReal x563=((IkReal(0.0900000000000000))*(sj17));
IkReal x564=((IkReal(1.00000000000000))*(cj14));
IkReal x565=((IkReal(1.00000000000000))*(sj13));
IkReal x566=((cj17)*(x560));
IkReal x567=((cj17)*(x561));
evalcond[0]=((x566)+(((IkReal(-1.00000000000000))*(r00)*(x565)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((x560)*(x563)))+(((IkReal(0.0400000000000000))*(x566)))+(((IkReal(-1.00000000000000))*(px)*(x565))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x567)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x562)))+(((IkReal(-1.00000000000000))*(r02)*(x564)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x562))));
evalcond[3]=((IkReal(-0.280000000000000))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x562)))+(((IkReal(-0.0400000000000000))*(x567)))+(((IkReal(-1.00000000000000))*(pz)*(x564)))+(((IkReal(-1.00000000000000))*(x561)*(x563)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x562))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
if( IKabs(((((IKabs(((((IkReal(0.0900000000000000))*(sj17)))+(((IkReal(0.0400000000000000))*(cj17))))) != 0)?((IkReal)1/(((((IkReal(0.0900000000000000))*(sj17)))+(((IkReal(0.0400000000000000))*(cj17)))))):(IkReal)1.0e30))*(((IkReal(0.0950000000000000))+(((px)*(sj13)))+(((IkReal(-1.00000000000000))*(cj13)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj17) != 0)?((IkReal)1/(cj17)):(IkReal)1.0e30))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((r01)*(sj13)*(sj14)))+(((cj13)*(r00)*(sj14)))+(((IkReal(-1.00000000000000))*(cj15)*(sj17)))+(((cj14)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(0.0900000000000000))*(sj17)))+(((IkReal(0.0400000000000000))*(cj17))))) != 0)?((IkReal)1/(((((IkReal(0.0900000000000000))*(sj17)))+(((IkReal(0.0400000000000000))*(cj17)))))):(IkReal)1.0e30))*(((IkReal(0.0950000000000000))+(((px)*(sj13)))+(((IkReal(-1.00000000000000))*(cj13)*(py)))))))+IKsqr(((((IKabs(cj17) != 0)?((IkReal)1/(cj17)):(IkReal)1.0e30))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((r01)*(sj13)*(sj14)))+(((cj13)*(r00)*(sj14)))+(((IkReal(-1.00000000000000))*(cj15)*(sj17)))+(((cj14)*(r02)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IKabs(((((IkReal(0.0900000000000000))*(sj17)))+(((IkReal(0.0400000000000000))*(cj17))))) != 0)?((IkReal)1/(((((IkReal(0.0900000000000000))*(sj17)))+(((IkReal(0.0400000000000000))*(cj17)))))):(IkReal)1.0e30))*(((IkReal(0.0950000000000000))+(((px)*(sj13)))+(((IkReal(-1.00000000000000))*(cj13)*(py)))))), ((((IKabs(cj17) != 0)?((IkReal)1/(cj17)):(IkReal)1.0e30))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((r01)*(sj13)*(sj14)))+(((cj13)*(r00)*(sj14)))+(((IkReal(-1.00000000000000))*(cj15)*(sj17)))+(((cj14)*(r02)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x568=IKsin(j16);
IkReal x569=IKcos(j16);
IkReal x570=((IkReal(0.0400000000000000))*(sj15));
IkReal x571=((IkReal(1.00000000000000))*(sj14));
IkReal x572=((cj15)*(sj17));
IkReal x573=((r01)*(sj13));
IkReal x574=((cj13)*(r00));
IkReal x575=((cj17)*(sj15));
IkReal x576=((IkReal(0.0900000000000000))*(sj17));
IkReal x577=((IkReal(1.00000000000000))*(sj13));
IkReal x578=((cj13)*(px));
IkReal x579=((py)*(sj13));
IkReal x580=((IkReal(1.00000000000000))*(cj14));
IkReal x581=((cj17)*(x569));
IkReal x582=((cj17)*(x568));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x577)))+(x582)+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x577)))+(((x568)*(x576)))+(((IkReal(0.0400000000000000))*(x582))));
evalcond[2]=((((cj15)*(x581)))+(((cj14)*(x574)))+(((cj14)*(x573)))+(((IkReal(-1.00000000000000))*(r02)*(x571)))+(((IkReal(-1.00000000000000))*(sj15)*(sj17))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r02)*(x580)))+(((IkReal(-1.00000000000000))*(x571)*(x573)))+(((IkReal(-1.00000000000000))*(x571)*(x574)))+(x572)+(((x569)*(x575))));
evalcond[4]=((((IkReal(-1.00000000000000))*(sj17)*(x570)))+(((cj14)*(x579)))+(((cj14)*(x578)))+(((IkReal(0.0900000000000000))*(x569)*(x572)))+(((IkReal(0.0900000000000000))*(x575)))+(((IkReal(0.235000000000000))*(sj15)))+(((IkReal(0.0300000000000000))*(cj15)))+(((IkReal(0.0400000000000000))*(cj15)*(x581)))+(((IkReal(-1.00000000000000))*(pz)*(x571))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(-0.235000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(pz)*(x580)))+(((IkReal(-1.00000000000000))*(x571)*(x579)))+(((IkReal(-1.00000000000000))*(x571)*(x578)))+(((x570)*(x581)))+(((sj15)*(x569)*(x576)))+(((IkReal(-0.0900000000000000))*(cj15)*(cj17)))+(((IkReal(0.0300000000000000))*(sj15)))+(((IkReal(0.0400000000000000))*(x572))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x583=((IKabs(cj17) != 0)?((IkReal)1/(cj17)):(IkReal)1.0e30);
IkReal x584=((IkReal(1.00000000000000))*(r01));
if( IKabs(((x583)*(((((r00)*(sj13)))+(((IkReal(-1.00000000000000))*(cj13)*(x584))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x583)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((r02)*(sj14)))+(((sj15)*(sj17)))+(((IkReal(-1.00000000000000))*(cj14)*(sj13)*(x584)))+(((IkReal(-1.00000000000000))*(cj13)*(cj14)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x583)*(((((r00)*(sj13)))+(((IkReal(-1.00000000000000))*(cj13)*(x584)))))))+IKsqr(((x583)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((r02)*(sj14)))+(((sj15)*(sj17)))+(((IkReal(-1.00000000000000))*(cj14)*(sj13)*(x584)))+(((IkReal(-1.00000000000000))*(cj13)*(cj14)*(r00)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x583)*(((((r00)*(sj13)))+(((IkReal(-1.00000000000000))*(cj13)*(x584)))))), ((x583)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((r02)*(sj14)))+(((sj15)*(sj17)))+(((IkReal(-1.00000000000000))*(cj14)*(sj13)*(x584)))+(((IkReal(-1.00000000000000))*(cj13)*(cj14)*(r00)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x585=IKsin(j16);
IkReal x586=IKcos(j16);
IkReal x587=((IkReal(0.0400000000000000))*(sj15));
IkReal x588=((IkReal(1.00000000000000))*(sj14));
IkReal x589=((cj15)*(sj17));
IkReal x590=((r01)*(sj13));
IkReal x591=((cj13)*(r00));
IkReal x592=((cj17)*(sj15));
IkReal x593=((IkReal(0.0900000000000000))*(sj17));
IkReal x594=((IkReal(1.00000000000000))*(sj13));
IkReal x595=((cj13)*(px));
IkReal x596=((py)*(sj13));
IkReal x597=((IkReal(1.00000000000000))*(cj14));
IkReal x598=((cj17)*(x586));
IkReal x599=((cj17)*(x585));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x594)))+(x599)+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((x585)*(x593)))+(((cj13)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x594)))+(((IkReal(0.0400000000000000))*(x599))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x588)))+(((cj14)*(x591)))+(((cj14)*(x590)))+(((cj15)*(x598)))+(((IkReal(-1.00000000000000))*(sj15)*(sj17))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x588)*(x591)))+(((IkReal(-1.00000000000000))*(x588)*(x590)))+(x589)+(((IkReal(-1.00000000000000))*(r02)*(x597)))+(((x586)*(x592))));
evalcond[4]=((((IkReal(0.0400000000000000))*(cj15)*(x598)))+(((IkReal(0.0900000000000000))*(x592)))+(((IkReal(-1.00000000000000))*(sj17)*(x587)))+(((IkReal(-1.00000000000000))*(pz)*(x588)))+(((IkReal(0.235000000000000))*(sj15)))+(((cj14)*(x596)))+(((cj14)*(x595)))+(((IkReal(0.0300000000000000))*(cj15)))+(((IkReal(0.0900000000000000))*(x586)*(x589))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(-0.235000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(x588)*(x595)))+(((IkReal(-1.00000000000000))*(x588)*(x596)))+(((sj15)*(x586)*(x593)))+(((IkReal(-1.00000000000000))*(pz)*(x597)))+(((IkReal(-0.0900000000000000))*(cj15)*(cj17)))+(((IkReal(0.0300000000000000))*(sj15)))+(((IkReal(0.0400000000000000))*(x589)))+(((x587)*(x598))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x600=((IKabs(cj17) != 0)?((IkReal)1/(cj17)):(IkReal)1.0e30);
if( IKabs(((x600)*(((((r00)*(sj13)))+(((IkReal(-1.00000000000000))*(cj13)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x600)*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((r01)*(sj13)*(sj14)))+(((cj13)*(r00)*(sj14)))+(((IkReal(-1.00000000000000))*(cj15)*(sj17)))+(((cj14)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x600)*(((((r00)*(sj13)))+(((IkReal(-1.00000000000000))*(cj13)*(r01)))))))+IKsqr(((x600)*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((r01)*(sj13)*(sj14)))+(((cj13)*(r00)*(sj14)))+(((IkReal(-1.00000000000000))*(cj15)*(sj17)))+(((cj14)*(r02)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x600)*(((((r00)*(sj13)))+(((IkReal(-1.00000000000000))*(cj13)*(r01)))))), ((x600)*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((r01)*(sj13)*(sj14)))+(((cj13)*(r00)*(sj14)))+(((IkReal(-1.00000000000000))*(cj15)*(sj17)))+(((cj14)*(r02)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x601=IKsin(j16);
IkReal x602=IKcos(j16);
IkReal x603=((IkReal(0.0400000000000000))*(sj15));
IkReal x604=((IkReal(1.00000000000000))*(sj14));
IkReal x605=((cj15)*(sj17));
IkReal x606=((r01)*(sj13));
IkReal x607=((cj13)*(r00));
IkReal x608=((cj17)*(sj15));
IkReal x609=((IkReal(0.0900000000000000))*(sj17));
IkReal x610=((IkReal(1.00000000000000))*(sj13));
IkReal x611=((cj13)*(px));
IkReal x612=((py)*(sj13));
IkReal x613=((IkReal(1.00000000000000))*(cj14));
IkReal x614=((cj17)*(x602));
IkReal x615=((cj17)*(x601));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x610)))+(x615)+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((x601)*(x609)))+(((IkReal(0.0400000000000000))*(x615)))+(((IkReal(-1.00000000000000))*(px)*(x610))));
evalcond[2]=((((cj14)*(x607)))+(((cj14)*(x606)))+(((IkReal(-1.00000000000000))*(r02)*(x604)))+(((IkReal(-1.00000000000000))*(sj15)*(sj17)))+(((cj15)*(x614))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x604)*(x607)))+(((IkReal(-1.00000000000000))*(x604)*(x606)))+(x605)+(((x602)*(x608)))+(((IkReal(-1.00000000000000))*(r02)*(x613))));
evalcond[4]=((((IkReal(0.0900000000000000))*(x608)))+(((IkReal(0.0400000000000000))*(cj15)*(x614)))+(((IkReal(-1.00000000000000))*(sj17)*(x603)))+(((cj14)*(x611)))+(((cj14)*(x612)))+(((IkReal(0.0900000000000000))*(x602)*(x605)))+(((IkReal(0.235000000000000))*(sj15)))+(((IkReal(0.0300000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(pz)*(x604))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(-0.235000000000000))*(cj15)))+(((sj15)*(x602)*(x609)))+(((IkReal(-1.00000000000000))*(x604)*(x611)))+(((IkReal(-1.00000000000000))*(x604)*(x612)))+(((x603)*(x614)))+(((IkReal(0.0400000000000000))*(x605)))+(((IkReal(-1.00000000000000))*(pz)*(x613)))+(((IkReal(-0.0900000000000000))*(cj15)*(cj17)))+(((IkReal(0.0300000000000000))*(sj15))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j17array[1], cj17array[1], sj17array[1];
bool j17valid[1]={false};
_nj17 = 1;
IkReal x616=(cj15)*(cj15);
IkReal x617=(sj15)*(sj15);
IkReal x618=((cj15)*(sj14));
IkReal x619=((cj13)*(r00));
IkReal x620=((sj14)*(sj15));
IkReal x621=((IkReal(0.0400000000000000))*(pz));
IkReal x622=((cj14)*(cj15));
IkReal x623=((cj14)*(sj15));
IkReal x624=((r01)*(sj13));
IkReal x625=((IkReal(0.0400000000000000))*(py)*(sj13));
IkReal x626=((IkReal(0.0400000000000000))*(cj13)*(px));
IkReal x627=((IkReal(1.00000000000000))*(r02)*(x620));
IkReal x628=((x623)*(x624));
IkReal x629=((((IkReal(1.00000000000000))*(x616)))+(((IkReal(1.00000000000000))*(x617))));
IkReal x630=((IkReal(-1.00000000000000))*(((IKabs(x629) != 0)?((IkReal)1/(x629)):(IkReal)1.0e30)));
if( IKabs(((x630)*(((((IkReal(-1.00000000000000))*(x618)*(x624)))+(((IkReal(-1.00000000000000))*(x619)*(x623)))+(x627)+(((IkReal(-1.00000000000000))*(x628)))+(((IkReal(-1.00000000000000))*(x618)*(x619)))+(((IkReal(-1.00000000000000))*(r02)*(x622))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x630)*(((IKabs(((((IkReal(0.00360000000000000))*(x616)))+(((IkReal(0.00360000000000000))*(x617))))) != 0)?((IkReal)1/(((((IkReal(0.00360000000000000))*(x616)))+(((IkReal(0.00360000000000000))*(x617)))))):(IkReal)1.0e30))*(((((((((IkReal(-0.00160000000000000))*(x617)))+(((IkReal(-0.00160000000000000))*(x616)))))*(((((r02)*(x622)))+(((x619)*(x623)))+(((IkReal(-1.00000000000000))*(x627)))+(((x618)*(x624)))+(x628)+(((x618)*(x619)))))))+(((x629)*(((((IkReal(0.00940000000000000))*(x617)))+(((IkReal(0.00940000000000000))*(x616)))+(((IkReal(-1.00000000000000))*(x620)*(x621)))+(((x618)*(x626)))+(((x618)*(x625)))+(((x621)*(x622)))+(((x623)*(x626)))+(((x623)*(x625)))+(((IkReal(0.0100000000000000))*(cj15))))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x630)*(((((IkReal(-1.00000000000000))*(x618)*(x624)))+(((IkReal(-1.00000000000000))*(x619)*(x623)))+(x627)+(((IkReal(-1.00000000000000))*(x628)))+(((IkReal(-1.00000000000000))*(x618)*(x619)))+(((IkReal(-1.00000000000000))*(r02)*(x622)))))))+IKsqr(((x630)*(((IKabs(((((IkReal(0.00360000000000000))*(x616)))+(((IkReal(0.00360000000000000))*(x617))))) != 0)?((IkReal)1/(((((IkReal(0.00360000000000000))*(x616)))+(((IkReal(0.00360000000000000))*(x617)))))):(IkReal)1.0e30))*(((((((((IkReal(-0.00160000000000000))*(x617)))+(((IkReal(-0.00160000000000000))*(x616)))))*(((((r02)*(x622)))+(((x619)*(x623)))+(((IkReal(-1.00000000000000))*(x627)))+(((x618)*(x624)))+(x628)+(((x618)*(x619)))))))+(((x629)*(((((IkReal(0.00940000000000000))*(x617)))+(((IkReal(0.00940000000000000))*(x616)))+(((IkReal(-1.00000000000000))*(x620)*(x621)))+(((x618)*(x626)))+(((x618)*(x625)))+(((x621)*(x622)))+(((x623)*(x626)))+(((x623)*(x625)))+(((IkReal(0.0100000000000000))*(cj15)))))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j17array[0]=IKatan2(((x630)*(((((IkReal(-1.00000000000000))*(x618)*(x624)))+(((IkReal(-1.00000000000000))*(x619)*(x623)))+(x627)+(((IkReal(-1.00000000000000))*(x628)))+(((IkReal(-1.00000000000000))*(x618)*(x619)))+(((IkReal(-1.00000000000000))*(r02)*(x622)))))), ((x630)*(((IKabs(((((IkReal(0.00360000000000000))*(x616)))+(((IkReal(0.00360000000000000))*(x617))))) != 0)?((IkReal)1/(((((IkReal(0.00360000000000000))*(x616)))+(((IkReal(0.00360000000000000))*(x617)))))):(IkReal)1.0e30))*(((((((((IkReal(-0.00160000000000000))*(x617)))+(((IkReal(-0.00160000000000000))*(x616)))))*(((((r02)*(x622)))+(((x619)*(x623)))+(((IkReal(-1.00000000000000))*(x627)))+(((x618)*(x624)))+(x628)+(((x618)*(x619)))))))+(((x629)*(((((IkReal(0.00940000000000000))*(x617)))+(((IkReal(0.00940000000000000))*(x616)))+(((IkReal(-1.00000000000000))*(x620)*(x621)))+(((x618)*(x626)))+(((x618)*(x625)))+(((x621)*(x622)))+(((x623)*(x626)))+(((x623)*(x625)))+(((IkReal(0.0100000000000000))*(cj15)))))))))));
sj17array[0]=IKsin(j17array[0]);
cj17array[0]=IKcos(j17array[0]);
if( j17array[0] > IKPI )
{
    j17array[0]-=IK2PI;
}
else if( j17array[0] < -IKPI )
{    j17array[0]+=IK2PI;
}
j17valid[0] = true;
for(int ij17 = 0; ij17 < 1; ++ij17)
{
if( !j17valid[ij17] )
{
    continue;
}
_ij17[0] = ij17; _ij17[1] = -1;
for(int iij17 = ij17+1; iij17 < 1; ++iij17)
{
if( j17valid[iij17] && IKabs(cj17array[ij17]-cj17array[iij17]) < IKFAST_SOLUTION_THRESH && IKabs(sj17array[ij17]-sj17array[iij17]) < IKFAST_SOLUTION_THRESH )
{
    j17valid[iij17]=false; _ij17[1] = iij17; break; 
}
}
j17 = j17array[ij17]; cj17 = cj17array[ij17]; sj17 = sj17array[ij17];
{
IkReal evalcond[3];
IkReal x631=(cj15)*(cj15);
IkReal x632=(sj15)*(sj15);
IkReal x633=IKsin(j17);
IkReal x634=IKcos(j17);
IkReal x635=((cj13)*(px));
IkReal x636=((sj14)*(sj15));
IkReal x637=((IkReal(0.0400000000000000))*(pz));
IkReal x638=((py)*(sj13));
IkReal x639=((cj15)*(sj14));
IkReal x640=((cj13)*(r00));
IkReal x641=((cj14)*(sj15));
IkReal x642=((cj14)*(cj15));
IkReal x643=((r01)*(sj13));
IkReal x644=((IkReal(0.0900000000000000))*(pz));
IkReal x645=((IkReal(0.0900000000000000))*(x641));
IkReal x646=((((IkReal(0.00360000000000000))*(x632)))+(((IkReal(0.00360000000000000))*(x631))));
evalcond[0]=((((x639)*(x643)))+(((x639)*(x640)))+(((x640)*(x641)))+(((r02)*(x642)))+(((x641)*(x643)))+(((x633)*(((((IkReal(-1.00000000000000))*(x632)))+(((IkReal(-1.00000000000000))*(x631)))))))+(((IkReal(-1.00000000000000))*(r02)*(x636))));
evalcond[1]=((((IkReal(0.0400000000000000))*(x635)*(x641)))+(((x637)*(x642)))+(((IkReal(0.0400000000000000))*(x638)*(x639)))+(((IkReal(0.0400000000000000))*(x638)*(x641)))+(((IkReal(0.00940000000000000))*(x632)))+(((IkReal(0.00940000000000000))*(x631)))+(((x634)*(x646)))+(((IkReal(-1.00000000000000))*(x636)*(x637)))+(((IkReal(0.0400000000000000))*(x635)*(x639)))+(((x633)*(((((IkReal(-0.00160000000000000))*(x632)))+(((IkReal(-0.00160000000000000))*(x631)))))))+(((IkReal(0.0100000000000000))*(cj15))));
evalcond[2]=((((x638)*(x645)))+(((x635)*(x645)))+(((IkReal(0.0900000000000000))*(x635)*(x639)))+(((IkReal(0.0225000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(x633)*(x646)))+(((x634)*(((((IkReal(0.00810000000000000))*(x632)))+(((IkReal(0.00810000000000000))*(x631)))))))+(((IkReal(-1.00000000000000))*(x636)*(x644)))+(((IkReal(0.0900000000000000))*(x638)*(x639)))+(((IkReal(0.0211500000000000))*(x631)))+(((IkReal(0.0211500000000000))*(x632)))+(((x642)*(x644))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[2];
dummyeval[0]=cj17;
dummyeval[1]=sj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj17;
dummyeval[1]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[3];
dummyeval[0]=((((IkReal(2.25000000000000))*(sj17)))+(cj17));
dummyeval[1]=cj17;
dummyeval[2]=sj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  || IKabs(dummyeval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.55981698316902))+(j17)), IkReal(6.28318530717959))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
IkReal x647=((IkReal(1.00000000000000))*(sj14));
IkReal x648=((cj13)*(cj14));
IkReal x649=((cj14)*(sj13));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.406138466127514))+(((IkReal(-1.00000000000000))*(r02)*(x647)))+(((r01)*(x649)))+(((r00)*(x648))));
evalcond[2]=((IkReal(0.333488578145101))+(((py)*(x649)))+(((px)*(x648)))+(((IkReal(-1.00000000000000))*(pz)*(x647))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x650=((IkReal(1.09431753188062))*(r01));
IkReal x651=((IkReal(1.09431753188062))*(r00));
if( IKabs(((((sj13)*(x651)))+(((IkReal(-1.00000000000000))*(cj13)*(x650))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(1.09431753188062))*(cj14)*(r02)))+(((sj13)*(sj14)*(x650)))+(((cj13)*(sj14)*(x651))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((sj13)*(x651)))+(((IkReal(-1.00000000000000))*(cj13)*(x650)))))+IKsqr(((((IkReal(1.09431753188062))*(cj14)*(r02)))+(((sj13)*(sj14)*(x650)))+(((cj13)*(sj14)*(x651)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((sj13)*(x651)))+(((IkReal(-1.00000000000000))*(cj13)*(x650)))), ((((IkReal(1.09431753188062))*(cj14)*(r02)))+(((sj13)*(sj14)*(x650)))+(((cj13)*(sj14)*(x651)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x652=IKsin(j16);
IkReal x653=IKcos(j16);
IkReal x654=((IkReal(1.00000000000000))*(cj14));
IkReal x655=((IkReal(1.00000000000000))*(sj13));
IkReal x656=((sj14)*(x655));
IkReal x657=((IkReal(1.00000000000000))*(cj13)*(sj14));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x655)))+(((IkReal(0.913811550000000))*(x652)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x655)))+(((IkReal(4.85237587652042e-11))*(x652))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r00)*(x657)))+(((IkReal(-1.00000000000000))*(r01)*(x656)))+(((IkReal(0.913811550000000))*(x653)))+(((IkReal(-1.00000000000000))*(r02)*(x654))));
evalcond[3]=((IkReal(-0.220000000000000))+(((IkReal(-1.00000000000000))*(px)*(x657)))+(((IkReal(4.85237587652042e-11))*(x653)))+(((IkReal(-1.00000000000000))*(pz)*(x654)))+(((IkReal(-1.00000000000000))*(py)*(x656))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x658=((IkReal(1.00000000000000))*(sj14));
IkReal x659=((cj13)*(cj14));
IkReal x660=((cj14)*(sj13));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.406138466127514))+(((r01)*(x660)))+(((IkReal(-1.00000000000000))*(r02)*(x658)))+(((r00)*(x659))));
evalcond[2]=((IkReal(-0.333488578145101))+(((py)*(x660)))+(((px)*(x659)))+(((IkReal(-1.00000000000000))*(pz)*(x658))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x661=((IkReal(1.09431753188062))*(r01));
IkReal x662=((IkReal(1.09431753188062))*(r00));
if( IKabs(((((sj13)*(x662)))+(((IkReal(-1.00000000000000))*(cj13)*(x661))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.09431753188062))*(cj14)*(r02)))+(((IkReal(-1.00000000000000))*(cj13)*(sj14)*(x662)))+(((IkReal(-1.00000000000000))*(sj13)*(sj14)*(x661))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((sj13)*(x662)))+(((IkReal(-1.00000000000000))*(cj13)*(x661)))))+IKsqr(((((IkReal(-1.09431753188062))*(cj14)*(r02)))+(((IkReal(-1.00000000000000))*(cj13)*(sj14)*(x662)))+(((IkReal(-1.00000000000000))*(sj13)*(sj14)*(x661)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((sj13)*(x662)))+(((IkReal(-1.00000000000000))*(cj13)*(x661)))), ((((IkReal(-1.09431753188062))*(cj14)*(r02)))+(((IkReal(-1.00000000000000))*(cj13)*(sj14)*(x662)))+(((IkReal(-1.00000000000000))*(sj13)*(sj14)*(x661)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x663=IKsin(j16);
IkReal x664=IKcos(j16);
IkReal x665=((IkReal(1.00000000000000))*(cj14));
IkReal x666=((IkReal(1.00000000000000))*(sj13));
IkReal x667=((sj14)*(x666));
IkReal x668=((IkReal(1.00000000000000))*(cj13)*(sj14));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x666)))+(((IkReal(0.913811550000000))*(x663)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(4.85237587652042e-11))*(x663)))+(((IkReal(-1.00000000000000))*(px)*(x666))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(x667)))+(((IkReal(-1.00000000000000))*(r00)*(x668)))+(((IkReal(-0.913811550000000))*(x664)))+(((IkReal(-1.00000000000000))*(r02)*(x665))));
evalcond[3]=((IkReal(-0.280000000000000))+(((IkReal(-1.00000000000000))*(py)*(x667)))+(((IkReal(-1.00000000000000))*(pz)*(x665)))+(((IkReal(-4.85237587652042e-11))*(x664)))+(((IkReal(-1.00000000000000))*(px)*(x668))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x669=((IkReal(1.00000000000000))*(sj14));
IkReal x670=((IkReal(1.00000000000000))*(cj14));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.406138466127514))+(((IkReal(-1.00000000000000))*(r02)*(x670)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x669)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x669))));
evalcond[2]=((IkReal(-0.583488578145101))+(((IkReal(-1.00000000000000))*(pz)*(x670)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x669)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x669))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x671=((IkReal(1.09431753188062))*(cj13));
IkReal x672=((IkReal(1.09431753188062))*(sj13));
if( IKabs(((((r00)*(x672)))+(((IkReal(-1.00000000000000))*(r01)*(x671))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj14)*(r01)*(x672)))+(((IkReal(-1.00000000000000))*(cj14)*(r00)*(x671)))+(((IkReal(1.09431753188062))*(r02)*(sj14))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(x672)))+(((IkReal(-1.00000000000000))*(r01)*(x671)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj14)*(r01)*(x672)))+(((IkReal(-1.00000000000000))*(cj14)*(r00)*(x671)))+(((IkReal(1.09431753188062))*(r02)*(sj14)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((r00)*(x672)))+(((IkReal(-1.00000000000000))*(r01)*(x671)))), ((((IkReal(-1.00000000000000))*(cj14)*(r01)*(x672)))+(((IkReal(-1.00000000000000))*(cj14)*(r00)*(x671)))+(((IkReal(1.09431753188062))*(r02)*(sj14)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x673=IKsin(j16);
IkReal x674=IKcos(j16);
IkReal x675=((cj14)*(sj13));
IkReal x676=((IkReal(1.00000000000000))*(sj14));
IkReal x677=((cj13)*(cj14));
IkReal x678=((IkReal(1.00000000000000))*(sj13));
evalcond[0]=((((IkReal(0.913811550000000))*(x673)))+(((IkReal(-1.00000000000000))*(r00)*(x678)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(4.85237587652042e-11))*(x673)))+(((IkReal(-1.00000000000000))*(px)*(x678))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x676)))+(((r01)*(x675)))+(((IkReal(0.913811550000000))*(x674)))+(((r00)*(x677))));
evalcond[3]=((IkReal(0.0300000000000000))+(((py)*(x675)))+(((IkReal(4.85237587652042e-11))*(x674)))+(((IkReal(-1.00000000000000))*(pz)*(x676)))+(((px)*(x677))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x679=((IkReal(1.00000000000000))*(sj14));
IkReal x680=((IkReal(1.00000000000000))*(cj14));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j15, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.406138466127514))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x679)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x679)))+(((IkReal(-1.00000000000000))*(r02)*(x680))));
evalcond[2]=((IkReal(0.0834885781451006))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x679)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x679)))+(((IkReal(-1.00000000000000))*(pz)*(x680))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x681=((IkReal(1.09431753188062))*(cj13));
IkReal x682=((IkReal(1.09431753188062))*(sj13));
if( IKabs(((((IkReal(-1.00000000000000))*(r01)*(x681)))+(((r00)*(x682))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj14)*(r01)*(x682)))+(((IkReal(-1.09431753188062))*(r02)*(sj14)))+(((cj14)*(r00)*(x681))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r01)*(x681)))+(((r00)*(x682)))))+IKsqr(((((cj14)*(r01)*(x682)))+(((IkReal(-1.09431753188062))*(r02)*(sj14)))+(((cj14)*(r00)*(x681)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r01)*(x681)))+(((r00)*(x682)))), ((((cj14)*(r01)*(x682)))+(((IkReal(-1.09431753188062))*(r02)*(sj14)))+(((cj14)*(r00)*(x681)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x683=IKsin(j16);
IkReal x684=IKcos(j16);
IkReal x685=((cj14)*(sj13));
IkReal x686=((IkReal(1.00000000000000))*(sj14));
IkReal x687=((cj13)*(cj14));
IkReal x688=((IkReal(1.00000000000000))*(sj13));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x688)))+(((IkReal(0.913811550000000))*(x683)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x688)))+(((IkReal(4.85237587652042e-11))*(x683))));
evalcond[2]=((((IkReal(-0.913811550000000))*(x684)))+(((IkReal(-1.00000000000000))*(r02)*(x686)))+(((r01)*(x685)))+(((r00)*(x687))));
evalcond[3]=((IkReal(-0.0300000000000000))+(((px)*(x687)))+(((IkReal(-4.85237587652042e-11))*(x684)))+(((IkReal(-1.00000000000000))*(pz)*(x686)))+(((py)*(x685))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x689=((IkReal(20000000.0000000))*(cj14));
if( IKabs(((IkReal(1957803814.40943))+(((IkReal(-20608461204.3098))*(cj13)*(py)))+(((IkReal(20608461204.3098))*(px)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.47158765940308e-8))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj15)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x689)))+(((IkReal(20000000.0000000))*(r02)*(sj14)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x689))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1957803814.40943))+(((IkReal(-20608461204.3098))*(cj13)*(py)))+(((IkReal(20608461204.3098))*(px)*(sj13)))))+IKsqr(((IkReal(5.47158765940308e-8))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj15)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x689)))+(((IkReal(20000000.0000000))*(r02)*(sj14)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x689)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(1957803814.40943))+(((IkReal(-20608461204.3098))*(cj13)*(py)))+(((IkReal(20608461204.3098))*(px)*(sj13)))), ((IkReal(5.47158765940308e-8))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj15)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x689)))+(((IkReal(20000000.0000000))*(r02)*(sj14)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x689)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x690=IKsin(j16);
IkReal x691=IKcos(j16);
IkReal x692=((r01)*(sj13));
IkReal x693=((cj13)*(r00));
IkReal x694=((IkReal(1.00000000000000))*(sj14));
IkReal x695=((IkReal(1.00000000000000))*(cj14));
IkReal x696=((IkReal(1.00000000000000))*(sj13));
IkReal x697=((cj13)*(px));
IkReal x698=((py)*(sj13));
IkReal x699=((sj15)*(x691));
IkReal x700=((cj15)*(x691));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x696)))+(((IkReal(0.913811550000000))*(x690)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x696)))+(((IkReal(4.85237587652042e-11))*(x690))));
evalcond[2]=((((IkReal(0.406138466127514))*(sj15)))+(((IkReal(0.913811550000000))*(x700)))+(((cj14)*(x693)))+(((cj14)*(x692)))+(((IkReal(-1.00000000000000))*(r02)*(x694))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x693)*(x694)))+(((IkReal(-0.406138466127514))*(cj15)))+(((IkReal(-1.00000000000000))*(x692)*(x694)))+(((IkReal(-1.00000000000000))*(r02)*(x695)))+(((IkReal(0.913811550000000))*(x699))));
evalcond[4]=((((IkReal(0.333488578145101))*(sj15)))+(((cj14)*(x698)))+(((cj14)*(x697)))+(((IkReal(0.0300000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(pz)*(x694)))+(((IkReal(4.85237587652042e-11))*(x700))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x695)))+(((IkReal(4.85237587652042e-11))*(x699)))+(((IkReal(-1.00000000000000))*(x694)*(x697)))+(((IkReal(-1.00000000000000))*(x694)*(x698)))+(((IkReal(0.0300000000000000))*(sj15)))+(((IkReal(-0.333488578145101))*(cj15))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x701=((IkReal(20000000.0000000))*(sj14));
if( IKabs(((((IkReal(-1.09431753188062))*(cj13)*(r01)))+(((IkReal(1.09431753188062))*(r00)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.47158765940308e-8))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((cj13)*(r00)*(x701)))+(((IkReal(20000000.0000000))*(cj14)*(r02)))+(((r01)*(sj13)*(x701)))+(((IkReal(8122769.32255028))*(cj15))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.09431753188062))*(cj13)*(r01)))+(((IkReal(1.09431753188062))*(r00)*(sj13)))))+IKsqr(((IkReal(5.47158765940308e-8))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((cj13)*(r00)*(x701)))+(((IkReal(20000000.0000000))*(cj14)*(r02)))+(((r01)*(sj13)*(x701)))+(((IkReal(8122769.32255028))*(cj15)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IkReal(-1.09431753188062))*(cj13)*(r01)))+(((IkReal(1.09431753188062))*(r00)*(sj13)))), ((IkReal(5.47158765940308e-8))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((cj13)*(r00)*(x701)))+(((IkReal(20000000.0000000))*(cj14)*(r02)))+(((r01)*(sj13)*(x701)))+(((IkReal(8122769.32255028))*(cj15)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x702=IKsin(j16);
IkReal x703=IKcos(j16);
IkReal x704=((r01)*(sj13));
IkReal x705=((cj13)*(r00));
IkReal x706=((IkReal(1.00000000000000))*(sj14));
IkReal x707=((IkReal(1.00000000000000))*(cj14));
IkReal x708=((IkReal(1.00000000000000))*(sj13));
IkReal x709=((cj13)*(px));
IkReal x710=((py)*(sj13));
IkReal x711=((sj15)*(x703));
IkReal x712=((cj15)*(x703));
evalcond[0]=((((IkReal(0.913811550000000))*(x702)))+(((IkReal(-1.00000000000000))*(r00)*(x708)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x708)))+(((IkReal(4.85237587652042e-11))*(x702))));
evalcond[2]=((((cj14)*(x704)))+(((cj14)*(x705)))+(((IkReal(-1.00000000000000))*(r02)*(x706)))+(((IkReal(0.406138466127514))*(sj15)))+(((IkReal(0.913811550000000))*(x712))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r02)*(x707)))+(((IkReal(-0.406138466127514))*(cj15)))+(((IkReal(0.913811550000000))*(x711)))+(((IkReal(-1.00000000000000))*(x704)*(x706)))+(((IkReal(-1.00000000000000))*(x705)*(x706))));
evalcond[4]=((((IkReal(0.333488578145101))*(sj15)))+(((IkReal(-1.00000000000000))*(pz)*(x706)))+(((cj14)*(x710)))+(((cj14)*(x709)))+(((IkReal(0.0300000000000000))*(cj15)))+(((IkReal(4.85237587652042e-11))*(x712))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x707)))+(((IkReal(-1.00000000000000))*(x706)*(x709)))+(((IkReal(-1.00000000000000))*(x706)*(x710)))+(((IkReal(4.85237587652042e-11))*(x711)))+(((IkReal(0.0300000000000000))*(sj15)))+(((IkReal(-0.333488578145101))*(cj15))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x713=((IkReal(20000000.0000000))*(cj14));
if( IKabs(((((IkReal(-1.09431753188062))*(cj13)*(r01)))+(((IkReal(1.09431753188062))*(r00)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.47158765940308e-8))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj15)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x713)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x713)))+(((IkReal(20000000.0000000))*(r02)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.09431753188062))*(cj13)*(r01)))+(((IkReal(1.09431753188062))*(r00)*(sj13)))))+IKsqr(((IkReal(5.47158765940308e-8))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj15)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x713)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x713)))+(((IkReal(20000000.0000000))*(r02)*(sj14)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IkReal(-1.09431753188062))*(cj13)*(r01)))+(((IkReal(1.09431753188062))*(r00)*(sj13)))), ((IkReal(5.47158765940308e-8))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj15)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x713)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x713)))+(((IkReal(20000000.0000000))*(r02)*(sj14)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x714=IKsin(j16);
IkReal x715=IKcos(j16);
IkReal x716=((r01)*(sj13));
IkReal x717=((cj13)*(r00));
IkReal x718=((IkReal(1.00000000000000))*(sj14));
IkReal x719=((IkReal(1.00000000000000))*(cj14));
IkReal x720=((IkReal(1.00000000000000))*(sj13));
IkReal x721=((cj13)*(px));
IkReal x722=((py)*(sj13));
IkReal x723=((sj15)*(x715));
IkReal x724=((cj15)*(x715));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x720)))+(((IkReal(0.913811550000000))*(x714)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x720)))+(((IkReal(4.85237587652042e-11))*(x714))));
evalcond[2]=((((cj14)*(x717)))+(((cj14)*(x716)))+(((IkReal(-1.00000000000000))*(r02)*(x718)))+(((IkReal(0.406138466127514))*(sj15)))+(((IkReal(0.913811550000000))*(x724))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r02)*(x719)))+(((IkReal(0.913811550000000))*(x723)))+(((IkReal(-1.00000000000000))*(x717)*(x718)))+(((IkReal(-0.406138466127514))*(cj15)))+(((IkReal(-1.00000000000000))*(x716)*(x718))));
evalcond[4]=((((IkReal(0.333488578145101))*(sj15)))+(((IkReal(-1.00000000000000))*(pz)*(x718)))+(((cj14)*(x722)))+(((cj14)*(x721)))+(((IkReal(4.85237587652042e-11))*(x724)))+(((IkReal(0.0300000000000000))*(cj15))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x719)))+(((IkReal(4.85237587652042e-11))*(x723)))+(((IkReal(0.0300000000000000))*(sj15)))+(((IkReal(-0.333488578145101))*(cj15)))+(((IkReal(-1.00000000000000))*(x718)*(x721)))+(((IkReal(-1.00000000000000))*(x718)*(x722))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(0.418224329579229))+(j17)), IkReal(6.28318530717959))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
IkReal x725=((IkReal(1.00000000000000))*(sj14));
IkReal x726=((cj13)*(cj14));
IkReal x727=((cj14)*(sj13));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.406138466127514))+(((IkReal(-1.00000000000000))*(r02)*(x725)))+(((r01)*(x727)))+(((r00)*(x726))));
evalcond[2]=((IkReal(0.136511421854899))+(((py)*(x727)))+(((px)*(x726)))+(((IkReal(-1.00000000000000))*(pz)*(x725))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x728=((IkReal(1.09431753188062))*(r01));
IkReal x729=((IkReal(1.09431753188062))*(r00));
if( IKabs(((((cj13)*(x728)))+(((IkReal(-1.00000000000000))*(sj13)*(x729))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(sj13)*(sj14)*(x728)))+(((IkReal(-1.00000000000000))*(cj13)*(sj14)*(x729)))+(((IkReal(-1.09431753188062))*(cj14)*(r02))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj13)*(x728)))+(((IkReal(-1.00000000000000))*(sj13)*(x729)))))+IKsqr(((((IkReal(-1.00000000000000))*(sj13)*(sj14)*(x728)))+(((IkReal(-1.00000000000000))*(cj13)*(sj14)*(x729)))+(((IkReal(-1.09431753188062))*(cj14)*(r02)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((cj13)*(x728)))+(((IkReal(-1.00000000000000))*(sj13)*(x729)))), ((((IkReal(-1.00000000000000))*(sj13)*(sj14)*(x728)))+(((IkReal(-1.00000000000000))*(cj13)*(sj14)*(x729)))+(((IkReal(-1.09431753188062))*(cj14)*(r02)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x730=IKsin(j16);
IkReal x731=IKcos(j16);
IkReal x732=((IkReal(1.00000000000000))*(cj14));
IkReal x733=((IkReal(1.00000000000000))*(sj13));
IkReal x734=((sj14)*(x733));
IkReal x735=((IkReal(1.00000000000000))*(cj13)*(sj14));
evalcond[0]=((((IkReal(-0.913811550000000))*(x730)))+(((IkReal(-1.00000000000000))*(r00)*(x733)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x733)))+(((IkReal(-4.85237587652042e-11))*(x730))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(x734)))+(((IkReal(-0.913811550000000))*(x731)))+(((IkReal(-1.00000000000000))*(r02)*(x732)))+(((IkReal(-1.00000000000000))*(r00)*(x735))));
evalcond[3]=((IkReal(-0.220000000000000))+(((IkReal(-1.00000000000000))*(px)*(x735)))+(((IkReal(-4.85237587652042e-11))*(x731)))+(((IkReal(-1.00000000000000))*(pz)*(x732)))+(((IkReal(-1.00000000000000))*(py)*(x734))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x736=((IkReal(1.00000000000000))*(sj14));
IkReal x737=((cj13)*(cj14));
IkReal x738=((cj14)*(sj13));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.406138466127514))+(((IkReal(-1.00000000000000))*(r02)*(x736)))+(((r00)*(x737)))+(((r01)*(x738))));
evalcond[2]=((IkReal(-0.136511421854899))+(((px)*(x737)))+(((py)*(x738)))+(((IkReal(-1.00000000000000))*(pz)*(x736))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x739=((IkReal(1.09431753188062))*(r01));
IkReal x740=((IkReal(1.09431753188062))*(r00));
if( IKabs(((((cj13)*(x739)))+(((IkReal(-1.00000000000000))*(sj13)*(x740))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(1.09431753188062))*(cj14)*(r02)))+(((sj13)*(sj14)*(x739)))+(((cj13)*(sj14)*(x740))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj13)*(x739)))+(((IkReal(-1.00000000000000))*(sj13)*(x740)))))+IKsqr(((((IkReal(1.09431753188062))*(cj14)*(r02)))+(((sj13)*(sj14)*(x739)))+(((cj13)*(sj14)*(x740)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((cj13)*(x739)))+(((IkReal(-1.00000000000000))*(sj13)*(x740)))), ((((IkReal(1.09431753188062))*(cj14)*(r02)))+(((sj13)*(sj14)*(x739)))+(((cj13)*(sj14)*(x740)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x741=IKsin(j16);
IkReal x742=IKcos(j16);
IkReal x743=((IkReal(1.00000000000000))*(cj14));
IkReal x744=((IkReal(1.00000000000000))*(sj13));
IkReal x745=((sj14)*(x744));
IkReal x746=((IkReal(1.00000000000000))*(cj13)*(sj14));
evalcond[0]=((((IkReal(-0.913811550000000))*(x741)))+(((IkReal(-1.00000000000000))*(r00)*(x744)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x744)))+(((IkReal(-4.85237587652042e-11))*(x741))));
evalcond[2]=((((IkReal(0.913811550000000))*(x742)))+(((IkReal(-1.00000000000000))*(r02)*(x743)))+(((IkReal(-1.00000000000000))*(r00)*(x746)))+(((IkReal(-1.00000000000000))*(r01)*(x745))));
evalcond[3]=((IkReal(-0.280000000000000))+(((IkReal(4.85237587652042e-11))*(x742)))+(((IkReal(-1.00000000000000))*(px)*(x746)))+(((IkReal(-1.00000000000000))*(pz)*(x743)))+(((IkReal(-1.00000000000000))*(py)*(x745))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x747=((IkReal(1.00000000000000))*(sj14));
IkReal x748=((IkReal(1.00000000000000))*(cj14));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.406138466127514))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x747)))+(((IkReal(-1.00000000000000))*(r02)*(x748)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x747))));
evalcond[2]=((IkReal(-0.386511421854899))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x747)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x747)))+(((IkReal(-1.00000000000000))*(pz)*(x748))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x749=((IkReal(1.09431753188062))*(cj13));
IkReal x750=((IkReal(1.09431753188062))*(sj13));
if( IKabs(((((IkReal(-1.00000000000000))*(r00)*(x750)))+(((r01)*(x749))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj14)*(r01)*(x750)))+(((IkReal(-1.09431753188062))*(r02)*(sj14)))+(((cj14)*(r00)*(x749))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r00)*(x750)))+(((r01)*(x749)))))+IKsqr(((((cj14)*(r01)*(x750)))+(((IkReal(-1.09431753188062))*(r02)*(sj14)))+(((cj14)*(r00)*(x749)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r00)*(x750)))+(((r01)*(x749)))), ((((cj14)*(r01)*(x750)))+(((IkReal(-1.09431753188062))*(r02)*(sj14)))+(((cj14)*(r00)*(x749)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x751=IKsin(j16);
IkReal x752=IKcos(j16);
IkReal x753=((cj14)*(sj13));
IkReal x754=((IkReal(1.00000000000000))*(sj14));
IkReal x755=((cj13)*(cj14));
IkReal x756=((IkReal(1.00000000000000))*(sj13));
evalcond[0]=((((IkReal(-0.913811550000000))*(x751)))+(((IkReal(-1.00000000000000))*(r00)*(x756)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x756)))+(((IkReal(-4.85237587652042e-11))*(x751))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x754)))+(((IkReal(-0.913811550000000))*(x752)))+(((r01)*(x753)))+(((r00)*(x755))));
evalcond[3]=((IkReal(0.0300000000000000))+(((py)*(x753)))+(((px)*(x755)))+(((IkReal(-4.85237587652042e-11))*(x752)))+(((IkReal(-1.00000000000000))*(pz)*(x754))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x757=((IkReal(1.00000000000000))*(sj14));
IkReal x758=((IkReal(1.00000000000000))*(cj14));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j15, IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.406138466127514))+(((IkReal(-1.00000000000000))*(r02)*(x758)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x757)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x757))));
evalcond[2]=((IkReal(-0.113488578145101))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x757)))+(((IkReal(-1.00000000000000))*(pz)*(x758)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x757))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x759=((IkReal(1.09431753188062))*(cj13));
IkReal x760=((IkReal(1.09431753188062))*(sj13));
if( IKabs(((((IkReal(-1.00000000000000))*(r00)*(x760)))+(((r01)*(x759))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj14)*(r00)*(x759)))+(((IkReal(-1.00000000000000))*(cj14)*(r01)*(x760)))+(((IkReal(1.09431753188062))*(r02)*(sj14))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r00)*(x760)))+(((r01)*(x759)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj14)*(r00)*(x759)))+(((IkReal(-1.00000000000000))*(cj14)*(r01)*(x760)))+(((IkReal(1.09431753188062))*(r02)*(sj14)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r00)*(x760)))+(((r01)*(x759)))), ((((IkReal(-1.00000000000000))*(cj14)*(r00)*(x759)))+(((IkReal(-1.00000000000000))*(cj14)*(r01)*(x760)))+(((IkReal(1.09431753188062))*(r02)*(sj14)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x761=IKsin(j16);
IkReal x762=IKcos(j16);
IkReal x763=((cj14)*(sj13));
IkReal x764=((IkReal(1.00000000000000))*(sj14));
IkReal x765=((cj13)*(cj14));
IkReal x766=((IkReal(1.00000000000000))*(sj13));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x766)))+(((IkReal(-0.913811550000000))*(x761)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-4.85237587652042e-11))*(x761)))+(((IkReal(-1.00000000000000))*(px)*(x766))));
evalcond[2]=((((IkReal(0.913811550000000))*(x762)))+(((IkReal(-1.00000000000000))*(r02)*(x764)))+(((r00)*(x765)))+(((r01)*(x763))));
evalcond[3]=((IkReal(-0.0300000000000000))+(((px)*(x765)))+(((IkReal(4.85237587652042e-11))*(x762)))+(((py)*(x763)))+(((IkReal(-1.00000000000000))*(pz)*(x764))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x767=((IkReal(20000000.0000000))*(cj14));
if( IKabs(((IkReal(-1957803814.40943))+(((IkReal(-20608461204.3098))*(px)*(sj13)))+(((IkReal(20608461204.3098))*(cj13)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.47158765940308e-8))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj15)))+(((cj13)*(r00)*(x767)))+(((r01)*(sj13)*(x767)))+(((IkReal(-20000000.0000000))*(r02)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1957803814.40943))+(((IkReal(-20608461204.3098))*(px)*(sj13)))+(((IkReal(20608461204.3098))*(cj13)*(py)))))+IKsqr(((IkReal(5.47158765940308e-8))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj15)))+(((cj13)*(r00)*(x767)))+(((r01)*(sj13)*(x767)))+(((IkReal(-20000000.0000000))*(r02)*(sj14)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-1957803814.40943))+(((IkReal(-20608461204.3098))*(px)*(sj13)))+(((IkReal(20608461204.3098))*(cj13)*(py)))), ((IkReal(5.47158765940308e-8))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj15)))+(((cj13)*(r00)*(x767)))+(((r01)*(sj13)*(x767)))+(((IkReal(-20000000.0000000))*(r02)*(sj14)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x768=IKsin(j16);
IkReal x769=IKcos(j16);
IkReal x770=((r01)*(sj13));
IkReal x771=((cj13)*(r00));
IkReal x772=((IkReal(1.00000000000000))*(sj14));
IkReal x773=((IkReal(1.00000000000000))*(sj13));
IkReal x774=((cj13)*(px));
IkReal x775=((py)*(sj13));
IkReal x776=((IkReal(1.00000000000000))*(cj14));
IkReal x777=((IkReal(4.85237587652042e-11))*(x769));
IkReal x778=((IkReal(0.913811550000000))*(x769));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x773)))+(((IkReal(-0.913811550000000))*(x768)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x773)))+(((IkReal(-4.85237587652042e-11))*(x768))));
evalcond[2]=((((IkReal(-0.406138466127514))*(sj15)))+(((IkReal(-1.00000000000000))*(r02)*(x772)))+(((IkReal(-1.00000000000000))*(cj15)*(x778)))+(((cj14)*(x771)))+(((cj14)*(x770))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj15)*(x778)))+(((IkReal(-1.00000000000000))*(r02)*(x776)))+(((IkReal(-1.00000000000000))*(x771)*(x772)))+(((IkReal(0.406138466127514))*(cj15)))+(((IkReal(-1.00000000000000))*(x770)*(x772))));
evalcond[4]=((((IkReal(0.136511421854899))*(sj15)))+(((IkReal(0.0300000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(pz)*(x772)))+(((IkReal(-1.00000000000000))*(cj15)*(x777)))+(((cj14)*(x775)))+(((cj14)*(x774))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(-1.00000000000000))*(sj15)*(x777)))+(((IkReal(-0.136511421854899))*(cj15)))+(((IkReal(-1.00000000000000))*(pz)*(x776)))+(((IkReal(-1.00000000000000))*(x772)*(x775)))+(((IkReal(-1.00000000000000))*(x772)*(x774)))+(((IkReal(0.0300000000000000))*(sj15))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x779=((IkReal(20000000.0000000))*(sj14));
if( IKabs(((((IkReal(-1.09431753188062))*(r00)*(sj13)))+(((IkReal(1.09431753188062))*(cj13)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.47158765940308e-8))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((IkReal(-20000000.0000000))*(cj14)*(r02)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x779)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x779)))+(((IkReal(8122769.32255028))*(cj15))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.09431753188062))*(r00)*(sj13)))+(((IkReal(1.09431753188062))*(cj13)*(r01)))))+IKsqr(((IkReal(5.47158765940308e-8))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((IkReal(-20000000.0000000))*(cj14)*(r02)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x779)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x779)))+(((IkReal(8122769.32255028))*(cj15)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IkReal(-1.09431753188062))*(r00)*(sj13)))+(((IkReal(1.09431753188062))*(cj13)*(r01)))), ((IkReal(5.47158765940308e-8))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((IkReal(-20000000.0000000))*(cj14)*(r02)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x779)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x779)))+(((IkReal(8122769.32255028))*(cj15)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x780=IKsin(j16);
IkReal x781=IKcos(j16);
IkReal x782=((r01)*(sj13));
IkReal x783=((cj13)*(r00));
IkReal x784=((IkReal(1.00000000000000))*(sj14));
IkReal x785=((IkReal(1.00000000000000))*(sj13));
IkReal x786=((cj13)*(px));
IkReal x787=((py)*(sj13));
IkReal x788=((IkReal(1.00000000000000))*(cj14));
IkReal x789=((IkReal(4.85237587652042e-11))*(x781));
IkReal x790=((IkReal(0.913811550000000))*(x781));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x785)))+(((IkReal(-0.913811550000000))*(x780)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x785)))+(((IkReal(-4.85237587652042e-11))*(x780))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj15)*(x790)))+(((cj14)*(x782)))+(((cj14)*(x783)))+(((IkReal(-0.406138466127514))*(sj15)))+(((IkReal(-1.00000000000000))*(r02)*(x784))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x782)*(x784)))+(((IkReal(0.406138466127514))*(cj15)))+(((IkReal(-1.00000000000000))*(sj15)*(x790)))+(((IkReal(-1.00000000000000))*(r02)*(x788)))+(((IkReal(-1.00000000000000))*(x783)*(x784))));
evalcond[4]=((((IkReal(0.136511421854899))*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(x789)))+(((cj14)*(x786)))+(((cj14)*(x787)))+(((IkReal(0.0300000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(pz)*(x784))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(-0.136511421854899))*(cj15)))+(((IkReal(-1.00000000000000))*(x784)*(x787)))+(((IkReal(-1.00000000000000))*(x784)*(x786)))+(((IkReal(0.0300000000000000))*(sj15)))+(((IkReal(-1.00000000000000))*(sj15)*(x789)))+(((IkReal(-1.00000000000000))*(pz)*(x788))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x791=((IkReal(20000000.0000000))*(cj14));
if( IKabs(((((IkReal(-1.09431753188062))*(r00)*(sj13)))+(((IkReal(1.09431753188062))*(cj13)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.47158765940308e-8))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj15)))+(((cj13)*(r00)*(x791)))+(((IkReal(-20000000.0000000))*(r02)*(sj14)))+(((r01)*(sj13)*(x791))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.09431753188062))*(r00)*(sj13)))+(((IkReal(1.09431753188062))*(cj13)*(r01)))))+IKsqr(((IkReal(5.47158765940308e-8))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj15)))+(((cj13)*(r00)*(x791)))+(((IkReal(-20000000.0000000))*(r02)*(sj14)))+(((r01)*(sj13)*(x791)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IkReal(-1.09431753188062))*(r00)*(sj13)))+(((IkReal(1.09431753188062))*(cj13)*(r01)))), ((IkReal(5.47158765940308e-8))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj15)))+(((cj13)*(r00)*(x791)))+(((IkReal(-20000000.0000000))*(r02)*(sj14)))+(((r01)*(sj13)*(x791)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x792=IKsin(j16);
IkReal x793=IKcos(j16);
IkReal x794=((r01)*(sj13));
IkReal x795=((cj13)*(r00));
IkReal x796=((IkReal(1.00000000000000))*(sj14));
IkReal x797=((IkReal(1.00000000000000))*(sj13));
IkReal x798=((cj13)*(px));
IkReal x799=((py)*(sj13));
IkReal x800=((IkReal(1.00000000000000))*(cj14));
IkReal x801=((IkReal(4.85237587652042e-11))*(x793));
IkReal x802=((IkReal(0.913811550000000))*(x793));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x797)))+(((IkReal(-0.913811550000000))*(x792)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x797)))+(((IkReal(-4.85237587652042e-11))*(x792))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj15)*(x802)))+(((cj14)*(x795)))+(((cj14)*(x794)))+(((IkReal(-0.406138466127514))*(sj15)))+(((IkReal(-1.00000000000000))*(r02)*(x796))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x794)*(x796)))+(((IkReal(-1.00000000000000))*(x795)*(x796)))+(((IkReal(-1.00000000000000))*(r02)*(x800)))+(((IkReal(-1.00000000000000))*(sj15)*(x802)))+(((IkReal(0.406138466127514))*(cj15))));
evalcond[4]=((((IkReal(0.136511421854899))*(sj15)))+(((IkReal(-1.00000000000000))*(cj15)*(x801)))+(((cj14)*(x799)))+(((cj14)*(x798)))+(((IkReal(0.0300000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(pz)*(x796))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(-1.00000000000000))*(x796)*(x798)))+(((IkReal(-1.00000000000000))*(x796)*(x799)))+(((IkReal(-0.136511421854899))*(cj15)))+(((IkReal(-1.00000000000000))*(sj15)*(x801)))+(((IkReal(0.0300000000000000))*(sj15)))+(((IkReal(-1.00000000000000))*(pz)*(x800))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x803=((IkReal(1.00000000000000))*(sj14));
IkReal x804=((r01)*(sj13));
IkReal x805=((cj13)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j17)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj13)))+(((cj13)*(r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x803)))+(((cj14)*(x805)))+(((cj14)*(x804)))+(((IkReal(-1.00000000000000))*(sj15))));
evalcond[3]=((cj15)+(((IkReal(-1.00000000000000))*(cj14)*(r02)))+(((IkReal(-1.00000000000000))*(x803)*(x805)))+(((IkReal(-1.00000000000000))*(x803)*(x804))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x806=((IkReal(1.00000000000000))*(sj14));
IkReal x807=((r01)*(sj13));
IkReal x808=((IkReal(1.00000000000000))*(cj14));
IkReal x809=((cj13)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj13)))+(((cj13)*(r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x806)))+(((cj14)*(x807)))+(((cj14)*(x809))));
evalcond[3]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x806)*(x809)))+(((IkReal(-1.00000000000000))*(x806)*(x807)))+(((IkReal(-1.00000000000000))*(r02)*(x808))));
evalcond[4]=((IkReal(-0.445000000000000))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x806)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x806)))+(((IkReal(-1.00000000000000))*(pz)*(x808))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x810=((IkReal(11.1111111111111))*(cj13));
IkReal x811=((IkReal(11.1111111111111))*(sj13));
if( IKabs(((IkReal(1.05555555555556))+(((px)*(x811)))+(((IkReal(-1.00000000000000))*(py)*(x810))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.333333333333333))+(((IkReal(-1.00000000000000))*(cj14)*(py)*(x811)))+(((IkReal(11.1111111111111))*(pz)*(sj14)))+(((IkReal(-1.00000000000000))*(cj14)*(px)*(x810))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.05555555555556))+(((px)*(x811)))+(((IkReal(-1.00000000000000))*(py)*(x810)))))+IKsqr(((IkReal(-0.333333333333333))+(((IkReal(-1.00000000000000))*(cj14)*(py)*(x811)))+(((IkReal(11.1111111111111))*(pz)*(sj14)))+(((IkReal(-1.00000000000000))*(cj14)*(px)*(x810)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(1.05555555555556))+(((px)*(x811)))+(((IkReal(-1.00000000000000))*(py)*(x810)))), ((IkReal(-0.333333333333333))+(((IkReal(-1.00000000000000))*(cj14)*(py)*(x811)))+(((IkReal(11.1111111111111))*(pz)*(sj14)))+(((IkReal(-1.00000000000000))*(cj14)*(px)*(x810)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(0.0900000000000000))*(IKsin(j16))))+(((IkReal(-1.00000000000000))*(px)*(sj13))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(0.0900000000000000))*(IKcos(j16))))+(((IkReal(-1.00000000000000))*(pz)*(sj14)))+(((cj13)*(cj14)*(px)))+(((cj14)*(py)*(sj13))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x812=((IkReal(1.00000000000000))*(sj14));
IkReal x813=((r01)*(sj13));
IkReal x814=((IkReal(1.00000000000000))*(cj14));
IkReal x815=((cj13)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j15, IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj13)))+(((cj13)*(r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x812)))+(((cj14)*(x815)))+(((cj14)*(x813))));
evalcond[3]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x812)*(x815)))+(((IkReal(-1.00000000000000))*(x812)*(x813)))+(((IkReal(-1.00000000000000))*(r02)*(x814))));
evalcond[4]=((IkReal(-0.0550000000000000))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x812)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x812)))+(((IkReal(-1.00000000000000))*(pz)*(x814))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x816=((IkReal(11.1111111111111))*(cj13));
IkReal x817=((IkReal(11.1111111111111))*(sj13));
if( IKabs(((IkReal(1.05555555555556))+(((px)*(x817)))+(((IkReal(-1.00000000000000))*(py)*(x816))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.333333333333333))+(((IkReal(-11.1111111111111))*(pz)*(sj14)))+(((cj14)*(py)*(x817)))+(((cj14)*(px)*(x816))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.05555555555556))+(((px)*(x817)))+(((IkReal(-1.00000000000000))*(py)*(x816)))))+IKsqr(((IkReal(-0.333333333333333))+(((IkReal(-11.1111111111111))*(pz)*(sj14)))+(((cj14)*(py)*(x817)))+(((cj14)*(px)*(x816)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(1.05555555555556))+(((px)*(x817)))+(((IkReal(-1.00000000000000))*(py)*(x816)))), ((IkReal(-0.333333333333333))+(((IkReal(-11.1111111111111))*(pz)*(sj14)))+(((cj14)*(py)*(x817)))+(((cj14)*(px)*(x816)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(0.0900000000000000))*(IKsin(j16))))+(((IkReal(-1.00000000000000))*(px)*(sj13))));
evalcond[1]=((IkReal(-0.0300000000000000))+(((IkReal(-0.0900000000000000))*(IKcos(j16))))+(((IkReal(-1.00000000000000))*(pz)*(sj14)))+(((cj13)*(cj14)*(px)))+(((cj14)*(py)*(sj13))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x818=((IkReal(1.00000000000000))*(sj14));
IkReal x819=((r01)*(sj13));
IkReal x820=((cj13)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj13)))+(((cj13)*(r01))));
evalcond[2]=((IkReal(-1.00000000000000))+(((cj14)*(x820)))+(((IkReal(-1.00000000000000))*(r02)*(x818)))+(((cj14)*(x819))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x818)*(x819)))+(((IkReal(-1.00000000000000))*(x818)*(x820)))+(((IkReal(-1.00000000000000))*(cj14)*(r02))));
evalcond[4]=((IkReal(0.195000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x818)))+(((cj13)*(cj14)*(px)))+(((cj14)*(py)*(sj13))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x821=((IkReal(11.1111111111111))*(cj13));
IkReal x822=((IkReal(11.1111111111111))*(sj13));
if( IKabs(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(py)*(x821)))+(((px)*(x822))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(2.44444444444444))+(((px)*(sj14)*(x821)))+(((IkReal(11.1111111111111))*(cj14)*(pz)))+(((py)*(sj14)*(x822))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(py)*(x821)))+(((px)*(x822)))))+IKsqr(((IkReal(2.44444444444444))+(((px)*(sj14)*(x821)))+(((IkReal(11.1111111111111))*(cj14)*(pz)))+(((py)*(sj14)*(x822)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(py)*(x821)))+(((px)*(x822)))), ((IkReal(2.44444444444444))+(((px)*(sj14)*(x821)))+(((IkReal(11.1111111111111))*(cj14)*(pz)))+(((py)*(sj14)*(x822)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
IkReal x823=((IkReal(1.00000000000000))*(sj14));
evalcond[0]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(0.0900000000000000))*(IKsin(j16))))+(((IkReal(-1.00000000000000))*(px)*(sj13))));
evalcond[1]=((IkReal(-0.220000000000000))+(((IkReal(0.0900000000000000))*(IKcos(j16))))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x823)))+(((IkReal(-1.00000000000000))*(cj14)*(pz)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x823))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x824=((IkReal(1.00000000000000))*(sj14));
IkReal x825=((r01)*(sj13));
IkReal x826=((cj13)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj13)))+(((cj13)*(r01))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r02)*(x824)))+(((cj14)*(x825)))+(((cj14)*(x826))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x824)*(x825)))+(((IkReal(-1.00000000000000))*(x824)*(x826)))+(((IkReal(-1.00000000000000))*(cj14)*(r02))));
evalcond[4]=((IkReal(-0.195000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x824)))+(((cj13)*(cj14)*(px)))+(((cj14)*(py)*(sj13))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x827=((IkReal(11.1111111111111))*(cj13));
IkReal x828=((IkReal(11.1111111111111))*(sj13));
if( IKabs(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(py)*(x827)))+(((px)*(x828))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-3.11111111111111))+(((IkReal(-11.1111111111111))*(cj14)*(pz)))+(((IkReal(-1.00000000000000))*(px)*(sj14)*(x827)))+(((IkReal(-1.00000000000000))*(py)*(sj14)*(x828))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(py)*(x827)))+(((px)*(x828)))))+IKsqr(((IkReal(-3.11111111111111))+(((IkReal(-11.1111111111111))*(cj14)*(pz)))+(((IkReal(-1.00000000000000))*(px)*(sj14)*(x827)))+(((IkReal(-1.00000000000000))*(py)*(sj14)*(x828)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(py)*(x827)))+(((px)*(x828)))), ((IkReal(-3.11111111111111))+(((IkReal(-11.1111111111111))*(cj14)*(pz)))+(((IkReal(-1.00000000000000))*(px)*(sj14)*(x827)))+(((IkReal(-1.00000000000000))*(py)*(sj14)*(x828)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
IkReal x829=((IkReal(1.00000000000000))*(sj14));
evalcond[0]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(0.0900000000000000))*(IKsin(j16))))+(((IkReal(-1.00000000000000))*(px)*(sj13))));
evalcond[1]=((IkReal(-0.280000000000000))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x829)))+(((IkReal(-0.0900000000000000))*(IKcos(j16))))+(((IkReal(-1.00000000000000))*(cj14)*(pz)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x829))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x830=((IkReal(100.000000000000))*(sj14));
if( IKabs(((IkReal(1.05555555555556))+(((IkReal(-11.1111111111111))*(cj13)*(py)))+(((IkReal(11.1111111111111))*(px)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.111111111111111))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((IkReal(25.0000000000000))+(((IkReal(-3.00000000000000))*(sj15)))+(((py)*(sj13)*(x830)))+(((IkReal(19.5000000000000))*(cj15)))+(((IkReal(100.000000000000))*(cj14)*(pz)))+(((cj13)*(px)*(x830))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.05555555555556))+(((IkReal(-11.1111111111111))*(cj13)*(py)))+(((IkReal(11.1111111111111))*(px)*(sj13)))))+IKsqr(((IkReal(0.111111111111111))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((IkReal(25.0000000000000))+(((IkReal(-3.00000000000000))*(sj15)))+(((py)*(sj13)*(x830)))+(((IkReal(19.5000000000000))*(cj15)))+(((IkReal(100.000000000000))*(cj14)*(pz)))+(((cj13)*(px)*(x830)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(1.05555555555556))+(((IkReal(-11.1111111111111))*(cj13)*(py)))+(((IkReal(11.1111111111111))*(px)*(sj13)))), ((IkReal(0.111111111111111))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((IkReal(25.0000000000000))+(((IkReal(-3.00000000000000))*(sj15)))+(((py)*(sj13)*(x830)))+(((IkReal(19.5000000000000))*(cj15)))+(((IkReal(100.000000000000))*(cj14)*(pz)))+(((cj13)*(px)*(x830)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[3];
IkReal x831=IKcos(j16);
IkReal x832=((py)*(sj13));
IkReal x833=((IkReal(1.00000000000000))*(sj14));
IkReal x834=((cj13)*(px));
IkReal x835=((IkReal(0.0900000000000000))*(x831));
evalcond[0]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(0.0900000000000000))*(IKsin(j16))))+(((IkReal(-1.00000000000000))*(px)*(sj13))));
evalcond[1]=((((IkReal(-1.00000000000000))*(pz)*(x833)))+(((IkReal(0.195000000000000))*(sj15)))+(((cj15)*(x835)))+(((cj14)*(x832)))+(((cj14)*(x834)))+(((IkReal(0.0300000000000000))*(cj15))));
evalcond[2]=((IkReal(-0.250000000000000))+(((IkReal(-1.00000000000000))*(x832)*(x833)))+(((IkReal(-0.195000000000000))*(cj15)))+(((sj15)*(x835)))+(((IkReal(-1.00000000000000))*(cj14)*(pz)))+(((IkReal(-1.00000000000000))*(x833)*(x834)))+(((IkReal(0.0300000000000000))*(sj15))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x836=((IkReal(100.000000000000))*(cj14));
if( IKabs(((IkReal(1.05555555555556))+(((IkReal(-11.1111111111111))*(cj13)*(py)))+(((IkReal(11.1111111111111))*(px)*(sj13))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.111111111111111))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(100.000000000000))*(pz)*(sj14)))+(((IkReal(-19.5000000000000))*(sj15)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x836)))+(((IkReal(-3.00000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x836))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.05555555555556))+(((IkReal(-11.1111111111111))*(cj13)*(py)))+(((IkReal(11.1111111111111))*(px)*(sj13)))))+IKsqr(((IkReal(0.111111111111111))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(100.000000000000))*(pz)*(sj14)))+(((IkReal(-19.5000000000000))*(sj15)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x836)))+(((IkReal(-3.00000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x836)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(1.05555555555556))+(((IkReal(-11.1111111111111))*(cj13)*(py)))+(((IkReal(11.1111111111111))*(px)*(sj13)))), ((IkReal(0.111111111111111))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(100.000000000000))*(pz)*(sj14)))+(((IkReal(-19.5000000000000))*(sj15)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x836)))+(((IkReal(-3.00000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x836)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[3];
IkReal x837=IKcos(j16);
IkReal x838=((py)*(sj13));
IkReal x839=((IkReal(1.00000000000000))*(sj14));
IkReal x840=((cj13)*(px));
IkReal x841=((IkReal(0.0900000000000000))*(x837));
evalcond[0]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(0.0900000000000000))*(IKsin(j16))))+(((IkReal(-1.00000000000000))*(px)*(sj13))));
evalcond[1]=((((IkReal(-1.00000000000000))*(pz)*(x839)))+(((IkReal(0.195000000000000))*(sj15)))+(((cj15)*(x841)))+(((cj14)*(x838)))+(((IkReal(0.0300000000000000))*(cj15)))+(((cj14)*(x840))));
evalcond[2]=((IkReal(-0.250000000000000))+(((sj15)*(x841)))+(((IkReal(-0.195000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(cj14)*(pz)))+(((IkReal(-1.00000000000000))*(x838)*(x839)))+(((IkReal(-1.00000000000000))*(x839)*(x840)))+(((IkReal(0.0300000000000000))*(sj15))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x842=((IkReal(1.00000000000000))*(sj14));
IkReal x843=((r01)*(sj13));
IkReal x844=((cj13)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j17)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj13)))+(((cj13)*(r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x842)))+(sj15)+(((cj14)*(x843)))+(((cj14)*(x844))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x842)*(x844)))+(((IkReal(-1.00000000000000))*(x842)*(x843)))+(((IkReal(-1.00000000000000))*(cj14)*(r02)))+(((IkReal(-1.00000000000000))*(cj15))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj15;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x845=((IkReal(1.00000000000000))*(sj14));
IkReal x846=((r01)*(sj13));
IkReal x847=((IkReal(1.00000000000000))*(cj14));
IkReal x848=((cj13)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj13)))+(((cj13)*(r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x845)))+(((cj14)*(x846)))+(((cj14)*(x848))));
evalcond[3]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r02)*(x847)))+(((IkReal(-1.00000000000000))*(x845)*(x848)))+(((IkReal(-1.00000000000000))*(x845)*(x846))));
evalcond[4]=((IkReal(-0.525000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x847)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x845)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x845))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x849=((IkReal(11.1111111111111))*(cj13));
IkReal x850=((IkReal(11.1111111111111))*(sj13));
if( IKabs(((IkReal(-1.05555555555556))+(((py)*(x849)))+(((IkReal(-1.00000000000000))*(px)*(x850))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.333333333333333))+(((cj14)*(px)*(x849)))+(((cj14)*(py)*(x850)))+(((IkReal(-11.1111111111111))*(pz)*(sj14))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.05555555555556))+(((py)*(x849)))+(((IkReal(-1.00000000000000))*(px)*(x850)))))+IKsqr(((IkReal(0.333333333333333))+(((cj14)*(px)*(x849)))+(((cj14)*(py)*(x850)))+(((IkReal(-11.1111111111111))*(pz)*(sj14)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-1.05555555555556))+(((py)*(x849)))+(((IkReal(-1.00000000000000))*(px)*(x850)))), ((IkReal(0.333333333333333))+(((cj14)*(px)*(x849)))+(((cj14)*(py)*(x850)))+(((IkReal(-11.1111111111111))*(pz)*(sj14)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-0.0900000000000000))*(IKsin(j16))))+(((IkReal(-1.00000000000000))*(px)*(sj13))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0900000000000000))*(IKcos(j16))))+(((IkReal(-1.00000000000000))*(pz)*(sj14)))+(((cj13)*(cj14)*(px)))+(((cj14)*(py)*(sj13))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x851=((IkReal(1.00000000000000))*(sj14));
IkReal x852=((r01)*(sj13));
IkReal x853=((IkReal(1.00000000000000))*(cj14));
IkReal x854=((cj13)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j15, IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj13)))+(((cj13)*(r01))));
evalcond[2]=((((cj14)*(x854)))+(((cj14)*(x852)))+(((IkReal(-1.00000000000000))*(r02)*(x851))));
evalcond[3]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r02)*(x853)))+(((IkReal(-1.00000000000000))*(x851)*(x854)))+(((IkReal(-1.00000000000000))*(x851)*(x852))));
evalcond[4]=((IkReal(0.0250000000000000))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x851)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x851)))+(((IkReal(-1.00000000000000))*(pz)*(x853))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x855=((IkReal(11.1111111111111))*(cj13));
IkReal x856=((IkReal(11.1111111111111))*(sj13));
if( IKabs(((IkReal(-1.05555555555556))+(((py)*(x855)))+(((IkReal(-1.00000000000000))*(px)*(x856))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.333333333333333))+(((IkReal(-1.00000000000000))*(cj14)*(py)*(x856)))+(((IkReal(-1.00000000000000))*(cj14)*(px)*(x855)))+(((IkReal(11.1111111111111))*(pz)*(sj14))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.05555555555556))+(((py)*(x855)))+(((IkReal(-1.00000000000000))*(px)*(x856)))))+IKsqr(((IkReal(0.333333333333333))+(((IkReal(-1.00000000000000))*(cj14)*(py)*(x856)))+(((IkReal(-1.00000000000000))*(cj14)*(px)*(x855)))+(((IkReal(11.1111111111111))*(pz)*(sj14)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-1.05555555555556))+(((py)*(x855)))+(((IkReal(-1.00000000000000))*(px)*(x856)))), ((IkReal(0.333333333333333))+(((IkReal(-1.00000000000000))*(cj14)*(py)*(x856)))+(((IkReal(-1.00000000000000))*(cj14)*(px)*(x855)))+(((IkReal(11.1111111111111))*(pz)*(sj14)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-0.0900000000000000))*(IKsin(j16))))+(((IkReal(-1.00000000000000))*(px)*(sj13))));
evalcond[1]=((IkReal(-0.0300000000000000))+(((IkReal(0.0900000000000000))*(IKcos(j16))))+(((IkReal(-1.00000000000000))*(pz)*(sj14)))+(((cj13)*(cj14)*(px)))+(((cj14)*(py)*(sj13))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x857=((IkReal(1.00000000000000))*(sj14));
IkReal x858=((r01)*(sj13));
IkReal x859=((cj13)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj13)))+(((cj13)*(r01))));
evalcond[2]=((IkReal(1.00000000000000))+(((cj14)*(x859)))+(((cj14)*(x858)))+(((IkReal(-1.00000000000000))*(r02)*(x857))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj14)*(r02)))+(((IkReal(-1.00000000000000))*(x857)*(x858)))+(((IkReal(-1.00000000000000))*(x857)*(x859))));
evalcond[4]=((IkReal(0.275000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x857)))+(((cj13)*(cj14)*(px)))+(((cj14)*(py)*(sj13))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x860=((IkReal(11.1111111111111))*(cj13));
IkReal x861=((IkReal(11.1111111111111))*(sj13));
if( IKabs(((IkReal(-1.05555555555556))+(((py)*(x860)))+(((IkReal(-1.00000000000000))*(px)*(x861))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-2.44444444444444))+(((IkReal(-1.00000000000000))*(py)*(sj14)*(x861)))+(((IkReal(-1.00000000000000))*(px)*(sj14)*(x860)))+(((IkReal(-11.1111111111111))*(cj14)*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.05555555555556))+(((py)*(x860)))+(((IkReal(-1.00000000000000))*(px)*(x861)))))+IKsqr(((IkReal(-2.44444444444444))+(((IkReal(-1.00000000000000))*(py)*(sj14)*(x861)))+(((IkReal(-1.00000000000000))*(px)*(sj14)*(x860)))+(((IkReal(-11.1111111111111))*(cj14)*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-1.05555555555556))+(((py)*(x860)))+(((IkReal(-1.00000000000000))*(px)*(x861)))), ((IkReal(-2.44444444444444))+(((IkReal(-1.00000000000000))*(py)*(sj14)*(x861)))+(((IkReal(-1.00000000000000))*(px)*(sj14)*(x860)))+(((IkReal(-11.1111111111111))*(cj14)*(pz)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
IkReal x862=((IkReal(1.00000000000000))*(sj14));
evalcond[0]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-0.0900000000000000))*(IKsin(j16))))+(((IkReal(-1.00000000000000))*(px)*(sj13))));
evalcond[1]=((IkReal(-0.220000000000000))+(((IkReal(-0.0900000000000000))*(IKcos(j16))))+(((IkReal(-1.00000000000000))*(cj14)*(pz)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x862)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x862))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x863=((IkReal(1.00000000000000))*(sj14));
IkReal x864=((r01)*(sj13));
IkReal x865=((cj13)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj13)))+(((cj13)*(r01))));
evalcond[2]=((IkReal(-1.00000000000000))+(((cj14)*(x865)))+(((cj14)*(x864)))+(((IkReal(-1.00000000000000))*(r02)*(x863))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj14)*(r02)))+(((IkReal(-1.00000000000000))*(x863)*(x864)))+(((IkReal(-1.00000000000000))*(x863)*(x865))));
evalcond[4]=((IkReal(-0.275000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x863)))+(((cj13)*(cj14)*(px)))+(((cj14)*(py)*(sj13))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x866=((IkReal(11.1111111111111))*(cj13));
IkReal x867=((IkReal(11.1111111111111))*(sj13));
if( IKabs(((IkReal(-1.05555555555556))+(((py)*(x866)))+(((IkReal(-1.00000000000000))*(px)*(x867))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(3.11111111111111))+(((IkReal(11.1111111111111))*(cj14)*(pz)))+(((py)*(sj14)*(x867)))+(((px)*(sj14)*(x866))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.05555555555556))+(((py)*(x866)))+(((IkReal(-1.00000000000000))*(px)*(x867)))))+IKsqr(((IkReal(3.11111111111111))+(((IkReal(11.1111111111111))*(cj14)*(pz)))+(((py)*(sj14)*(x867)))+(((px)*(sj14)*(x866)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-1.05555555555556))+(((py)*(x866)))+(((IkReal(-1.00000000000000))*(px)*(x867)))), ((IkReal(3.11111111111111))+(((IkReal(11.1111111111111))*(cj14)*(pz)))+(((py)*(sj14)*(x867)))+(((px)*(sj14)*(x866)))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[2];
IkReal x868=((IkReal(1.00000000000000))*(sj14));
evalcond[0]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-0.0900000000000000))*(IKsin(j16))))+(((IkReal(-1.00000000000000))*(px)*(sj13))));
evalcond[1]=((IkReal(-0.280000000000000))+(((IkReal(0.0900000000000000))*(IKcos(j16))))+(((IkReal(-1.00000000000000))*(cj14)*(pz)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x868)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x868))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x869=((IkReal(100.000000000000))*(sj14));
if( IKabs(((IkReal(-1.05555555555556))+(((IkReal(-11.1111111111111))*(px)*(sj13)))+(((IkReal(11.1111111111111))*(cj13)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.111111111111111))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((IkReal(-25.0000000000000))+(((IkReal(-100.000000000000))*(cj14)*(pz)))+(((IkReal(-27.5000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x869)))+(((IkReal(3.00000000000000))*(sj15)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x869))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.05555555555556))+(((IkReal(-11.1111111111111))*(px)*(sj13)))+(((IkReal(11.1111111111111))*(cj13)*(py)))))+IKsqr(((IkReal(0.111111111111111))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((IkReal(-25.0000000000000))+(((IkReal(-100.000000000000))*(cj14)*(pz)))+(((IkReal(-27.5000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x869)))+(((IkReal(3.00000000000000))*(sj15)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x869)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-1.05555555555556))+(((IkReal(-11.1111111111111))*(px)*(sj13)))+(((IkReal(11.1111111111111))*(cj13)*(py)))), ((IkReal(0.111111111111111))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((IkReal(-25.0000000000000))+(((IkReal(-100.000000000000))*(cj14)*(pz)))+(((IkReal(-27.5000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x869)))+(((IkReal(3.00000000000000))*(sj15)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x869)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[3];
IkReal x870=IKcos(j16);
IkReal x871=((IkReal(1.00000000000000))*(sj14));
IkReal x872=((cj13)*(px));
IkReal x873=((py)*(sj13));
IkReal x874=((IkReal(0.0900000000000000))*(x870));
evalcond[0]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-0.0900000000000000))*(IKsin(j16))))+(((IkReal(-1.00000000000000))*(px)*(sj13))));
evalcond[1]=((((IkReal(0.275000000000000))*(sj15)))+(((cj14)*(x873)))+(((cj14)*(x872)))+(((IkReal(-1.00000000000000))*(pz)*(x871)))+(((IkReal(0.0300000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(cj15)*(x874))));
evalcond[2]=((IkReal(-0.250000000000000))+(((IkReal(-1.00000000000000))*(x871)*(x873)))+(((IkReal(-1.00000000000000))*(x871)*(x872)))+(((IkReal(-1.00000000000000))*(cj14)*(pz)))+(((IkReal(-0.275000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(sj15)*(x874)))+(((IkReal(0.0300000000000000))*(sj15))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x875=((IkReal(100.000000000000))*(cj14));
if( IKabs(((IkReal(-1.05555555555556))+(((IkReal(-11.1111111111111))*(px)*(sj13)))+(((IkReal(11.1111111111111))*(cj13)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.111111111111111))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(3.00000000000000))*(cj15)))+(((cj13)*(px)*(x875)))+(((IkReal(27.5000000000000))*(sj15)))+(((py)*(sj13)*(x875)))+(((IkReal(-100.000000000000))*(pz)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.05555555555556))+(((IkReal(-11.1111111111111))*(px)*(sj13)))+(((IkReal(11.1111111111111))*(cj13)*(py)))))+IKsqr(((IkReal(0.111111111111111))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(3.00000000000000))*(cj15)))+(((cj13)*(px)*(x875)))+(((IkReal(27.5000000000000))*(sj15)))+(((py)*(sj13)*(x875)))+(((IkReal(-100.000000000000))*(pz)*(sj14)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((IkReal(-1.05555555555556))+(((IkReal(-11.1111111111111))*(px)*(sj13)))+(((IkReal(11.1111111111111))*(cj13)*(py)))), ((IkReal(0.111111111111111))*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((IkReal(3.00000000000000))*(cj15)))+(((cj13)*(px)*(x875)))+(((IkReal(27.5000000000000))*(sj15)))+(((py)*(sj13)*(x875)))+(((IkReal(-100.000000000000))*(pz)*(sj14)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[3];
IkReal x876=IKcos(j16);
IkReal x877=((IkReal(1.00000000000000))*(sj14));
IkReal x878=((cj13)*(px));
IkReal x879=((py)*(sj13));
IkReal x880=((IkReal(0.0900000000000000))*(x876));
evalcond[0]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-0.0900000000000000))*(IKsin(j16))))+(((IkReal(-1.00000000000000))*(px)*(sj13))));
evalcond[1]=((((IkReal(0.275000000000000))*(sj15)))+(((cj14)*(x878)))+(((cj14)*(x879)))+(((IkReal(-1.00000000000000))*(pz)*(x877)))+(((IkReal(0.0300000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(cj15)*(x880))));
evalcond[2]=((IkReal(-0.250000000000000))+(((IkReal(-1.00000000000000))*(x877)*(x879)))+(((IkReal(-1.00000000000000))*(x877)*(x878)))+(((IkReal(-1.00000000000000))*(sj15)*(x880)))+(((IkReal(-1.00000000000000))*(cj14)*(pz)))+(((IkReal(-0.275000000000000))*(cj15)))+(((IkReal(0.0300000000000000))*(sj15))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x881=((IkReal(1.00000000000000))*(sj14));
IkReal x882=((IkReal(1.00000000000000))*(cj14));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj13)*(r00)*(x881)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x881)))+(sj17)+(((IkReal(-1.00000000000000))*(r02)*(x882))));
evalcond[2]=((IkReal(-0.485000000000000))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x881)))+(((IkReal(-0.0900000000000000))*(cj17)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x881)))+(((IkReal(-1.00000000000000))*(pz)*(x882)))+(((IkReal(0.0400000000000000))*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(cj17);
dummyeval[0]=cj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x883=((IkReal(1.00000000000000))*(r01));
if( IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(cj13)*(x883)))+(((r00)*(sj13))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((r02)*(sj14)))+(((IkReal(-1.00000000000000))*(cj14)*(sj13)*(x883)))+(((IkReal(-1.00000000000000))*(cj13)*(cj14)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j16array[0]=IKatan2(((gconst0)*(((((IkReal(-1.00000000000000))*(cj13)*(x883)))+(((r00)*(sj13)))))), ((gconst0)*(((((r02)*(sj14)))+(((IkReal(-1.00000000000000))*(cj14)*(sj13)*(x883)))+(((IkReal(-1.00000000000000))*(cj13)*(cj14)*(r00)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x884=IKsin(j16);
IkReal x885=IKcos(j16);
IkReal x886=((cj14)*(sj13));
IkReal x887=((IkReal(1.00000000000000))*(sj14));
IkReal x888=((IkReal(0.0900000000000000))*(sj17));
IkReal x889=((cj13)*(cj14));
IkReal x890=((IkReal(1.00000000000000))*(sj13));
IkReal x891=((cj17)*(x885));
IkReal x892=((cj17)*(x884));
evalcond[0]=((x892)+(((IkReal(-1.00000000000000))*(r00)*(x890)))+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(0.0400000000000000))*(x892)))+(((IkReal(-1.00000000000000))*(px)*(x890)))+(((x884)*(x888))));
evalcond[2]=((((r00)*(x889)))+(((r01)*(x886)))+(x891)+(((IkReal(-1.00000000000000))*(r02)*(x887))));
evalcond[3]=((IkReal(0.0300000000000000))+(((px)*(x889)))+(((py)*(x886)))+(((IkReal(-1.00000000000000))*(pz)*(x887)))+(((IkReal(0.0400000000000000))*(x891)))+(((x885)*(x888))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x893=((IkReal(1.00000000000000))*(sj14));
IkReal x894=((IkReal(1.00000000000000))*(cj14));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(j15, IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj13)*(r00)*(x893)))+(((IkReal(-1.00000000000000))*(sj17)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x893)))+(((IkReal(-1.00000000000000))*(r02)*(x894))));
evalcond[2]=((IkReal(-0.0150000000000000))+(((IkReal(0.0900000000000000))*(cj17)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x893)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x893)))+(((IkReal(-1.00000000000000))*(pz)*(x894)))+(((IkReal(-0.0400000000000000))*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(cj17);
dummyeval[0]=cj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
if( IKabs(((gconst1)*(((((r00)*(sj13)))+(((IkReal(-1.00000000000000))*(cj13)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((cj13)*(cj14)*(r00)))+(((cj14)*(r01)*(sj13)))+(((IkReal(-1.00000000000000))*(r02)*(sj14))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j16array[0]=IKatan2(((gconst1)*(((((r00)*(sj13)))+(((IkReal(-1.00000000000000))*(cj13)*(r01)))))), ((gconst1)*(((((cj13)*(cj14)*(r00)))+(((cj14)*(r01)*(sj13)))+(((IkReal(-1.00000000000000))*(r02)*(sj14)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x895=IKsin(j16);
IkReal x896=IKcos(j16);
IkReal x897=((cj14)*(sj13));
IkReal x898=((IkReal(1.00000000000000))*(sj14));
IkReal x899=((cj13)*(cj14));
IkReal x900=((IkReal(1.00000000000000))*(sj13));
IkReal x901=((IkReal(0.0900000000000000))*(sj17));
IkReal x902=((cj17)*(x895));
IkReal x903=((cj17)*(x896));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x900)))+(x902)+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((x895)*(x901)))+(((IkReal(-1.00000000000000))*(px)*(x900)))+(((IkReal(0.0400000000000000))*(x902))));
evalcond[2]=((((r01)*(x897)))+(((r00)*(x899)))+(((IkReal(-1.00000000000000))*(x903)))+(((IkReal(-1.00000000000000))*(r02)*(x898))));
evalcond[3]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x896)*(x901)))+(((py)*(x897)))+(((px)*(x899)))+(((IkReal(-1.00000000000000))*(pz)*(x898)))+(((IkReal(-0.0400000000000000))*(x903))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x904=((IkReal(1.00000000000000))*(sj14));
IkReal x905=((cj13)*(cj14));
IkReal x906=((cj14)*(sj13));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((((r00)*(x905)))+(((r01)*(x906)))+(((IkReal(-1.00000000000000))*(sj17)))+(((IkReal(-1.00000000000000))*(r02)*(x904))));
evalcond[2]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj17)))+(((IkReal(-1.00000000000000))*(pz)*(x904)))+(((px)*(x905)))+(((py)*(x906)))+(((IkReal(-0.0400000000000000))*(sj17))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(cj17);
dummyeval[0]=cj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
if( IKabs(((gconst2)*(((((r00)*(sj13)))+(((IkReal(-1.00000000000000))*(cj13)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((r01)*(sj13)*(sj14)))+(((cj13)*(r00)*(sj14)))+(((cj14)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j16array[0]=IKatan2(((gconst2)*(((((r00)*(sj13)))+(((IkReal(-1.00000000000000))*(cj13)*(r01)))))), ((gconst2)*(((((r01)*(sj13)*(sj14)))+(((cj13)*(r00)*(sj14)))+(((cj14)*(r02)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x907=IKsin(j16);
IkReal x908=IKcos(j16);
IkReal x909=((IkReal(1.00000000000000))*(sj14));
IkReal x910=((IkReal(0.0900000000000000))*(sj17));
IkReal x911=((IkReal(1.00000000000000))*(cj14));
IkReal x912=((IkReal(1.00000000000000))*(sj13));
IkReal x913=((cj17)*(x908));
IkReal x914=((cj17)*(x907));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x912)))+(x914)+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x912)))+(((IkReal(0.0400000000000000))*(x914)))+(((x907)*(x910))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj13)*(r00)*(x909)))+(((IkReal(-1.00000000000000))*(r02)*(x911)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x909)))+(x913));
evalcond[3]=((IkReal(-0.220000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x909)))+(((IkReal(0.0400000000000000))*(x913)))+(((IkReal(-1.00000000000000))*(pz)*(x911)))+(((x908)*(x910)))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x909))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x915=((IkReal(1.00000000000000))*(sj14));
IkReal x916=((cj13)*(cj14));
IkReal x917=((cj14)*(sj13));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j15)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r02)*(x915)))+(sj17)+(((r01)*(x917)))+(((r00)*(x916))));
evalcond[2]=((IkReal(-0.235000000000000))+(((IkReal(-0.0900000000000000))*(cj17)))+(((px)*(x916)))+(((IkReal(0.0400000000000000))*(sj17)))+(((IkReal(-1.00000000000000))*(pz)*(x915)))+(((py)*(x917))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(cj17);
dummyeval[0]=cj17;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x918=((IkReal(1.00000000000000))*(r01));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(cj13)*(x918)))+(((r00)*(sj13))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(sj13)*(sj14)*(x918)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(sj14)))+(((IkReal(-1.00000000000000))*(cj14)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j16array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(cj13)*(x918)))+(((r00)*(sj13)))))), ((gconst3)*(((((IkReal(-1.00000000000000))*(sj13)*(sj14)*(x918)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(sj14)))+(((IkReal(-1.00000000000000))*(cj14)*(r02)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[4];
IkReal x919=IKsin(j16);
IkReal x920=IKcos(j16);
IkReal x921=((IkReal(1.00000000000000))*(sj14));
IkReal x922=((IkReal(0.0900000000000000))*(sj17));
IkReal x923=((IkReal(1.00000000000000))*(cj14));
IkReal x924=((IkReal(1.00000000000000))*(sj13));
IkReal x925=((cj17)*(x919));
IkReal x926=((cj17)*(x920));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x924)))+(x925)+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((x919)*(x922)))+(((IkReal(-1.00000000000000))*(px)*(x924)))+(((IkReal(0.0400000000000000))*(x925))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x923)))+(((IkReal(-1.00000000000000))*(x926)))+(((IkReal(-1.00000000000000))*(r01)*(sj13)*(x921)))+(((IkReal(-1.00000000000000))*(cj13)*(r00)*(x921))));
evalcond[3]=((IkReal(-0.280000000000000))+(((IkReal(-1.00000000000000))*(cj13)*(px)*(x921)))+(((IkReal(-1.00000000000000))*(x920)*(x922)))+(((IkReal(-0.0400000000000000))*(x926)))+(((IkReal(-1.00000000000000))*(pz)*(x923)))+(((IkReal(-1.00000000000000))*(py)*(sj13)*(x921))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
if( IKabs(((((IKabs(((((IkReal(0.0900000000000000))*(sj17)))+(((IkReal(0.0400000000000000))*(cj17))))) != 0)?((IkReal)1/(((((IkReal(0.0900000000000000))*(sj17)))+(((IkReal(0.0400000000000000))*(cj17)))))):(IkReal)1.0e30))*(((IkReal(0.0950000000000000))+(((px)*(sj13)))+(((IkReal(-1.00000000000000))*(cj13)*(py))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj17) != 0)?((IkReal)1/(cj17)):(IkReal)1.0e30))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((r01)*(sj13)*(sj14)))+(((cj13)*(r00)*(sj14)))+(((IkReal(-1.00000000000000))*(cj15)*(sj17)))+(((cj14)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(0.0900000000000000))*(sj17)))+(((IkReal(0.0400000000000000))*(cj17))))) != 0)?((IkReal)1/(((((IkReal(0.0900000000000000))*(sj17)))+(((IkReal(0.0400000000000000))*(cj17)))))):(IkReal)1.0e30))*(((IkReal(0.0950000000000000))+(((px)*(sj13)))+(((IkReal(-1.00000000000000))*(cj13)*(py)))))))+IKsqr(((((IKabs(cj17) != 0)?((IkReal)1/(cj17)):(IkReal)1.0e30))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((r01)*(sj13)*(sj14)))+(((cj13)*(r00)*(sj14)))+(((IkReal(-1.00000000000000))*(cj15)*(sj17)))+(((cj14)*(r02)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((((IKabs(((((IkReal(0.0900000000000000))*(sj17)))+(((IkReal(0.0400000000000000))*(cj17))))) != 0)?((IkReal)1/(((((IkReal(0.0900000000000000))*(sj17)))+(((IkReal(0.0400000000000000))*(cj17)))))):(IkReal)1.0e30))*(((IkReal(0.0950000000000000))+(((px)*(sj13)))+(((IkReal(-1.00000000000000))*(cj13)*(py)))))), ((((IKabs(cj17) != 0)?((IkReal)1/(cj17)):(IkReal)1.0e30))*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((r01)*(sj13)*(sj14)))+(((cj13)*(r00)*(sj14)))+(((IkReal(-1.00000000000000))*(cj15)*(sj17)))+(((cj14)*(r02)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x927=IKsin(j16);
IkReal x928=IKcos(j16);
IkReal x929=((IkReal(0.0400000000000000))*(sj15));
IkReal x930=((IkReal(1.00000000000000))*(sj14));
IkReal x931=((cj15)*(sj17));
IkReal x932=((r01)*(sj13));
IkReal x933=((cj13)*(r00));
IkReal x934=((cj17)*(sj15));
IkReal x935=((IkReal(0.0900000000000000))*(sj17));
IkReal x936=((IkReal(1.00000000000000))*(sj13));
IkReal x937=((cj13)*(px));
IkReal x938=((py)*(sj13));
IkReal x939=((IkReal(1.00000000000000))*(cj14));
IkReal x940=((cj17)*(x928));
IkReal x941=((cj17)*(x927));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x936)))+(x941)+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((x927)*(x935)))+(((IkReal(-1.00000000000000))*(px)*(x936)))+(((IkReal(0.0400000000000000))*(x941))));
evalcond[2]=((((cj15)*(x940)))+(((IkReal(-1.00000000000000))*(r02)*(x930)))+(((cj14)*(x933)))+(((cj14)*(x932)))+(((IkReal(-1.00000000000000))*(sj15)*(sj17))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x930)*(x933)))+(((IkReal(-1.00000000000000))*(x930)*(x932)))+(((x928)*(x934)))+(((IkReal(-1.00000000000000))*(r02)*(x939)))+(x931));
evalcond[4]=((((IkReal(0.0400000000000000))*(cj15)*(x940)))+(((IkReal(0.235000000000000))*(sj15)))+(((cj14)*(x937)))+(((cj14)*(x938)))+(((IkReal(0.0300000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(pz)*(x930)))+(((IkReal(0.0900000000000000))*(x934)))+(((IkReal(-1.00000000000000))*(sj17)*(x929)))+(((IkReal(0.0900000000000000))*(x928)*(x931))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(-0.235000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(x930)*(x938)))+(((IkReal(-1.00000000000000))*(x930)*(x937)))+(((sj15)*(x928)*(x935)))+(((IkReal(0.0400000000000000))*(x931)))+(((IkReal(-1.00000000000000))*(pz)*(x939)))+(((x929)*(x940)))+(((IkReal(-0.0900000000000000))*(cj15)*(cj17)))+(((IkReal(0.0300000000000000))*(sj15))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x942=((IKabs(cj17) != 0)?((IkReal)1/(cj17)):(IkReal)1.0e30);
IkReal x943=((IkReal(1.00000000000000))*(r01));
if( IKabs(((x942)*(((((IkReal(-1.00000000000000))*(cj13)*(x943)))+(((r00)*(sj13))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x942)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((r02)*(sj14)))+(((sj15)*(sj17)))+(((IkReal(-1.00000000000000))*(cj14)*(sj13)*(x943)))+(((IkReal(-1.00000000000000))*(cj13)*(cj14)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x942)*(((((IkReal(-1.00000000000000))*(cj13)*(x943)))+(((r00)*(sj13)))))))+IKsqr(((x942)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((r02)*(sj14)))+(((sj15)*(sj17)))+(((IkReal(-1.00000000000000))*(cj14)*(sj13)*(x943)))+(((IkReal(-1.00000000000000))*(cj13)*(cj14)*(r00)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x942)*(((((IkReal(-1.00000000000000))*(cj13)*(x943)))+(((r00)*(sj13)))))), ((x942)*(((IKabs(cj15) != 0)?((IkReal)1/(cj15)):(IkReal)1.0e30))*(((((r02)*(sj14)))+(((sj15)*(sj17)))+(((IkReal(-1.00000000000000))*(cj14)*(sj13)*(x943)))+(((IkReal(-1.00000000000000))*(cj13)*(cj14)*(r00)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x944=IKsin(j16);
IkReal x945=IKcos(j16);
IkReal x946=((IkReal(0.0400000000000000))*(sj15));
IkReal x947=((IkReal(1.00000000000000))*(sj14));
IkReal x948=((cj15)*(sj17));
IkReal x949=((r01)*(sj13));
IkReal x950=((cj13)*(r00));
IkReal x951=((cj17)*(sj15));
IkReal x952=((IkReal(0.0900000000000000))*(sj17));
IkReal x953=((IkReal(1.00000000000000))*(sj13));
IkReal x954=((cj13)*(px));
IkReal x955=((py)*(sj13));
IkReal x956=((IkReal(1.00000000000000))*(cj14));
IkReal x957=((cj17)*(x945));
IkReal x958=((cj17)*(x944));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x953)))+(x958)+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((cj13)*(py)))+(((x944)*(x952)))+(((IkReal(-1.00000000000000))*(px)*(x953)))+(((IkReal(0.0400000000000000))*(x958))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x947)))+(((cj14)*(x949)))+(((cj14)*(x950)))+(((IkReal(-1.00000000000000))*(sj15)*(sj17)))+(((cj15)*(x957))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x947)*(x949)))+(((IkReal(-1.00000000000000))*(x947)*(x950)))+(((x945)*(x951)))+(x948)+(((IkReal(-1.00000000000000))*(r02)*(x956))));
evalcond[4]=((((IkReal(-1.00000000000000))*(pz)*(x947)))+(((IkReal(0.0900000000000000))*(x951)))+(((IkReal(0.235000000000000))*(sj15)))+(((IkReal(0.0300000000000000))*(cj15)))+(((IkReal(0.0400000000000000))*(cj15)*(x957)))+(((cj14)*(x955)))+(((cj14)*(x954)))+(((IkReal(0.0900000000000000))*(x945)*(x948)))+(((IkReal(-1.00000000000000))*(sj17)*(x946))));
evalcond[5]=((IkReal(-0.250000000000000))+(((sj15)*(x945)*(x952)))+(((IkReal(-0.235000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(pz)*(x956)))+(((IkReal(-1.00000000000000))*(x947)*(x955)))+(((IkReal(-1.00000000000000))*(x947)*(x954)))+(((x946)*(x957)))+(((IkReal(-0.0900000000000000))*(cj15)*(cj17)))+(((IkReal(0.0300000000000000))*(sj15)))+(((IkReal(0.0400000000000000))*(x948))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j16array[1], cj16array[1], sj16array[1];
bool j16valid[1]={false};
_nj16 = 1;
IkReal x959=((IKabs(cj17) != 0)?((IkReal)1/(cj17)):(IkReal)1.0e30);
if( IKabs(((x959)*(((((r00)*(sj13)))+(((IkReal(-1.00000000000000))*(cj13)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x959)*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((r01)*(sj13)*(sj14)))+(((cj13)*(r00)*(sj14)))+(((IkReal(-1.00000000000000))*(cj15)*(sj17)))+(((cj14)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x959)*(((((r00)*(sj13)))+(((IkReal(-1.00000000000000))*(cj13)*(r01)))))))+IKsqr(((x959)*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((r01)*(sj13)*(sj14)))+(((cj13)*(r00)*(sj14)))+(((IkReal(-1.00000000000000))*(cj15)*(sj17)))+(((cj14)*(r02)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j16array[0]=IKatan2(((x959)*(((((r00)*(sj13)))+(((IkReal(-1.00000000000000))*(cj13)*(r01)))))), ((x959)*(((IKabs(sj15) != 0)?((IkReal)1/(sj15)):(IkReal)1.0e30))*(((((r01)*(sj13)*(sj14)))+(((cj13)*(r00)*(sj14)))+(((IkReal(-1.00000000000000))*(cj15)*(sj17)))+(((cj14)*(r02)))))));
sj16array[0]=IKsin(j16array[0]);
cj16array[0]=IKcos(j16array[0]);
if( j16array[0] > IKPI )
{
    j16array[0]-=IK2PI;
}
else if( j16array[0] < -IKPI )
{    j16array[0]+=IK2PI;
}
j16valid[0] = true;
for(int ij16 = 0; ij16 < 1; ++ij16)
{
if( !j16valid[ij16] )
{
    continue;
}
_ij16[0] = ij16; _ij16[1] = -1;
for(int iij16 = ij16+1; iij16 < 1; ++iij16)
{
if( j16valid[iij16] && IKabs(cj16array[ij16]-cj16array[iij16]) < IKFAST_SOLUTION_THRESH && IKabs(sj16array[ij16]-sj16array[iij16]) < IKFAST_SOLUTION_THRESH )
{
    j16valid[iij16]=false; _ij16[1] = iij16; break; 
}
}
j16 = j16array[ij16]; cj16 = cj16array[ij16]; sj16 = sj16array[ij16];
{
IkReal evalcond[6];
IkReal x960=IKsin(j16);
IkReal x961=IKcos(j16);
IkReal x962=((IkReal(0.0400000000000000))*(sj15));
IkReal x963=((IkReal(1.00000000000000))*(sj14));
IkReal x964=((cj15)*(sj17));
IkReal x965=((r01)*(sj13));
IkReal x966=((cj13)*(r00));
IkReal x967=((cj17)*(sj15));
IkReal x968=((IkReal(0.0900000000000000))*(sj17));
IkReal x969=((IkReal(1.00000000000000))*(sj13));
IkReal x970=((cj13)*(px));
IkReal x971=((py)*(sj13));
IkReal x972=((IkReal(1.00000000000000))*(cj14));
IkReal x973=((cj17)*(x961));
IkReal x974=((cj17)*(x960));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x969)))+(x974)+(((cj13)*(r01))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((IkReal(0.0400000000000000))*(x974)))+(((cj13)*(py)))+(((x960)*(x968)))+(((IkReal(-1.00000000000000))*(px)*(x969))));
evalcond[2]=((((cj15)*(x973)))+(((cj14)*(x966)))+(((cj14)*(x965)))+(((IkReal(-1.00000000000000))*(sj15)*(sj17)))+(((IkReal(-1.00000000000000))*(r02)*(x963))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x963)*(x965)))+(((IkReal(-1.00000000000000))*(x963)*(x966)))+(((x961)*(x967)))+(((IkReal(-1.00000000000000))*(r02)*(x972)))+(x964));
evalcond[4]=((((IkReal(-1.00000000000000))*(pz)*(x963)))+(((IkReal(0.0900000000000000))*(x967)))+(((IkReal(0.235000000000000))*(sj15)))+(((IkReal(0.0400000000000000))*(cj15)*(x973)))+(((IkReal(0.0300000000000000))*(cj15)))+(((IkReal(0.0900000000000000))*(x961)*(x964)))+(((cj14)*(x971)))+(((cj14)*(x970)))+(((IkReal(-1.00000000000000))*(sj17)*(x962))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(-1.00000000000000))*(x963)*(x970)))+(((IkReal(-1.00000000000000))*(x963)*(x971)))+(((IkReal(-0.235000000000000))*(cj15)))+(((IkReal(-1.00000000000000))*(pz)*(x972)))+(((x962)*(x973)))+(((sj15)*(x961)*(x968)))+(((IkReal(-0.0900000000000000))*(cj15)*(cj17)))+(((IkReal(0.0300000000000000))*(sj15)))+(((IkReal(0.0400000000000000))*(x964))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j13;
vinfos[0].indices[0] = _ij13[0];
vinfos[0].indices[1] = _ij13[1];
vinfos[0].maxsolutions = _nj13;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j14;
vinfos[1].indices[0] = _ij14[0];
vinfos[1].indices[1] = _ij14[1];
vinfos[1].maxsolutions = _nj14;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j15;
vinfos[2].indices[0] = _ij15[0];
vinfos[2].indices[1] = _ij15[1];
vinfos[2].maxsolutions = _nj15;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j16;
vinfos[3].indices[0] = _ij16[0];
vinfos[3].indices[1] = _ij16[1];
vinfos[3].maxsolutions = _nj16;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j17;
vinfos[4].indices[0] = _ij17[0];
vinfos[4].indices[1] = _ij17[1];
vinfos[4].maxsolutions = _nj17;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j18;
vinfos[5].indices[0] = _ij18[0];
vinfos[5].indices[1] = _ij18[1];
vinfos[5].maxsolutions = _nj18;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}

static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    IkReal tol = 1e-5*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        if( IKabs(wi[i]) < tol*100 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "6ae340c030bbcafef0b4ade1584cc3c4"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE

int ik_solve(IkReal eerot[9], IkReal eetrans[3], std::vector<std::vector<IkReal> >& sol_joint, std::vector<IkReal> free_joint)
{
    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
	for(std::size_t i = 0; i < vfree.size(); ++i)
		vfree[i] = free_joint[i];
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        return -1;
    }

	sol_joint.resize(solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
		sol_joint[i].resize(solvalues.size());
        for( std::size_t j = 0; j < solvalues.size(); ++j)
			sol_joint[i][j] = solvalues[j];
    }
    return 0;
}

} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_LEFT5DF18;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
