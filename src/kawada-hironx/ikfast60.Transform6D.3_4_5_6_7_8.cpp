/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 60 generated on 2012-09-02 09:29:12.412958
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==60);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_RIGHT6D {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[0]);
x7=IKsin(j[3]);
x8=IKcos(j[5]);
x9=IKsin(j[5]);
x10=IKcos(j[4]);
x11=IKsin(j[4]);
x12=((IkReal(0.965925532213041))*(x10));
x13=((IkReal(0.258820142606703))*(x10));
x14=((IkReal(0.258820142606703))*(x11));
x15=((IkReal(1.00000000000000))*(x10));
x16=((IkReal(0.965925532213041))*(x9));
x17=((IkReal(0.258820142606703))*(x8));
x18=((IkReal(1.00000000000000))*(x7));
x19=((IkReal(0.965925532213041))*(x11));
x20=((IkReal(0.0289777659663912))*(x6));
x21=((IkReal(0.00776460427820108))*(x6));
x22=((IkReal(1.00000000000000))*(x11));
x23=((IkReal(0.0900000000000000))*(x0));
x24=((IkReal(1.00000000000000))*(x2));
x25=((IkReal(0.0300000000000000))*(x0));
x26=((IkReal(0.0900000000000000))*(x5));
x27=((IkReal(0.258820142606703))*(x9));
x28=((IkReal(1.00000000000000))*(x0));
x29=((IkReal(0.965925532213041))*(x8));
x30=((IkReal(1.00000000000000))*(x5));
x31=((x3)*(x4));
x32=((x1)*(x2));
x33=((x3)*(x6));
x34=((x0)*(x3));
x35=((x1)*(x4));
x36=((x2)*(x3));
x37=((x30)*(x6));
x38=((x1)*(x24));
x39=((IkReal(0.0900000000000000))*(x31));
x40=((IkReal(0.0900000000000000))*(x32));
x41=((x35)*(x6));
x42=((x28)*(x31));
x43=((IkReal(1.00000000000000))*(x31)*(x6));
x44=((((IkReal(-1.00000000000000))*(x31)))+(x38));
x45=((((IkReal(-1.00000000000000))*(x40)))+(x39));
x46=((((IkReal(-1.00000000000000))*(x39)))+(x40));
x47=((((IkReal(1.00000000000000))*(x35)))+(((x24)*(x3))));
x48=((((IkReal(0.0900000000000000))*(x36)))+(((IkReal(0.0900000000000000))*(x35))));
x49=((IkReal(-1.00000000000000))*(x47));
x50=((x10)*(x45));
x51=((((IkReal(-1.00000000000000))*(x42)))+(((x0)*(x32))));
x52=((((IkReal(-1.00000000000000))*(x43)))+(((x32)*(x6))));
x53=((x48)*(x5));
x54=((x49)*(x7));
x55=((x47)*(x5));
x56=((((IkReal(-1.00000000000000))*(x0)*(x38)))+(x42));
x57=((((IkReal(-1.00000000000000))*(x38)*(x6)))+(x43));
x58=((((x28)*(x35)))+(((x24)*(x34))));
x59=((x23)*(((x36)+(x35))));
x60=((((x24)*(x33)))+(((IkReal(1.00000000000000))*(x41))));
x61=((((IkReal(0.0900000000000000))*(x41)))+(((IkReal(0.0900000000000000))*(x2)*(x33))));
x62=((IkReal(-1.00000000000000))*(x61));
x63=((x47)*(x7)*(x8));
x64=((x5)*(x52));
x65=((x56)*(x7));
x66=((((x18)*(x6)))+(((IkReal(-1.00000000000000))*(x30)*(x51))));
x67=((((IkReal(-1.00000000000000))*(x26)*(x51)))+(((IkReal(0.0900000000000000))*(x6)*(x7))));
x68=((((x0)*(x5)))+(((x57)*(x7))));
x69=((((IkReal(-1.00000000000000))*(x0)*(x18)))+(((IkReal(-1.00000000000000))*(x30)*(x52))));
x70=((((IkReal(-1.00000000000000))*(x26)*(x52)))+(((IkReal(-1.00000000000000))*(x23)*(x7))));
x71=((((IkReal(-1.00000000000000))*(x18)*(x57)))+(((IkReal(-1.00000000000000))*(x28)*(x5))));
x72=((((x15)*(((((IkReal(-1.00000000000000))*(x31)))+(x38)))))+(((IkReal(-1.00000000000000))*(x22)*(x55))));
x73=((((x15)*(x58)))+(((IkReal(-1.00000000000000))*(x22)*(x66))));
x74=((((x15)*(x60)))+(((IkReal(-1.00000000000000))*(x22)*(x69))));
eerot[0]=((((x9)*(((((IkReal(-1.00000000000000))*(x18)*(x56)))+(x37)))))+(((x73)*(x8))));
eerot[1]=((((x73)*(x9)))+(((x8)*(((((IkReal(-1.00000000000000))*(x37)))+(x65))))));
eerot[2]=((((x11)*(x58)))+(((x10)*(x66))));
eetrans[0]=((((IkReal(-0.250000000000000))*(x34)))+(((IkReal(-0.235000000000000))*(x2)*(x34)))+(((IkReal(-1.00000000000000))*(x10)*(x59)))+(((IkReal(0.0950000000000000))*(x6)))+(((x11)*(x67)))+(((IkReal(-1.00000000000000))*(x25)*(x32)))+(((x11)*(x59)))+(((IkReal(-0.235000000000000))*(x0)*(x35)))+(((x10)*(x67)))+(((x25)*(x31))));
eerot[3]=((((x16)*(x71)))+(((IkReal(-1.00000000000000))*(x27)*(x54)))+(((x29)*(x74)))+(((IkReal(-1.00000000000000))*(x17)*(x72))));
eerot[4]=((((x29)*(x68)))+(((x16)*(x74)))+(((IkReal(-1.00000000000000))*(x17)*(x47)*(x7)))+(((IkReal(-1.00000000000000))*(x27)*(x72))));
eerot[5]=((((x12)*(x69)))+(((IkReal(-1.00000000000000))*(x14)*(x44)))+(((x19)*(x60)))+(((IkReal(-1.00000000000000))*(x13)*(x55))));
IkReal x75=((IkReal(1.00000000000000))*(x13));
IkReal x76=((IkReal(1.00000000000000))*(x14));
eetrans[1]=((IkReal(-0.145000000000000))+(((x12)*(x62)))+(((IkReal(0.0608227335125751))*(x32)))+(((x20)*(x31)))+(((IkReal(-1.00000000000000))*(x20)*(x32)))+(((IkReal(-1.00000000000000))*(x45)*(x75)))+(((IkReal(-0.0608227335125751))*(x31)))+(((x19)*(x70)))+(((IkReal(-0.00776460427820108))*(x35)))+(((IkReal(-0.00776460427820108))*(x36)))+(((x19)*(x61)))+(((IkReal(-0.226992500070065))*(x41)))+(((IkReal(-0.0917629255602389))*(x0)))+(((IkReal(-0.241481383053260))*(x33)))+(((IkReal(-1.00000000000000))*(x46)*(x76)))+(((x12)*(x70)))+(((IkReal(-1.00000000000000))*(x53)*(x76)))+(((IkReal(-1.00000000000000))*(x53)*(x75)))+(((IkReal(0.0647050356516757))*(x1)))+(((IkReal(-0.226992500070065))*(x2)*(x33))));
eerot[6]=((((x17)*(x74)))+(((x16)*(x54)))+(((x29)*(x72)))+(((x27)*(x71))));
eerot[7]=((((x16)*(x72)))+(((x29)*(x47)*(x7)))+(((x17)*(x68)))+(((x27)*(x74))));
eerot[8]=((((x13)*(x69)))+(((x14)*(x60)))+(((x12)*(x55)))+(((x19)*(x44))));
eetrans[2]=((IkReal(0.370296000000000))+(((x14)*(x70)))+(((IkReal(0.226992500070065))*(x31)))+(((x13)*(x62)))+(((x14)*(x61)))+(((x12)*(x53)))+(((x19)*(x46)))+(((IkReal(-0.0608227335125751))*(x41)))+(((IkReal(-0.0245879135476367))*(x0)))+(((x19)*(x53)))+(((IkReal(-0.226992500070065))*(x32)))+(((x21)*(x31)))+(((IkReal(-0.0647050356516757))*(x33)))+(((IkReal(-0.241481383053260))*(x1)))+(((x12)*(x45)))+(((IkReal(0.0289777659663912))*(x36)))+(((IkReal(0.0289777659663912))*(x35)))+(((IkReal(-1.00000000000000))*(x21)*(x32)))+(((x13)*(x70)))+(((IkReal(-0.0608227335125751))*(x2)*(x33))));
}

IKFAST_API int GetNumFreeParameters() { return 0; }
IKFAST_API int* GetFreeParameters() { return NULL; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j7,cj7,sj7,htj7,j8,cj8,sj8,htj8,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((IkReal(-1.00000000000000))*(r00));
new_r01=r01;
new_r02=((IkReal(-1.00000000000000))*(r02));
new_px=((px)+(((IkReal(-0.0900000000000000))*(r02))));
new_r10=((((IkReal(-0.965925532213041))*(r10)))+(((IkReal(-0.258820142606703))*(r20))));
new_r11=((((IkReal(0.965925532213041))*(r11)))+(((IkReal(0.258820142606703))*(r21))));
new_r12=((((IkReal(-0.965925532213041))*(r12)))+(((IkReal(-0.258820142606703))*(r22))));
new_py=((IkReal(0.0442191386441994))+(((IkReal(-0.0869332978991737))*(r12)))+(((IkReal(0.258820142606703))*(pz)))+(((IkReal(0.965925532213041))*(py)))+(((IkReal(-0.0232938128346032))*(r22))));
new_r20=((((IkReal(-0.965925532213041))*(r20)))+(((IkReal(0.258820142606703))*(r10))));
new_r21=((((IkReal(-0.258820142606703))*(r11)))+(((IkReal(0.965925532213041))*(r21))));
new_r22=((((IkReal(-0.965925532213041))*(r22)))+(((IkReal(0.258820142606703))*(r12))));
new_pz=((IkReal(-0.395207281554332))+(((IkReal(-0.258820142606703))*(py)))+(((IkReal(0.0232938128346032))*(r12)))+(((IkReal(0.965925532213041))*(pz)))+(((IkReal(-0.0869332978991737))*(r22))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
IkReal op[72], zeror[48];
int numroots;
IkReal x77=((IkReal(0.650000000000000))*(npx));
IkReal x78=((IkReal(0.0600000000000000))*(npz));
IkReal x79=((IkReal(1.00000000000000))*(pp));
IkReal x80=((IkReal(0.0600000000000000))*(npy));
IkReal x81=((IkReal(0.0950000000000000))*(r22));
IkReal x82=((IkReal(0.120000000000000))*(npx));
IkReal x83=((IkReal(0.0950000000000000))*(r21));
IkReal x84=((IkReal(1.00000000000000))*(rxp0_2));
IkReal x85=((IkReal(0.190000000000000))*(r20));
IkReal x86=((IkReal(2.00000000000000))*(rxp1_2));
IkReal x87=((IkReal(0.940000000000000))*(npz));
IkReal x88=((IkReal(2.00000000000000))*(rxp2_2));
IkReal x89=((IkReal(0.180000000000000))*(r21));
IkReal x90=((IkReal(0.360000000000000))*(r20));
IkReal x91=((IkReal(0.380000000000000))*(r21));
IkReal x92=((IkReal(0.290000000000000))*(npx));
IkReal x93=((IkReal(-0.00570000000000000))+(((IkReal(-1.00000000000000))*(x80))));
IkReal x94=((IkReal(0.580000000000000))*(npy));
IkReal x95=((IkReal(0.00570000000000000))+(((IkReal(-1.00000000000000))*(x80))));
IkReal x96=((rxp0_2)+(((IkReal(-1.00000000000000))*(x81))));
IkReal x97=((IkReal(-1.30000000000000))*(npy));
IkReal x98=((IkReal(-0.0950000000000000))*(r21));
IkReal x99=((IkReal(-0.00570000000000000))+(x80));
IkReal x100=((rxp0_2)+(x81));
IkReal x101=((x81)+(((IkReal(-1.00000000000000))*(x84))));
IkReal x102=((IkReal(0.00570000000000000))+(x80));
IkReal x103=((IkReal(-2.00000000000000))*(rxp1_2));
IkReal x104=((IkReal(-0.0350000000000000))+(x77));
IkReal x105=((IkReal(0.0496000000000000))+(x78));
IkReal x106=((x79)+(x78));
IkReal x107=((((IkReal(-1.00000000000000))*(x84)))+(((IkReal(-1.00000000000000))*(x81))));
IkReal x108=((x82)+(x87));
IkReal x109=((x88)+(x89));
op[0]=((((IkReal(-1.00000000000000))*(x106)))+(x104));
op[1]=x99;
op[2]=x97;
op[3]=x82;
op[4]=((IkReal(-0.0350000000000000))+(((IkReal(-1.00000000000000))*(x77)))+(((IkReal(-1.00000000000000))*(x106))));
op[5]=x93;
op[6]=x107;
op[7]=x83;
op[8]=x86;
op[9]=x85;
op[10]=x96;
op[11]=x98;
op[12]=x102;
op[13]=((((IkReal(-1.00000000000000))*(x79)))+(x104)+(x78));
op[14]=x82;
op[15]=x97;
op[16]=x95;
op[17]=((IkReal(-0.0350000000000000))+(((IkReal(-1.00000000000000))*(x77)))+(((IkReal(-1.00000000000000))*(x79)))+(x78));
op[18]=x83;
op[19]=x101;
op[20]=x85;
op[21]=x86;
op[22]=x98;
op[23]=x100;
op[24]=((IkReal(-0.0108000000000000))+(x108));
op[25]=IkReal(0);
op[26]=((IkReal(-0.240000000000000))*(npy));
op[27]=IkReal(0);
op[28]=((IkReal(-0.0108000000000000))+(x87)+(((IkReal(-1.00000000000000))*(x82))));
op[29]=IkReal(0);
op[30]=((x89)+(x85)+(((IkReal(-1.00000000000000))*(x88))));
op[31]=IkReal(0);
op[32]=((x90)+(((IkReal(-1.00000000000000))*(x91))));
op[33]=IkReal(0);
op[34]=((((IkReal(-1.00000000000000))*(x109)))+(((IkReal(-1.00000000000000))*(x85))));
op[35]=IkReal(0);
op[36]=IkReal(0);
op[37]=((IkReal(0.0108000000000000))+(x87)+(((IkReal(-1.00000000000000))*(x82))));
op[38]=IkReal(0);
op[39]=((IkReal(0.240000000000000))*(npy));
op[40]=IkReal(0);
op[41]=((IkReal(0.0108000000000000))+(x108));
op[42]=IkReal(0);
op[43]=((x89)+(((IkReal(-1.00000000000000))*(x88)))+(((IkReal(-1.00000000000000))*(x85))));
op[44]=IkReal(0);
op[45]=((x91)+(x90));
op[46]=IkReal(0);
op[47]=((((IkReal(-1.00000000000000))*(x109)))+(x85));
op[48]=((((IkReal(-1.00000000000000))*(x79)))+(x105)+(((IkReal(-1.00000000000000))*(x92))));
op[49]=x99;
op[50]=x94;
op[51]=x82;
op[52]=((((IkReal(-1.00000000000000))*(x79)))+(x105)+(x92));
op[53]=x93;
op[54]=x100;
op[55]=x83;
op[56]=x103;
op[57]=x85;
op[58]=x101;
op[59]=x98;
op[60]=x102;
op[61]=((IkReal(0.0496000000000000))+(((IkReal(-1.00000000000000))*(x106)))+(((IkReal(-1.00000000000000))*(x92))));
op[62]=x82;
op[63]=x94;
op[64]=x95;
op[65]=((IkReal(0.0496000000000000))+(((IkReal(-1.00000000000000))*(x106)))+(x92));
op[66]=x83;
op[67]=x96;
op[68]=x85;
op[69]=x103;
op[70]=x98;
op[71]=x107;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j7array[16], cj7array[16], sj7array[16], j8array[16], cj8array[16], sj8array[16], j6array[16], cj6array[16], sj6array[16];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ij7 += 3)
{
IkReal htj7 = zeror[ij7+0], htj8 = zeror[ij7+1], htj6 = zeror[ij7+2];
j7array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj7)));
j8array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj8)));
j6array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj6)));
IkReal x110=(htj7)*(htj7);
IkReal x111=(htj8)*(htj8);
IkReal x112=(htj6)*(htj6);
cj7array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x110))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x110)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x110))))));
cj8array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x111))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x111)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x111))))));
cj6array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x112))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x112)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x112))))));
sj7array[numsolutions]=((IkReal(2.00000000000000))*(htj7)*(((IKabs(((IkReal(1.00000000000000))+((htj7)*(htj7)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj7)*(htj7))))):(IkReal)1.0e30)));
sj8array[numsolutions]=((IkReal(2.00000000000000))*(htj8)*(((IKabs(((IkReal(1.00000000000000))+((htj8)*(htj8)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj8)*(htj8))))):(IkReal)1.0e30)));
sj6array[numsolutions]=((IkReal(2.00000000000000))*(htj6)*(((IKabs(((IkReal(1.00000000000000))+((htj6)*(htj6)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj6)*(htj6))))):(IkReal)1.0e30)));
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j7valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj7 = 16;
_nj8 = 1;
_nj6 = 1;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
_ij8[0] = 0; _ij8[1] = -1;
_ij6[0] = 0; _ij6[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( !j7valid[iij7] ) { continue; }
if( IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(cj8array[ij7]-cj8array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij7]-sj8array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(cj6array[ij7]-cj6array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij7]-sj6array[iij7]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j7valid[iij7]=false; _ij7[1] = iij7; _ij8[1] = 0; _ij6[1] = 0;  break; 
}
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

    j8 = j8array[ij7]; cj8 = cj8array[ij7]; sj8 = sj8array[ij7];

    j6 = j6array[ij7]; cj6 = cj6array[ij7]; sj6 = sj6array[ij7];

{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x113=(sj8)*(sj8);
IkReal x114=(cj8)*(cj8);
IkReal x115=((r00)*(r11));
IkReal x116=((r02)*(sj7));
IkReal x117=((cj7)*(x114));
IkReal x118=((IkReal(1.00000000000000))*(r12)*(sj7));
IkReal x119=((IkReal(1.00000000000000))*(r01)*(r10));
IkReal x120=((cj7)*(x113));
gconst0=IKsign(((((IkReal(-1.00000000000000))*(x119)*(x120)))+(((IkReal(-1.00000000000000))*(r00)*(sj8)*(x118)))+(((IkReal(-1.00000000000000))*(x117)*(x119)))+(((r10)*(sj8)*(x116)))+(((x115)*(x120)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x118)))+(((x115)*(x117)))+(((cj8)*(r11)*(x116)))));
IkReal x121=(sj8)*(sj8);
IkReal x122=(cj8)*(cj8);
IkReal x123=((r00)*(r11));
IkReal x124=((r02)*(sj7));
IkReal x125=((cj7)*(x122));
IkReal x126=((IkReal(1.00000000000000))*(r12)*(sj7));
IkReal x127=((IkReal(1.00000000000000))*(r01)*(r10));
IkReal x128=((cj7)*(x121));
dummyeval[0]=((((IkReal(-1.00000000000000))*(r00)*(sj8)*(x126)))+(((r10)*(sj8)*(x124)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x126)))+(((x123)*(x125)))+(((x123)*(x128)))+(((IkReal(-1.00000000000000))*(x125)*(x127)))+(((cj8)*(r11)*(x124)))+(((IkReal(-1.00000000000000))*(x127)*(x128))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
IkReal x129=((sj7)*(sj8));
IkReal x130=((IkReal(1.00000000000000))*(cj8)*(sj7));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((((r21)*(x129)))+(((cj7)*(r22)))+(((IkReal(-1.00000000000000))*(r20)*(x130))));
evalcond[2]=((IkReal(0.0950000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(npx)*(x130)))+(((npy)*(x129)))+(((cj7)*(npz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x131=((IkReal(4.00000000000000))*(npx));
IkReal x132=((IkReal(4.00000000000000))*(npy));
if( IKabs(((IkReal(0.120000000000000))+(((IkReal(-1.00000000000000))*(cj8)*(x132)))+(((IkReal(-1.00000000000000))*(sj8)*(x131))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.940000000000000))+(((cj7)*(cj8)*(x131)))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x132)))+(((IkReal(-0.360000000000000))*(cj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.120000000000000))+(((IkReal(-1.00000000000000))*(cj8)*(x132)))+(((IkReal(-1.00000000000000))*(sj8)*(x131)))))+IKsqr(((IkReal(-0.940000000000000))+(((cj7)*(cj8)*(x131)))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x132)))+(((IkReal(-0.360000000000000))*(cj7)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(0.120000000000000))+(((IkReal(-1.00000000000000))*(cj8)*(x132)))+(((IkReal(-1.00000000000000))*(sj8)*(x131)))), ((IkReal(-0.940000000000000))+(((cj7)*(cj8)*(x131)))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x132)))+(((IkReal(-0.360000000000000))*(cj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0300000000000000))+(((npx)*(sj8)))+(((cj8)*(npy)))+(((IkReal(0.250000000000000))*(IKsin(j5)))));
evalcond[1]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(npz)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((IkReal(0.250000000000000))*(IKcos(j5)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
IkReal x133=(cj8)*(cj8);
IkReal x134=(sj8)*(sj8);
IkReal x135=((cj7)*(r02));
IkReal x136=((IkReal(1.00000000000000))*(r00));
IkReal x137=((cj7)*(r12));
IkReal x138=((r01)*(r10));
IkReal x139=((sj7)*(x134));
IkReal x140=((sj7)*(x133));
gconst23=IKsign(((((x138)*(x139)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x137)))+(((r10)*(sj8)*(x135)))+(((x138)*(x140)))+(((IkReal(-1.00000000000000))*(r11)*(x136)*(x139)))+(((IkReal(-1.00000000000000))*(sj8)*(x136)*(x137)))+(((cj8)*(r11)*(x135)))+(((IkReal(-1.00000000000000))*(r11)*(x136)*(x140)))));
IkReal x141=(cj8)*(cj8);
IkReal x142=(sj8)*(sj8);
IkReal x143=((cj7)*(r02));
IkReal x144=((IkReal(1.00000000000000))*(r00));
IkReal x145=((cj7)*(r12));
IkReal x146=((r01)*(r10));
IkReal x147=((sj7)*(x142));
IkReal x148=((sj7)*(x141));
dummyeval[0]=((((IkReal(-1.00000000000000))*(sj8)*(x144)*(x145)))+(((cj8)*(r11)*(x143)))+(((IkReal(-1.00000000000000))*(r11)*(x144)*(x147)))+(((IkReal(-1.00000000000000))*(r11)*(x144)*(x148)))+(((x146)*(x148)))+(((x146)*(x147)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x145)))+(((r10)*(sj8)*(x143))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x149=((IkReal(1.00000000000000))*(cj8));
IkReal x150=((IkReal(1.00000000000000))*(sj8));
if( IKabs(((gconst23)*(((((IkReal(-1.00000000000000))*(r10)*(x150)))+(((IkReal(-1.00000000000000))*(r11)*(x149))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst23)*(((((IkReal(-1.00000000000000))*(r00)*(x150)))+(((IkReal(-1.00000000000000))*(r01)*(x149))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst23)*(((((IkReal(-1.00000000000000))*(r10)*(x150)))+(((IkReal(-1.00000000000000))*(r11)*(x149)))))), ((gconst23)*(((((IkReal(-1.00000000000000))*(r00)*(x150)))+(((IkReal(-1.00000000000000))*(r01)*(x149)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x151=IKsin(j3);
IkReal x152=IKcos(j3);
IkReal x153=((r01)*(sj8));
IkReal x154=((cj8)*(sj7));
IkReal x155=((IkReal(1.00000000000000))*(sj7));
IkReal x156=((IkReal(1.00000000000000))*(r12));
IkReal x157=((r11)*(sj8));
IkReal x158=((IkReal(1.00000000000000))*(r00));
IkReal x159=((cj7)*(x151));
IkReal x160=((r10)*(x152));
IkReal x161=((IkReal(1.00000000000000))*(cj7)*(x152));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj8)*(x160)))+(((IkReal(-1.00000000000000))*(cj8)*(r11)*(x152)))+(((r00)*(sj8)*(x151)))+(((cj8)*(r01)*(x151))));
evalcond[1]=((((x153)*(x159)))+(((IkReal(-1.00000000000000))*(x157)*(x161)))+(((r12)*(sj7)*(x152)))+(((IkReal(-1.00000000000000))*(r02)*(x151)*(x155)))+(((IkReal(-1.00000000000000))*(cj8)*(x158)*(x159)))+(((cj7)*(cj8)*(x160))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x152)*(x155)*(x157)))+(((x154)*(x160)))+(((IkReal(-1.00000000000000))*(cj7)*(x152)*(x156)))+(((sj7)*(x151)*(x153)))+(((IkReal(-1.00000000000000))*(x151)*(x154)*(x158)))+(((r02)*(x159))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r02)*(x161)))+(((r10)*(x151)*(x154)))+(((r00)*(x152)*(x154)))+(((IkReal(-1.00000000000000))*(x151)*(x155)*(x157)))+(((IkReal(-1.00000000000000))*(x156)*(x159)))+(((IkReal(-1.00000000000000))*(x152)*(x153)*(x155))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x162=((sj5)*(sj8));
IkReal x163=((IkReal(1.00000000000000))*(cj7));
IkReal x164=((cj8)*(sj5));
IkReal x165=((r22)*(sj7));
IkReal x166=((cj5)*(r20));
IkReal x167=((cj5)*(r21));
if( IKabs(((gconst25)*(((((IkReal(-1.00000000000000))*(r21)*(x162)*(x163)))+(((cj7)*(r20)*(x164)))+(((sj8)*(x166)))+(((sj5)*(x165)))+(((cj8)*(x167))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst25)*(((((IkReal(-1.00000000000000))*(cj8)*(x163)*(x166)))+(((r20)*(x162)))+(((IkReal(-1.00000000000000))*(cj5)*(x165)))+(((r21)*(x164)))+(((cj7)*(sj8)*(x167))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst25)*(((((IkReal(-1.00000000000000))*(r21)*(x162)*(x163)))+(((cj7)*(r20)*(x164)))+(((sj8)*(x166)))+(((sj5)*(x165)))+(((cj8)*(x167)))))), ((gconst25)*(((((IkReal(-1.00000000000000))*(cj8)*(x163)*(x166)))+(((r20)*(x162)))+(((IkReal(-1.00000000000000))*(cj5)*(x165)))+(((r21)*(x164)))+(((cj7)*(sj8)*(x167)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x168=IKsin(j4);
IkReal x169=IKcos(j4);
IkReal x170=((IkReal(1.00000000000000))*(cj8));
IkReal x171=((cj3)*(r01));
IkReal x172=((cj3)*(r00));
IkReal x173=((cj7)*(cj8));
IkReal x174=((IkReal(1.00000000000000))*(cj5));
IkReal x175=((IkReal(1.00000000000000))*(sj8));
IkReal x176=((r11)*(sj3));
IkReal x177=((r10)*(sj3));
IkReal x178=((sj5)*(x168));
IkReal x179=((sj5)*(x169));
IkReal x180=((x169)*(x174));
evalcond[0]=((((cj8)*(r21)))+(((IkReal(-1.00000000000000))*(x179)))+(((IkReal(-1.00000000000000))*(x168)*(x174)))+(((r20)*(sj8))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj7)*(r20)*(x170)))+(((IkReal(-1.00000000000000))*(x180)))+(x178)+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((cj7)*(r21)*(sj8))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x175)*(x177)))+(((IkReal(-1.00000000000000))*(x180)))+(x178)+(((IkReal(-1.00000000000000))*(x170)*(x171)))+(((IkReal(-1.00000000000000))*(x170)*(x176)))+(((IkReal(-1.00000000000000))*(x172)*(x175))));
evalcond[3]=((((r12)*(sj3)*(sj7)))+(((cj5)*(x168)))+(((x172)*(x173)))+(((x173)*(x177)))+(x179)+(((IkReal(-1.00000000000000))*(cj7)*(x175)*(x176)))+(((cj3)*(r02)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(x171)*(x175))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x181=((sj5)*(sj8));
IkReal x182=((IkReal(1.00000000000000))*(cj7));
IkReal x183=((cj8)*(sj5));
IkReal x184=((r22)*(sj7));
IkReal x185=((cj5)*(cj8));
IkReal x186=((cj5)*(sj8));
if( IKabs(((gconst24)*(((((r20)*(x186)))+(((cj7)*(r20)*(x183)))+(((IkReal(-1.00000000000000))*(r21)*(x181)*(x182)))+(((r21)*(x185)))+(((sj5)*(x184))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((((cj7)*(r21)*(x186)))+(((r20)*(x181)))+(((IkReal(-1.00000000000000))*(cj5)*(x184)))+(((IkReal(-1.00000000000000))*(r20)*(x182)*(x185)))+(((r21)*(x183))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst24)*(((((r20)*(x186)))+(((cj7)*(r20)*(x183)))+(((IkReal(-1.00000000000000))*(r21)*(x181)*(x182)))+(((r21)*(x185)))+(((sj5)*(x184)))))), ((gconst24)*(((((cj7)*(r21)*(x186)))+(((r20)*(x181)))+(((IkReal(-1.00000000000000))*(cj5)*(x184)))+(((IkReal(-1.00000000000000))*(r20)*(x182)*(x185)))+(((r21)*(x183)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x187=IKsin(j4);
IkReal x188=IKcos(j4);
IkReal x189=((IkReal(1.00000000000000))*(cj5));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj5)*(x188)))+(((cj8)*(r21)))+(((IkReal(-1.00000000000000))*(x187)*(x189)))+(((r20)*(sj8))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x188)*(x189)))+(((IkReal(-1.00000000000000))*(cj7)*(cj8)*(r20)))+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((sj5)*(x187))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst26;
IkReal x190=(cj8)*(cj8);
IkReal x191=(sj8)*(sj8);
IkReal x192=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x193=((IkReal(1.00000000000000))*(x190));
IkReal x194=((IkReal(1.00000000000000))*(x191));
gconst26=IKsign(((((IkReal(-1.00000000000000))*(x193)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(x194)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(x193)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(x194)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x192)))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x192)))));
IkReal x195=(cj8)*(cj8);
IkReal x196=(sj8)*(sj8);
IkReal x197=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x198=((IkReal(1.00000000000000))*(x195));
IkReal x199=((IkReal(1.00000000000000))*(x196));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x199)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(x199)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(x198)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(x198)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x197)))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x197))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x200=((cj8)*(r01));
IkReal x201=((cj4)*(cj5));
IkReal x202=((r10)*(sj8));
IkReal x203=((cj8)*(r11));
IkReal x204=((r00)*(sj8));
IkReal x205=((IkReal(1.00000000000000))*(sj4)*(sj5));
if( IKabs(((gconst26)*(((((IkReal(-1.00000000000000))*(x203)*(x205)))+(((x201)*(x202)))+(((x201)*(x203)))+(((IkReal(-1.00000000000000))*(x202)*(x205))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((((IkReal(-1.00000000000000))*(x204)*(x205)))+(((IkReal(-1.00000000000000))*(x200)*(x205)))+(((x200)*(x201)))+(((x201)*(x204))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst26)*(((((IkReal(-1.00000000000000))*(x203)*(x205)))+(((x201)*(x202)))+(((x201)*(x203)))+(((IkReal(-1.00000000000000))*(x202)*(x205)))))), ((gconst26)*(((((IkReal(-1.00000000000000))*(x204)*(x205)))+(((IkReal(-1.00000000000000))*(x200)*(x205)))+(((x200)*(x201)))+(((x201)*(x204)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x206=IKsin(j3);
IkReal x207=IKcos(j3);
IkReal x208=((cj7)*(sj8));
IkReal x209=((r00)*(sj8));
IkReal x210=((cj8)*(r11));
IkReal x211=((cj7)*(r02));
IkReal x212=((cj7)*(r12));
IkReal x213=((cj8)*(r10));
IkReal x214=((sj7)*(sj8));
IkReal x215=((cj8)*(r00));
IkReal x216=((r10)*(sj8));
IkReal x217=((r01)*(x206));
IkReal x218=((IkReal(1.00000000000000))*(x207));
IkReal x219=((IkReal(1.00000000000000))*(x206));
IkReal x220=((sj7)*(x206));
IkReal x221=((sj7)*(x207));
IkReal x222=((cj7)*(x207));
IkReal x223=((cj8)*(x221));
evalcond[0]=((((IkReal(-1.00000000000000))*(x210)*(x218)))+(((IkReal(-1.00000000000000))*(x216)*(x218)))+(((cj8)*(x217)))+(((x206)*(x209))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj8)*(r01)*(x218)))+(((sj4)*(sj5)))+(((IkReal(-1.00000000000000))*(x210)*(x219)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)))+(((IkReal(-1.00000000000000))*(x209)*(x218)))+(((IkReal(-1.00000000000000))*(x216)*(x219))));
evalcond[2]=((((r12)*(x221)))+(((x208)*(x217)))+(((x213)*(x222)))+(((IkReal(-1.00000000000000))*(r11)*(x208)*(x218)))+(((IkReal(-1.00000000000000))*(r02)*(sj7)*(x219)))+(((IkReal(-1.00000000000000))*(cj7)*(x215)*(x219))));
evalcond[3]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r11)*(x214)*(x218)))+(((x214)*(x217)))+(((IkReal(-1.00000000000000))*(sj7)*(x215)*(x219)))+(((x206)*(x211)))+(((x213)*(x221)))+(((IkReal(-1.00000000000000))*(x212)*(x218))));
evalcond[4]=((((x215)*(x222)))+(((cj7)*(x206)*(x213)))+(((r12)*(x220)))+(((cj5)*(sj4)))+(((cj4)*(sj5)))+(((IkReal(-1.00000000000000))*(r11)*(x208)*(x219)))+(((r02)*(x221)))+(((IkReal(-1.00000000000000))*(r01)*(x208)*(x218))));
evalcond[5]=((((IkReal(-1.00000000000000))*(r11)*(x214)*(x219)))+(((x215)*(x221)))+(((x213)*(x220)))+(((IkReal(-1.00000000000000))*(r01)*(x214)*(x218)))+(((IkReal(-1.00000000000000))*(x211)*(x218)))+(((IkReal(-1.00000000000000))*(x212)*(x219))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

} else
{
IkReal x224=((sj7)*(sj8));
IkReal x225=((IkReal(1.00000000000000))*(cj8)*(sj7));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r20)*(x225)))+(((cj7)*(r22)))+(((r21)*(x224))));
evalcond[2]=((IkReal(-0.0950000000000000))+(((IkReal(-1.00000000000000))*(npx)*(x225)))+(((IkReal(0.0900000000000000))*(sj7)))+(((npy)*(x224)))+(((cj7)*(npz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x226=((IkReal(4.00000000000000))*(npx));
IkReal x227=((IkReal(4.00000000000000))*(npy));
if( IKabs(((IkReal(0.120000000000000))+(((cj8)*(x227)))+(((sj8)*(x226))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.940000000000000))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x227)))+(((cj7)*(cj8)*(x226)))+(((IkReal(-0.360000000000000))*(cj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.120000000000000))+(((cj8)*(x227)))+(((sj8)*(x226)))))+IKsqr(((IkReal(-0.940000000000000))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x227)))+(((cj7)*(cj8)*(x226)))+(((IkReal(-0.360000000000000))*(cj7)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(0.120000000000000))+(((cj8)*(x227)))+(((sj8)*(x226)))), ((IkReal(-0.940000000000000))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x227)))+(((cj7)*(cj8)*(x226)))+(((IkReal(-0.360000000000000))*(cj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0300000000000000))+(((npx)*(sj8)))+(((cj8)*(npy)))+(((IkReal(-0.250000000000000))*(IKsin(j5)))));
evalcond[1]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(npz)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((IkReal(0.250000000000000))*(IKcos(j5)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst29;
gconst29=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst28;
IkReal x228=(sj8)*(sj8);
IkReal x229=(cj8)*(cj8);
IkReal x230=((IkReal(1.00000000000000))*(r10));
IkReal x231=((cj7)*(sj8));
IkReal x232=((r00)*(r11));
IkReal x233=((cj7)*(cj8));
IkReal x234=((sj7)*(x228));
IkReal x235=((sj7)*(x229));
gconst28=IKsign(((((IkReal(-1.00000000000000))*(r01)*(x230)*(x234)))+(((IkReal(-1.00000000000000))*(r01)*(x230)*(x235)))+(((x232)*(x234)))+(((x232)*(x235)))+(((r01)*(r12)*(x233)))+(((IkReal(-1.00000000000000))*(r02)*(x230)*(x231)))+(((IkReal(-1.00000000000000))*(r02)*(r11)*(x233)))+(((r00)*(r12)*(x231)))));
IkReal x236=(sj8)*(sj8);
IkReal x237=(cj8)*(cj8);
IkReal x238=((IkReal(1.00000000000000))*(r10));
IkReal x239=((cj7)*(sj8));
IkReal x240=((r00)*(r11));
IkReal x241=((cj7)*(cj8));
IkReal x242=((sj7)*(x236));
IkReal x243=((sj7)*(x237));
dummyeval[0]=((((r01)*(r12)*(x241)))+(((IkReal(-1.00000000000000))*(r02)*(r11)*(x241)))+(((x240)*(x243)))+(((x240)*(x242)))+(((IkReal(-1.00000000000000))*(r01)*(x238)*(x243)))+(((IkReal(-1.00000000000000))*(r01)*(x238)*(x242)))+(((IkReal(-1.00000000000000))*(r02)*(x238)*(x239)))+(((r00)*(r12)*(x239))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x244=((IkReal(1.00000000000000))*(cj8));
IkReal x245=((IkReal(1.00000000000000))*(sj8));
if( IKabs(((gconst28)*(((((IkReal(-1.00000000000000))*(r11)*(x244)))+(((IkReal(-1.00000000000000))*(r10)*(x245))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst28)*(((((IkReal(-1.00000000000000))*(r01)*(x244)))+(((IkReal(-1.00000000000000))*(r00)*(x245))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst28)*(((((IkReal(-1.00000000000000))*(r11)*(x244)))+(((IkReal(-1.00000000000000))*(r10)*(x245)))))), ((gconst28)*(((((IkReal(-1.00000000000000))*(r01)*(x244)))+(((IkReal(-1.00000000000000))*(r00)*(x245)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x246=IKsin(j3);
IkReal x247=IKcos(j3);
IkReal x248=((r01)*(sj8));
IkReal x249=((cj8)*(sj7));
IkReal x250=((IkReal(1.00000000000000))*(sj7));
IkReal x251=((IkReal(1.00000000000000))*(r12));
IkReal x252=((r11)*(sj8));
IkReal x253=((IkReal(1.00000000000000))*(r00));
IkReal x254=((cj7)*(x246));
IkReal x255=((r10)*(x247));
IkReal x256=((IkReal(1.00000000000000))*(cj7)*(x247));
evalcond[0]=((((cj8)*(r01)*(x246)))+(((r00)*(sj8)*(x246)))+(((IkReal(-1.00000000000000))*(cj8)*(r11)*(x247)))+(((IkReal(-1.00000000000000))*(sj8)*(x255))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x252)*(x256)))+(((x248)*(x254)))+(((r12)*(sj7)*(x247)))+(((IkReal(-1.00000000000000))*(r02)*(x246)*(x250)))+(((cj7)*(cj8)*(x255)))+(((IkReal(-1.00000000000000))*(cj8)*(x253)*(x254))));
evalcond[2]=((IkReal(-1.00000000000000))+(((x249)*(x255)))+(((sj7)*(x246)*(x248)))+(((IkReal(-1.00000000000000))*(cj7)*(x247)*(x251)))+(((IkReal(-1.00000000000000))*(x247)*(x250)*(x252)))+(((IkReal(-1.00000000000000))*(x246)*(x249)*(x253)))+(((r02)*(x254))));
evalcond[3]=((((r00)*(x247)*(x249)))+(((IkReal(-1.00000000000000))*(x251)*(x254)))+(((IkReal(-1.00000000000000))*(r02)*(x256)))+(((r10)*(x246)*(x249)))+(((IkReal(-1.00000000000000))*(x247)*(x248)*(x250)))+(((IkReal(-1.00000000000000))*(x246)*(x250)*(x252))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst30;
gconst30=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x257=((cj8)*(r21));
IkReal x258=((r22)*(sj7));
IkReal x259=((sj5)*(sj8));
IkReal x260=((IkReal(1.00000000000000))*(sj5));
IkReal x261=((cj5)*(cj7));
IkReal x262=((cj8)*(r20));
if( IKabs(((gconst30)*(((((IkReal(-1.00000000000000))*(x258)*(x260)))+(((cj5)*(r20)*(sj8)))+(((IkReal(-1.00000000000000))*(cj7)*(x260)*(x262)))+(((cj5)*(x257)))+(((cj7)*(r21)*(x259))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst30)*(((((r20)*(x259)))+(((cj5)*(x258)))+(((x261)*(x262)))+(((sj5)*(x257)))+(((IkReal(-1.00000000000000))*(r21)*(sj8)*(x261))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst30)*(((((IkReal(-1.00000000000000))*(x258)*(x260)))+(((cj5)*(r20)*(sj8)))+(((IkReal(-1.00000000000000))*(cj7)*(x260)*(x262)))+(((cj5)*(x257)))+(((cj7)*(r21)*(x259)))))), ((gconst30)*(((((r20)*(x259)))+(((cj5)*(x258)))+(((x261)*(x262)))+(((sj5)*(x257)))+(((IkReal(-1.00000000000000))*(r21)*(sj8)*(x261)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x263=IKsin(j4);
IkReal x264=IKcos(j4);
IkReal x265=((IkReal(1.00000000000000))*(cj8));
IkReal x266=((cj3)*(r01));
IkReal x267=((cj3)*(r00));
IkReal x268=((cj7)*(cj8));
IkReal x269=((r11)*(sj3));
IkReal x270=((IkReal(1.00000000000000))*(sj8));
IkReal x271=((r10)*(sj3));
IkReal x272=((sj5)*(x264));
IkReal x273=((cj5)*(x263));
IkReal x274=((cj5)*(x264));
IkReal x275=((sj5)*(x263));
IkReal x276=((x272)+(x273));
evalcond[0]=((((cj8)*(r21)))+(x276)+(((r20)*(sj8))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x274)))+(x275)+(((IkReal(-1.00000000000000))*(cj7)*(r20)*(x265)))+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((cj7)*(r21)*(sj8))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x275)))+(x274)+(((IkReal(-1.00000000000000))*(x265)*(x266)))+(((IkReal(-1.00000000000000))*(x265)*(x269)))+(((IkReal(-1.00000000000000))*(x270)*(x271)))+(((IkReal(-1.00000000000000))*(x267)*(x270))));
evalcond[3]=((((r12)*(sj3)*(sj7)))+(((x267)*(x268)))+(((IkReal(-1.00000000000000))*(cj7)*(x269)*(x270)))+(((IkReal(-1.00000000000000))*(cj7)*(x266)*(x270)))+(x276)+(((cj3)*(r02)*(sj7)))+(((x268)*(x271))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x277=((r22)*(sj7));
IkReal x278=((cj8)*(sj5));
IkReal x279=((sj5)*(sj8));
IkReal x280=((cj7)*(r20));
IkReal x281=((cj5)*(cj8));
IkReal x282=((cj7)*(r21));
IkReal x283=((cj5)*(sj8));
if( IKabs(((gconst29)*(((((IkReal(-1.00000000000000))*(sj5)*(x277)))+(((x279)*(x282)))+(((r21)*(x281)))+(((IkReal(-1.00000000000000))*(x278)*(x280)))+(((r20)*(x283))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst29)*(((((IkReal(-1.00000000000000))*(x282)*(x283)))+(((cj5)*(x277)))+(((r21)*(x278)))+(((x280)*(x281)))+(((r20)*(x279))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst29)*(((((IkReal(-1.00000000000000))*(sj5)*(x277)))+(((x279)*(x282)))+(((r21)*(x281)))+(((IkReal(-1.00000000000000))*(x278)*(x280)))+(((r20)*(x283)))))), ((gconst29)*(((((IkReal(-1.00000000000000))*(x282)*(x283)))+(((cj5)*(x277)))+(((r21)*(x278)))+(((x280)*(x281)))+(((r20)*(x279)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x284=IKsin(j4);
IkReal x285=IKcos(j4);
evalcond[0]=((((cj8)*(r21)))+(((sj5)*(x285)))+(((r20)*(sj8)))+(((cj5)*(x284))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj7)*(cj8)*(r20)))+(((sj5)*(x284)))+(((IkReal(-1.00000000000000))*(cj5)*(x285)))+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((cj7)*(r21)*(sj8))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst31;
IkReal x286=(cj8)*(cj8);
IkReal x287=(sj8)*(sj8);
IkReal x288=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x289=((IkReal(1.00000000000000))*(x286));
IkReal x290=((IkReal(1.00000000000000))*(x287));
gconst31=IKsign(((((IkReal(-1.00000000000000))*(r10)*(r11)*(x288)))+(((IkReal(-1.00000000000000))*(x289)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(x289)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(x290)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x288)))+(((IkReal(-1.00000000000000))*(x290)*((r10)*(r10))))));
IkReal x291=(cj8)*(cj8);
IkReal x292=(sj8)*(sj8);
IkReal x293=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x294=((IkReal(1.00000000000000))*(x291));
IkReal x295=((IkReal(1.00000000000000))*(x292));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x294)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x293)))+(((IkReal(-1.00000000000000))*(x295)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x293)))+(((IkReal(-1.00000000000000))*(x295)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(x294)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x296=((sj4)*(sj5));
IkReal x297=((r10)*(sj8));
IkReal x298=((cj8)*(r01));
IkReal x299=((r00)*(sj8));
IkReal x300=((cj8)*(r11));
IkReal x301=((IkReal(1.00000000000000))*(cj4)*(cj5));
if( IKabs(((gconst31)*(((((IkReal(-1.00000000000000))*(x297)*(x301)))+(((x296)*(x300)))+(((x296)*(x297)))+(((IkReal(-1.00000000000000))*(x300)*(x301))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst31)*(((((IkReal(-1.00000000000000))*(x298)*(x301)))+(((IkReal(-1.00000000000000))*(x299)*(x301)))+(((x296)*(x299)))+(((x296)*(x298))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst31)*(((((IkReal(-1.00000000000000))*(x297)*(x301)))+(((x296)*(x300)))+(((x296)*(x297)))+(((IkReal(-1.00000000000000))*(x300)*(x301)))))), ((gconst31)*(((((IkReal(-1.00000000000000))*(x298)*(x301)))+(((IkReal(-1.00000000000000))*(x299)*(x301)))+(((x296)*(x299)))+(((x296)*(x298)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x302=IKsin(j3);
IkReal x303=IKcos(j3);
IkReal x304=((cj7)*(sj8));
IkReal x305=((r00)*(sj8));
IkReal x306=((cj8)*(r11));
IkReal x307=((cj7)*(r02));
IkReal x308=((cj7)*(r12));
IkReal x309=((r12)*(sj7));
IkReal x310=((r02)*(sj7));
IkReal x311=((sj7)*(sj8));
IkReal x312=((r10)*(sj8));
IkReal x313=((cj8)*(r00));
IkReal x314=((r01)*(x302));
IkReal x315=((cj8)*(r10)*(sj7));
IkReal x316=((IkReal(1.00000000000000))*(x303));
IkReal x317=((IkReal(1.00000000000000))*(x302));
IkReal x318=((cj7)*(cj8)*(r10));
IkReal x319=((x303)*(x313));
evalcond[0]=((((IkReal(-1.00000000000000))*(x312)*(x316)))+(((IkReal(-1.00000000000000))*(x306)*(x316)))+(((cj8)*(x314)))+(((x302)*(x305))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x312)*(x317)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x316)))+(((IkReal(-1.00000000000000))*(x306)*(x317)))+(((IkReal(-1.00000000000000))*(x305)*(x316)))+(((cj4)*(cj5)))+(((IkReal(-1.00000000000000))*(sj4)*(sj5))));
evalcond[2]=((((x304)*(x314)))+(((IkReal(-1.00000000000000))*(x310)*(x317)))+(((x303)*(x309)))+(((IkReal(-1.00000000000000))*(r11)*(x304)*(x316)))+(((x303)*(x318)))+(((IkReal(-1.00000000000000))*(cj7)*(x313)*(x317))));
evalcond[3]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r11)*(x311)*(x316)))+(((IkReal(-1.00000000000000))*(x308)*(x316)))+(((x311)*(x314)))+(((x302)*(x307)))+(((IkReal(-1.00000000000000))*(sj7)*(x313)*(x317)))+(((x303)*(x315))));
evalcond[4]=((((x302)*(x318)))+(((IkReal(-1.00000000000000))*(r11)*(x304)*(x317)))+(((cj5)*(sj4)))+(((IkReal(-1.00000000000000))*(r01)*(x304)*(x316)))+(((cj4)*(sj5)))+(((x302)*(x309)))+(((x303)*(x310)))+(((cj7)*(x319))));
evalcond[5]=((((x302)*(x315)))+(((IkReal(-1.00000000000000))*(r11)*(x311)*(x317)))+(((IkReal(-1.00000000000000))*(r01)*(x311)*(x316)))+(((sj7)*(x319)))+(((IkReal(-1.00000000000000))*(x308)*(x317)))+(((IkReal(-1.00000000000000))*(x307)*(x316))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x320=((IkReal(4.00000000000000))*(sj7));
IkReal x321=((npy)*(sj8));
IkReal x322=((IkReal(4.00000000000000))*(cj7));
IkReal x323=((cj8)*(npx));
if( IKabs(((IkReal(0.120000000000000))+(((IkReal(0.360000000000000))*(sj7)))+(((x320)*(x321)))+(((IkReal(-1.00000000000000))*(x320)*(x323)))+(((npz)*(x322))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.940000000000000))+(((x322)*(x323)))+(((IkReal(-1.00000000000000))*(x321)*(x322)))+(((npz)*(x320)))+(((IkReal(-0.360000000000000))*(cj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.120000000000000))+(((IkReal(0.360000000000000))*(sj7)))+(((x320)*(x321)))+(((IkReal(-1.00000000000000))*(x320)*(x323)))+(((npz)*(x322)))))+IKsqr(((IkReal(-0.940000000000000))+(((x322)*(x323)))+(((IkReal(-1.00000000000000))*(x321)*(x322)))+(((npz)*(x320)))+(((IkReal(-0.360000000000000))*(cj7)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(0.120000000000000))+(((IkReal(0.360000000000000))*(sj7)))+(((x320)*(x321)))+(((IkReal(-1.00000000000000))*(x320)*(x323)))+(((npz)*(x322)))), ((IkReal(-0.940000000000000))+(((x322)*(x323)))+(((IkReal(-1.00000000000000))*(x321)*(x322)))+(((npz)*(x320)))+(((IkReal(-0.360000000000000))*(cj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x324=((IkReal(1.00000000000000))*(sj7));
IkReal x325=((npy)*(sj8));
IkReal x326=((cj8)*(npx));
evalcond[0]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(npz)*(x324)))+(((IkReal(-1.00000000000000))*(cj7)*(x326)))+(((cj7)*(x325)))+(((IkReal(0.250000000000000))*(IKcos(j5)))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(-0.250000000000000))*(IKsin(j5))))+(((sj7)*(x325)))+(((cj7)*(npz)))+(((IkReal(-1.00000000000000))*(x324)*(x326))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst33;
IkReal x327=(sj8)*(sj8);
IkReal x328=(cj8)*(cj8);
IkReal x329=((IkReal(2.00000000000000))*(cj8)*(sj8));
gconst33=IKsign(((((x328)*((r11)*(r11))))+(((r00)*(r01)*(x329)))+(((x327)*((r00)*(r00))))+(((x328)*((r01)*(r01))))+(((x327)*((r10)*(r10))))+(((r10)*(r11)*(x329)))));
IkReal x330=(sj8)*(sj8);
IkReal x331=(cj8)*(cj8);
IkReal x332=((IkReal(2.00000000000000))*(cj8)*(sj8));
dummyeval[0]=((((r00)*(r01)*(x332)))+(((x331)*((r11)*(r11))))+(((x331)*((r01)*(r01))))+(((x330)*((r00)*(r00))))+(((r10)*(r11)*(x332)))+(((x330)*((r10)*(r10)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst34;
gconst34=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x333=((sj5)*(sj7));
IkReal x334=((r21)*(sj8));
IkReal x335=((cj5)*(sj7));
IkReal x336=((cj7)*(sj5));
IkReal x337=((cj5)*(cj7));
IkReal x338=((IkReal(1.00000000000000))*(cj8)*(r20));
if( IKabs(((gconst34)*(((((r22)*(x337)))+(((x334)*(x335)))+(((x334)*(x336)))+(((IkReal(-1.00000000000000))*(r22)*(x333)))+(((IkReal(-1.00000000000000))*(x335)*(x338)))+(((IkReal(-1.00000000000000))*(x336)*(x338))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((r22)*(x336)))+(((r22)*(x335)))+(((cj8)*(r20)*(x337)))+(((IkReal(-1.00000000000000))*(x333)*(x338)))+(((x333)*(x334)))+(((IkReal(-1.00000000000000))*(x334)*(x337))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst34)*(((((r22)*(x337)))+(((x334)*(x335)))+(((x334)*(x336)))+(((IkReal(-1.00000000000000))*(r22)*(x333)))+(((IkReal(-1.00000000000000))*(x335)*(x338)))+(((IkReal(-1.00000000000000))*(x336)*(x338)))))), ((gconst34)*(((((r22)*(x336)))+(((r22)*(x335)))+(((cj8)*(r20)*(x337)))+(((IkReal(-1.00000000000000))*(x333)*(x338)))+(((x333)*(x334)))+(((IkReal(-1.00000000000000))*(x334)*(x337)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x339=IKcos(j4);
IkReal x340=IKsin(j4);
IkReal x341=((r21)*(sj8));
IkReal x342=((IkReal(1.00000000000000))*(cj8)*(r20));
evalcond[0]=((((sj5)*(x340)))+(((cj7)*(x341)))+(((IkReal(-1.00000000000000))*(cj7)*(x342)))+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((IkReal(-1.00000000000000))*(cj5)*(x339))));
evalcond[1]=((((sj5)*(x339)))+(((cj5)*(x340)))+(((sj7)*(x341)))+(((cj7)*(r22)))+(((IkReal(-1.00000000000000))*(sj7)*(x342))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst35;
IkReal x343=(sj8)*(sj8);
IkReal x344=(cj8)*(cj8);
IkReal x345=((IkReal(2.00000000000000))*(cj8)*(sj8));
gconst35=IKsign(((((x344)*((r01)*(r01))))+(((x344)*((r11)*(r11))))+(((x343)*((r10)*(r10))))+(((r00)*(r01)*(x345)))+(((r10)*(r11)*(x345)))+(((x343)*((r00)*(r00))))));
IkReal x346=(sj8)*(sj8);
IkReal x347=(cj8)*(cj8);
IkReal x348=((IkReal(2.00000000000000))*(cj8)*(sj8));
dummyeval[0]=((((x346)*((r10)*(r10))))+(((r00)*(r01)*(x348)))+(((r10)*(r11)*(x348)))+(((x347)*((r01)*(r01))))+(((x347)*((r11)*(r11))))+(((x346)*((r00)*(r00)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst35)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst35)*(((((r10)*(sj8)))+(((cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst35)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)))))), ((gconst35)*(((((r10)*(sj8)))+(((cj8)*(r11)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x349=IKsin(j3);
IkReal x350=IKcos(j3);
IkReal x351=((r01)*(sj8));
IkReal x352=((cj8)*(r00));
IkReal x353=((r00)*(sj8));
IkReal x354=((cj8)*(r11));
IkReal x355=((r11)*(sj8));
IkReal x356=((r10)*(sj8));
IkReal x357=((cj8)*(r10));
IkReal x358=((cj7)*(x349));
IkReal x359=((sj7)*(x350));
IkReal x360=((IkReal(1.00000000000000))*(x349));
IkReal x361=((IkReal(1.00000000000000))*(x350));
IkReal x362=((cj8)*(x349));
IkReal x363=((IkReal(1.00000000000000))*(x355));
IkReal x364=((sj7)*(x349));
IkReal x365=((cj7)*(x350));
evalcond[0]=((IkReal(1.00000000000000))+(((r01)*(x362)))+(((IkReal(-1.00000000000000))*(x354)*(x361)))+(((IkReal(-1.00000000000000))*(x356)*(x361)))+(((x349)*(x353))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj8)*(r01)*(x361)))+(((IkReal(-1.00000000000000))*(x353)*(x361)))+(((IkReal(-1.00000000000000))*(x354)*(x360)))+(((IkReal(-1.00000000000000))*(x356)*(x360))));
evalcond[2]=((((r12)*(x359)))+(((IkReal(-1.00000000000000))*(x352)*(x358)))+(((IkReal(-1.00000000000000))*(r02)*(sj7)*(x360)))+(((IkReal(-1.00000000000000))*(cj7)*(x355)*(x361)))+(((x351)*(x358)))+(((x357)*(x365))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj7)*(x352)*(x360)))+(((IkReal(-1.00000000000000))*(x359)*(x363)))+(((IkReal(-1.00000000000000))*(cj7)*(r12)*(x361)))+(((x357)*(x359)))+(((r02)*(x358)))+(((x351)*(x364))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x358)*(x363)))+(((x352)*(x365)))+(((cj5)*(sj4)))+(((cj4)*(sj5)))+(((r12)*(x364)))+(((IkReal(-1.00000000000000))*(cj7)*(x351)*(x361)))+(((x357)*(x358)))+(((r02)*(x359))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj7)*(r02)*(x361)))+(((IkReal(-1.00000000000000))*(r12)*(x358)))+(((x352)*(x359)))+(((IkReal(-1.00000000000000))*(sj7)*(x355)*(x360)))+(((cj4)*(cj5)))+(((IkReal(-1.00000000000000))*(x351)*(x359)))+(((x357)*(x364)))+(((IkReal(-1.00000000000000))*(sj4)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst33)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst33)*(((((r10)*(sj8)))+(((cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst33)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)))))), ((gconst33)*(((((r10)*(sj8)))+(((cj8)*(r11)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x366=IKsin(j3);
IkReal x367=IKcos(j3);
IkReal x368=((IkReal(1.00000000000000))*(sj8));
IkReal x369=((IkReal(1.00000000000000))*(cj8));
IkReal x370=((r01)*(sj8));
IkReal x371=((cj8)*(r10));
IkReal x372=((sj7)*(x367));
IkReal x373=((cj7)*(x366));
IkReal x374=((r00)*(x366));
IkReal x375=((sj7)*(x366));
IkReal x376=((cj7)*(x367));
evalcond[0]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r10)*(x367)*(x368)))+(((IkReal(-1.00000000000000))*(r11)*(x367)*(x369)))+(((sj8)*(x374)))+(((cj8)*(r01)*(x366))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r11)*(x366)*(x369)))+(((IkReal(-1.00000000000000))*(r01)*(x367)*(x369)))+(((IkReal(-1.00000000000000))*(r10)*(x366)*(x368)))+(((IkReal(-1.00000000000000))*(r00)*(x367)*(x368))));
evalcond[2]=((((x370)*(x373)))+(((IkReal(-1.00000000000000))*(r00)*(x369)*(x373)))+(((IkReal(-1.00000000000000))*(r02)*(x375)))+(((IkReal(-1.00000000000000))*(r11)*(x368)*(x376)))+(((r12)*(x372)))+(((x371)*(x376))));
evalcond[3]=((((x370)*(x375)))+(((r02)*(x373)))+(((IkReal(-1.00000000000000))*(r11)*(x368)*(x372)))+(((IkReal(-1.00000000000000))*(sj7)*(x369)*(x374)))+(((IkReal(-1.00000000000000))*(r12)*(x376)))+(((x371)*(x372))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst36;
gconst36=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x377=((sj5)*(sj7));
IkReal x378=((r21)*(sj8));
IkReal x379=((cj5)*(sj7));
IkReal x380=((cj8)*(r20));
IkReal x381=((cj5)*(cj7));
IkReal x382=((cj7)*(sj5));
if( IKabs(((gconst36)*(((((x378)*(x382)))+(((r22)*(x381)))+(((x378)*(x379)))+(((IkReal(-1.00000000000000))*(r22)*(x377)))+(((IkReal(-1.00000000000000))*(x380)*(x382)))+(((IkReal(-1.00000000000000))*(x379)*(x380))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((((r22)*(x382)))+(((IkReal(-1.00000000000000))*(x378)*(x381)))+(((IkReal(-1.00000000000000))*(x377)*(x380)))+(((x377)*(x378)))+(((r22)*(x379)))+(((x380)*(x381))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst36)*(((((x378)*(x382)))+(((r22)*(x381)))+(((x378)*(x379)))+(((IkReal(-1.00000000000000))*(r22)*(x377)))+(((IkReal(-1.00000000000000))*(x380)*(x382)))+(((IkReal(-1.00000000000000))*(x379)*(x380)))))), ((gconst36)*(((((r22)*(x382)))+(((IkReal(-1.00000000000000))*(x378)*(x381)))+(((IkReal(-1.00000000000000))*(x377)*(x380)))+(((x377)*(x378)))+(((r22)*(x379)))+(((x380)*(x381)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x383=IKcos(j4);
IkReal x384=IKsin(j4);
IkReal x385=((IkReal(1.00000000000000))*(cj7));
IkReal x386=((cj8)*(r20));
IkReal x387=((cj3)*(r02));
IkReal x388=((IkReal(1.00000000000000))*(sj7));
IkReal x389=((sj3)*(sj7));
IkReal x390=((r21)*(sj8));
IkReal x391=((cj8)*(r10));
IkReal x392=((sj5)*(x383));
IkReal x393=((cj5)*(x384));
IkReal x394=((r11)*(sj3)*(sj8));
IkReal x395=((cj3)*(cj8)*(r00));
IkReal x396=((cj5)*(x383));
IkReal x397=((cj3)*(r01)*(sj8));
IkReal x398=((sj5)*(x384));
IkReal x399=((x393)+(x392));
evalcond[0]=((((IkReal(-1.00000000000000))*(x396)))+(((IkReal(-1.00000000000000))*(r22)*(x388)))+(x398)+(((IkReal(-1.00000000000000))*(x385)*(x386)))+(((cj7)*(x390))));
evalcond[1]=((((sj7)*(x390)))+(x399)+(((IkReal(-1.00000000000000))*(x386)*(x388)))+(((cj7)*(r22))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x385)*(x397)))+(((IkReal(-1.00000000000000))*(x385)*(x394)))+(((r12)*(x389)))+(x399)+(((cj7)*(sj3)*(x391)))+(((cj7)*(x395)))+(((sj7)*(x387))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x398)))+(((sj7)*(x395)))+(((IkReal(-1.00000000000000))*(x388)*(x397)))+(((IkReal(-1.00000000000000))*(x388)*(x394)))+(x396)+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x385)))+(((x389)*(x391)))+(((IkReal(-1.00000000000000))*(x385)*(x387))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x400=((IkReal(4.00000000000000))*(sj7));
IkReal x401=((npy)*(sj8));
IkReal x402=((IkReal(4.00000000000000))*(cj7));
IkReal x403=((cj8)*(npx));
if( IKabs(((IkReal(0.120000000000000))+(((IkReal(-1.00000000000000))*(npz)*(x402)))+(((IkReal(-0.360000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x400)*(x401)))+(((x400)*(x403))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.940000000000000))+(((npz)*(x400)))+(((IkReal(-1.00000000000000))*(x401)*(x402)))+(((x402)*(x403)))+(((IkReal(-0.360000000000000))*(cj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.120000000000000))+(((IkReal(-1.00000000000000))*(npz)*(x402)))+(((IkReal(-0.360000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x400)*(x401)))+(((x400)*(x403)))))+IKsqr(((IkReal(-0.940000000000000))+(((npz)*(x400)))+(((IkReal(-1.00000000000000))*(x401)*(x402)))+(((x402)*(x403)))+(((IkReal(-0.360000000000000))*(cj7)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(0.120000000000000))+(((IkReal(-1.00000000000000))*(npz)*(x402)))+(((IkReal(-0.360000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x400)*(x401)))+(((x400)*(x403)))), ((IkReal(-0.940000000000000))+(((npz)*(x400)))+(((IkReal(-1.00000000000000))*(x401)*(x402)))+(((x402)*(x403)))+(((IkReal(-0.360000000000000))*(cj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x404=((IkReal(1.00000000000000))*(sj7));
IkReal x405=((npy)*(sj8));
IkReal x406=((cj8)*(npx));
evalcond[0]=((IkReal(0.235000000000000))+(((cj7)*(x405)))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(cj7)*(x406)))+(((IkReal(-1.00000000000000))*(npz)*(x404)))+(((IkReal(0.250000000000000))*(IKcos(j5)))));
evalcond[1]=((IkReal(-0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((sj7)*(x405)))+(((IkReal(0.250000000000000))*(IKsin(j5))))+(((IkReal(-1.00000000000000))*(x404)*(x406)))+(((cj7)*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst38;
IkReal x407=(cj8)*(cj8);
IkReal x408=(sj8)*(sj8);
IkReal x409=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x410=((IkReal(1.00000000000000))*(x407));
IkReal x411=((IkReal(1.00000000000000))*(x408));
gconst38=IKsign(((((IkReal(-1.00000000000000))*(x410)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x409)))+(((IkReal(-1.00000000000000))*(x411)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(x410)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(x411)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x409)))));
IkReal x412=(cj8)*(cj8);
IkReal x413=(sj8)*(sj8);
IkReal x414=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x415=((IkReal(1.00000000000000))*(x412));
IkReal x416=((IkReal(1.00000000000000))*(x413));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x416)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(x415)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(x416)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(x415)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x414)))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x414))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst39;
gconst39=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x417=((cj7)*(sj5));
IkReal x418=((r21)*(sj8));
IkReal x419=((cj5)*(cj7));
IkReal x420=((cj8)*(r20));
IkReal x421=((sj5)*(sj7));
IkReal x422=((IkReal(1.00000000000000))*(cj5)*(sj7));
if( IKabs(((gconst39)*(((((IkReal(-1.00000000000000))*(x417)*(x418)))+(((IkReal(-1.00000000000000))*(x420)*(x422)))+(((r22)*(x419)))+(((cj5)*(sj7)*(x418)))+(((r22)*(x421)))+(((x417)*(x420))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((r22)*(x417)))+(((IkReal(-1.00000000000000))*(x420)*(x421)))+(((x418)*(x421)))+(((IkReal(-1.00000000000000))*(x419)*(x420)))+(((x418)*(x419)))+(((IkReal(-1.00000000000000))*(r22)*(x422))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst39)*(((((IkReal(-1.00000000000000))*(x417)*(x418)))+(((IkReal(-1.00000000000000))*(x420)*(x422)))+(((r22)*(x419)))+(((cj5)*(sj7)*(x418)))+(((r22)*(x421)))+(((x417)*(x420)))))), ((gconst39)*(((((r22)*(x417)))+(((IkReal(-1.00000000000000))*(x420)*(x421)))+(((x418)*(x421)))+(((IkReal(-1.00000000000000))*(x419)*(x420)))+(((x418)*(x419)))+(((IkReal(-1.00000000000000))*(r22)*(x422)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x423=IKcos(j4);
IkReal x424=IKsin(j4);
IkReal x425=((IkReal(1.00000000000000))*(cj5));
IkReal x426=((r21)*(sj8));
IkReal x427=((IkReal(1.00000000000000))*(cj8)*(r20));
evalcond[0]=((((cj7)*(x426)))+(((sj5)*(x424)))+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((IkReal(-1.00000000000000))*(x423)*(x425)))+(((IkReal(-1.00000000000000))*(cj7)*(x427))));
evalcond[1]=((((sj7)*(x426)))+(((IkReal(-1.00000000000000))*(x424)*(x425)))+(((IkReal(-1.00000000000000))*(sj5)*(x423)))+(((cj7)*(r22)))+(((IkReal(-1.00000000000000))*(sj7)*(x427))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst40;
IkReal x428=(cj8)*(cj8);
IkReal x429=(sj8)*(sj8);
IkReal x430=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x431=((IkReal(1.00000000000000))*(x428));
IkReal x432=((IkReal(1.00000000000000))*(x429));
gconst40=IKsign(((((IkReal(-1.00000000000000))*(x431)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(x431)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x430)))+(((IkReal(-1.00000000000000))*(x432)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x430)))+(((IkReal(-1.00000000000000))*(x432)*((r10)*(r10))))));
IkReal x433=(cj8)*(cj8);
IkReal x434=(sj8)*(sj8);
IkReal x435=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x436=((IkReal(1.00000000000000))*(x433));
IkReal x437=((IkReal(1.00000000000000))*(x434));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x437)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(x437)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x435)))+(((IkReal(-1.00000000000000))*(x436)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(x436)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x435))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst40)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst40)*(((((r10)*(sj8)))+(((cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst40)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)))))), ((gconst40)*(((((r10)*(sj8)))+(((cj8)*(r11)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x438=IKsin(j3);
IkReal x439=IKcos(j3);
IkReal x440=((r01)*(sj8));
IkReal x441=((cj8)*(r00));
IkReal x442=((r00)*(sj8));
IkReal x443=((cj8)*(r11));
IkReal x444=((r11)*(sj8));
IkReal x445=((r10)*(sj8));
IkReal x446=((cj8)*(r10));
IkReal x447=((cj7)*(x438));
IkReal x448=((sj7)*(x439));
IkReal x449=((IkReal(1.00000000000000))*(x438));
IkReal x450=((IkReal(1.00000000000000))*(x439));
IkReal x451=((cj8)*(x438));
IkReal x452=((IkReal(1.00000000000000))*(x444));
IkReal x453=((sj7)*(x438));
IkReal x454=((cj7)*(x439));
evalcond[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x443)*(x450)))+(((x438)*(x442)))+(((IkReal(-1.00000000000000))*(x445)*(x450)))+(((r01)*(x451))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x445)*(x449)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x450)))+(((IkReal(-1.00000000000000))*(x443)*(x449)))+(((IkReal(-1.00000000000000))*(x442)*(x450))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(sj7)*(x449)))+(((x440)*(x447)))+(((x446)*(x454)))+(((IkReal(-1.00000000000000))*(cj7)*(x444)*(x450)))+(((IkReal(-1.00000000000000))*(x441)*(x447)))+(((r12)*(x448))));
evalcond[3]=((((x446)*(x448)))+(((x440)*(x453)))+(((r02)*(x447)))+(((IkReal(-1.00000000000000))*(sj7)*(x441)*(x449)))+(((IkReal(-1.00000000000000))*(cj7)*(r12)*(x450)))+(((IkReal(-1.00000000000000))*(x448)*(x452))));
evalcond[4]=((((x446)*(x447)))+(((x441)*(x454)))+(((r02)*(x448)))+(((IkReal(-1.00000000000000))*(cj7)*(x440)*(x450)))+(((cj5)*(sj4)))+(((IkReal(-1.00000000000000))*(x447)*(x452)))+(((cj4)*(sj5)))+(((r12)*(x453))));
evalcond[5]=((((IkReal(-1.00000000000000))*(r12)*(x447)))+(((IkReal(-1.00000000000000))*(sj7)*(x444)*(x449)))+(((sj4)*(sj5)))+(((x446)*(x453)))+(((x441)*(x448)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)))+(((IkReal(-1.00000000000000))*(x440)*(x448)))+(((IkReal(-1.00000000000000))*(cj7)*(r02)*(x450))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst38)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((((r10)*(sj8)))+(((cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst38)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)))))), ((gconst38)*(((((r10)*(sj8)))+(((cj8)*(r11)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x455=IKsin(j3);
IkReal x456=IKcos(j3);
IkReal x457=((IkReal(1.00000000000000))*(sj8));
IkReal x458=((IkReal(1.00000000000000))*(cj8));
IkReal x459=((r01)*(sj8));
IkReal x460=((cj8)*(r10));
IkReal x461=((sj7)*(x456));
IkReal x462=((cj7)*(x455));
IkReal x463=((r00)*(x455));
IkReal x464=((sj7)*(x455));
IkReal x465=((cj7)*(x456));
evalcond[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r11)*(x456)*(x458)))+(((IkReal(-1.00000000000000))*(r10)*(x456)*(x457)))+(((cj8)*(r01)*(x455)))+(((sj8)*(x463))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r11)*(x455)*(x458)))+(((IkReal(-1.00000000000000))*(r10)*(x455)*(x457)))+(((IkReal(-1.00000000000000))*(r00)*(x456)*(x457)))+(((IkReal(-1.00000000000000))*(r01)*(x456)*(x458))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r11)*(x457)*(x465)))+(((IkReal(-1.00000000000000))*(r00)*(x458)*(x462)))+(((IkReal(-1.00000000000000))*(r02)*(x464)))+(((r12)*(x461)))+(((x460)*(x465)))+(((x459)*(x462))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj7)*(x458)*(x463)))+(((IkReal(-1.00000000000000))*(r11)*(x457)*(x461)))+(((r02)*(x462)))+(((x460)*(x461)))+(((IkReal(-1.00000000000000))*(r12)*(x465)))+(((x459)*(x464))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst41;
gconst41=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x466=((cj7)*(sj5));
IkReal x467=((r21)*(sj8));
IkReal x468=((cj5)*(cj7));
IkReal x469=((cj8)*(r20));
IkReal x470=((sj5)*(sj7));
IkReal x471=((IkReal(1.00000000000000))*(cj5)*(sj7));
if( IKabs(((gconst41)*(((((r22)*(x468)))+(((cj5)*(sj7)*(x467)))+(((x466)*(x469)))+(((IkReal(-1.00000000000000))*(x469)*(x471)))+(((IkReal(-1.00000000000000))*(x466)*(x467)))+(((r22)*(x470))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst41)*(((((r22)*(x466)))+(((IkReal(-1.00000000000000))*(x468)*(x469)))+(((IkReal(-1.00000000000000))*(r22)*(x471)))+(((x467)*(x470)))+(((IkReal(-1.00000000000000))*(x469)*(x470)))+(((x467)*(x468))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst41)*(((((r22)*(x468)))+(((cj5)*(sj7)*(x467)))+(((x466)*(x469)))+(((IkReal(-1.00000000000000))*(x469)*(x471)))+(((IkReal(-1.00000000000000))*(x466)*(x467)))+(((r22)*(x470)))))), ((gconst41)*(((((r22)*(x466)))+(((IkReal(-1.00000000000000))*(x468)*(x469)))+(((IkReal(-1.00000000000000))*(r22)*(x471)))+(((x467)*(x470)))+(((IkReal(-1.00000000000000))*(x469)*(x470)))+(((x467)*(x468)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x472=IKcos(j4);
IkReal x473=IKsin(j4);
IkReal x474=((IkReal(1.00000000000000))*(cj7));
IkReal x475=((cj8)*(r20));
IkReal x476=((cj3)*(r02));
IkReal x477=((IkReal(1.00000000000000))*(sj7));
IkReal x478=((sj3)*(sj7));
IkReal x479=((r21)*(sj8));
IkReal x480=((IkReal(1.00000000000000))*(cj5));
IkReal x481=((cj8)*(r10));
IkReal x482=((sj5)*(x473));
IkReal x483=((sj5)*(x472));
IkReal x484=((r11)*(sj3)*(sj8));
IkReal x485=((cj3)*(cj8)*(r00));
IkReal x486=((cj3)*(r01)*(sj8));
IkReal x487=((x472)*(x480));
evalcond[0]=((((IkReal(-1.00000000000000))*(x487)))+(((IkReal(-1.00000000000000))*(r22)*(x477)))+(x482)+(((cj7)*(x479)))+(((IkReal(-1.00000000000000))*(x474)*(x475))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x475)*(x477)))+(((IkReal(-1.00000000000000))*(x483)))+(((cj7)*(r22)))+(((sj7)*(x479)))+(((IkReal(-1.00000000000000))*(x473)*(x480))));
evalcond[2]=((((cj5)*(x473)))+(((cj7)*(x485)))+(((IkReal(-1.00000000000000))*(x474)*(x486)))+(((IkReal(-1.00000000000000))*(x474)*(x484)))+(((cj7)*(sj3)*(x481)))+(x483)+(((r12)*(x478)))+(((sj7)*(x476))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r12)*(sj3)*(x474)))+(((sj7)*(x485)))+(((IkReal(-1.00000000000000))*(x487)))+(((x478)*(x481)))+(x482)+(((IkReal(-1.00000000000000))*(x477)*(x484)))+(((IkReal(-1.00000000000000))*(x477)*(x486)))+(((IkReal(-1.00000000000000))*(x474)*(x476))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x488=((IkReal(4.00000000000000))*(sj7));
IkReal x489=((npy)*(sj8));
IkReal x490=((IkReal(4.00000000000000))*(cj7));
IkReal x491=((cj8)*(npx));
if( IKabs(((((IKabs(cj6) != 0)?((IkReal)1/(cj6)):(IkReal)1.0e30))*(((((IkReal(0.360000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x488)*(x491)))+(((x488)*(x489)))+(((IkReal(0.380000000000000))*(sj6)))+(((npz)*(x490)))+(((IkReal(0.120000000000000))*(cj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(x489)*(x490)))+(((x490)*(x491)))+(((IkReal(-0.360000000000000))*(cj7)))+(((npz)*(x488))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(cj6) != 0)?((IkReal)1/(cj6)):(IkReal)1.0e30))*(((((IkReal(0.360000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x488)*(x491)))+(((x488)*(x489)))+(((IkReal(0.380000000000000))*(sj6)))+(((npz)*(x490)))+(((IkReal(0.120000000000000))*(cj6)))))))+IKsqr(((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(x489)*(x490)))+(((x490)*(x491)))+(((IkReal(-0.360000000000000))*(cj7)))+(((npz)*(x488)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(cj6) != 0)?((IkReal)1/(cj6)):(IkReal)1.0e30))*(((((IkReal(0.360000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x488)*(x491)))+(((x488)*(x489)))+(((IkReal(0.380000000000000))*(sj6)))+(((npz)*(x490)))+(((IkReal(0.120000000000000))*(cj6)))))), ((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(x489)*(x490)))+(((x490)*(x491)))+(((IkReal(-0.360000000000000))*(cj7)))+(((npz)*(x488)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x492=IKsin(j5);
IkReal x493=((IkReal(1.00000000000000))*(sj7));
IkReal x494=((npy)*(sj8));
IkReal x495=((cj8)*(npx));
IkReal x496=((IkReal(0.250000000000000))*(x492));
evalcond[0]=((((IkReal(-0.0300000000000000))*(sj6)))+(((npx)*(sj8)))+(((cj8)*(npy)))+(((IkReal(0.0950000000000000))*(cj6)))+(((sj6)*(x496))));
evalcond[1]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((cj7)*(x494)))+(((IkReal(-1.00000000000000))*(cj7)*(x495)))+(((IkReal(-1.00000000000000))*(npz)*(x493)))+(((IkReal(0.250000000000000))*(IKcos(j5)))));
evalcond[2]=((((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(0.0950000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(x493)*(x495)))+(((IkReal(0.0300000000000000))*(cj6)))+(((IkReal(-1.00000000000000))*(cj6)*(x496)))+(((cj7)*(npz)))+(((sj7)*(x494))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x497=(sj8)*(sj8);
IkReal x498=(cj8)*(cj8);
IkReal x499=((r00)*(r11));
IkReal x500=((r02)*(sj7));
IkReal x501=((cj7)*(x498));
IkReal x502=((IkReal(1.00000000000000))*(r12)*(sj7));
IkReal x503=((IkReal(1.00000000000000))*(r01)*(r10));
IkReal x504=((cj7)*(x497));
gconst1=IKsign(((((IkReal(-1.00000000000000))*(x501)*(x503)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x502)))+(((IkReal(-1.00000000000000))*(x503)*(x504)))+(((r10)*(sj8)*(x500)))+(((IkReal(-1.00000000000000))*(r00)*(sj8)*(x502)))+(((x499)*(x504)))+(((x499)*(x501)))+(((cj8)*(r11)*(x500)))));
IkReal x505=(sj8)*(sj8);
IkReal x506=(cj8)*(cj8);
IkReal x507=((r00)*(r11));
IkReal x508=((r02)*(sj7));
IkReal x509=((cj7)*(x506));
IkReal x510=((IkReal(1.00000000000000))*(r12)*(sj7));
IkReal x511=((IkReal(1.00000000000000))*(r01)*(r10));
IkReal x512=((cj7)*(x505));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x511)*(x512)))+(((x507)*(x512)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x510)))+(((IkReal(-1.00000000000000))*(r00)*(sj8)*(x510)))+(((x507)*(x509)))+(((r10)*(sj8)*(x508)))+(((cj8)*(r11)*(x508)))+(((IkReal(-1.00000000000000))*(x509)*(x511))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x513=((IkReal(1.00000000000000))*(sj7));
IkReal x514=((npy)*(sj8));
IkReal x515=((cj8)*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(0.235000000000000))+(((IkReal(-1.00000000000000))*(npz)*(x513)))+(((IkReal(0.0900000000000000))*(cj7)))+(((cj7)*(x514)))+(((IkReal(-1.00000000000000))*(cj7)*(x515)))+(((IkReal(0.250000000000000))*(cj5))));
evalcond[4]=((IkReal(0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x513)*(x515)))+(((sj7)*(x514)))+(((cj7)*(npz)))+(((IkReal(-0.250000000000000))*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
IkReal x516=(sj8)*(sj8);
IkReal x517=(cj8)*(cj8);
IkReal x518=((IkReal(2.00000000000000))*(cj8)*(sj8));
gconst7=IKsign(((((x517)*((r01)*(r01))))+(((x516)*((r00)*(r00))))+(((r00)*(r01)*(x518)))+(((r10)*(r11)*(x518)))+(((x517)*((r11)*(r11))))+(((x516)*((r10)*(r10))))));
IkReal x519=(sj8)*(sj8);
IkReal x520=(cj8)*(cj8);
IkReal x521=((IkReal(2.00000000000000))*(cj8)*(sj8));
dummyeval[0]=((((x520)*((r01)*(r01))))+(((r10)*(r11)*(x521)))+(((x519)*((r00)*(r00))))+(((x520)*((r11)*(r11))))+(((r00)*(r01)*(x521)))+(((x519)*((r10)*(r10)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x522=((sj5)*(sj7));
IkReal x523=((r21)*(sj8));
IkReal x524=((cj5)*(sj7));
IkReal x525=((cj8)*(r20));
IkReal x526=((cj5)*(cj7));
IkReal x527=((cj7)*(sj5));
if( IKabs(((gconst8)*(((((r22)*(x526)))+(((IkReal(-1.00000000000000))*(x525)*(x527)))+(((IkReal(-1.00000000000000))*(x524)*(x525)))+(((x523)*(x524)))+(((x523)*(x527)))+(((IkReal(-1.00000000000000))*(r22)*(x522))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((x522)*(x523)))+(((IkReal(-1.00000000000000))*(x522)*(x525)))+(((r22)*(x527)))+(((r22)*(x524)))+(((x525)*(x526)))+(((IkReal(-1.00000000000000))*(x523)*(x526))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst8)*(((((r22)*(x526)))+(((IkReal(-1.00000000000000))*(x525)*(x527)))+(((IkReal(-1.00000000000000))*(x524)*(x525)))+(((x523)*(x524)))+(((x523)*(x527)))+(((IkReal(-1.00000000000000))*(r22)*(x522)))))), ((gconst8)*(((((x522)*(x523)))+(((IkReal(-1.00000000000000))*(x522)*(x525)))+(((r22)*(x527)))+(((r22)*(x524)))+(((x525)*(x526)))+(((IkReal(-1.00000000000000))*(x523)*(x526)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x528=IKcos(j4);
IkReal x529=IKsin(j4);
IkReal x530=((r21)*(sj8));
IkReal x531=((IkReal(1.00000000000000))*(cj8)*(r20));
evalcond[0]=((((cj7)*(x530)))+(((sj5)*(x529)))+(((IkReal(-1.00000000000000))*(cj7)*(x531)))+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((IkReal(-1.00000000000000))*(cj5)*(x528))));
evalcond[1]=((((cj5)*(x529)))+(((sj5)*(x528)))+(((IkReal(-1.00000000000000))*(sj7)*(x531)))+(((sj7)*(x530)))+(((cj7)*(r22))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst9;
IkReal x532=(sj8)*(sj8);
IkReal x533=(cj8)*(cj8);
IkReal x534=((IkReal(2.00000000000000))*(cj8)*(sj8));
gconst9=IKsign(((((x532)*((r10)*(r10))))+(((x532)*((r00)*(r00))))+(((r10)*(r11)*(x534)))+(((x533)*((r01)*(r01))))+(((x533)*((r11)*(r11))))+(((r00)*(r01)*(x534)))));
IkReal x535=(sj8)*(sj8);
IkReal x536=(cj8)*(cj8);
IkReal x537=((IkReal(2.00000000000000))*(cj8)*(sj8));
dummyeval[0]=((((x536)*((r11)*(r11))))+(((x536)*((r01)*(r01))))+(((x535)*((r00)*(r00))))+(((r10)*(r11)*(x537)))+(((r00)*(r01)*(x537)))+(((x535)*((r10)*(r10)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst9)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((r10)*(sj8)))+(((cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst9)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)))))), ((gconst9)*(((((r10)*(sj8)))+(((cj8)*(r11)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x538=IKsin(j3);
IkReal x539=IKcos(j3);
IkReal x540=((r01)*(sj8));
IkReal x541=((cj8)*(r00));
IkReal x542=((r00)*(sj8));
IkReal x543=((cj8)*(r11));
IkReal x544=((r11)*(sj8));
IkReal x545=((r10)*(sj8));
IkReal x546=((cj8)*(r10));
IkReal x547=((cj7)*(x538));
IkReal x548=((sj7)*(x539));
IkReal x549=((IkReal(1.00000000000000))*(x538));
IkReal x550=((IkReal(1.00000000000000))*(x539));
IkReal x551=((cj8)*(x538));
IkReal x552=((IkReal(1.00000000000000))*(x544));
IkReal x553=((sj7)*(x538));
IkReal x554=((cj7)*(x539));
evalcond[0]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x545)*(x550)))+(((IkReal(-1.00000000000000))*(x543)*(x550)))+(((x538)*(x542)))+(((r01)*(x551))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj8)*(r01)*(x550)))+(((IkReal(-1.00000000000000))*(x545)*(x549)))+(((IkReal(-1.00000000000000))*(x542)*(x550)))+(((IkReal(-1.00000000000000))*(x543)*(x549))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x541)*(x547)))+(((x540)*(x547)))+(((r12)*(x548)))+(((IkReal(-1.00000000000000))*(cj7)*(x544)*(x550)))+(((IkReal(-1.00000000000000))*(r02)*(sj7)*(x549)))+(((x546)*(x554))));
evalcond[3]=((((r02)*(x547)))+(((x540)*(x553)))+(((IkReal(-1.00000000000000))*(x548)*(x552)))+(((IkReal(-1.00000000000000))*(sj7)*(x541)*(x549)))+(((x546)*(x548)))+(((IkReal(-1.00000000000000))*(cj7)*(r12)*(x550))));
evalcond[4]=((((x541)*(x554)))+(((r02)*(x548)))+(((r12)*(x553)))+(((IkReal(-1.00000000000000))*(x547)*(x552)))+(((cj5)*(sj4)))+(((cj4)*(sj5)))+(((IkReal(-1.00000000000000))*(cj7)*(x540)*(x550)))+(((x546)*(x547))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj7)*(x544)*(x549)))+(((x541)*(x548)))+(((IkReal(-1.00000000000000))*(cj7)*(r02)*(x550)))+(((cj4)*(cj5)))+(((IkReal(-1.00000000000000))*(r12)*(x547)))+(((x546)*(x553)))+(((IkReal(-1.00000000000000))*(x540)*(x548)))+(((IkReal(-1.00000000000000))*(sj4)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst7)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((r10)*(sj8)))+(((cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst7)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)))))), ((gconst7)*(((((r10)*(sj8)))+(((cj8)*(r11)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x555=IKsin(j3);
IkReal x556=IKcos(j3);
IkReal x557=((IkReal(1.00000000000000))*(sj8));
IkReal x558=((IkReal(1.00000000000000))*(cj8));
IkReal x559=((r01)*(sj8));
IkReal x560=((cj8)*(r10));
IkReal x561=((sj7)*(x556));
IkReal x562=((cj7)*(x555));
IkReal x563=((r00)*(x555));
IkReal x564=((sj7)*(x555));
IkReal x565=((cj7)*(x556));
evalcond[0]=((IkReal(1.00000000000000))+(((cj8)*(r01)*(x555)))+(((sj8)*(x563)))+(((IkReal(-1.00000000000000))*(r11)*(x556)*(x558)))+(((IkReal(-1.00000000000000))*(r10)*(x556)*(x557))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(x556)*(x558)))+(((IkReal(-1.00000000000000))*(r11)*(x555)*(x558)))+(((IkReal(-1.00000000000000))*(r00)*(x556)*(x557)))+(((IkReal(-1.00000000000000))*(r10)*(x555)*(x557))));
evalcond[2]=((((x560)*(x565)))+(((r12)*(x561)))+(((IkReal(-1.00000000000000))*(r11)*(x557)*(x565)))+(((IkReal(-1.00000000000000))*(r02)*(x564)))+(((IkReal(-1.00000000000000))*(r00)*(x558)*(x562)))+(((x559)*(x562))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj7)*(x558)*(x563)))+(((x560)*(x561)))+(((IkReal(-1.00000000000000))*(r11)*(x557)*(x561)))+(((IkReal(-1.00000000000000))*(r12)*(x565)))+(((r02)*(x562)))+(((x559)*(x564))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x566=((r21)*(sj8));
IkReal x567=((sj5)*(sj7));
IkReal x568=((cj5)*(sj7));
IkReal x569=((cj5)*(cj7));
IkReal x570=((cj8)*(r20));
IkReal x571=((cj7)*(sj5));
if( IKabs(((gconst10)*(((((x566)*(x568)))+(((r22)*(x569)))+(((IkReal(-1.00000000000000))*(r22)*(x567)))+(((x566)*(x571)))+(((IkReal(-1.00000000000000))*(x570)*(x571)))+(((IkReal(-1.00000000000000))*(x568)*(x570))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((x566)*(x567)))+(((r22)*(x568)))+(((IkReal(-1.00000000000000))*(x567)*(x570)))+(((IkReal(-1.00000000000000))*(x566)*(x569)))+(((x569)*(x570)))+(((r22)*(x571))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst10)*(((((x566)*(x568)))+(((r22)*(x569)))+(((IkReal(-1.00000000000000))*(r22)*(x567)))+(((x566)*(x571)))+(((IkReal(-1.00000000000000))*(x570)*(x571)))+(((IkReal(-1.00000000000000))*(x568)*(x570)))))), ((gconst10)*(((((x566)*(x567)))+(((r22)*(x568)))+(((IkReal(-1.00000000000000))*(x567)*(x570)))+(((IkReal(-1.00000000000000))*(x566)*(x569)))+(((x569)*(x570)))+(((r22)*(x571)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x572=IKcos(j4);
IkReal x573=IKsin(j4);
IkReal x574=((IkReal(1.00000000000000))*(cj7));
IkReal x575=((cj8)*(r20));
IkReal x576=((cj3)*(r02));
IkReal x577=((IkReal(1.00000000000000))*(sj7));
IkReal x578=((sj3)*(sj7));
IkReal x579=((r21)*(sj8));
IkReal x580=((cj8)*(r10));
IkReal x581=((sj5)*(x572));
IkReal x582=((cj5)*(x573));
IkReal x583=((r11)*(sj3)*(sj8));
IkReal x584=((cj3)*(cj8)*(r00));
IkReal x585=((cj5)*(x572));
IkReal x586=((cj3)*(r01)*(sj8));
IkReal x587=((sj5)*(x573));
IkReal x588=((x581)+(x582));
evalcond[0]=((((IkReal(-1.00000000000000))*(x585)))+(((cj7)*(x579)))+(((IkReal(-1.00000000000000))*(x574)*(x575)))+(x587)+(((IkReal(-1.00000000000000))*(r22)*(x577))));
evalcond[1]=((((sj7)*(x579)))+(((IkReal(-1.00000000000000))*(x575)*(x577)))+(x588)+(((cj7)*(r22))));
evalcond[2]=((((cj7)*(sj3)*(x580)))+(((r12)*(x578)))+(((cj7)*(x584)))+(((sj7)*(x576)))+(x588)+(((IkReal(-1.00000000000000))*(x574)*(x583)))+(((IkReal(-1.00000000000000))*(x574)*(x586))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r12)*(sj3)*(x574)))+(((x578)*(x580)))+(((IkReal(-1.00000000000000))*(x587)))+(((IkReal(-1.00000000000000))*(x574)*(x576)))+(((IkReal(-1.00000000000000))*(x577)*(x586)))+(((IkReal(-1.00000000000000))*(x577)*(x583)))+(x585)+(((sj7)*(x584))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
IkReal x589=((IkReal(1.00000000000000))*(sj7));
IkReal x590=((npy)*(sj8));
IkReal x591=((cj8)*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(0.235000000000000))+(((IkReal(-1.00000000000000))*(cj7)*(x591)))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(0.250000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(npz)*(x589)))+(((cj7)*(x590))));
evalcond[4]=((IkReal(-0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x589)*(x591)))+(((IkReal(0.250000000000000))*(sj5)))+(((sj7)*(x590)))+(((cj7)*(npz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
IkReal x592=(cj8)*(cj8);
IkReal x593=(sj8)*(sj8);
IkReal x594=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x595=((IkReal(1.00000000000000))*(x592));
IkReal x596=((IkReal(1.00000000000000))*(x593));
gconst11=IKsign(((((IkReal(-1.00000000000000))*(r00)*(r01)*(x594)))+(((IkReal(-1.00000000000000))*(x596)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(x596)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(x595)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x594)))+(((IkReal(-1.00000000000000))*(x595)*((r01)*(r01))))));
IkReal x597=(cj8)*(cj8);
IkReal x598=(sj8)*(sj8);
IkReal x599=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x600=((IkReal(1.00000000000000))*(x597));
IkReal x601=((IkReal(1.00000000000000))*(x598));
dummyeval[0]=((((IkReal(-1.00000000000000))*(r00)*(r01)*(x599)))+(((IkReal(-1.00000000000000))*(x600)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(x601)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(x600)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x599)))+(((IkReal(-1.00000000000000))*(x601)*((r10)*(r10)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x602=((cj7)*(sj5));
IkReal x603=((r21)*(sj8));
IkReal x604=((cj5)*(cj7));
IkReal x605=((cj8)*(r20));
IkReal x606=((sj5)*(sj7));
IkReal x607=((IkReal(1.00000000000000))*(cj5)*(sj7));
if( IKabs(((gconst12)*(((((IkReal(-1.00000000000000))*(x605)*(x607)))+(((cj5)*(sj7)*(x603)))+(((IkReal(-1.00000000000000))*(x602)*(x603)))+(((x602)*(x605)))+(((r22)*(x606)))+(((r22)*(x604))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((IkReal(-1.00000000000000))*(x604)*(x605)))+(((IkReal(-1.00000000000000))*(x605)*(x606)))+(((IkReal(-1.00000000000000))*(r22)*(x607)))+(((x603)*(x606)))+(((x603)*(x604)))+(((r22)*(x602))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst12)*(((((IkReal(-1.00000000000000))*(x605)*(x607)))+(((cj5)*(sj7)*(x603)))+(((IkReal(-1.00000000000000))*(x602)*(x603)))+(((x602)*(x605)))+(((r22)*(x606)))+(((r22)*(x604)))))), ((gconst12)*(((((IkReal(-1.00000000000000))*(x604)*(x605)))+(((IkReal(-1.00000000000000))*(x605)*(x606)))+(((IkReal(-1.00000000000000))*(r22)*(x607)))+(((x603)*(x606)))+(((x603)*(x604)))+(((r22)*(x602)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x608=IKcos(j4);
IkReal x609=IKsin(j4);
IkReal x610=((IkReal(1.00000000000000))*(cj5));
IkReal x611=((r21)*(sj8));
IkReal x612=((IkReal(1.00000000000000))*(cj8)*(r20));
evalcond[0]=((((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((sj5)*(x609)))+(((IkReal(-1.00000000000000))*(cj7)*(x612)))+(((cj7)*(x611)))+(((IkReal(-1.00000000000000))*(x608)*(x610))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x609)*(x610)))+(((IkReal(-1.00000000000000))*(sj5)*(x608)))+(((IkReal(-1.00000000000000))*(sj7)*(x612)))+(((cj7)*(r22)))+(((sj7)*(x611))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst13;
IkReal x613=(cj8)*(cj8);
IkReal x614=(sj8)*(sj8);
IkReal x615=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x616=((IkReal(1.00000000000000))*(x613));
IkReal x617=((IkReal(1.00000000000000))*(x614));
gconst13=IKsign(((((IkReal(-1.00000000000000))*(x617)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x615)))+(((IkReal(-1.00000000000000))*(x616)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(x616)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(x617)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x615)))));
IkReal x618=(cj8)*(cj8);
IkReal x619=(sj8)*(sj8);
IkReal x620=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x621=((IkReal(1.00000000000000))*(x618));
IkReal x622=((IkReal(1.00000000000000))*(x619));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x622)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(x621)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x620)))+(((IkReal(-1.00000000000000))*(x622)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x620)))+(((IkReal(-1.00000000000000))*(x621)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst13)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((r10)*(sj8)))+(((cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst13)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)))))), ((gconst13)*(((((r10)*(sj8)))+(((cj8)*(r11)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x623=IKsin(j3);
IkReal x624=IKcos(j3);
IkReal x625=((r01)*(sj8));
IkReal x626=((cj8)*(r00));
IkReal x627=((r00)*(sj8));
IkReal x628=((cj8)*(r11));
IkReal x629=((r11)*(sj8));
IkReal x630=((r10)*(sj8));
IkReal x631=((cj8)*(r10));
IkReal x632=((cj7)*(x623));
IkReal x633=((sj7)*(x624));
IkReal x634=((IkReal(1.00000000000000))*(x623));
IkReal x635=((IkReal(1.00000000000000))*(x624));
IkReal x636=((cj8)*(x623));
IkReal x637=((IkReal(1.00000000000000))*(x629));
IkReal x638=((sj7)*(x623));
IkReal x639=((cj7)*(x624));
evalcond[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x630)*(x635)))+(((IkReal(-1.00000000000000))*(x628)*(x635)))+(((r01)*(x636)))+(((x623)*(x627))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x630)*(x634)))+(((IkReal(-1.00000000000000))*(x628)*(x634)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x635)))+(((IkReal(-1.00000000000000))*(x627)*(x635))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x626)*(x632)))+(((IkReal(-1.00000000000000))*(cj7)*(x629)*(x635)))+(((x625)*(x632)))+(((r12)*(x633)))+(((x631)*(x639)))+(((IkReal(-1.00000000000000))*(r02)*(sj7)*(x634))));
evalcond[3]=((((r02)*(x632)))+(((IkReal(-1.00000000000000))*(x633)*(x637)))+(((IkReal(-1.00000000000000))*(cj7)*(r12)*(x635)))+(((x625)*(x638)))+(((IkReal(-1.00000000000000))*(sj7)*(x626)*(x634)))+(((x631)*(x633))));
evalcond[4]=((((r02)*(x633)))+(((IkReal(-1.00000000000000))*(cj7)*(x625)*(x635)))+(((cj5)*(sj4)))+(((cj4)*(sj5)))+(((r12)*(x638)))+(((x631)*(x632)))+(((x626)*(x639)))+(((IkReal(-1.00000000000000))*(x632)*(x637))));
evalcond[5]=((((IkReal(-1.00000000000000))*(r12)*(x632)))+(((IkReal(-1.00000000000000))*(cj7)*(r02)*(x635)))+(((sj4)*(sj5)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)))+(((x631)*(x638)))+(((IkReal(-1.00000000000000))*(x625)*(x633)))+(((IkReal(-1.00000000000000))*(sj7)*(x629)*(x634)))+(((x626)*(x633))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst11)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((r10)*(sj8)))+(((cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst11)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)))))), ((gconst11)*(((((r10)*(sj8)))+(((cj8)*(r11)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x640=IKsin(j3);
IkReal x641=IKcos(j3);
IkReal x642=((IkReal(1.00000000000000))*(sj8));
IkReal x643=((IkReal(1.00000000000000))*(cj8));
IkReal x644=((r01)*(sj8));
IkReal x645=((cj8)*(r10));
IkReal x646=((sj7)*(x641));
IkReal x647=((cj7)*(x640));
IkReal x648=((r00)*(x640));
IkReal x649=((sj7)*(x640));
IkReal x650=((cj7)*(x641));
evalcond[0]=((IkReal(-1.00000000000000))+(((sj8)*(x648)))+(((IkReal(-1.00000000000000))*(r10)*(x641)*(x642)))+(((cj8)*(r01)*(x640)))+(((IkReal(-1.00000000000000))*(r11)*(x641)*(x643))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r11)*(x640)*(x643)))+(((IkReal(-1.00000000000000))*(r00)*(x641)*(x642)))+(((IkReal(-1.00000000000000))*(r01)*(x641)*(x643)))+(((IkReal(-1.00000000000000))*(r10)*(x640)*(x642))));
evalcond[2]=((((x644)*(x647)))+(((IkReal(-1.00000000000000))*(r11)*(x642)*(x650)))+(((IkReal(-1.00000000000000))*(r00)*(x643)*(x647)))+(((x645)*(x650)))+(((IkReal(-1.00000000000000))*(r02)*(x649)))+(((r12)*(x646))));
evalcond[3]=((((x644)*(x649)))+(((IkReal(-1.00000000000000))*(r11)*(x642)*(x646)))+(((r02)*(x647)))+(((x645)*(x646)))+(((IkReal(-1.00000000000000))*(sj7)*(x643)*(x648)))+(((IkReal(-1.00000000000000))*(r12)*(x650))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x651=((IkReal(1.00000000000000))*(sj5));
IkReal x652=((cj7)*(sj5));
IkReal x653=((cj8)*(r20));
IkReal x654=((cj5)*(cj7));
IkReal x655=((sj5)*(sj7));
IkReal x656=((r21)*(sj8));
IkReal x657=((cj7)*(x656));
IkReal x658=((IkReal(1.00000000000000))*(cj5)*(sj7));
if( IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(x651)*(x657)))+(((x652)*(x653)))+(((r22)*(x654)))+(((r22)*(x655)))+(((cj5)*(sj7)*(x656)))+(((IkReal(-1.00000000000000))*(x653)*(x658))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(sj7)*(x651)*(x653)))+(((IkReal(-1.00000000000000))*(x653)*(x654)))+(((IkReal(-1.00000000000000))*(r22)*(x658)))+(((x654)*(x656)))+(((r22)*(x652)))+(((x655)*(x656))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst14)*(((((IkReal(-1.00000000000000))*(x651)*(x657)))+(((x652)*(x653)))+(((r22)*(x654)))+(((r22)*(x655)))+(((cj5)*(sj7)*(x656)))+(((IkReal(-1.00000000000000))*(x653)*(x658)))))), ((gconst14)*(((((IkReal(-1.00000000000000))*(sj7)*(x651)*(x653)))+(((IkReal(-1.00000000000000))*(x653)*(x654)))+(((IkReal(-1.00000000000000))*(r22)*(x658)))+(((x654)*(x656)))+(((r22)*(x652)))+(((x655)*(x656)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x659=IKcos(j4);
IkReal x660=IKsin(j4);
IkReal x661=((IkReal(1.00000000000000))*(cj7));
IkReal x662=((cj8)*(r20));
IkReal x663=((cj3)*(r02));
IkReal x664=((IkReal(1.00000000000000))*(sj7));
IkReal x665=((sj3)*(sj7));
IkReal x666=((r21)*(sj8));
IkReal x667=((IkReal(1.00000000000000))*(cj5));
IkReal x668=((cj8)*(r10));
IkReal x669=((sj5)*(x660));
IkReal x670=((sj5)*(x659));
IkReal x671=((r11)*(sj3)*(sj8));
IkReal x672=((cj3)*(cj8)*(r00));
IkReal x673=((cj3)*(r01)*(sj8));
IkReal x674=((x659)*(x667));
evalcond[0]=((((IkReal(-1.00000000000000))*(r22)*(x664)))+(((IkReal(-1.00000000000000))*(x661)*(x662)))+(x669)+(((cj7)*(x666)))+(((IkReal(-1.00000000000000))*(x674))));
evalcond[1]=((((sj7)*(x666)))+(((IkReal(-1.00000000000000))*(x662)*(x664)))+(((IkReal(-1.00000000000000))*(x660)*(x667)))+(((IkReal(-1.00000000000000))*(x670)))+(((cj7)*(r22))));
evalcond[2]=((((sj7)*(x663)))+(((cj7)*(sj3)*(x668)))+(((cj7)*(x672)))+(((r12)*(x665)))+(x670)+(((cj5)*(x660)))+(((IkReal(-1.00000000000000))*(x661)*(x671)))+(((IkReal(-1.00000000000000))*(x661)*(x673))));
evalcond[3]=((((x665)*(x668)))+(((IkReal(-1.00000000000000))*(x661)*(x663)))+(((IkReal(-1.00000000000000))*(x664)*(x673)))+(((IkReal(-1.00000000000000))*(x664)*(x671)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x661)))+(x669)+(((sj7)*(x672)))+(((IkReal(-1.00000000000000))*(x674))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x675=((cj6)*(cj7));
IkReal x676=((IkReal(1.00000000000000))*(sj8));
IkReal x677=((cj6)*(sj7));
if( IKabs(((gconst1)*(((((r12)*(x677)))+(((cj8)*(r10)*(x675)))+(((IkReal(-1.00000000000000))*(r11)*(x675)*(x676))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((r02)*(x677)))+(((IkReal(-1.00000000000000))*(r01)*(x675)*(x676)))+(((cj8)*(r00)*(x675))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst1)*(((((r12)*(x677)))+(((cj8)*(r10)*(x675)))+(((IkReal(-1.00000000000000))*(r11)*(x675)*(x676)))))), ((gconst1)*(((((r02)*(x677)))+(((IkReal(-1.00000000000000))*(r01)*(x675)*(x676)))+(((cj8)*(r00)*(x675)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x678=IKsin(j3);
IkReal x679=IKcos(j3);
IkReal x680=((IkReal(1.00000000000000))*(r11));
IkReal x681=((r01)*(sj8));
IkReal x682=((cj8)*(r10));
IkReal x683=((IkReal(1.00000000000000))*(sj7));
IkReal x684=((sj7)*(x679));
IkReal x685=((cj7)*(x678));
IkReal x686=((r00)*(x678));
IkReal x687=((cj7)*(x679));
evalcond[0]=((cj6)+(((IkReal(-1.00000000000000))*(cj8)*(x679)*(x680)))+(((IkReal(-1.00000000000000))*(r10)*(sj8)*(x679)))+(((cj8)*(r01)*(x678)))+(((sj8)*(x686))));
evalcond[1]=((((x682)*(x687)))+(((IkReal(-1.00000000000000))*(sj8)*(x680)*(x687)))+(((IkReal(-1.00000000000000))*(r02)*(x678)*(x683)))+(((IkReal(-1.00000000000000))*(cj8)*(r00)*(x685)))+(((x681)*(x685)))+(((r12)*(x684))));
evalcond[2]=((sj6)+(((x682)*(x684)))+(((IkReal(-1.00000000000000))*(r12)*(x687)))+(((IkReal(-1.00000000000000))*(sj8)*(x680)*(x684)))+(((sj7)*(x678)*(x681)))+(((IkReal(-1.00000000000000))*(cj8)*(x683)*(x686)))+(((r02)*(x685))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
IkReal x688=((cj3)*(cj8));
IkReal x689=((IkReal(1.00000000000000))*(sj7));
IkReal x690=((cj8)*(npx));
IkReal x691=((cj8)*(sj3));
IkReal x692=((npy)*(sj8));
IkReal x693=((r02)*(sj3));
IkReal x694=((IkReal(1.00000000000000))*(r11));
IkReal x695=((cj3)*(r12));
IkReal x696=((IkReal(1.00000000000000))*(cj7));
IkReal x697=((sj3)*(sj8));
IkReal x698=((IkReal(1.00000000000000))*(cj3)*(sj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(0.235000000000000))+(((IkReal(-1.00000000000000))*(npz)*(x689)))+(((cj7)*(x692)))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(0.250000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(x690)*(x696))));
evalcond[4]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x688)*(x694)))+(((IkReal(-1.00000000000000))*(r10)*(x698)))+(((r00)*(x697)))+(((r01)*(x691))));
evalcond[5]=((IkReal(0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((sj7)*(x692)))+(((cj7)*(npz)))+(((IkReal(-1.00000000000000))*(x689)*(x690)))+(((IkReal(-0.250000000000000))*(sj5))));
evalcond[6]=((((IkReal(-1.00000000000000))*(r00)*(x698)))+(((IkReal(-1.00000000000000))*(r10)*(x697)))+(((IkReal(-1.00000000000000))*(r01)*(x688)))+(((IkReal(-1.00000000000000))*(x691)*(x694))));
evalcond[7]=((((cj7)*(r10)*(x688)))+(((cj7)*(r01)*(x697)))+(((sj7)*(x695)))+(((IkReal(-1.00000000000000))*(r00)*(x691)*(x696)))+(((IkReal(-1.00000000000000))*(x689)*(x693)))+(((IkReal(-1.00000000000000))*(cj3)*(cj7)*(sj8)*(x694))));
evalcond[8]=((((cj7)*(x693)))+(((IkReal(-1.00000000000000))*(cj3)*(r11)*(sj8)*(x689)))+(((IkReal(-1.00000000000000))*(r00)*(x689)*(x691)))+(((r10)*(sj7)*(x688)))+(((r01)*(sj7)*(x697)))+(((IkReal(-1.00000000000000))*(x695)*(x696))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x699=((sj5)*(sj7));
IkReal x700=((r21)*(sj8));
IkReal x701=((cj5)*(sj7));
IkReal x702=((cj7)*(sj5));
IkReal x703=((cj5)*(cj7));
IkReal x704=((IkReal(1.00000000000000))*(cj8)*(r20));
if( IKabs(((gconst4)*(((((r22)*(x703)))+(((IkReal(-1.00000000000000))*(r22)*(x699)))+(((IkReal(-1.00000000000000))*(x702)*(x704)))+(((x700)*(x701)))+(((x700)*(x702)))+(((IkReal(-1.00000000000000))*(x701)*(x704))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((r22)*(x701)))+(((r22)*(x702)))+(((IkReal(-1.00000000000000))*(x700)*(x703)))+(((IkReal(-1.00000000000000))*(x699)*(x704)))+(((cj8)*(r20)*(x703)))+(((x699)*(x700))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst4)*(((((r22)*(x703)))+(((IkReal(-1.00000000000000))*(r22)*(x699)))+(((IkReal(-1.00000000000000))*(x702)*(x704)))+(((x700)*(x701)))+(((x700)*(x702)))+(((IkReal(-1.00000000000000))*(x701)*(x704)))))), ((gconst4)*(((((r22)*(x701)))+(((r22)*(x702)))+(((IkReal(-1.00000000000000))*(x700)*(x703)))+(((IkReal(-1.00000000000000))*(x699)*(x704)))+(((cj8)*(r20)*(x703)))+(((x699)*(x700)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x705=IKcos(j4);
IkReal x706=IKsin(j4);
IkReal x707=((IkReal(1.00000000000000))*(cj7));
IkReal x708=((cj8)*(r20));
IkReal x709=((cj3)*(r02));
IkReal x710=((IkReal(1.00000000000000))*(sj7));
IkReal x711=((sj3)*(sj7));
IkReal x712=((r21)*(sj8));
IkReal x713=((cj8)*(r10));
IkReal x714=((sj5)*(x705));
IkReal x715=((cj5)*(x706));
IkReal x716=((r11)*(sj3)*(sj8));
IkReal x717=((cj3)*(cj8)*(r00));
IkReal x718=((cj5)*(x705));
IkReal x719=((cj3)*(r01)*(sj8));
IkReal x720=((sj5)*(x706));
IkReal x721=((x715)+(x714));
evalcond[0]=((((IkReal(-1.00000000000000))*(r22)*(x710)))+(((IkReal(-1.00000000000000))*(x707)*(x708)))+(((IkReal(-1.00000000000000))*(x718)))+(((cj7)*(x712)))+(x720));
evalcond[1]=((((IkReal(-1.00000000000000))*(x708)*(x710)))+(x721)+(((cj7)*(r22)))+(((sj7)*(x712))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x707)*(x719)))+(((IkReal(-1.00000000000000))*(x707)*(x716)))+(((cj7)*(x717)))+(x721)+(((r12)*(x711)))+(((cj7)*(sj3)*(x713)))+(((sj7)*(x709))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x707)*(x709)))+(((IkReal(-1.00000000000000))*(x710)*(x719)))+(((IkReal(-1.00000000000000))*(x710)*(x716)))+(((x711)*(x713)))+(((IkReal(-1.00000000000000))*(x720)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x707)))+(x718)+(((sj7)*(x717))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x722=((cj3)*(cj8));
IkReal x723=((IkReal(1.00000000000000))*(sj7));
IkReal x724=((cj8)*(npx));
IkReal x725=((cj8)*(sj3));
IkReal x726=((npy)*(sj8));
IkReal x727=((r02)*(sj3));
IkReal x728=((IkReal(1.00000000000000))*(r11));
IkReal x729=((cj3)*(r12));
IkReal x730=((IkReal(1.00000000000000))*(cj7));
IkReal x731=((sj3)*(sj8));
IkReal x732=((IkReal(1.00000000000000))*(cj3)*(sj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(x724)*(x730)))+(((IkReal(-1.00000000000000))*(npz)*(x723)))+(((cj7)*(x726)))+(((IkReal(0.250000000000000))*(cj5))));
evalcond[4]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x722)*(x728)))+(((r01)*(x725)))+(((r00)*(x731)))+(((IkReal(-1.00000000000000))*(r10)*(x732))));
evalcond[5]=((IkReal(-0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x723)*(x724)))+(((IkReal(0.250000000000000))*(sj5)))+(((cj7)*(npz)))+(((sj7)*(x726))));
evalcond[6]=((((IkReal(-1.00000000000000))*(r01)*(x722)))+(((IkReal(-1.00000000000000))*(x725)*(x728)))+(((IkReal(-1.00000000000000))*(r10)*(x731)))+(((IkReal(-1.00000000000000))*(r00)*(x732))));
evalcond[7]=((((cj7)*(r10)*(x722)))+(((IkReal(-1.00000000000000))*(r00)*(x725)*(x730)))+(((IkReal(-1.00000000000000))*(x723)*(x727)))+(((sj7)*(x729)))+(((IkReal(-1.00000000000000))*(cj3)*(cj7)*(sj8)*(x728)))+(((cj7)*(r01)*(x731))));
evalcond[8]=((((IkReal(-1.00000000000000))*(r00)*(x723)*(x725)))+(((r01)*(sj7)*(x731)))+(((r10)*(sj7)*(x722)))+(((cj7)*(x727)))+(((IkReal(-1.00000000000000))*(x729)*(x730)))+(((IkReal(-1.00000000000000))*(cj3)*(r11)*(sj8)*(x723))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x733=((cj7)*(sj5));
IkReal x734=((r21)*(sj8));
IkReal x735=((cj5)*(cj7));
IkReal x736=((cj8)*(r20));
IkReal x737=((sj5)*(sj7));
IkReal x738=((IkReal(1.00000000000000))*(cj5)*(sj7));
if( IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(x736)*(x738)))+(((IkReal(-1.00000000000000))*(x733)*(x734)))+(((x733)*(x736)))+(((cj5)*(sj7)*(x734)))+(((r22)*(x737)))+(((r22)*(x735))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((x734)*(x735)))+(((x734)*(x737)))+(((IkReal(-1.00000000000000))*(x736)*(x737)))+(((IkReal(-1.00000000000000))*(x735)*(x736)))+(((r22)*(x733)))+(((IkReal(-1.00000000000000))*(r22)*(x738))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst5)*(((((IkReal(-1.00000000000000))*(x736)*(x738)))+(((IkReal(-1.00000000000000))*(x733)*(x734)))+(((x733)*(x736)))+(((cj5)*(sj7)*(x734)))+(((r22)*(x737)))+(((r22)*(x735)))))), ((gconst5)*(((((x734)*(x735)))+(((x734)*(x737)))+(((IkReal(-1.00000000000000))*(x736)*(x737)))+(((IkReal(-1.00000000000000))*(x735)*(x736)))+(((r22)*(x733)))+(((IkReal(-1.00000000000000))*(r22)*(x738)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x739=IKcos(j4);
IkReal x740=IKsin(j4);
IkReal x741=((IkReal(1.00000000000000))*(cj7));
IkReal x742=((cj8)*(r20));
IkReal x743=((cj3)*(r02));
IkReal x744=((IkReal(1.00000000000000))*(sj7));
IkReal x745=((sj3)*(sj7));
IkReal x746=((r21)*(sj8));
IkReal x747=((IkReal(1.00000000000000))*(cj5));
IkReal x748=((cj8)*(r10));
IkReal x749=((sj5)*(x740));
IkReal x750=((sj5)*(x739));
IkReal x751=((r11)*(sj3)*(sj8));
IkReal x752=((cj3)*(cj8)*(r00));
IkReal x753=((cj3)*(r01)*(sj8));
IkReal x754=((x739)*(x747));
evalcond[0]=((((IkReal(-1.00000000000000))*(r22)*(x744)))+(((cj7)*(x746)))+(((IkReal(-1.00000000000000))*(x741)*(x742)))+(x749)+(((IkReal(-1.00000000000000))*(x754))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x742)*(x744)))+(((sj7)*(x746)))+(((IkReal(-1.00000000000000))*(x750)))+(((IkReal(-1.00000000000000))*(x740)*(x747)))+(((cj7)*(r22))));
evalcond[2]=((((cj7)*(sj3)*(x748)))+(((sj7)*(x743)))+(((r12)*(x745)))+(((cj7)*(x752)))+(x750)+(((cj5)*(x740)))+(((IkReal(-1.00000000000000))*(x741)*(x751)))+(((IkReal(-1.00000000000000))*(x741)*(x753))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r12)*(sj3)*(x741)))+(((x745)*(x748)))+(((IkReal(-1.00000000000000))*(x744)*(x753)))+(((IkReal(-1.00000000000000))*(x744)*(x751)))+(((sj7)*(x752)))+(((IkReal(-1.00000000000000))*(x741)*(x743)))+(x749)+(((IkReal(-1.00000000000000))*(x754))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x755=((sj5)*(sj6));
IkReal x756=((r22)*(sj7));
IkReal x757=((r20)*(sj8));
IkReal x758=((cj8)*(r21));
IkReal x759=((cj5)*(sj6));
IkReal x760=((cj7)*(cj8)*(r20));
IkReal x761=((cj7)*(r21)*(sj8));
if( IKabs(((gconst3)*(((((cj5)*(x758)))+(((cj5)*(x757)))+(((x755)*(x756)))+(((IkReal(-1.00000000000000))*(x755)*(x761)))+(((x755)*(x760))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(x756)*(x759)))+(((x759)*(x761)))+(((sj5)*(x757)))+(((sj5)*(x758)))+(((IkReal(-1.00000000000000))*(x759)*(x760))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst3)*(((((cj5)*(x758)))+(((cj5)*(x757)))+(((x755)*(x756)))+(((IkReal(-1.00000000000000))*(x755)*(x761)))+(((x755)*(x760)))))), ((gconst3)*(((((IkReal(-1.00000000000000))*(x756)*(x759)))+(((x759)*(x761)))+(((sj5)*(x757)))+(((sj5)*(x758)))+(((IkReal(-1.00000000000000))*(x759)*(x760)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x762=IKsin(j4);
IkReal x763=IKcos(j4);
IkReal x764=((IkReal(1.00000000000000))*(cj8));
IkReal x765=((cj3)*(r01));
IkReal x766=((IkReal(1.00000000000000))*(sj8));
IkReal x767=((r11)*(sj3));
IkReal x768=((cj3)*(r00));
IkReal x769=((IkReal(1.00000000000000))*(sj6));
IkReal x770=((IkReal(1.00000000000000))*(cj7));
IkReal x771=((cj3)*(r02));
IkReal x772=((sj3)*(sj7));
IkReal x773=((cj7)*(cj8));
IkReal x774=((r21)*(sj8));
IkReal x775=((r10)*(sj3));
IkReal x776=((sj5)*(x763));
IkReal x777=((cj5)*(x763));
IkReal x778=((cj6)*(x762));
IkReal x779=((cj5)*(x762));
IkReal x780=((sj5)*(x762));
evalcond[0]=((((cj8)*(r21)))+(((IkReal(-1.00000000000000))*(x769)*(x779)))+(((IkReal(-1.00000000000000))*(x769)*(x776)))+(((r20)*(sj8))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj7)*(r20)*(x764)))+(((cj7)*(x774)))+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(x780)+(((IkReal(-1.00000000000000))*(x777))));
evalcond[2]=((((cj6)*(x776)))+(((sj7)*(x774)))+(((cj7)*(r22)))+(((cj5)*(x778)))+(((IkReal(-1.00000000000000))*(r20)*(sj7)*(x764))));
evalcond[3]=((((sj6)*(x780)))+(((IkReal(-1.00000000000000))*(x766)*(x768)))+(((IkReal(-1.00000000000000))*(x764)*(x765)))+(((IkReal(-1.00000000000000))*(x764)*(x767)))+(((IkReal(-1.00000000000000))*(x766)*(x775)))+(((IkReal(-1.00000000000000))*(x769)*(x777))));
evalcond[4]=((((x773)*(x775)))+(((IkReal(-1.00000000000000))*(cj7)*(x765)*(x766)))+(((sj7)*(x771)))+(((IkReal(-1.00000000000000))*(cj7)*(x766)*(x767)))+(((r12)*(x772)))+(x776)+(x779)+(((x768)*(x773))));
evalcond[5]=((((cj8)*(sj7)*(x768)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x770)))+(((IkReal(-1.00000000000000))*(sj7)*(x766)*(x767)))+(((IkReal(-1.00000000000000))*(sj7)*(x765)*(x766)))+(((cj6)*(x777)))+(((IkReal(-1.00000000000000))*(sj5)*(x778)))+(((IkReal(-1.00000000000000))*(x770)*(x771)))+(((cj8)*(r10)*(x772))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x781=((sj5)*(sj6));
IkReal x782=((r22)*(sj7));
IkReal x783=((r20)*(sj8));
IkReal x784=((cj8)*(r21));
IkReal x785=((cj5)*(sj6));
IkReal x786=((cj7)*(cj8)*(r20));
IkReal x787=((cj7)*(r21)*(sj8));
if( IKabs(((gconst2)*(((((x781)*(x782)))+(((x781)*(x786)))+(((cj5)*(x783)))+(((cj5)*(x784)))+(((IkReal(-1.00000000000000))*(x781)*(x787))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(x785)*(x786)))+(((sj5)*(x783)))+(((sj5)*(x784)))+(((x785)*(x787)))+(((IkReal(-1.00000000000000))*(x782)*(x785))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst2)*(((((x781)*(x782)))+(((x781)*(x786)))+(((cj5)*(x783)))+(((cj5)*(x784)))+(((IkReal(-1.00000000000000))*(x781)*(x787)))))), ((gconst2)*(((((IkReal(-1.00000000000000))*(x785)*(x786)))+(((sj5)*(x783)))+(((sj5)*(x784)))+(((x785)*(x787)))+(((IkReal(-1.00000000000000))*(x782)*(x785)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x788=IKsin(j4);
IkReal x789=IKcos(j4);
IkReal x790=((IkReal(1.00000000000000))*(cj5));
IkReal x791=((r21)*(sj8));
IkReal x792=((IkReal(1.00000000000000))*(cj8)*(r20));
IkReal x793=((sj5)*(x789));
evalcond[0]=((((cj8)*(r21)))+(((IkReal(-1.00000000000000))*(sj6)*(x793)))+(((r20)*(sj8)))+(((IkReal(-1.00000000000000))*(sj6)*(x788)*(x790))));
evalcond[1]=((((sj5)*(x788)))+(((cj7)*(x791)))+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((IkReal(-1.00000000000000))*(x789)*(x790)))+(((IkReal(-1.00000000000000))*(cj7)*(x792))));
evalcond[2]=((((cj6)*(x793)))+(((sj7)*(x791)))+(((cj5)*(cj6)*(x788)))+(((IkReal(-1.00000000000000))*(sj7)*(x792)))+(((cj7)*(r22))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst6;
IkReal x794=(sj8)*(sj8);
IkReal x795=(cj8)*(cj8);
IkReal x796=((r00)*(r11));
IkReal x797=((r02)*(sj7));
IkReal x798=((cj7)*(x795));
IkReal x799=((IkReal(1.00000000000000))*(r12)*(sj7));
IkReal x800=((IkReal(1.00000000000000))*(r01)*(r10));
IkReal x801=((cj7)*(x794));
gconst6=IKsign(((((x796)*(x798)))+(((IkReal(-1.00000000000000))*(x798)*(x800)))+(((IkReal(-1.00000000000000))*(r00)*(sj8)*(x799)))+(((IkReal(-1.00000000000000))*(x800)*(x801)))+(((r10)*(sj8)*(x797)))+(((cj8)*(r11)*(x797)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x799)))+(((x796)*(x801)))));
IkReal x802=(sj8)*(sj8);
IkReal x803=(cj8)*(cj8);
IkReal x804=((r00)*(r11));
IkReal x805=((r02)*(sj7));
IkReal x806=((cj7)*(x803));
IkReal x807=((IkReal(1.00000000000000))*(r12)*(sj7));
IkReal x808=((IkReal(1.00000000000000))*(r01)*(r10));
IkReal x809=((cj7)*(x802));
dummyeval[0]=((((x804)*(x809)))+(((x804)*(x806)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x807)))+(((IkReal(-1.00000000000000))*(x806)*(x808)))+(((cj8)*(r11)*(x805)))+(((IkReal(-1.00000000000000))*(x808)*(x809)))+(((IkReal(-1.00000000000000))*(r00)*(sj8)*(x807)))+(((r10)*(sj8)*(x805))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x810=((cj6)*(cj7));
IkReal x811=((IkReal(1.00000000000000))*(sj8));
IkReal x812=((cj6)*(sj7));
if( IKabs(((gconst6)*(((((cj8)*(r10)*(x810)))+(((IkReal(-1.00000000000000))*(r11)*(x810)*(x811)))+(((r12)*(x812))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(r01)*(x810)*(x811)))+(((cj8)*(r00)*(x810)))+(((r02)*(x812))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst6)*(((((cj8)*(r10)*(x810)))+(((IkReal(-1.00000000000000))*(r11)*(x810)*(x811)))+(((r12)*(x812)))))), ((gconst6)*(((((IkReal(-1.00000000000000))*(r01)*(x810)*(x811)))+(((cj8)*(r00)*(x810)))+(((r02)*(x812)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x813=IKsin(j3);
IkReal x814=IKcos(j3);
IkReal x815=((cj4)*(cj5));
IkReal x816=((r01)*(sj8));
IkReal x817=((cj8)*(r00));
IkReal x818=((r00)*(sj8));
IkReal x819=((cj8)*(r11));
IkReal x820=((r11)*(sj8));
IkReal x821=((sj4)*(sj5));
IkReal x822=((r10)*(sj8));
IkReal x823=((cj8)*(r10));
IkReal x824=((cj7)*(x813));
IkReal x825=((sj7)*(x814));
IkReal x826=((IkReal(1.00000000000000))*(x813));
IkReal x827=((IkReal(1.00000000000000))*(x814));
IkReal x828=((cj8)*(x813));
IkReal x829=((IkReal(1.00000000000000))*(x820));
IkReal x830=((sj7)*(x813));
IkReal x831=((cj7)*(x814));
evalcond[0]=((((IkReal(-1.00000000000000))*(x822)*(x827)))+(cj6)+(((IkReal(-1.00000000000000))*(x819)*(x827)))+(((x813)*(x818)))+(((r01)*(x828))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj6)*(x815)))+(((IkReal(-1.00000000000000))*(x822)*(x826)))+(((IkReal(-1.00000000000000))*(x818)*(x827)))+(((IkReal(-1.00000000000000))*(x819)*(x826)))+(((sj6)*(x821)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x827))));
evalcond[2]=((((r12)*(x825)))+(((IkReal(-1.00000000000000))*(x817)*(x824)))+(((IkReal(-1.00000000000000))*(cj7)*(x820)*(x827)))+(((IkReal(-1.00000000000000))*(r02)*(sj7)*(x826)))+(((x816)*(x824)))+(((x823)*(x831))));
evalcond[3]=((sj6)+(((x816)*(x830)))+(((IkReal(-1.00000000000000))*(cj7)*(r12)*(x827)))+(((IkReal(-1.00000000000000))*(sj7)*(x817)*(x826)))+(((x823)*(x825)))+(((r02)*(x824)))+(((IkReal(-1.00000000000000))*(x825)*(x829))));
evalcond[4]=((((cj5)*(sj4)))+(((IkReal(-1.00000000000000))*(x824)*(x829)))+(((cj4)*(sj5)))+(((x823)*(x824)))+(((r12)*(x830)))+(((x817)*(x831)))+(((IkReal(-1.00000000000000))*(cj7)*(x816)*(x827)))+(((r02)*(x825))));
evalcond[5]=((((IkReal(-1.00000000000000))*(r12)*(x824)))+(((IkReal(-1.00000000000000))*(sj7)*(x820)*(x826)))+(((IkReal(-1.00000000000000))*(cj7)*(r02)*(x827)))+(((x817)*(x825)))+(((IkReal(-1.00000000000000))*(x816)*(x825)))+(((x823)*(x830)))+(((IkReal(-1.00000000000000))*(cj6)*(x821)))+(((cj6)*(x815))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x832=((IkReal(4.00000000000000))*(npx));
IkReal x833=((IkReal(4.00000000000000))*(npy));
if( IKabs(((((IKabs(sj6) != 0)?((IkReal)1/(sj6)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj8)*(x833)))+(((IkReal(-0.380000000000000))*(cj6)))+(((IkReal(-1.00000000000000))*(sj8)*(x832)))+(((IkReal(0.120000000000000))*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x833)))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((cj7)*(cj8)*(x832)))+(((IkReal(-0.360000000000000))*(cj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj6) != 0)?((IkReal)1/(sj6)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj8)*(x833)))+(((IkReal(-0.380000000000000))*(cj6)))+(((IkReal(-1.00000000000000))*(sj8)*(x832)))+(((IkReal(0.120000000000000))*(sj6)))))))+IKsqr(((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x833)))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((cj7)*(cj8)*(x832)))+(((IkReal(-0.360000000000000))*(cj7)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(sj6) != 0)?((IkReal)1/(sj6)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj8)*(x833)))+(((IkReal(-0.380000000000000))*(cj6)))+(((IkReal(-1.00000000000000))*(sj8)*(x832)))+(((IkReal(0.120000000000000))*(sj6)))))), ((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x833)))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((cj7)*(cj8)*(x832)))+(((IkReal(-0.360000000000000))*(cj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x834=IKsin(j5);
IkReal x835=((IkReal(1.00000000000000))*(sj7));
IkReal x836=((npy)*(sj8));
IkReal x837=((cj8)*(npx));
IkReal x838=((IkReal(0.250000000000000))*(x834));
evalcond[0]=((((IkReal(-0.0300000000000000))*(sj6)))+(((npx)*(sj8)))+(((cj8)*(npy)))+(((sj6)*(x838)))+(((IkReal(0.0950000000000000))*(cj6))));
evalcond[1]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(npz)*(x835)))+(((cj7)*(x836)))+(((IkReal(-1.00000000000000))*(cj7)*(x837)))+(((IkReal(0.250000000000000))*(IKcos(j5)))));
evalcond[2]=((((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(0.0950000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(x835)*(x837)))+(((sj7)*(x836)))+(((IkReal(0.0300000000000000))*(cj6)))+(((cj7)*(npz)))+(((IkReal(-1.00000000000000))*(cj6)*(x838))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x839=(sj8)*(sj8);
IkReal x840=(cj8)*(cj8);
IkReal x841=((r00)*(r11));
IkReal x842=((r02)*(sj7));
IkReal x843=((cj7)*(x840));
IkReal x844=((IkReal(1.00000000000000))*(r12)*(sj7));
IkReal x845=((IkReal(1.00000000000000))*(r01)*(r10));
IkReal x846=((cj7)*(x839));
gconst1=IKsign(((((r10)*(sj8)*(x842)))+(((IkReal(-1.00000000000000))*(r00)*(sj8)*(x844)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x844)))+(((IkReal(-1.00000000000000))*(x843)*(x845)))+(((cj8)*(r11)*(x842)))+(((IkReal(-1.00000000000000))*(x845)*(x846)))+(((x841)*(x843)))+(((x841)*(x846)))));
IkReal x847=(sj8)*(sj8);
IkReal x848=(cj8)*(cj8);
IkReal x849=((r00)*(r11));
IkReal x850=((r02)*(sj7));
IkReal x851=((cj7)*(x848));
IkReal x852=((IkReal(1.00000000000000))*(r12)*(sj7));
IkReal x853=((IkReal(1.00000000000000))*(r01)*(r10));
IkReal x854=((cj7)*(x847));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x853)*(x854)))+(((cj8)*(r11)*(x850)))+(((r10)*(sj8)*(x850)))+(((IkReal(-1.00000000000000))*(r00)*(sj8)*(x852)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x852)))+(((IkReal(-1.00000000000000))*(x851)*(x853)))+(((x849)*(x854)))+(((x849)*(x851))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x855=((IkReal(1.00000000000000))*(sj7));
IkReal x856=((npy)*(sj8));
IkReal x857=((cj8)*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(0.235000000000000))+(((cj7)*(x856)))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(cj7)*(x857)))+(((IkReal(0.250000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(npz)*(x855))));
evalcond[4]=((IkReal(0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((cj7)*(npz)))+(((IkReal(-1.00000000000000))*(x855)*(x857)))+(((IkReal(-0.250000000000000))*(sj5)))+(((sj7)*(x856))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
IkReal x858=(sj8)*(sj8);
IkReal x859=(cj8)*(cj8);
IkReal x860=((IkReal(2.00000000000000))*(cj8)*(sj8));
gconst7=IKsign(((((r00)*(r01)*(x860)))+(((x858)*((r00)*(r00))))+(((x859)*((r11)*(r11))))+(((r10)*(r11)*(x860)))+(((x859)*((r01)*(r01))))+(((x858)*((r10)*(r10))))));
IkReal x861=(sj8)*(sj8);
IkReal x862=(cj8)*(cj8);
IkReal x863=((IkReal(2.00000000000000))*(cj8)*(sj8));
dummyeval[0]=((((x862)*((r01)*(r01))))+(((r00)*(r01)*(x863)))+(((x861)*((r00)*(r00))))+(((r10)*(r11)*(x863)))+(((x861)*((r10)*(r10))))+(((x862)*((r11)*(r11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x864=((sj5)*(sj7));
IkReal x865=((r21)*(sj8));
IkReal x866=((cj5)*(sj7));
IkReal x867=((cj8)*(r20));
IkReal x868=((cj5)*(cj7));
IkReal x869=((cj7)*(sj5));
if( IKabs(((gconst8)*(((((r22)*(x868)))+(((IkReal(-1.00000000000000))*(x867)*(x869)))+(((IkReal(-1.00000000000000))*(x866)*(x867)))+(((x865)*(x866)))+(((x865)*(x869)))+(((IkReal(-1.00000000000000))*(r22)*(x864))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((x867)*(x868)))+(((r22)*(x869)))+(((r22)*(x866)))+(((IkReal(-1.00000000000000))*(x865)*(x868)))+(((IkReal(-1.00000000000000))*(x864)*(x867)))+(((x864)*(x865))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst8)*(((((r22)*(x868)))+(((IkReal(-1.00000000000000))*(x867)*(x869)))+(((IkReal(-1.00000000000000))*(x866)*(x867)))+(((x865)*(x866)))+(((x865)*(x869)))+(((IkReal(-1.00000000000000))*(r22)*(x864)))))), ((gconst8)*(((((x867)*(x868)))+(((r22)*(x869)))+(((r22)*(x866)))+(((IkReal(-1.00000000000000))*(x865)*(x868)))+(((IkReal(-1.00000000000000))*(x864)*(x867)))+(((x864)*(x865)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x870=IKcos(j4);
IkReal x871=IKsin(j4);
IkReal x872=((r21)*(sj8));
IkReal x873=((IkReal(1.00000000000000))*(cj8)*(r20));
evalcond[0]=((((sj5)*(x871)))+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((IkReal(-1.00000000000000))*(cj5)*(x870)))+(((cj7)*(x872)))+(((IkReal(-1.00000000000000))*(cj7)*(x873))));
evalcond[1]=((((sj5)*(x870)))+(((IkReal(-1.00000000000000))*(sj7)*(x873)))+(((sj7)*(x872)))+(((cj5)*(x871)))+(((cj7)*(r22))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst9;
IkReal x874=(sj8)*(sj8);
IkReal x875=(cj8)*(cj8);
IkReal x876=((IkReal(2.00000000000000))*(cj8)*(sj8));
gconst9=IKsign(((((x875)*((r11)*(r11))))+(((x874)*((r10)*(r10))))+(((r00)*(r01)*(x876)))+(((x875)*((r01)*(r01))))+(((x874)*((r00)*(r00))))+(((r10)*(r11)*(x876)))));
IkReal x877=(sj8)*(sj8);
IkReal x878=(cj8)*(cj8);
IkReal x879=((IkReal(2.00000000000000))*(cj8)*(sj8));
dummyeval[0]=((((r00)*(r01)*(x879)))+(((x878)*((r11)*(r11))))+(((r10)*(r11)*(x879)))+(((x877)*((r00)*(r00))))+(((x877)*((r10)*(r10))))+(((x878)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst9)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((r10)*(sj8)))+(((cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst9)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)))))), ((gconst9)*(((((r10)*(sj8)))+(((cj8)*(r11)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x880=IKsin(j3);
IkReal x881=IKcos(j3);
IkReal x882=((r01)*(sj8));
IkReal x883=((cj8)*(r00));
IkReal x884=((r00)*(sj8));
IkReal x885=((cj8)*(r11));
IkReal x886=((r11)*(sj8));
IkReal x887=((r10)*(sj8));
IkReal x888=((cj8)*(r10));
IkReal x889=((cj7)*(x880));
IkReal x890=((sj7)*(x881));
IkReal x891=((IkReal(1.00000000000000))*(x880));
IkReal x892=((IkReal(1.00000000000000))*(x881));
IkReal x893=((cj8)*(x880));
IkReal x894=((IkReal(1.00000000000000))*(x886));
IkReal x895=((sj7)*(x880));
IkReal x896=((cj7)*(x881));
evalcond[0]=((IkReal(1.00000000000000))+(((x880)*(x884)))+(((r01)*(x893)))+(((IkReal(-1.00000000000000))*(x885)*(x892)))+(((IkReal(-1.00000000000000))*(x887)*(x892))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x884)*(x892)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x892)))+(((IkReal(-1.00000000000000))*(x885)*(x891)))+(((IkReal(-1.00000000000000))*(x887)*(x891))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x883)*(x889)))+(((IkReal(-1.00000000000000))*(r02)*(sj7)*(x891)))+(((x882)*(x889)))+(((IkReal(-1.00000000000000))*(cj7)*(x886)*(x892)))+(((x888)*(x896)))+(((r12)*(x890))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj7)*(x883)*(x891)))+(((r02)*(x889)))+(((x882)*(x895)))+(((IkReal(-1.00000000000000))*(cj7)*(r12)*(x892)))+(((x888)*(x890)))+(((IkReal(-1.00000000000000))*(x890)*(x894))));
evalcond[4]=((((r02)*(x890)))+(((IkReal(-1.00000000000000))*(cj7)*(x882)*(x892)))+(((x883)*(x896)))+(((cj5)*(sj4)))+(((cj4)*(sj5)))+(((IkReal(-1.00000000000000))*(x889)*(x894)))+(((x888)*(x889)))+(((r12)*(x895))));
evalcond[5]=((((IkReal(-1.00000000000000))*(r12)*(x889)))+(((IkReal(-1.00000000000000))*(cj7)*(r02)*(x892)))+(((IkReal(-1.00000000000000))*(x882)*(x890)))+(((x883)*(x890)))+(((cj4)*(cj5)))+(((IkReal(-1.00000000000000))*(sj7)*(x886)*(x891)))+(((x888)*(x895)))+(((IkReal(-1.00000000000000))*(sj4)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst7)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((r10)*(sj8)))+(((cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst7)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)))))), ((gconst7)*(((((r10)*(sj8)))+(((cj8)*(r11)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x897=IKsin(j3);
IkReal x898=IKcos(j3);
IkReal x899=((IkReal(1.00000000000000))*(sj8));
IkReal x900=((IkReal(1.00000000000000))*(cj8));
IkReal x901=((r01)*(sj8));
IkReal x902=((cj8)*(r10));
IkReal x903=((sj7)*(x898));
IkReal x904=((cj7)*(x897));
IkReal x905=((r00)*(x897));
IkReal x906=((sj7)*(x897));
IkReal x907=((cj7)*(x898));
evalcond[0]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r10)*(x898)*(x899)))+(((IkReal(-1.00000000000000))*(r11)*(x898)*(x900)))+(((sj8)*(x905)))+(((cj8)*(r01)*(x897))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(x898)*(x899)))+(((IkReal(-1.00000000000000))*(r10)*(x897)*(x899)))+(((IkReal(-1.00000000000000))*(r01)*(x898)*(x900)))+(((IkReal(-1.00000000000000))*(r11)*(x897)*(x900))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x906)))+(((x901)*(x904)))+(((x902)*(x907)))+(((r12)*(x903)))+(((IkReal(-1.00000000000000))*(r00)*(x900)*(x904)))+(((IkReal(-1.00000000000000))*(r11)*(x899)*(x907))));
evalcond[3]=((((x901)*(x906)))+(((x902)*(x903)))+(((r02)*(x904)))+(((IkReal(-1.00000000000000))*(sj7)*(x900)*(x905)))+(((IkReal(-1.00000000000000))*(r12)*(x907)))+(((IkReal(-1.00000000000000))*(r11)*(x899)*(x903))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x908=((r21)*(sj8));
IkReal x909=((sj5)*(sj7));
IkReal x910=((cj5)*(sj7));
IkReal x911=((cj5)*(cj7));
IkReal x912=((cj8)*(r20));
IkReal x913=((cj7)*(sj5));
if( IKabs(((gconst10)*(((((IkReal(-1.00000000000000))*(x910)*(x912)))+(((IkReal(-1.00000000000000))*(x912)*(x913)))+(((r22)*(x911)))+(((x908)*(x910)))+(((x908)*(x913)))+(((IkReal(-1.00000000000000))*(r22)*(x909))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((IkReal(-1.00000000000000))*(x909)*(x912)))+(((IkReal(-1.00000000000000))*(x908)*(x911)))+(((x911)*(x912)))+(((r22)*(x913)))+(((r22)*(x910)))+(((x908)*(x909))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst10)*(((((IkReal(-1.00000000000000))*(x910)*(x912)))+(((IkReal(-1.00000000000000))*(x912)*(x913)))+(((r22)*(x911)))+(((x908)*(x910)))+(((x908)*(x913)))+(((IkReal(-1.00000000000000))*(r22)*(x909)))))), ((gconst10)*(((((IkReal(-1.00000000000000))*(x909)*(x912)))+(((IkReal(-1.00000000000000))*(x908)*(x911)))+(((x911)*(x912)))+(((r22)*(x913)))+(((r22)*(x910)))+(((x908)*(x909)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x914=IKcos(j4);
IkReal x915=IKsin(j4);
IkReal x916=((IkReal(1.00000000000000))*(cj7));
IkReal x917=((cj8)*(r20));
IkReal x918=((cj3)*(r02));
IkReal x919=((IkReal(1.00000000000000))*(sj7));
IkReal x920=((sj3)*(sj7));
IkReal x921=((r21)*(sj8));
IkReal x922=((cj8)*(r10));
IkReal x923=((sj5)*(x914));
IkReal x924=((cj5)*(x915));
IkReal x925=((r11)*(sj3)*(sj8));
IkReal x926=((cj3)*(cj8)*(r00));
IkReal x927=((cj5)*(x914));
IkReal x928=((cj3)*(r01)*(sj8));
IkReal x929=((sj5)*(x915));
IkReal x930=((x924)+(x923));
evalcond[0]=((((IkReal(-1.00000000000000))*(r22)*(x919)))+(((cj7)*(x921)))+(((IkReal(-1.00000000000000))*(x927)))+(x929)+(((IkReal(-1.00000000000000))*(x916)*(x917))));
evalcond[1]=((x930)+(((cj7)*(r22)))+(((sj7)*(x921)))+(((IkReal(-1.00000000000000))*(x917)*(x919))));
evalcond[2]=((((cj7)*(x926)))+(((r12)*(x920)))+(((sj7)*(x918)))+(((IkReal(-1.00000000000000))*(x916)*(x928)))+(((IkReal(-1.00000000000000))*(x916)*(x925)))+(x930)+(((cj7)*(sj3)*(x922))));
evalcond[3]=((((x920)*(x922)))+(((IkReal(-1.00000000000000))*(x929)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x916)))+(((IkReal(-1.00000000000000))*(x919)*(x925)))+(((IkReal(-1.00000000000000))*(x919)*(x928)))+(x927)+(((sj7)*(x926)))+(((IkReal(-1.00000000000000))*(x916)*(x918))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
IkReal x931=((IkReal(1.00000000000000))*(sj7));
IkReal x932=((npy)*(sj8));
IkReal x933=((cj8)*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((cj7)*(x932)))+(((IkReal(-1.00000000000000))*(cj7)*(x933)))+(((IkReal(0.250000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(npz)*(x931))));
evalcond[4]=((IkReal(-0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x931)*(x933)))+(((IkReal(0.250000000000000))*(sj5)))+(((cj7)*(npz)))+(((sj7)*(x932))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
IkReal x934=(cj8)*(cj8);
IkReal x935=(sj8)*(sj8);
IkReal x936=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x937=((IkReal(1.00000000000000))*(x934));
IkReal x938=((IkReal(1.00000000000000))*(x935));
gconst11=IKsign(((((IkReal(-1.00000000000000))*(r00)*(r01)*(x936)))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x936)))+(((IkReal(-1.00000000000000))*(x938)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(x938)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(x937)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(x937)*((r11)*(r11))))));
IkReal x939=(cj8)*(cj8);
IkReal x940=(sj8)*(sj8);
IkReal x941=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x942=((IkReal(1.00000000000000))*(x939));
IkReal x943=((IkReal(1.00000000000000))*(x940));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x943)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x941)))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x941)))+(((IkReal(-1.00000000000000))*(x943)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(x942)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(x942)*((r11)*(r11)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x944=((cj7)*(sj5));
IkReal x945=((r21)*(sj8));
IkReal x946=((cj5)*(cj7));
IkReal x947=((cj8)*(r20));
IkReal x948=((sj5)*(sj7));
IkReal x949=((IkReal(1.00000000000000))*(cj5)*(sj7));
if( IKabs(((gconst12)*(((((IkReal(-1.00000000000000))*(x947)*(x949)))+(((r22)*(x946)))+(((r22)*(x948)))+(((cj5)*(sj7)*(x945)))+(((x944)*(x947)))+(((IkReal(-1.00000000000000))*(x944)*(x945))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((IkReal(-1.00000000000000))*(x947)*(x948)))+(((x945)*(x948)))+(((x945)*(x946)))+(((IkReal(-1.00000000000000))*(x946)*(x947)))+(((r22)*(x944)))+(((IkReal(-1.00000000000000))*(r22)*(x949))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst12)*(((((IkReal(-1.00000000000000))*(x947)*(x949)))+(((r22)*(x946)))+(((r22)*(x948)))+(((cj5)*(sj7)*(x945)))+(((x944)*(x947)))+(((IkReal(-1.00000000000000))*(x944)*(x945)))))), ((gconst12)*(((((IkReal(-1.00000000000000))*(x947)*(x948)))+(((x945)*(x948)))+(((x945)*(x946)))+(((IkReal(-1.00000000000000))*(x946)*(x947)))+(((r22)*(x944)))+(((IkReal(-1.00000000000000))*(r22)*(x949)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x950=IKcos(j4);
IkReal x951=IKsin(j4);
IkReal x952=((IkReal(1.00000000000000))*(cj5));
IkReal x953=((r21)*(sj8));
IkReal x954=((IkReal(1.00000000000000))*(cj8)*(r20));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj7)*(x954)))+(((IkReal(-1.00000000000000))*(x950)*(x952)))+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((sj5)*(x951)))+(((cj7)*(x953))));
evalcond[1]=((((sj7)*(x953)))+(((IkReal(-1.00000000000000))*(sj5)*(x950)))+(((IkReal(-1.00000000000000))*(x951)*(x952)))+(((IkReal(-1.00000000000000))*(sj7)*(x954)))+(((cj7)*(r22))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst13;
IkReal x955=(cj8)*(cj8);
IkReal x956=(sj8)*(sj8);
IkReal x957=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x958=((IkReal(1.00000000000000))*(x955));
IkReal x959=((IkReal(1.00000000000000))*(x956));
gconst13=IKsign(((((IkReal(-1.00000000000000))*(x958)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x957)))+(((IkReal(-1.00000000000000))*(x958)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x957)))+(((IkReal(-1.00000000000000))*(x959)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(x959)*((r10)*(r10))))));
IkReal x960=(cj8)*(cj8);
IkReal x961=(sj8)*(sj8);
IkReal x962=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x963=((IkReal(1.00000000000000))*(x960));
IkReal x964=((IkReal(1.00000000000000))*(x961));
dummyeval[0]=((((IkReal(-1.00000000000000))*(r00)*(r01)*(x962)))+(((IkReal(-1.00000000000000))*(x963)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(x963)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x962)))+(((IkReal(-1.00000000000000))*(x964)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(x964)*((r10)*(r10)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst13)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((r10)*(sj8)))+(((cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst13)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)))))), ((gconst13)*(((((r10)*(sj8)))+(((cj8)*(r11)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x965=IKsin(j3);
IkReal x966=IKcos(j3);
IkReal x967=((r01)*(sj8));
IkReal x968=((cj8)*(r00));
IkReal x969=((r00)*(sj8));
IkReal x970=((cj8)*(r11));
IkReal x971=((r11)*(sj8));
IkReal x972=((r10)*(sj8));
IkReal x973=((cj8)*(r10));
IkReal x974=((cj7)*(x965));
IkReal x975=((sj7)*(x966));
IkReal x976=((IkReal(1.00000000000000))*(x965));
IkReal x977=((IkReal(1.00000000000000))*(x966));
IkReal x978=((cj8)*(x965));
IkReal x979=((IkReal(1.00000000000000))*(x971));
IkReal x980=((sj7)*(x965));
IkReal x981=((cj7)*(x966));
evalcond[0]=((IkReal(-1.00000000000000))+(((r01)*(x978)))+(((x965)*(x969)))+(((IkReal(-1.00000000000000))*(x970)*(x977)))+(((IkReal(-1.00000000000000))*(x972)*(x977))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x969)*(x977)))+(((IkReal(-1.00000000000000))*(x970)*(x976)))+(((IkReal(-1.00000000000000))*(x972)*(x976)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x977))));
evalcond[2]=((((x973)*(x981)))+(((IkReal(-1.00000000000000))*(x968)*(x974)))+(((r12)*(x975)))+(((IkReal(-1.00000000000000))*(r02)*(sj7)*(x976)))+(((x967)*(x974)))+(((IkReal(-1.00000000000000))*(cj7)*(x971)*(x977))));
evalcond[3]=((((x973)*(x975)))+(((IkReal(-1.00000000000000))*(sj7)*(x968)*(x976)))+(((IkReal(-1.00000000000000))*(cj7)*(r12)*(x977)))+(((x967)*(x980)))+(((r02)*(x974)))+(((IkReal(-1.00000000000000))*(x975)*(x979))));
evalcond[4]=((((cj5)*(sj4)))+(((x968)*(x981)))+(((IkReal(-1.00000000000000))*(x974)*(x979)))+(((x973)*(x974)))+(((cj4)*(sj5)))+(((r12)*(x980)))+(((IkReal(-1.00000000000000))*(cj7)*(x967)*(x977)))+(((r02)*(x975))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj7)*(x971)*(x976)))+(((IkReal(-1.00000000000000))*(x967)*(x975)))+(((x973)*(x980)))+(((x968)*(x975)))+(((sj4)*(sj5)))+(((IkReal(-1.00000000000000))*(r12)*(x974)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)))+(((IkReal(-1.00000000000000))*(cj7)*(r02)*(x977))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst11)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((r10)*(sj8)))+(((cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst11)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)))))), ((gconst11)*(((((r10)*(sj8)))+(((cj8)*(r11)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x982=IKsin(j3);
IkReal x983=IKcos(j3);
IkReal x984=((IkReal(1.00000000000000))*(sj8));
IkReal x985=((IkReal(1.00000000000000))*(cj8));
IkReal x986=((r01)*(sj8));
IkReal x987=((cj8)*(r10));
IkReal x988=((sj7)*(x983));
IkReal x989=((cj7)*(x982));
IkReal x990=((r00)*(x982));
IkReal x991=((sj7)*(x982));
IkReal x992=((cj7)*(x983));
evalcond[0]=((IkReal(-1.00000000000000))+(((cj8)*(r01)*(x982)))+(((IkReal(-1.00000000000000))*(r10)*(x983)*(x984)))+(((sj8)*(x990)))+(((IkReal(-1.00000000000000))*(r11)*(x983)*(x985))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r10)*(x982)*(x984)))+(((IkReal(-1.00000000000000))*(r11)*(x982)*(x985)))+(((IkReal(-1.00000000000000))*(r00)*(x983)*(x984)))+(((IkReal(-1.00000000000000))*(r01)*(x983)*(x985))));
evalcond[2]=((((x986)*(x989)))+(((IkReal(-1.00000000000000))*(r11)*(x984)*(x992)))+(((IkReal(-1.00000000000000))*(r00)*(x985)*(x989)))+(((r12)*(x988)))+(((IkReal(-1.00000000000000))*(r02)*(x991)))+(((x987)*(x992))));
evalcond[3]=((((x986)*(x991)))+(((IkReal(-1.00000000000000))*(r11)*(x984)*(x988)))+(((IkReal(-1.00000000000000))*(sj7)*(x985)*(x990)))+(((x987)*(x988)))+(((r02)*(x989)))+(((IkReal(-1.00000000000000))*(r12)*(x992))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x993=((IkReal(1.00000000000000))*(sj5));
IkReal x994=((cj7)*(sj5));
IkReal x995=((cj8)*(r20));
IkReal x996=((cj5)*(cj7));
IkReal x997=((sj5)*(sj7));
IkReal x998=((r21)*(sj8));
IkReal x999=((cj7)*(x998));
IkReal x1000=((IkReal(1.00000000000000))*(cj5)*(sj7));
if( IKabs(((gconst14)*(((((x994)*(x995)))+(((cj5)*(sj7)*(x998)))+(((IkReal(-1.00000000000000))*(x1000)*(x995)))+(((r22)*(x997)))+(((r22)*(x996)))+(((IkReal(-1.00000000000000))*(x993)*(x999))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((x997)*(x998)))+(((IkReal(-1.00000000000000))*(sj7)*(x993)*(x995)))+(((r22)*(x994)))+(((x996)*(x998)))+(((IkReal(-1.00000000000000))*(r22)*(x1000)))+(((IkReal(-1.00000000000000))*(x995)*(x996))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst14)*(((((x994)*(x995)))+(((cj5)*(sj7)*(x998)))+(((IkReal(-1.00000000000000))*(x1000)*(x995)))+(((r22)*(x997)))+(((r22)*(x996)))+(((IkReal(-1.00000000000000))*(x993)*(x999)))))), ((gconst14)*(((((x997)*(x998)))+(((IkReal(-1.00000000000000))*(sj7)*(x993)*(x995)))+(((r22)*(x994)))+(((x996)*(x998)))+(((IkReal(-1.00000000000000))*(r22)*(x1000)))+(((IkReal(-1.00000000000000))*(x995)*(x996)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1001=IKcos(j4);
IkReal x1002=IKsin(j4);
IkReal x1003=((IkReal(1.00000000000000))*(cj7));
IkReal x1004=((cj8)*(r20));
IkReal x1005=((cj3)*(r02));
IkReal x1006=((IkReal(1.00000000000000))*(sj7));
IkReal x1007=((sj3)*(sj7));
IkReal x1008=((r21)*(sj8));
IkReal x1009=((IkReal(1.00000000000000))*(cj5));
IkReal x1010=((cj8)*(r10));
IkReal x1011=((sj5)*(x1002));
IkReal x1012=((sj5)*(x1001));
IkReal x1013=((r11)*(sj3)*(sj8));
IkReal x1014=((cj3)*(cj8)*(r00));
IkReal x1015=((cj3)*(r01)*(sj8));
IkReal x1016=((x1001)*(x1009));
evalcond[0]=((x1011)+(((IkReal(-1.00000000000000))*(x1016)))+(((cj7)*(x1008)))+(((IkReal(-1.00000000000000))*(x1003)*(x1004)))+(((IkReal(-1.00000000000000))*(r22)*(x1006))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1004)*(x1006)))+(((IkReal(-1.00000000000000))*(x1002)*(x1009)))+(((cj7)*(r22)))+(((IkReal(-1.00000000000000))*(x1012)))+(((sj7)*(x1008))));
evalcond[2]=((x1012)+(((cj5)*(x1002)))+(((cj7)*(x1014)))+(((IkReal(-1.00000000000000))*(x1003)*(x1013)))+(((IkReal(-1.00000000000000))*(x1003)*(x1015)))+(((cj7)*(sj3)*(x1010)))+(((r12)*(x1007)))+(((sj7)*(x1005))));
evalcond[3]=((x1011)+(((sj7)*(x1014)))+(((IkReal(-1.00000000000000))*(x1016)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x1003)))+(((IkReal(-1.00000000000000))*(x1006)*(x1013)))+(((IkReal(-1.00000000000000))*(x1006)*(x1015)))+(((x1007)*(x1010)))+(((IkReal(-1.00000000000000))*(x1003)*(x1005))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1017=((cj6)*(cj7));
IkReal x1018=((IkReal(1.00000000000000))*(sj8));
IkReal x1019=((cj6)*(sj7));
if( IKabs(((gconst1)*(((((cj8)*(r10)*(x1017)))+(((IkReal(-1.00000000000000))*(r11)*(x1017)*(x1018)))+(((r12)*(x1019))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((cj8)*(r00)*(x1017)))+(((IkReal(-1.00000000000000))*(r01)*(x1017)*(x1018)))+(((r02)*(x1019))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst1)*(((((cj8)*(r10)*(x1017)))+(((IkReal(-1.00000000000000))*(r11)*(x1017)*(x1018)))+(((r12)*(x1019)))))), ((gconst1)*(((((cj8)*(r00)*(x1017)))+(((IkReal(-1.00000000000000))*(r01)*(x1017)*(x1018)))+(((r02)*(x1019)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1020=IKsin(j3);
IkReal x1021=IKcos(j3);
IkReal x1022=((IkReal(1.00000000000000))*(r11));
IkReal x1023=((r01)*(sj8));
IkReal x1024=((cj8)*(r10));
IkReal x1025=((IkReal(1.00000000000000))*(sj7));
IkReal x1026=((sj7)*(x1021));
IkReal x1027=((cj7)*(x1020));
IkReal x1028=((r00)*(x1020));
IkReal x1029=((cj7)*(x1021));
evalcond[0]=((((sj8)*(x1028)))+(cj6)+(((IkReal(-1.00000000000000))*(cj8)*(x1021)*(x1022)))+(((cj8)*(r01)*(x1020)))+(((IkReal(-1.00000000000000))*(r10)*(sj8)*(x1021))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj8)*(x1022)*(x1029)))+(((IkReal(-1.00000000000000))*(r02)*(x1020)*(x1025)))+(((r12)*(x1026)))+(((x1023)*(x1027)))+(((x1024)*(x1029)))+(((IkReal(-1.00000000000000))*(cj8)*(r00)*(x1027))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj8)*(x1025)*(x1028)))+(sj6)+(((sj7)*(x1020)*(x1023)))+(((IkReal(-1.00000000000000))*(sj8)*(x1022)*(x1026)))+(((IkReal(-1.00000000000000))*(r12)*(x1029)))+(((r02)*(x1027)))+(((x1024)*(x1026))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
IkReal x1030=((cj3)*(cj8));
IkReal x1031=((IkReal(1.00000000000000))*(sj7));
IkReal x1032=((cj8)*(npx));
IkReal x1033=((cj8)*(sj3));
IkReal x1034=((npy)*(sj8));
IkReal x1035=((r02)*(sj3));
IkReal x1036=((IkReal(1.00000000000000))*(r11));
IkReal x1037=((cj3)*(r12));
IkReal x1038=((IkReal(1.00000000000000))*(cj7));
IkReal x1039=((sj3)*(sj8));
IkReal x1040=((IkReal(1.00000000000000))*(cj3)*(sj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(0.235000000000000))+(((IkReal(-1.00000000000000))*(x1032)*(x1038)))+(((IkReal(0.0900000000000000))*(cj7)))+(((cj7)*(x1034)))+(((IkReal(0.250000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(npz)*(x1031))));
evalcond[4]=((IkReal(1.00000000000000))+(((r00)*(x1039)))+(((IkReal(-1.00000000000000))*(r10)*(x1040)))+(((IkReal(-1.00000000000000))*(x1030)*(x1036)))+(((r01)*(x1033))));
evalcond[5]=((IkReal(0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((sj7)*(x1034)))+(((IkReal(-1.00000000000000))*(x1031)*(x1032)))+(((cj7)*(npz)))+(((IkReal(-0.250000000000000))*(sj5))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x1033)*(x1036)))+(((IkReal(-1.00000000000000))*(r00)*(x1040)))+(((IkReal(-1.00000000000000))*(r10)*(x1039)))+(((IkReal(-1.00000000000000))*(r01)*(x1030))));
evalcond[7]=((((cj7)*(r10)*(x1030)))+(((sj7)*(x1037)))+(((cj7)*(r01)*(x1039)))+(((IkReal(-1.00000000000000))*(r00)*(x1033)*(x1038)))+(((IkReal(-1.00000000000000))*(x1031)*(x1035)))+(((IkReal(-1.00000000000000))*(cj3)*(cj7)*(sj8)*(x1036))));
evalcond[8]=((((r01)*(sj7)*(x1039)))+(((IkReal(-1.00000000000000))*(x1037)*(x1038)))+(((r10)*(sj7)*(x1030)))+(((cj7)*(x1035)))+(((IkReal(-1.00000000000000))*(r00)*(x1031)*(x1033)))+(((IkReal(-1.00000000000000))*(cj3)*(r11)*(sj8)*(x1031))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1041=((sj5)*(sj7));
IkReal x1042=((r21)*(sj8));
IkReal x1043=((cj5)*(sj7));
IkReal x1044=((cj7)*(sj5));
IkReal x1045=((cj5)*(cj7));
IkReal x1046=((IkReal(1.00000000000000))*(cj8)*(r20));
if( IKabs(((gconst4)*(((((x1042)*(x1044)))+(((x1042)*(x1043)))+(((IkReal(-1.00000000000000))*(x1044)*(x1046)))+(((IkReal(-1.00000000000000))*(x1043)*(x1046)))+(((IkReal(-1.00000000000000))*(r22)*(x1041)))+(((r22)*(x1045))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((x1041)*(x1042)))+(((IkReal(-1.00000000000000))*(x1041)*(x1046)))+(((cj8)*(r20)*(x1045)))+(((IkReal(-1.00000000000000))*(x1042)*(x1045)))+(((r22)*(x1043)))+(((r22)*(x1044))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst4)*(((((x1042)*(x1044)))+(((x1042)*(x1043)))+(((IkReal(-1.00000000000000))*(x1044)*(x1046)))+(((IkReal(-1.00000000000000))*(x1043)*(x1046)))+(((IkReal(-1.00000000000000))*(r22)*(x1041)))+(((r22)*(x1045)))))), ((gconst4)*(((((x1041)*(x1042)))+(((IkReal(-1.00000000000000))*(x1041)*(x1046)))+(((cj8)*(r20)*(x1045)))+(((IkReal(-1.00000000000000))*(x1042)*(x1045)))+(((r22)*(x1043)))+(((r22)*(x1044)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1047=IKcos(j4);
IkReal x1048=IKsin(j4);
IkReal x1049=((IkReal(1.00000000000000))*(cj7));
IkReal x1050=((cj8)*(r20));
IkReal x1051=((cj3)*(r02));
IkReal x1052=((IkReal(1.00000000000000))*(sj7));
IkReal x1053=((sj3)*(sj7));
IkReal x1054=((r21)*(sj8));
IkReal x1055=((cj8)*(r10));
IkReal x1056=((sj5)*(x1047));
IkReal x1057=((cj5)*(x1048));
IkReal x1058=((r11)*(sj3)*(sj8));
IkReal x1059=((cj3)*(cj8)*(r00));
IkReal x1060=((cj5)*(x1047));
IkReal x1061=((cj3)*(r01)*(sj8));
IkReal x1062=((sj5)*(x1048));
IkReal x1063=((x1056)+(x1057));
evalcond[0]=((x1062)+(((cj7)*(x1054)))+(((IkReal(-1.00000000000000))*(r22)*(x1052)))+(((IkReal(-1.00000000000000))*(x1060)))+(((IkReal(-1.00000000000000))*(x1049)*(x1050))));
evalcond[1]=((x1063)+(((sj7)*(x1054)))+(((IkReal(-1.00000000000000))*(x1050)*(x1052)))+(((cj7)*(r22))));
evalcond[2]=((((r12)*(x1053)))+(x1063)+(((cj7)*(x1059)))+(((cj7)*(sj3)*(x1055)))+(((sj7)*(x1051)))+(((IkReal(-1.00000000000000))*(x1049)*(x1061)))+(((IkReal(-1.00000000000000))*(x1049)*(x1058))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1052)*(x1058)))+(x1060)+(((sj7)*(x1059)))+(((x1053)*(x1055)))+(((IkReal(-1.00000000000000))*(x1052)*(x1061)))+(((IkReal(-1.00000000000000))*(x1062)))+(((IkReal(-1.00000000000000))*(x1049)*(x1051)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x1049))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x1064=((cj3)*(cj8));
IkReal x1065=((IkReal(1.00000000000000))*(sj7));
IkReal x1066=((cj8)*(npx));
IkReal x1067=((cj8)*(sj3));
IkReal x1068=((npy)*(sj8));
IkReal x1069=((r02)*(sj3));
IkReal x1070=((IkReal(1.00000000000000))*(r11));
IkReal x1071=((cj3)*(r12));
IkReal x1072=((IkReal(1.00000000000000))*(cj7));
IkReal x1073=((sj3)*(sj8));
IkReal x1074=((IkReal(1.00000000000000))*(cj3)*(sj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(0.235000000000000))+(((cj7)*(x1068)))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(0.250000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(x1066)*(x1072)))+(((IkReal(-1.00000000000000))*(npz)*(x1065))));
evalcond[4]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r10)*(x1074)))+(((r01)*(x1067)))+(((r00)*(x1073)))+(((IkReal(-1.00000000000000))*(x1064)*(x1070))));
evalcond[5]=((IkReal(-0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(0.250000000000000))*(sj5)))+(((sj7)*(x1068)))+(((cj7)*(npz)))+(((IkReal(-1.00000000000000))*(x1065)*(x1066))));
evalcond[6]=((((IkReal(-1.00000000000000))*(r01)*(x1064)))+(((IkReal(-1.00000000000000))*(r00)*(x1074)))+(((IkReal(-1.00000000000000))*(r10)*(x1073)))+(((IkReal(-1.00000000000000))*(x1067)*(x1070))));
evalcond[7]=((((sj7)*(x1071)))+(((IkReal(-1.00000000000000))*(r00)*(x1067)*(x1072)))+(((IkReal(-1.00000000000000))*(cj3)*(cj7)*(sj8)*(x1070)))+(((cj7)*(r01)*(x1073)))+(((cj7)*(r10)*(x1064)))+(((IkReal(-1.00000000000000))*(x1065)*(x1069))));
evalcond[8]=((((cj7)*(x1069)))+(((IkReal(-1.00000000000000))*(r00)*(x1065)*(x1067)))+(((IkReal(-1.00000000000000))*(x1071)*(x1072)))+(((r01)*(sj7)*(x1073)))+(((IkReal(-1.00000000000000))*(cj3)*(r11)*(sj8)*(x1065)))+(((r10)*(sj7)*(x1064))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1075=((cj7)*(sj5));
IkReal x1076=((r21)*(sj8));
IkReal x1077=((cj5)*(cj7));
IkReal x1078=((cj8)*(r20));
IkReal x1079=((sj5)*(sj7));
IkReal x1080=((IkReal(1.00000000000000))*(cj5)*(sj7));
if( IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(x1078)*(x1080)))+(((x1075)*(x1078)))+(((r22)*(x1079)))+(((r22)*(x1077)))+(((cj5)*(sj7)*(x1076)))+(((IkReal(-1.00000000000000))*(x1075)*(x1076))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(x1077)*(x1078)))+(((r22)*(x1075)))+(((x1076)*(x1079)))+(((x1076)*(x1077)))+(((IkReal(-1.00000000000000))*(x1078)*(x1079)))+(((IkReal(-1.00000000000000))*(r22)*(x1080))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst5)*(((((IkReal(-1.00000000000000))*(x1078)*(x1080)))+(((x1075)*(x1078)))+(((r22)*(x1079)))+(((r22)*(x1077)))+(((cj5)*(sj7)*(x1076)))+(((IkReal(-1.00000000000000))*(x1075)*(x1076)))))), ((gconst5)*(((((IkReal(-1.00000000000000))*(x1077)*(x1078)))+(((r22)*(x1075)))+(((x1076)*(x1079)))+(((x1076)*(x1077)))+(((IkReal(-1.00000000000000))*(x1078)*(x1079)))+(((IkReal(-1.00000000000000))*(r22)*(x1080)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1081=IKcos(j4);
IkReal x1082=IKsin(j4);
IkReal x1083=((IkReal(1.00000000000000))*(cj7));
IkReal x1084=((cj8)*(r20));
IkReal x1085=((cj3)*(r02));
IkReal x1086=((IkReal(1.00000000000000))*(sj7));
IkReal x1087=((sj3)*(sj7));
IkReal x1088=((r21)*(sj8));
IkReal x1089=((IkReal(1.00000000000000))*(cj5));
IkReal x1090=((cj8)*(r10));
IkReal x1091=((sj5)*(x1082));
IkReal x1092=((sj5)*(x1081));
IkReal x1093=((r11)*(sj3)*(sj8));
IkReal x1094=((cj3)*(cj8)*(r00));
IkReal x1095=((cj3)*(r01)*(sj8));
IkReal x1096=((x1081)*(x1089));
evalcond[0]=((((cj7)*(x1088)))+(x1091)+(((IkReal(-1.00000000000000))*(x1096)))+(((IkReal(-1.00000000000000))*(x1083)*(x1084)))+(((IkReal(-1.00000000000000))*(r22)*(x1086))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1092)))+(((sj7)*(x1088)))+(((IkReal(-1.00000000000000))*(x1082)*(x1089)))+(((IkReal(-1.00000000000000))*(x1084)*(x1086)))+(((cj7)*(r22))));
evalcond[2]=((((cj5)*(x1082)))+(x1092)+(((IkReal(-1.00000000000000))*(x1083)*(x1095)))+(((IkReal(-1.00000000000000))*(x1083)*(x1093)))+(((r12)*(x1087)))+(((cj7)*(sj3)*(x1090)))+(((sj7)*(x1085)))+(((cj7)*(x1094))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1086)*(x1093)))+(((IkReal(-1.00000000000000))*(x1086)*(x1095)))+(((x1087)*(x1090)))+(x1091)+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x1083)))+(((IkReal(-1.00000000000000))*(x1096)))+(((sj7)*(x1094)))+(((IkReal(-1.00000000000000))*(x1083)*(x1085))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1097=((sj5)*(sj6));
IkReal x1098=((r22)*(sj7));
IkReal x1099=((r20)*(sj8));
IkReal x1100=((cj8)*(r21));
IkReal x1101=((cj5)*(sj6));
IkReal x1102=((cj7)*(cj8)*(r20));
IkReal x1103=((cj7)*(r21)*(sj8));
if( IKabs(((gconst3)*(((((x1097)*(x1102)))+(((cj5)*(x1100)))+(((cj5)*(x1099)))+(((IkReal(-1.00000000000000))*(x1097)*(x1103)))+(((x1097)*(x1098))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((x1101)*(x1103)))+(((IkReal(-1.00000000000000))*(x1098)*(x1101)))+(((IkReal(-1.00000000000000))*(x1101)*(x1102)))+(((sj5)*(x1099)))+(((sj5)*(x1100))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst3)*(((((x1097)*(x1102)))+(((cj5)*(x1100)))+(((cj5)*(x1099)))+(((IkReal(-1.00000000000000))*(x1097)*(x1103)))+(((x1097)*(x1098)))))), ((gconst3)*(((((x1101)*(x1103)))+(((IkReal(-1.00000000000000))*(x1098)*(x1101)))+(((IkReal(-1.00000000000000))*(x1101)*(x1102)))+(((sj5)*(x1099)))+(((sj5)*(x1100)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1104=IKsin(j4);
IkReal x1105=IKcos(j4);
IkReal x1106=((IkReal(1.00000000000000))*(cj8));
IkReal x1107=((cj3)*(r01));
IkReal x1108=((IkReal(1.00000000000000))*(sj8));
IkReal x1109=((r11)*(sj3));
IkReal x1110=((cj3)*(r00));
IkReal x1111=((IkReal(1.00000000000000))*(sj6));
IkReal x1112=((IkReal(1.00000000000000))*(cj7));
IkReal x1113=((cj3)*(r02));
IkReal x1114=((sj3)*(sj7));
IkReal x1115=((cj7)*(cj8));
IkReal x1116=((r21)*(sj8));
IkReal x1117=((r10)*(sj3));
IkReal x1118=((sj5)*(x1105));
IkReal x1119=((cj5)*(x1105));
IkReal x1120=((cj6)*(x1104));
IkReal x1121=((cj5)*(x1104));
IkReal x1122=((sj5)*(x1104));
evalcond[0]=((((cj8)*(r21)))+(((IkReal(-1.00000000000000))*(x1111)*(x1121)))+(((r20)*(sj8)))+(((IkReal(-1.00000000000000))*(x1111)*(x1118))));
evalcond[1]=((((cj7)*(x1116)))+(x1122)+(((IkReal(-1.00000000000000))*(x1119)))+(((IkReal(-1.00000000000000))*(cj7)*(r20)*(x1106)))+(((IkReal(-1.00000000000000))*(r22)*(sj7))));
evalcond[2]=((((sj7)*(x1116)))+(((cj5)*(x1120)))+(((IkReal(-1.00000000000000))*(r20)*(sj7)*(x1106)))+(((cj6)*(x1118)))+(((cj7)*(r22))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1108)*(x1117)))+(((IkReal(-1.00000000000000))*(x1108)*(x1110)))+(((IkReal(-1.00000000000000))*(x1106)*(x1107)))+(((IkReal(-1.00000000000000))*(x1106)*(x1109)))+(((sj6)*(x1122)))+(((IkReal(-1.00000000000000))*(x1111)*(x1119))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj7)*(x1108)*(x1109)))+(x1118)+(x1121)+(((x1110)*(x1115)))+(((IkReal(-1.00000000000000))*(cj7)*(x1107)*(x1108)))+(((sj7)*(x1113)))+(((r12)*(x1114)))+(((x1115)*(x1117))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj7)*(x1107)*(x1108)))+(((cj8)*(r10)*(x1114)))+(((IkReal(-1.00000000000000))*(sj7)*(x1108)*(x1109)))+(((IkReal(-1.00000000000000))*(sj5)*(x1120)))+(((IkReal(-1.00000000000000))*(x1112)*(x1113)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x1112)))+(((cj6)*(x1119)))+(((cj8)*(sj7)*(x1110))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1123=((sj5)*(sj6));
IkReal x1124=((r22)*(sj7));
IkReal x1125=((r20)*(sj8));
IkReal x1126=((cj8)*(r21));
IkReal x1127=((cj5)*(sj6));
IkReal x1128=((cj7)*(cj8)*(r20));
IkReal x1129=((cj7)*(r21)*(sj8));
if( IKabs(((gconst2)*(((((cj5)*(x1125)))+(((cj5)*(x1126)))+(((IkReal(-1.00000000000000))*(x1123)*(x1129)))+(((x1123)*(x1128)))+(((x1123)*(x1124))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((x1127)*(x1129)))+(((IkReal(-1.00000000000000))*(x1124)*(x1127)))+(((IkReal(-1.00000000000000))*(x1127)*(x1128)))+(((sj5)*(x1125)))+(((sj5)*(x1126))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst2)*(((((cj5)*(x1125)))+(((cj5)*(x1126)))+(((IkReal(-1.00000000000000))*(x1123)*(x1129)))+(((x1123)*(x1128)))+(((x1123)*(x1124)))))), ((gconst2)*(((((x1127)*(x1129)))+(((IkReal(-1.00000000000000))*(x1124)*(x1127)))+(((IkReal(-1.00000000000000))*(x1127)*(x1128)))+(((sj5)*(x1125)))+(((sj5)*(x1126)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1130=IKsin(j4);
IkReal x1131=IKcos(j4);
IkReal x1132=((IkReal(1.00000000000000))*(cj5));
IkReal x1133=((r21)*(sj8));
IkReal x1134=((IkReal(1.00000000000000))*(cj8)*(r20));
IkReal x1135=((sj5)*(x1131));
evalcond[0]=((((cj8)*(r21)))+(((IkReal(-1.00000000000000))*(sj6)*(x1130)*(x1132)))+(((IkReal(-1.00000000000000))*(sj6)*(x1135)))+(((r20)*(sj8))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1131)*(x1132)))+(((cj7)*(x1133)))+(((sj5)*(x1130)))+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(x1134))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj7)*(x1134)))+(((cj5)*(cj6)*(x1130)))+(((sj7)*(x1133)))+(((cj7)*(r22)))+(((cj6)*(x1135))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst6;
IkReal x1136=(sj8)*(sj8);
IkReal x1137=(cj8)*(cj8);
IkReal x1138=((r00)*(r11));
IkReal x1139=((r02)*(sj7));
IkReal x1140=((cj7)*(x1137));
IkReal x1141=((IkReal(1.00000000000000))*(r12)*(sj7));
IkReal x1142=((IkReal(1.00000000000000))*(r01)*(r10));
IkReal x1143=((cj7)*(x1136));
gconst6=IKsign(((((r10)*(sj8)*(x1139)))+(((IkReal(-1.00000000000000))*(x1140)*(x1142)))+(((cj8)*(r11)*(x1139)))+(((IkReal(-1.00000000000000))*(r00)*(sj8)*(x1141)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x1141)))+(((IkReal(-1.00000000000000))*(x1142)*(x1143)))+(((x1138)*(x1143)))+(((x1138)*(x1140)))));
IkReal x1144=(sj8)*(sj8);
IkReal x1145=(cj8)*(cj8);
IkReal x1146=((r00)*(r11));
IkReal x1147=((r02)*(sj7));
IkReal x1148=((cj7)*(x1145));
IkReal x1149=((IkReal(1.00000000000000))*(r12)*(sj7));
IkReal x1150=((IkReal(1.00000000000000))*(r01)*(r10));
IkReal x1151=((cj7)*(x1144));
dummyeval[0]=((((x1146)*(x1151)))+(((x1146)*(x1148)))+(((IkReal(-1.00000000000000))*(r00)*(sj8)*(x1149)))+(((r10)*(sj8)*(x1147)))+(((cj8)*(r11)*(x1147)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x1149)))+(((IkReal(-1.00000000000000))*(x1148)*(x1150)))+(((IkReal(-1.00000000000000))*(x1150)*(x1151))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1152=((cj6)*(cj7));
IkReal x1153=((IkReal(1.00000000000000))*(sj8));
IkReal x1154=((cj6)*(sj7));
if( IKabs(((gconst6)*(((((r12)*(x1154)))+(((cj8)*(r10)*(x1152)))+(((IkReal(-1.00000000000000))*(r11)*(x1152)*(x1153))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((cj8)*(r00)*(x1152)))+(((IkReal(-1.00000000000000))*(r01)*(x1152)*(x1153)))+(((r02)*(x1154))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst6)*(((((r12)*(x1154)))+(((cj8)*(r10)*(x1152)))+(((IkReal(-1.00000000000000))*(r11)*(x1152)*(x1153)))))), ((gconst6)*(((((cj8)*(r00)*(x1152)))+(((IkReal(-1.00000000000000))*(r01)*(x1152)*(x1153)))+(((r02)*(x1154)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1155=IKsin(j3);
IkReal x1156=IKcos(j3);
IkReal x1157=((cj4)*(cj5));
IkReal x1158=((r01)*(sj8));
IkReal x1159=((cj8)*(r00));
IkReal x1160=((r00)*(sj8));
IkReal x1161=((cj8)*(r11));
IkReal x1162=((r11)*(sj8));
IkReal x1163=((sj4)*(sj5));
IkReal x1164=((r10)*(sj8));
IkReal x1165=((cj8)*(r10));
IkReal x1166=((cj7)*(x1155));
IkReal x1167=((sj7)*(x1156));
IkReal x1168=((IkReal(1.00000000000000))*(x1155));
IkReal x1169=((IkReal(1.00000000000000))*(x1156));
IkReal x1170=((cj8)*(x1155));
IkReal x1171=((IkReal(1.00000000000000))*(x1162));
IkReal x1172=((sj7)*(x1155));
IkReal x1173=((cj7)*(x1156));
evalcond[0]=((cj6)+(((r01)*(x1170)))+(((x1155)*(x1160)))+(((IkReal(-1.00000000000000))*(x1164)*(x1169)))+(((IkReal(-1.00000000000000))*(x1161)*(x1169))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj6)*(x1157)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x1169)))+(((sj6)*(x1163)))+(((IkReal(-1.00000000000000))*(x1164)*(x1168)))+(((IkReal(-1.00000000000000))*(x1160)*(x1169)))+(((IkReal(-1.00000000000000))*(x1161)*(x1168))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj7)*(x1162)*(x1169)))+(((x1165)*(x1173)))+(((IkReal(-1.00000000000000))*(x1159)*(x1166)))+(((IkReal(-1.00000000000000))*(r02)*(sj7)*(x1168)))+(((r12)*(x1167)))+(((x1158)*(x1166))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj7)*(x1159)*(x1168)))+(sj6)+(((x1165)*(x1167)))+(((r02)*(x1166)))+(((IkReal(-1.00000000000000))*(x1167)*(x1171)))+(((IkReal(-1.00000000000000))*(cj7)*(r12)*(x1169)))+(((x1158)*(x1172))));
evalcond[4]=((((x1165)*(x1166)))+(((r02)*(x1167)))+(((cj5)*(sj4)))+(((r12)*(x1172)))+(((cj4)*(sj5)))+(((IkReal(-1.00000000000000))*(cj7)*(x1158)*(x1169)))+(((IkReal(-1.00000000000000))*(x1166)*(x1171)))+(((x1159)*(x1173))));
evalcond[5]=((((x1159)*(x1167)))+(((IkReal(-1.00000000000000))*(sj7)*(x1162)*(x1168)))+(((IkReal(-1.00000000000000))*(cj7)*(r02)*(x1169)))+(((IkReal(-1.00000000000000))*(cj6)*(x1163)))+(((x1165)*(x1172)))+(((cj6)*(x1157)))+(((IkReal(-1.00000000000000))*(x1158)*(x1167)))+(((IkReal(-1.00000000000000))*(r12)*(x1166))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1174=((cj6)*(sj7));
IkReal x1175=((cj6)*(cj7));
IkReal x1176=((IkReal(1.00000000000000))*(sj8));
if( IKabs(((gconst0)*(((((r12)*(x1174)))+(((cj8)*(r10)*(x1175)))+(((IkReal(-1.00000000000000))*(r11)*(x1175)*(x1176))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((r02)*(x1174)))+(((cj8)*(r00)*(x1175)))+(((IkReal(-1.00000000000000))*(r01)*(x1175)*(x1176))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst0)*(((((r12)*(x1174)))+(((cj8)*(r10)*(x1175)))+(((IkReal(-1.00000000000000))*(r11)*(x1175)*(x1176)))))), ((gconst0)*(((((r02)*(x1174)))+(((cj8)*(r00)*(x1175)))+(((IkReal(-1.00000000000000))*(r01)*(x1175)*(x1176)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1177=IKsin(j3);
IkReal x1178=IKcos(j3);
IkReal x1179=((IkReal(1.00000000000000))*(r11));
IkReal x1180=((r01)*(sj8));
IkReal x1181=((cj8)*(r10));
IkReal x1182=((IkReal(1.00000000000000))*(sj7));
IkReal x1183=((sj7)*(x1178));
IkReal x1184=((cj7)*(x1177));
IkReal x1185=((r00)*(x1177));
IkReal x1186=((cj7)*(x1178));
evalcond[0]=((cj6)+(((sj8)*(x1185)))+(((cj8)*(r01)*(x1177)))+(((IkReal(-1.00000000000000))*(cj8)*(x1178)*(x1179)))+(((IkReal(-1.00000000000000))*(r10)*(sj8)*(x1178))));
evalcond[1]=((((x1180)*(x1184)))+(((IkReal(-1.00000000000000))*(sj8)*(x1179)*(x1186)))+(((x1181)*(x1186)))+(((IkReal(-1.00000000000000))*(cj8)*(r00)*(x1184)))+(((r12)*(x1183)))+(((IkReal(-1.00000000000000))*(r02)*(x1177)*(x1182))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r12)*(x1186)))+(sj6)+(((IkReal(-1.00000000000000))*(cj8)*(x1182)*(x1185)))+(((IkReal(-1.00000000000000))*(sj8)*(x1179)*(x1183)))+(((x1181)*(x1183)))+(((r02)*(x1184)))+(((sj7)*(x1177)*(x1180))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
dummyeval[0]=sj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x1187=((IkReal(1.00000000000000))*(cj3));
IkReal x1188=((cj7)*(r02));
IkReal x1189=((cj8)*(sj7));
IkReal x1190=((r01)*(sj3));
IkReal x1191=((IkReal(1.00000000000000))*(sj3));
IkReal x1192=((sj7)*(sj8));
IkReal x1193=((cj7)*(r12));
IkReal x1194=((cj7)*(cj8));
IkReal x1195=((cj3)*(r10));
IkReal x1196=((cj7)*(sj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj8)*(r11)*(x1187)))+(((r00)*(sj3)*(sj8)))+(((cj8)*(x1190)))+(((IkReal(-1.00000000000000))*(r10)*(sj8)*(x1187))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r20)*(x1189)))+(((r21)*(x1192)))+(((cj7)*(r22))));
evalcond[3]=((IkReal(0.0950000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(npx)*(x1189)))+(((npy)*(x1192)))+(((cj7)*(npz))));
evalcond[4]=((((cj3)*(r12)*(sj7)))+(((IkReal(-1.00000000000000))*(r02)*(sj7)*(x1191)))+(((x1194)*(x1195)))+(((IkReal(-1.00000000000000))*(r11)*(x1187)*(x1196)))+(((IkReal(-1.00000000000000))*(r00)*(x1191)*(x1194)))+(((x1190)*(x1196))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r11)*(x1187)*(x1192)))+(((x1189)*(x1195)))+(((IkReal(-1.00000000000000))*(x1187)*(x1193)))+(((sj3)*(x1188)))+(((IkReal(-1.00000000000000))*(r00)*(x1189)*(x1191)))+(((x1190)*(x1192))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x1191)*(x1193)))+(((cj3)*(r00)*(x1189)))+(((IkReal(-1.00000000000000))*(x1187)*(x1188)))+(((IkReal(-1.00000000000000))*(r01)*(x1187)*(x1192)))+(((r10)*(sj3)*(x1189)))+(((IkReal(-1.00000000000000))*(r11)*(x1191)*(x1192))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1197=((IkReal(4.00000000000000))*(npx));
IkReal x1198=((IkReal(4.00000000000000))*(npy));
if( IKabs(((IkReal(0.120000000000000))+(((IkReal(-1.00000000000000))*(cj8)*(x1198)))+(((IkReal(-1.00000000000000))*(sj8)*(x1197))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.940000000000000))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((cj7)*(cj8)*(x1197)))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x1198)))+(((IkReal(-0.360000000000000))*(cj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.120000000000000))+(((IkReal(-1.00000000000000))*(cj8)*(x1198)))+(((IkReal(-1.00000000000000))*(sj8)*(x1197)))))+IKsqr(((IkReal(-0.940000000000000))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((cj7)*(cj8)*(x1197)))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x1198)))+(((IkReal(-0.360000000000000))*(cj7)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(0.120000000000000))+(((IkReal(-1.00000000000000))*(cj8)*(x1198)))+(((IkReal(-1.00000000000000))*(sj8)*(x1197)))), ((IkReal(-0.940000000000000))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((cj7)*(cj8)*(x1197)))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x1198)))+(((IkReal(-0.360000000000000))*(cj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0300000000000000))+(((npx)*(sj8)))+(((cj8)*(npy)))+(((IkReal(0.250000000000000))*(IKsin(j5)))));
evalcond[1]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(npz)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((IkReal(0.250000000000000))*(IKcos(j5)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1199=((sj5)*(sj8));
IkReal x1200=((IkReal(1.00000000000000))*(cj7));
IkReal x1201=((cj8)*(sj5));
IkReal x1202=((r22)*(sj7));
IkReal x1203=((cj5)*(r20));
IkReal x1204=((cj5)*(r21));
if( IKabs(((gconst18)*(((((cj7)*(r20)*(x1201)))+(((cj8)*(x1204)))+(((sj8)*(x1203)))+(((sj5)*(x1202)))+(((IkReal(-1.00000000000000))*(r21)*(x1199)*(x1200))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(((((cj7)*(sj8)*(x1204)))+(((IkReal(-1.00000000000000))*(cj5)*(x1202)))+(((r21)*(x1201)))+(((IkReal(-1.00000000000000))*(cj8)*(x1200)*(x1203)))+(((r20)*(x1199))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst18)*(((((cj7)*(r20)*(x1201)))+(((cj8)*(x1204)))+(((sj8)*(x1203)))+(((sj5)*(x1202)))+(((IkReal(-1.00000000000000))*(r21)*(x1199)*(x1200)))))), ((gconst18)*(((((cj7)*(sj8)*(x1204)))+(((IkReal(-1.00000000000000))*(cj5)*(x1202)))+(((r21)*(x1201)))+(((IkReal(-1.00000000000000))*(cj8)*(x1200)*(x1203)))+(((r20)*(x1199)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1205=IKsin(j4);
IkReal x1206=IKcos(j4);
IkReal x1207=((IkReal(1.00000000000000))*(cj8));
IkReal x1208=((cj3)*(r01));
IkReal x1209=((cj3)*(r00));
IkReal x1210=((cj7)*(cj8));
IkReal x1211=((IkReal(1.00000000000000))*(cj5));
IkReal x1212=((IkReal(1.00000000000000))*(sj8));
IkReal x1213=((r11)*(sj3));
IkReal x1214=((r10)*(sj3));
IkReal x1215=((sj5)*(x1205));
IkReal x1216=((sj5)*(x1206));
IkReal x1217=((x1206)*(x1211));
evalcond[0]=((((cj8)*(r21)))+(((IkReal(-1.00000000000000))*(x1205)*(x1211)))+(((r20)*(sj8)))+(((IkReal(-1.00000000000000))*(x1216))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj7)*(r20)*(x1207)))+(x1215)+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((IkReal(-1.00000000000000))*(x1217)))+(((cj7)*(r21)*(sj8))));
evalcond[2]=((x1215)+(((IkReal(-1.00000000000000))*(x1207)*(x1213)))+(((IkReal(-1.00000000000000))*(x1209)*(x1212)))+(((IkReal(-1.00000000000000))*(x1212)*(x1214)))+(((IkReal(-1.00000000000000))*(x1217)))+(((IkReal(-1.00000000000000))*(x1207)*(x1208))));
evalcond[3]=((((cj5)*(x1205)))+(((r12)*(sj3)*(sj7)))+(x1216)+(((x1210)*(x1214)))+(((IkReal(-1.00000000000000))*(cj7)*(x1212)*(x1213)))+(((IkReal(-1.00000000000000))*(cj7)*(x1208)*(x1212)))+(((cj3)*(r02)*(sj7)))+(((x1209)*(x1210))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
IkReal x1218=((IkReal(1.00000000000000))*(cj3));
IkReal x1219=((cj7)*(r02));
IkReal x1220=((cj8)*(sj7));
IkReal x1221=((r01)*(sj3));
IkReal x1222=((IkReal(1.00000000000000))*(sj3));
IkReal x1223=((sj7)*(sj8));
IkReal x1224=((cj7)*(r12));
IkReal x1225=((cj7)*(cj8));
IkReal x1226=((cj3)*(r10));
IkReal x1227=((cj7)*(sj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r10)*(sj8)*(x1218)))+(((IkReal(-1.00000000000000))*(cj8)*(r11)*(x1218)))+(((r00)*(sj3)*(sj8)))+(((cj8)*(x1221))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r20)*(x1220)))+(((r21)*(x1223)))+(((cj7)*(r22))));
evalcond[3]=((IkReal(-0.0950000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((npy)*(x1223)))+(((cj7)*(npz)))+(((IkReal(-1.00000000000000))*(npx)*(x1220))));
evalcond[4]=((((cj3)*(r12)*(sj7)))+(((IkReal(-1.00000000000000))*(r11)*(x1218)*(x1227)))+(((x1225)*(x1226)))+(((IkReal(-1.00000000000000))*(r02)*(sj7)*(x1222)))+(((x1221)*(x1227)))+(((IkReal(-1.00000000000000))*(r00)*(x1222)*(x1225))));
evalcond[5]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x1218)*(x1224)))+(((IkReal(-1.00000000000000))*(r11)*(x1218)*(x1223)))+(((x1220)*(x1226)))+(((sj3)*(x1219)))+(((x1221)*(x1223)))+(((IkReal(-1.00000000000000))*(r00)*(x1220)*(x1222))));
evalcond[6]=((((IkReal(-1.00000000000000))*(r11)*(x1222)*(x1223)))+(((IkReal(-1.00000000000000))*(x1218)*(x1219)))+(((cj3)*(r00)*(x1220)))+(((IkReal(-1.00000000000000))*(x1222)*(x1224)))+(((r10)*(sj3)*(x1220)))+(((IkReal(-1.00000000000000))*(r01)*(x1218)*(x1223))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1228=((IkReal(4.00000000000000))*(npx));
IkReal x1229=((IkReal(4.00000000000000))*(npy));
if( IKabs(((IkReal(0.120000000000000))+(((cj8)*(x1229)))+(((sj8)*(x1228))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.940000000000000))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((cj7)*(cj8)*(x1228)))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x1229)))+(((IkReal(-0.360000000000000))*(cj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.120000000000000))+(((cj8)*(x1229)))+(((sj8)*(x1228)))))+IKsqr(((IkReal(-0.940000000000000))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((cj7)*(cj8)*(x1228)))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x1229)))+(((IkReal(-0.360000000000000))*(cj7)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(0.120000000000000))+(((cj8)*(x1229)))+(((sj8)*(x1228)))), ((IkReal(-0.940000000000000))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((cj7)*(cj8)*(x1228)))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x1229)))+(((IkReal(-0.360000000000000))*(cj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0300000000000000))+(((npx)*(sj8)))+(((cj8)*(npy)))+(((IkReal(-0.250000000000000))*(IKsin(j5)))));
evalcond[1]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(npz)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((IkReal(0.250000000000000))*(IKcos(j5)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1230=((r22)*(sj7));
IkReal x1231=((cj8)*(r21));
IkReal x1232=((sj5)*(sj8));
IkReal x1233=((IkReal(1.00000000000000))*(sj5));
IkReal x1234=((cj5)*(cj7));
IkReal x1235=((cj8)*(r20));
if( IKabs(((gconst19)*(((((cj5)*(r20)*(sj8)))+(((IkReal(-1.00000000000000))*(x1230)*(x1233)))+(((cj5)*(x1231)))+(((IkReal(-1.00000000000000))*(cj7)*(x1233)*(x1235)))+(((cj7)*(r21)*(x1232))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(((((x1234)*(x1235)))+(((r20)*(x1232)))+(((sj5)*(x1231)))+(((cj5)*(x1230)))+(((IkReal(-1.00000000000000))*(r21)*(sj8)*(x1234))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst19)*(((((cj5)*(r20)*(sj8)))+(((IkReal(-1.00000000000000))*(x1230)*(x1233)))+(((cj5)*(x1231)))+(((IkReal(-1.00000000000000))*(cj7)*(x1233)*(x1235)))+(((cj7)*(r21)*(x1232)))))), ((gconst19)*(((((x1234)*(x1235)))+(((r20)*(x1232)))+(((sj5)*(x1231)))+(((cj5)*(x1230)))+(((IkReal(-1.00000000000000))*(r21)*(sj8)*(x1234)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1236=IKsin(j4);
IkReal x1237=IKcos(j4);
IkReal x1238=((IkReal(1.00000000000000))*(cj8));
IkReal x1239=((cj3)*(r01));
IkReal x1240=((cj3)*(r00));
IkReal x1241=((cj7)*(cj8));
IkReal x1242=((r11)*(sj3));
IkReal x1243=((IkReal(1.00000000000000))*(sj8));
IkReal x1244=((r10)*(sj3));
IkReal x1245=((sj5)*(x1237));
IkReal x1246=((cj5)*(x1236));
IkReal x1247=((cj5)*(x1237));
IkReal x1248=((sj5)*(x1236));
IkReal x1249=((x1245)+(x1246));
evalcond[0]=((x1249)+(((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[1]=((x1248)+(((IkReal(-1.00000000000000))*(x1247)))+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(r20)*(x1238)))+(((cj7)*(r21)*(sj8))));
evalcond[2]=((x1247)+(((IkReal(-1.00000000000000))*(x1248)))+(((IkReal(-1.00000000000000))*(x1238)*(x1239)))+(((IkReal(-1.00000000000000))*(x1243)*(x1244)))+(((IkReal(-1.00000000000000))*(x1238)*(x1242)))+(((IkReal(-1.00000000000000))*(x1240)*(x1243))));
evalcond[3]=((((r12)*(sj3)*(sj7)))+(x1249)+(((x1240)*(x1241)))+(((IkReal(-1.00000000000000))*(cj7)*(x1242)*(x1243)))+(((cj3)*(r02)*(sj7)))+(((x1241)*(x1244)))+(((IkReal(-1.00000000000000))*(cj7)*(x1239)*(x1243))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
IkReal x1250=((cj3)*(cj8));
IkReal x1251=((r01)*(sj3));
IkReal x1252=((r02)*(sj3));
IkReal x1253=((IkReal(1.00000000000000))*(sj7));
IkReal x1254=((IkReal(1.00000000000000))*(r11));
IkReal x1255=((cj3)*(r12));
IkReal x1256=((IkReal(1.00000000000000))*(cj7));
IkReal x1257=((cj8)*(sj3));
IkReal x1258=((sj3)*(sj8));
IkReal x1259=((IkReal(1.00000000000000))*(cj3)*(sj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(1.00000000000000))+(((cj8)*(x1251)))+(((IkReal(-1.00000000000000))*(x1250)*(x1254)))+(((r00)*(x1258)))+(((IkReal(-1.00000000000000))*(r10)*(x1259))));
evalcond[4]=((((IkReal(-1.00000000000000))*(r01)*(x1250)))+(((IkReal(-1.00000000000000))*(r10)*(x1258)))+(((IkReal(-1.00000000000000))*(r00)*(x1259)))+(((IkReal(-1.00000000000000))*(x1254)*(x1257))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj3)*(cj7)*(sj8)*(x1254)))+(((IkReal(-1.00000000000000))*(r00)*(x1256)*(x1257)))+(((cj7)*(r10)*(x1250)))+(((sj7)*(x1255)))+(((IkReal(-1.00000000000000))*(x1252)*(x1253)))+(((cj7)*(sj8)*(x1251))));
evalcond[6]=((((IkReal(-1.00000000000000))*(r00)*(x1253)*(x1257)))+(((IkReal(-1.00000000000000))*(cj3)*(r11)*(sj8)*(x1253)))+(((r10)*(sj7)*(x1250)))+(((cj7)*(x1252)))+(((sj7)*(sj8)*(x1251)))+(((IkReal(-1.00000000000000))*(x1255)*(x1256))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1260=((IkReal(4.00000000000000))*(sj7));
IkReal x1261=((npy)*(sj8));
IkReal x1262=((IkReal(4.00000000000000))*(cj7));
IkReal x1263=((cj8)*(npx));
if( IKabs(((IkReal(0.120000000000000))+(((IkReal(0.360000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x1260)*(x1263)))+(((npz)*(x1262)))+(((x1260)*(x1261))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(x1261)*(x1262)))+(((npz)*(x1260)))+(((x1262)*(x1263)))+(((IkReal(-0.360000000000000))*(cj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.120000000000000))+(((IkReal(0.360000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x1260)*(x1263)))+(((npz)*(x1262)))+(((x1260)*(x1261)))))+IKsqr(((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(x1261)*(x1262)))+(((npz)*(x1260)))+(((x1262)*(x1263)))+(((IkReal(-0.360000000000000))*(cj7)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(0.120000000000000))+(((IkReal(0.360000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x1260)*(x1263)))+(((npz)*(x1262)))+(((x1260)*(x1261)))), ((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(x1261)*(x1262)))+(((npz)*(x1260)))+(((x1262)*(x1263)))+(((IkReal(-0.360000000000000))*(cj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x1264=((IkReal(1.00000000000000))*(sj7));
IkReal x1265=((npy)*(sj8));
IkReal x1266=((cj8)*(npx));
evalcond[0]=((IkReal(0.235000000000000))+(((cj7)*(x1265)))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(npz)*(x1264)))+(((IkReal(-1.00000000000000))*(cj7)*(x1266)))+(((IkReal(0.250000000000000))*(IKcos(j5)))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x1264)*(x1266)))+(((sj7)*(x1265)))+(((IkReal(-0.250000000000000))*(IKsin(j5))))+(((cj7)*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1267=((cj5)*(sj7));
IkReal x1268=((cj8)*(r20));
IkReal x1269=((cj5)*(cj7));
IkReal x1270=((IkReal(1.00000000000000))*(sj5));
IkReal x1271=((r21)*(sj8));
IkReal x1272=((cj7)*(sj5));
if( IKabs(((gconst20)*(((((IkReal(-1.00000000000000))*(r22)*(sj7)*(x1270)))+(((r22)*(x1269)))+(((x1267)*(x1271)))+(((x1271)*(x1272)))+(((IkReal(-1.00000000000000))*(x1267)*(x1268)))+(((IkReal(-1.00000000000000))*(cj7)*(x1268)*(x1270))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((IkReal(-1.00000000000000))*(x1269)*(x1271)))+(((sj5)*(sj7)*(x1271)))+(((r22)*(x1267)))+(((r22)*(x1272)))+(((x1268)*(x1269)))+(((IkReal(-1.00000000000000))*(sj7)*(x1268)*(x1270))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst20)*(((((IkReal(-1.00000000000000))*(r22)*(sj7)*(x1270)))+(((r22)*(x1269)))+(((x1267)*(x1271)))+(((x1271)*(x1272)))+(((IkReal(-1.00000000000000))*(x1267)*(x1268)))+(((IkReal(-1.00000000000000))*(cj7)*(x1268)*(x1270)))))), ((gconst20)*(((((IkReal(-1.00000000000000))*(x1269)*(x1271)))+(((sj5)*(sj7)*(x1271)))+(((r22)*(x1267)))+(((r22)*(x1272)))+(((x1268)*(x1269)))+(((IkReal(-1.00000000000000))*(sj7)*(x1268)*(x1270)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1273=IKcos(j4);
IkReal x1274=IKsin(j4);
IkReal x1275=((IkReal(1.00000000000000))*(cj7));
IkReal x1276=((cj8)*(r20));
IkReal x1277=((cj3)*(r02));
IkReal x1278=((IkReal(1.00000000000000))*(sj7));
IkReal x1279=((sj3)*(sj7));
IkReal x1280=((r21)*(sj8));
IkReal x1281=((cj8)*(r10));
IkReal x1282=((sj5)*(x1273));
IkReal x1283=((cj5)*(x1274));
IkReal x1284=((r11)*(sj3)*(sj8));
IkReal x1285=((cj3)*(cj8)*(r00));
IkReal x1286=((cj5)*(x1273));
IkReal x1287=((cj3)*(r01)*(sj8));
IkReal x1288=((sj5)*(x1274));
IkReal x1289=((x1283)+(x1282));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1286)))+(x1288)+(((IkReal(-1.00000000000000))*(x1275)*(x1276)))+(((IkReal(-1.00000000000000))*(r22)*(x1278)))+(((cj7)*(x1280))));
evalcond[1]=((x1289)+(((IkReal(-1.00000000000000))*(x1276)*(x1278)))+(((cj7)*(r22)))+(((sj7)*(x1280))));
evalcond[2]=((x1289)+(((r12)*(x1279)))+(((IkReal(-1.00000000000000))*(x1275)*(x1284)))+(((IkReal(-1.00000000000000))*(x1275)*(x1287)))+(((cj7)*(x1285)))+(((cj7)*(sj3)*(x1281)))+(((sj7)*(x1277))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r12)*(sj3)*(x1275)))+(((IkReal(-1.00000000000000))*(x1288)))+(((x1279)*(x1281)))+(x1286)+(((IkReal(-1.00000000000000))*(x1275)*(x1277)))+(((IkReal(-1.00000000000000))*(x1278)*(x1287)))+(((IkReal(-1.00000000000000))*(x1278)*(x1284)))+(((sj7)*(x1285))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
IkReal x1290=((cj3)*(cj8));
IkReal x1291=((r01)*(sj3));
IkReal x1292=((r02)*(sj3));
IkReal x1293=((IkReal(1.00000000000000))*(sj7));
IkReal x1294=((IkReal(1.00000000000000))*(r11));
IkReal x1295=((cj3)*(r12));
IkReal x1296=((IkReal(1.00000000000000))*(cj7));
IkReal x1297=((cj8)*(sj3));
IkReal x1298=((sj3)*(sj8));
IkReal x1299=((IkReal(1.00000000000000))*(cj3)*(sj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(-1.00000000000000))+(((cj8)*(x1291)))+(((IkReal(-1.00000000000000))*(x1290)*(x1294)))+(((r00)*(x1298)))+(((IkReal(-1.00000000000000))*(r10)*(x1299))));
evalcond[4]=((((IkReal(-1.00000000000000))*(r00)*(x1299)))+(((IkReal(-1.00000000000000))*(r01)*(x1290)))+(((IkReal(-1.00000000000000))*(r10)*(x1298)))+(((IkReal(-1.00000000000000))*(x1294)*(x1297))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj3)*(cj7)*(sj8)*(x1294)))+(((cj7)*(r10)*(x1290)))+(((cj7)*(sj8)*(x1291)))+(((sj7)*(x1295)))+(((IkReal(-1.00000000000000))*(x1292)*(x1293)))+(((IkReal(-1.00000000000000))*(r00)*(x1296)*(x1297))));
evalcond[6]=((((IkReal(-1.00000000000000))*(r00)*(x1293)*(x1297)))+(((IkReal(-1.00000000000000))*(x1295)*(x1296)))+(((IkReal(-1.00000000000000))*(cj3)*(r11)*(sj8)*(x1293)))+(((r10)*(sj7)*(x1290)))+(((sj7)*(sj8)*(x1291)))+(((cj7)*(x1292))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1300=((IkReal(4.00000000000000))*(sj7));
IkReal x1301=((npy)*(sj8));
IkReal x1302=((IkReal(4.00000000000000))*(cj7));
IkReal x1303=((cj8)*(npx));
if( IKabs(((IkReal(0.120000000000000))+(((x1300)*(x1303)))+(((IkReal(-1.00000000000000))*(x1300)*(x1301)))+(((IkReal(-1.00000000000000))*(npz)*(x1302)))+(((IkReal(-0.360000000000000))*(sj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.940000000000000))+(((x1302)*(x1303)))+(((IkReal(-1.00000000000000))*(x1301)*(x1302)))+(((npz)*(x1300)))+(((IkReal(-0.360000000000000))*(cj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.120000000000000))+(((x1300)*(x1303)))+(((IkReal(-1.00000000000000))*(x1300)*(x1301)))+(((IkReal(-1.00000000000000))*(npz)*(x1302)))+(((IkReal(-0.360000000000000))*(sj7)))))+IKsqr(((IkReal(-0.940000000000000))+(((x1302)*(x1303)))+(((IkReal(-1.00000000000000))*(x1301)*(x1302)))+(((npz)*(x1300)))+(((IkReal(-0.360000000000000))*(cj7)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(0.120000000000000))+(((x1300)*(x1303)))+(((IkReal(-1.00000000000000))*(x1300)*(x1301)))+(((IkReal(-1.00000000000000))*(npz)*(x1302)))+(((IkReal(-0.360000000000000))*(sj7)))), ((IkReal(-0.940000000000000))+(((x1302)*(x1303)))+(((IkReal(-1.00000000000000))*(x1301)*(x1302)))+(((npz)*(x1300)))+(((IkReal(-0.360000000000000))*(cj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x1304=((IkReal(1.00000000000000))*(sj7));
IkReal x1305=((npy)*(sj8));
IkReal x1306=((cj8)*(npx));
evalcond[0]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(npz)*(x1304)))+(((IkReal(-1.00000000000000))*(cj7)*(x1306)))+(((cj7)*(x1305)))+(((IkReal(0.250000000000000))*(IKcos(j5)))));
evalcond[1]=((IkReal(-0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(0.250000000000000))*(IKsin(j5))))+(((cj7)*(npz)))+(((sj7)*(x1305)))+(((IkReal(-1.00000000000000))*(x1304)*(x1306))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1307=((cj7)*(sj5));
IkReal x1308=((r21)*(sj8));
IkReal x1309=((cj8)*(r20));
IkReal x1310=((cj5)*(cj7));
IkReal x1311=((sj5)*(sj7));
IkReal x1312=((IkReal(1.00000000000000))*(cj5)*(sj7));
if( IKabs(((gconst21)*(((((cj5)*(sj7)*(x1308)))+(((r22)*(x1310)))+(((r22)*(x1311)))+(((x1307)*(x1309)))+(((IkReal(-1.00000000000000))*(x1307)*(x1308)))+(((IkReal(-1.00000000000000))*(x1309)*(x1312))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst21)*(((((IkReal(-1.00000000000000))*(r22)*(x1312)))+(((x1308)*(x1311)))+(((x1308)*(x1310)))+(((IkReal(-1.00000000000000))*(x1309)*(x1311)))+(((IkReal(-1.00000000000000))*(x1309)*(x1310)))+(((r22)*(x1307))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst21)*(((((cj5)*(sj7)*(x1308)))+(((r22)*(x1310)))+(((r22)*(x1311)))+(((x1307)*(x1309)))+(((IkReal(-1.00000000000000))*(x1307)*(x1308)))+(((IkReal(-1.00000000000000))*(x1309)*(x1312)))))), ((gconst21)*(((((IkReal(-1.00000000000000))*(r22)*(x1312)))+(((x1308)*(x1311)))+(((x1308)*(x1310)))+(((IkReal(-1.00000000000000))*(x1309)*(x1311)))+(((IkReal(-1.00000000000000))*(x1309)*(x1310)))+(((r22)*(x1307)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1313=IKcos(j4);
IkReal x1314=IKsin(j4);
IkReal x1315=((IkReal(1.00000000000000))*(cj7));
IkReal x1316=((cj8)*(r20));
IkReal x1317=((cj3)*(r02));
IkReal x1318=((IkReal(1.00000000000000))*(sj7));
IkReal x1319=((sj3)*(sj7));
IkReal x1320=((r21)*(sj8));
IkReal x1321=((IkReal(1.00000000000000))*(cj5));
IkReal x1322=((cj8)*(r10));
IkReal x1323=((sj5)*(x1314));
IkReal x1324=((sj5)*(x1313));
IkReal x1325=((r11)*(sj3)*(sj8));
IkReal x1326=((cj3)*(cj8)*(r00));
IkReal x1327=((cj3)*(r01)*(sj8));
IkReal x1328=((x1313)*(x1321));
evalcond[0]=((x1323)+(((IkReal(-1.00000000000000))*(x1315)*(x1316)))+(((IkReal(-1.00000000000000))*(r22)*(x1318)))+(((IkReal(-1.00000000000000))*(x1328)))+(((cj7)*(x1320))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1314)*(x1321)))+(((IkReal(-1.00000000000000))*(x1324)))+(((sj7)*(x1320)))+(((cj7)*(r22)))+(((IkReal(-1.00000000000000))*(x1316)*(x1318))));
evalcond[2]=((x1324)+(((IkReal(-1.00000000000000))*(x1315)*(x1327)))+(((IkReal(-1.00000000000000))*(x1315)*(x1325)))+(((cj5)*(x1314)))+(((cj7)*(sj3)*(x1322)))+(((r12)*(x1319)))+(((sj7)*(x1317)))+(((cj7)*(x1326))));
evalcond[3]=((x1323)+(((IkReal(-1.00000000000000))*(x1315)*(x1317)))+(((IkReal(-1.00000000000000))*(x1328)))+(((x1319)*(x1322)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x1315)))+(((sj7)*(x1326)))+(((IkReal(-1.00000000000000))*(x1318)*(x1325)))+(((IkReal(-1.00000000000000))*(x1318)*(x1327))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1329=((IkReal(4.00000000000000))*(sj7));
IkReal x1330=((npy)*(sj8));
IkReal x1331=((IkReal(4.00000000000000))*(cj7));
IkReal x1332=((cj8)*(npx));
if( IKabs(((((IKabs(cj6) != 0)?((IkReal)1/(cj6)):(IkReal)1.0e30))*(((((IkReal(0.360000000000000))*(sj7)))+(((x1329)*(x1330)))+(((npz)*(x1331)))+(((IkReal(0.380000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(x1329)*(x1332)))+(((IkReal(0.120000000000000))*(cj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.940000000000000))+(((x1331)*(x1332)))+(((IkReal(-1.00000000000000))*(x1330)*(x1331)))+(((npz)*(x1329)))+(((IkReal(-0.360000000000000))*(cj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(cj6) != 0)?((IkReal)1/(cj6)):(IkReal)1.0e30))*(((((IkReal(0.360000000000000))*(sj7)))+(((x1329)*(x1330)))+(((npz)*(x1331)))+(((IkReal(0.380000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(x1329)*(x1332)))+(((IkReal(0.120000000000000))*(cj6)))))))+IKsqr(((IkReal(-0.940000000000000))+(((x1331)*(x1332)))+(((IkReal(-1.00000000000000))*(x1330)*(x1331)))+(((npz)*(x1329)))+(((IkReal(-0.360000000000000))*(cj7)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(cj6) != 0)?((IkReal)1/(cj6)):(IkReal)1.0e30))*(((((IkReal(0.360000000000000))*(sj7)))+(((x1329)*(x1330)))+(((npz)*(x1331)))+(((IkReal(0.380000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(x1329)*(x1332)))+(((IkReal(0.120000000000000))*(cj6)))))), ((IkReal(-0.940000000000000))+(((x1331)*(x1332)))+(((IkReal(-1.00000000000000))*(x1330)*(x1331)))+(((npz)*(x1329)))+(((IkReal(-0.360000000000000))*(cj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1333=IKsin(j5);
IkReal x1334=((IkReal(1.00000000000000))*(sj7));
IkReal x1335=((npy)*(sj8));
IkReal x1336=((cj8)*(npx));
IkReal x1337=((IkReal(0.250000000000000))*(x1333));
evalcond[0]=((((IkReal(-0.0300000000000000))*(sj6)))+(((npx)*(sj8)))+(((cj8)*(npy)))+(((IkReal(0.0950000000000000))*(cj6)))+(((sj6)*(x1337))));
evalcond[1]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((cj7)*(x1335)))+(((IkReal(-1.00000000000000))*(cj7)*(x1336)))+(((IkReal(-1.00000000000000))*(npz)*(x1334)))+(((IkReal(0.250000000000000))*(IKcos(j5)))));
evalcond[2]=((((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(0.0950000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(x1334)*(x1336)))+(((IkReal(0.0300000000000000))*(cj6)))+(((sj7)*(x1335)))+(((cj7)*(npz)))+(((IkReal(-1.00000000000000))*(cj6)*(x1337))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
IkReal x1338=((cj3)*(cj8));
IkReal x1339=((IkReal(1.00000000000000))*(sj7));
IkReal x1340=((cj8)*(npx));
IkReal x1341=((cj8)*(sj3));
IkReal x1342=((npy)*(sj8));
IkReal x1343=((r02)*(sj3));
IkReal x1344=((IkReal(1.00000000000000))*(r11));
IkReal x1345=((cj3)*(r12));
IkReal x1346=((IkReal(1.00000000000000))*(cj7));
IkReal x1347=((sj3)*(sj8));
IkReal x1348=((IkReal(1.00000000000000))*(cj3)*(sj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(0.235000000000000))+(((IkReal(-1.00000000000000))*(x1340)*(x1346)))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(0.250000000000000))*(cj5)))+(((cj7)*(x1342)))+(((IkReal(-1.00000000000000))*(npz)*(x1339))));
evalcond[4]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x1338)*(x1344)))+(((r00)*(x1347)))+(((r01)*(x1341)))+(((IkReal(-1.00000000000000))*(r10)*(x1348))));
evalcond[5]=((IkReal(0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((sj7)*(x1342)))+(((IkReal(-1.00000000000000))*(x1339)*(x1340)))+(((cj7)*(npz)))+(((IkReal(-0.250000000000000))*(sj5))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x1341)*(x1344)))+(((IkReal(-1.00000000000000))*(r10)*(x1347)))+(((IkReal(-1.00000000000000))*(r00)*(x1348)))+(((IkReal(-1.00000000000000))*(r01)*(x1338))));
evalcond[7]=((((IkReal(-1.00000000000000))*(cj3)*(cj7)*(sj8)*(x1344)))+(((sj7)*(x1345)))+(((cj7)*(r01)*(x1347)))+(((IkReal(-1.00000000000000))*(x1339)*(x1343)))+(((cj7)*(r10)*(x1338)))+(((IkReal(-1.00000000000000))*(r00)*(x1341)*(x1346))));
evalcond[8]=((((IkReal(-1.00000000000000))*(cj3)*(r11)*(sj8)*(x1339)))+(((IkReal(-1.00000000000000))*(r00)*(x1339)*(x1341)))+(((r01)*(sj7)*(x1347)))+(((cj7)*(x1343)))+(((r10)*(sj7)*(x1338)))+(((IkReal(-1.00000000000000))*(x1345)*(x1346))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1349=((sj5)*(sj7));
IkReal x1350=((r21)*(sj8));
IkReal x1351=((cj8)*(r20));
IkReal x1352=((cj5)*(cj7));
IkReal x1353=((cj7)*(sj5));
IkReal x1354=((cj5)*(sj7));
if( IKabs(((gconst16)*(((((IkReal(-1.00000000000000))*(x1351)*(x1354)))+(((IkReal(-1.00000000000000))*(x1351)*(x1353)))+(((r22)*(x1352)))+(((x1350)*(x1353)))+(((x1350)*(x1354)))+(((IkReal(-1.00000000000000))*(r22)*(x1349))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((r22)*(x1353)))+(((r22)*(x1354)))+(((IkReal(-1.00000000000000))*(x1350)*(x1352)))+(((x1349)*(x1350)))+(((IkReal(-1.00000000000000))*(x1349)*(x1351)))+(((x1351)*(x1352))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst16)*(((((IkReal(-1.00000000000000))*(x1351)*(x1354)))+(((IkReal(-1.00000000000000))*(x1351)*(x1353)))+(((r22)*(x1352)))+(((x1350)*(x1353)))+(((x1350)*(x1354)))+(((IkReal(-1.00000000000000))*(r22)*(x1349)))))), ((gconst16)*(((((r22)*(x1353)))+(((r22)*(x1354)))+(((IkReal(-1.00000000000000))*(x1350)*(x1352)))+(((x1349)*(x1350)))+(((IkReal(-1.00000000000000))*(x1349)*(x1351)))+(((x1351)*(x1352)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1355=IKcos(j4);
IkReal x1356=IKsin(j4);
IkReal x1357=((IkReal(1.00000000000000))*(cj7));
IkReal x1358=((cj8)*(r20));
IkReal x1359=((cj3)*(r02));
IkReal x1360=((IkReal(1.00000000000000))*(sj7));
IkReal x1361=((sj3)*(sj7));
IkReal x1362=((r21)*(sj8));
IkReal x1363=((cj8)*(r10));
IkReal x1364=((sj5)*(x1355));
IkReal x1365=((cj5)*(x1356));
IkReal x1366=((r11)*(sj3)*(sj8));
IkReal x1367=((cj3)*(cj8)*(r00));
IkReal x1368=((cj5)*(x1355));
IkReal x1369=((cj3)*(r01)*(sj8));
IkReal x1370=((sj5)*(x1356));
IkReal x1371=((x1364)+(x1365));
evalcond[0]=((x1370)+(((IkReal(-1.00000000000000))*(x1368)))+(((IkReal(-1.00000000000000))*(r22)*(x1360)))+(((cj7)*(x1362)))+(((IkReal(-1.00000000000000))*(x1357)*(x1358))));
evalcond[1]=((x1371)+(((cj7)*(r22)))+(((IkReal(-1.00000000000000))*(x1358)*(x1360)))+(((sj7)*(x1362))));
evalcond[2]=((x1371)+(((cj7)*(x1367)))+(((r12)*(x1361)))+(((IkReal(-1.00000000000000))*(x1357)*(x1369)))+(((IkReal(-1.00000000000000))*(x1357)*(x1366)))+(((cj7)*(sj3)*(x1363)))+(((sj7)*(x1359))));
evalcond[3]=((x1368)+(((x1361)*(x1363)))+(((IkReal(-1.00000000000000))*(x1370)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x1357)))+(((IkReal(-1.00000000000000))*(x1357)*(x1359)))+(((IkReal(-1.00000000000000))*(x1360)*(x1366)))+(((IkReal(-1.00000000000000))*(x1360)*(x1369)))+(((sj7)*(x1367))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x1372=((cj3)*(cj8));
IkReal x1373=((IkReal(1.00000000000000))*(sj7));
IkReal x1374=((cj8)*(npx));
IkReal x1375=((cj8)*(sj3));
IkReal x1376=((npy)*(sj8));
IkReal x1377=((r02)*(sj3));
IkReal x1378=((IkReal(1.00000000000000))*(r11));
IkReal x1379=((cj3)*(r12));
IkReal x1380=((IkReal(1.00000000000000))*(cj7));
IkReal x1381=((sj3)*(sj8));
IkReal x1382=((IkReal(1.00000000000000))*(cj3)*(sj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(npz)*(x1373)))+(((IkReal(-1.00000000000000))*(x1374)*(x1380)))+(((IkReal(0.250000000000000))*(cj5)))+(((cj7)*(x1376))));
evalcond[4]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x1372)*(x1378)))+(((IkReal(-1.00000000000000))*(r10)*(x1382)))+(((r00)*(x1381)))+(((r01)*(x1375))));
evalcond[5]=((IkReal(-0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(0.250000000000000))*(sj5)))+(((cj7)*(npz)))+(((IkReal(-1.00000000000000))*(x1373)*(x1374)))+(((sj7)*(x1376))));
evalcond[6]=((((IkReal(-1.00000000000000))*(r10)*(x1381)))+(((IkReal(-1.00000000000000))*(r01)*(x1372)))+(((IkReal(-1.00000000000000))*(x1375)*(x1378)))+(((IkReal(-1.00000000000000))*(r00)*(x1382))));
evalcond[7]=((((IkReal(-1.00000000000000))*(r00)*(x1375)*(x1380)))+(((IkReal(-1.00000000000000))*(cj3)*(cj7)*(sj8)*(x1378)))+(((cj7)*(r01)*(x1381)))+(((cj7)*(r10)*(x1372)))+(((IkReal(-1.00000000000000))*(x1373)*(x1377)))+(((sj7)*(x1379))));
evalcond[8]=((((r01)*(sj7)*(x1381)))+(((IkReal(-1.00000000000000))*(r00)*(x1373)*(x1375)))+(((r10)*(sj7)*(x1372)))+(((IkReal(-1.00000000000000))*(x1379)*(x1380)))+(((IkReal(-1.00000000000000))*(cj3)*(r11)*(sj8)*(x1373)))+(((cj7)*(x1377))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1383=((cj7)*(sj5));
IkReal x1384=((r21)*(sj8));
IkReal x1385=((cj5)*(cj7));
IkReal x1386=((cj8)*(r20));
IkReal x1387=((sj5)*(sj7));
IkReal x1388=((IkReal(1.00000000000000))*(cj5)*(sj7));
if( IKabs(((gconst17)*(((((IkReal(-1.00000000000000))*(x1383)*(x1384)))+(((cj5)*(sj7)*(x1384)))+(((r22)*(x1385)))+(((r22)*(x1387)))+(((IkReal(-1.00000000000000))*(x1386)*(x1388)))+(((x1383)*(x1386))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((IkReal(-1.00000000000000))*(x1385)*(x1386)))+(((IkReal(-1.00000000000000))*(x1386)*(x1387)))+(((r22)*(x1383)))+(((IkReal(-1.00000000000000))*(r22)*(x1388)))+(((x1384)*(x1385)))+(((x1384)*(x1387))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst17)*(((((IkReal(-1.00000000000000))*(x1383)*(x1384)))+(((cj5)*(sj7)*(x1384)))+(((r22)*(x1385)))+(((r22)*(x1387)))+(((IkReal(-1.00000000000000))*(x1386)*(x1388)))+(((x1383)*(x1386)))))), ((gconst17)*(((((IkReal(-1.00000000000000))*(x1385)*(x1386)))+(((IkReal(-1.00000000000000))*(x1386)*(x1387)))+(((r22)*(x1383)))+(((IkReal(-1.00000000000000))*(r22)*(x1388)))+(((x1384)*(x1385)))+(((x1384)*(x1387)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1389=IKcos(j4);
IkReal x1390=IKsin(j4);
IkReal x1391=((IkReal(1.00000000000000))*(cj7));
IkReal x1392=((cj8)*(r20));
IkReal x1393=((cj3)*(r02));
IkReal x1394=((IkReal(1.00000000000000))*(sj7));
IkReal x1395=((sj3)*(sj7));
IkReal x1396=((r21)*(sj8));
IkReal x1397=((IkReal(1.00000000000000))*(cj5));
IkReal x1398=((cj8)*(r10));
IkReal x1399=((sj5)*(x1390));
IkReal x1400=((sj5)*(x1389));
IkReal x1401=((r11)*(sj3)*(sj8));
IkReal x1402=((cj3)*(cj8)*(r00));
IkReal x1403=((cj3)*(r01)*(sj8));
IkReal x1404=((x1389)*(x1397));
evalcond[0]=((x1399)+(((IkReal(-1.00000000000000))*(x1391)*(x1392)))+(((cj7)*(x1396)))+(((IkReal(-1.00000000000000))*(x1404)))+(((IkReal(-1.00000000000000))*(r22)*(x1394))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1392)*(x1394)))+(((IkReal(-1.00000000000000))*(x1400)))+(((sj7)*(x1396)))+(((IkReal(-1.00000000000000))*(x1390)*(x1397)))+(((cj7)*(r22))));
evalcond[2]=((((sj7)*(x1393)))+(((cj5)*(x1390)))+(((IkReal(-1.00000000000000))*(x1391)*(x1401)))+(((IkReal(-1.00000000000000))*(x1391)*(x1403)))+(((cj7)*(x1402)))+(x1400)+(((cj7)*(sj3)*(x1398)))+(((r12)*(x1395))));
evalcond[3]=((x1399)+(((IkReal(-1.00000000000000))*(x1391)*(x1393)))+(((sj7)*(x1402)))+(((x1395)*(x1398)))+(((IkReal(-1.00000000000000))*(x1404)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x1391)))+(((IkReal(-1.00000000000000))*(x1394)*(x1403)))+(((IkReal(-1.00000000000000))*(x1394)*(x1401))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1405=((sj5)*(sj6));
IkReal x1406=((r22)*(sj7));
IkReal x1407=((r20)*(sj8));
IkReal x1408=((cj8)*(r21));
IkReal x1409=((cj5)*(sj6));
IkReal x1410=((cj7)*(cj8)*(r20));
IkReal x1411=((cj7)*(r21)*(sj8));
if( IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(x1405)*(x1411)))+(((cj5)*(x1408)))+(((cj5)*(x1407)))+(((x1405)*(x1410)))+(((x1405)*(x1406))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((sj5)*(x1408)))+(((sj5)*(x1407)))+(((x1409)*(x1411)))+(((IkReal(-1.00000000000000))*(x1409)*(x1410)))+(((IkReal(-1.00000000000000))*(x1406)*(x1409))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst15)*(((((IkReal(-1.00000000000000))*(x1405)*(x1411)))+(((cj5)*(x1408)))+(((cj5)*(x1407)))+(((x1405)*(x1410)))+(((x1405)*(x1406)))))), ((gconst15)*(((((sj5)*(x1408)))+(((sj5)*(x1407)))+(((x1409)*(x1411)))+(((IkReal(-1.00000000000000))*(x1409)*(x1410)))+(((IkReal(-1.00000000000000))*(x1406)*(x1409)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1412=IKsin(j4);
IkReal x1413=IKcos(j4);
IkReal x1414=((IkReal(1.00000000000000))*(cj8));
IkReal x1415=((cj3)*(r01));
IkReal x1416=((IkReal(1.00000000000000))*(sj8));
IkReal x1417=((r11)*(sj3));
IkReal x1418=((cj3)*(r00));
IkReal x1419=((IkReal(1.00000000000000))*(sj6));
IkReal x1420=((IkReal(1.00000000000000))*(cj7));
IkReal x1421=((cj3)*(r02));
IkReal x1422=((sj3)*(sj7));
IkReal x1423=((cj7)*(cj8));
IkReal x1424=((r21)*(sj8));
IkReal x1425=((r10)*(sj3));
IkReal x1426=((sj5)*(x1413));
IkReal x1427=((cj5)*(x1413));
IkReal x1428=((cj6)*(x1412));
IkReal x1429=((cj5)*(x1412));
IkReal x1430=((sj5)*(x1412));
evalcond[0]=((((cj8)*(r21)))+(((IkReal(-1.00000000000000))*(x1419)*(x1429)))+(((IkReal(-1.00000000000000))*(x1419)*(x1426)))+(((r20)*(sj8))));
evalcond[1]=((((cj7)*(x1424)))+(((IkReal(-1.00000000000000))*(x1427)))+(((IkReal(-1.00000000000000))*(cj7)*(r20)*(x1414)))+(x1430)+(((IkReal(-1.00000000000000))*(r22)*(sj7))));
evalcond[2]=((((cj6)*(x1426)))+(((IkReal(-1.00000000000000))*(r20)*(sj7)*(x1414)))+(((cj5)*(x1428)))+(((cj7)*(r22)))+(((sj7)*(x1424))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1416)*(x1425)))+(((sj6)*(x1430)))+(((IkReal(-1.00000000000000))*(x1414)*(x1417)))+(((IkReal(-1.00000000000000))*(x1414)*(x1415)))+(((IkReal(-1.00000000000000))*(x1416)*(x1418)))+(((IkReal(-1.00000000000000))*(x1419)*(x1427))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj7)*(x1415)*(x1416)))+(((x1423)*(x1425)))+(x1426)+(x1429)+(((x1418)*(x1423)))+(((IkReal(-1.00000000000000))*(cj7)*(x1416)*(x1417)))+(((r12)*(x1422)))+(((sj7)*(x1421))));
evalcond[5]=((((cj8)*(sj7)*(x1418)))+(((cj6)*(x1427)))+(((IkReal(-1.00000000000000))*(x1420)*(x1421)))+(((IkReal(-1.00000000000000))*(sj7)*(x1415)*(x1416)))+(((IkReal(-1.00000000000000))*(sj5)*(x1428)))+(((IkReal(-1.00000000000000))*(sj7)*(x1416)*(x1417)))+(((cj8)*(r10)*(x1422)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x1420))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1431=((IkReal(4.00000000000000))*(npx));
IkReal x1432=((IkReal(4.00000000000000))*(npy));
if( IKabs(((((IKabs(sj6) != 0)?((IkReal)1/(sj6)):(IkReal)1.0e30))*(((((IkReal(-0.380000000000000))*(cj6)))+(((IkReal(-1.00000000000000))*(sj8)*(x1431)))+(((IkReal(-1.00000000000000))*(cj8)*(x1432)))+(((IkReal(0.120000000000000))*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x1432)))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((cj7)*(cj8)*(x1431)))+(((IkReal(-0.360000000000000))*(cj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj6) != 0)?((IkReal)1/(sj6)):(IkReal)1.0e30))*(((((IkReal(-0.380000000000000))*(cj6)))+(((IkReal(-1.00000000000000))*(sj8)*(x1431)))+(((IkReal(-1.00000000000000))*(cj8)*(x1432)))+(((IkReal(0.120000000000000))*(sj6)))))))+IKsqr(((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x1432)))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((cj7)*(cj8)*(x1431)))+(((IkReal(-0.360000000000000))*(cj7)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(sj6) != 0)?((IkReal)1/(sj6)):(IkReal)1.0e30))*(((((IkReal(-0.380000000000000))*(cj6)))+(((IkReal(-1.00000000000000))*(sj8)*(x1431)))+(((IkReal(-1.00000000000000))*(cj8)*(x1432)))+(((IkReal(0.120000000000000))*(sj6)))))), ((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x1432)))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((cj7)*(cj8)*(x1431)))+(((IkReal(-0.360000000000000))*(cj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1433=IKsin(j5);
IkReal x1434=((IkReal(1.00000000000000))*(sj7));
IkReal x1435=((npy)*(sj8));
IkReal x1436=((cj8)*(npx));
IkReal x1437=((IkReal(0.250000000000000))*(x1433));
evalcond[0]=((((IkReal(-0.0300000000000000))*(sj6)))+(((npx)*(sj8)))+(((cj8)*(npy)))+(((sj6)*(x1437)))+(((IkReal(0.0950000000000000))*(cj6))));
evalcond[1]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((cj7)*(x1435)))+(((IkReal(-1.00000000000000))*(cj7)*(x1436)))+(((IkReal(-1.00000000000000))*(npz)*(x1434)))+(((IkReal(0.250000000000000))*(IKcos(j5)))));
evalcond[2]=((((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(0.0950000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(x1434)*(x1436)))+(((IkReal(-1.00000000000000))*(cj6)*(x1437)))+(((IkReal(0.0300000000000000))*(cj6)))+(((sj7)*(x1435)))+(((cj7)*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
IkReal x1438=((cj3)*(cj8));
IkReal x1439=((IkReal(1.00000000000000))*(sj7));
IkReal x1440=((cj8)*(npx));
IkReal x1441=((cj8)*(sj3));
IkReal x1442=((npy)*(sj8));
IkReal x1443=((r02)*(sj3));
IkReal x1444=((IkReal(1.00000000000000))*(r11));
IkReal x1445=((cj3)*(r12));
IkReal x1446=((IkReal(1.00000000000000))*(cj7));
IkReal x1447=((sj3)*(sj8));
IkReal x1448=((IkReal(1.00000000000000))*(cj3)*(sj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(0.250000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(npz)*(x1439)))+(((cj7)*(x1442)))+(((IkReal(-1.00000000000000))*(x1440)*(x1446))));
evalcond[4]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x1438)*(x1444)))+(((IkReal(-1.00000000000000))*(r10)*(x1448)))+(((r00)*(x1447)))+(((r01)*(x1441))));
evalcond[5]=((IkReal(0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((sj7)*(x1442)))+(((IkReal(-1.00000000000000))*(x1439)*(x1440)))+(((cj7)*(npz)))+(((IkReal(-0.250000000000000))*(sj5))));
evalcond[6]=((((IkReal(-1.00000000000000))*(r00)*(x1448)))+(((IkReal(-1.00000000000000))*(x1441)*(x1444)))+(((IkReal(-1.00000000000000))*(r10)*(x1447)))+(((IkReal(-1.00000000000000))*(r01)*(x1438))));
evalcond[7]=((((IkReal(-1.00000000000000))*(r00)*(x1441)*(x1446)))+(((sj7)*(x1445)))+(((IkReal(-1.00000000000000))*(x1439)*(x1443)))+(((cj7)*(r01)*(x1447)))+(((IkReal(-1.00000000000000))*(cj3)*(cj7)*(sj8)*(x1444)))+(((cj7)*(r10)*(x1438))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x1445)*(x1446)))+(((IkReal(-1.00000000000000))*(cj3)*(r11)*(sj8)*(x1439)))+(((IkReal(-1.00000000000000))*(r00)*(x1439)*(x1441)))+(((r10)*(sj7)*(x1438)))+(((cj7)*(x1443)))+(((r01)*(sj7)*(x1447))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1449=((sj5)*(sj7));
IkReal x1450=((r21)*(sj8));
IkReal x1451=((cj8)*(r20));
IkReal x1452=((cj5)*(cj7));
IkReal x1453=((cj7)*(sj5));
IkReal x1454=((cj5)*(sj7));
if( IKabs(((gconst16)*(((((x1450)*(x1454)))+(((x1450)*(x1453)))+(((IkReal(-1.00000000000000))*(x1451)*(x1453)))+(((IkReal(-1.00000000000000))*(x1451)*(x1454)))+(((r22)*(x1452)))+(((IkReal(-1.00000000000000))*(r22)*(x1449))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((IkReal(-1.00000000000000))*(x1450)*(x1452)))+(((IkReal(-1.00000000000000))*(x1449)*(x1451)))+(((r22)*(x1453)))+(((r22)*(x1454)))+(((x1449)*(x1450)))+(((x1451)*(x1452))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst16)*(((((x1450)*(x1454)))+(((x1450)*(x1453)))+(((IkReal(-1.00000000000000))*(x1451)*(x1453)))+(((IkReal(-1.00000000000000))*(x1451)*(x1454)))+(((r22)*(x1452)))+(((IkReal(-1.00000000000000))*(r22)*(x1449)))))), ((gconst16)*(((((IkReal(-1.00000000000000))*(x1450)*(x1452)))+(((IkReal(-1.00000000000000))*(x1449)*(x1451)))+(((r22)*(x1453)))+(((r22)*(x1454)))+(((x1449)*(x1450)))+(((x1451)*(x1452)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1455=IKcos(j4);
IkReal x1456=IKsin(j4);
IkReal x1457=((IkReal(1.00000000000000))*(cj7));
IkReal x1458=((cj8)*(r20));
IkReal x1459=((cj3)*(r02));
IkReal x1460=((IkReal(1.00000000000000))*(sj7));
IkReal x1461=((sj3)*(sj7));
IkReal x1462=((r21)*(sj8));
IkReal x1463=((cj8)*(r10));
IkReal x1464=((sj5)*(x1455));
IkReal x1465=((cj5)*(x1456));
IkReal x1466=((r11)*(sj3)*(sj8));
IkReal x1467=((cj3)*(cj8)*(r00));
IkReal x1468=((cj5)*(x1455));
IkReal x1469=((cj3)*(r01)*(sj8));
IkReal x1470=((sj5)*(x1456));
IkReal x1471=((x1465)+(x1464));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1457)*(x1458)))+(((IkReal(-1.00000000000000))*(r22)*(x1460)))+(((cj7)*(x1462)))+(x1470)+(((IkReal(-1.00000000000000))*(x1468))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1458)*(x1460)))+(x1471)+(((sj7)*(x1462)))+(((cj7)*(r22))));
evalcond[2]=((((sj7)*(x1459)))+(((cj7)*(x1467)))+(((r12)*(x1461)))+(((IkReal(-1.00000000000000))*(x1457)*(x1469)))+(((IkReal(-1.00000000000000))*(x1457)*(x1466)))+(x1471)+(((cj7)*(sj3)*(x1463))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1457)*(x1459)))+(((x1461)*(x1463)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x1457)))+(((IkReal(-1.00000000000000))*(x1470)))+(((IkReal(-1.00000000000000))*(x1460)*(x1469)))+(((IkReal(-1.00000000000000))*(x1460)*(x1466)))+(x1468)+(((sj7)*(x1467))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x1472=((cj3)*(cj8));
IkReal x1473=((IkReal(1.00000000000000))*(sj7));
IkReal x1474=((cj8)*(npx));
IkReal x1475=((cj8)*(sj3));
IkReal x1476=((npy)*(sj8));
IkReal x1477=((r02)*(sj3));
IkReal x1478=((IkReal(1.00000000000000))*(r11));
IkReal x1479=((cj3)*(r12));
IkReal x1480=((IkReal(1.00000000000000))*(cj7));
IkReal x1481=((sj3)*(sj8));
IkReal x1482=((IkReal(1.00000000000000))*(cj3)*(sj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(npz)*(x1473)))+(((IkReal(-1.00000000000000))*(x1474)*(x1480)))+(((IkReal(0.250000000000000))*(cj5)))+(((cj7)*(x1476))));
evalcond[4]=((IkReal(-1.00000000000000))+(((r00)*(x1481)))+(((r01)*(x1475)))+(((IkReal(-1.00000000000000))*(r10)*(x1482)))+(((IkReal(-1.00000000000000))*(x1472)*(x1478))));
evalcond[5]=((IkReal(-0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((sj7)*(x1476)))+(((IkReal(0.250000000000000))*(sj5)))+(((cj7)*(npz)))+(((IkReal(-1.00000000000000))*(x1473)*(x1474))));
evalcond[6]=((((IkReal(-1.00000000000000))*(r01)*(x1472)))+(((IkReal(-1.00000000000000))*(r00)*(x1482)))+(((IkReal(-1.00000000000000))*(x1475)*(x1478)))+(((IkReal(-1.00000000000000))*(r10)*(x1481))));
evalcond[7]=((((IkReal(-1.00000000000000))*(r00)*(x1475)*(x1480)))+(((sj7)*(x1479)))+(((cj7)*(r10)*(x1472)))+(((IkReal(-1.00000000000000))*(cj3)*(cj7)*(sj8)*(x1478)))+(((cj7)*(r01)*(x1481)))+(((IkReal(-1.00000000000000))*(x1473)*(x1477))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x1479)*(x1480)))+(((IkReal(-1.00000000000000))*(r00)*(x1473)*(x1475)))+(((IkReal(-1.00000000000000))*(cj3)*(r11)*(sj8)*(x1473)))+(((cj7)*(x1477)))+(((r10)*(sj7)*(x1472)))+(((r01)*(sj7)*(x1481))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1483=((cj7)*(sj5));
IkReal x1484=((r21)*(sj8));
IkReal x1485=((cj5)*(cj7));
IkReal x1486=((cj8)*(r20));
IkReal x1487=((sj5)*(sj7));
IkReal x1488=((IkReal(1.00000000000000))*(cj5)*(sj7));
if( IKabs(((gconst17)*(((((IkReal(-1.00000000000000))*(x1483)*(x1484)))+(((IkReal(-1.00000000000000))*(x1486)*(x1488)))+(((cj5)*(sj7)*(x1484)))+(((x1483)*(x1486)))+(((r22)*(x1487)))+(((r22)*(x1485))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((IkReal(-1.00000000000000))*(x1485)*(x1486)))+(((IkReal(-1.00000000000000))*(x1486)*(x1487)))+(((x1484)*(x1485)))+(((x1484)*(x1487)))+(((IkReal(-1.00000000000000))*(r22)*(x1488)))+(((r22)*(x1483))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst17)*(((((IkReal(-1.00000000000000))*(x1483)*(x1484)))+(((IkReal(-1.00000000000000))*(x1486)*(x1488)))+(((cj5)*(sj7)*(x1484)))+(((x1483)*(x1486)))+(((r22)*(x1487)))+(((r22)*(x1485)))))), ((gconst17)*(((((IkReal(-1.00000000000000))*(x1485)*(x1486)))+(((IkReal(-1.00000000000000))*(x1486)*(x1487)))+(((x1484)*(x1485)))+(((x1484)*(x1487)))+(((IkReal(-1.00000000000000))*(r22)*(x1488)))+(((r22)*(x1483)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1489=IKcos(j4);
IkReal x1490=IKsin(j4);
IkReal x1491=((IkReal(1.00000000000000))*(cj7));
IkReal x1492=((cj8)*(r20));
IkReal x1493=((cj3)*(r02));
IkReal x1494=((IkReal(1.00000000000000))*(sj7));
IkReal x1495=((sj3)*(sj7));
IkReal x1496=((r21)*(sj8));
IkReal x1497=((IkReal(1.00000000000000))*(cj5));
IkReal x1498=((cj8)*(r10));
IkReal x1499=((sj5)*(x1490));
IkReal x1500=((sj5)*(x1489));
IkReal x1501=((r11)*(sj3)*(sj8));
IkReal x1502=((cj3)*(cj8)*(r00));
IkReal x1503=((cj3)*(r01)*(sj8));
IkReal x1504=((x1489)*(x1497));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1504)))+(((IkReal(-1.00000000000000))*(x1491)*(x1492)))+(x1499)+(((IkReal(-1.00000000000000))*(r22)*(x1494)))+(((cj7)*(x1496))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1500)))+(((IkReal(-1.00000000000000))*(x1492)*(x1494)))+(((sj7)*(x1496)))+(((IkReal(-1.00000000000000))*(x1490)*(x1497)))+(((cj7)*(r22))));
evalcond[2]=((((cj7)*(sj3)*(x1498)))+(((IkReal(-1.00000000000000))*(x1491)*(x1501)))+(((IkReal(-1.00000000000000))*(x1491)*(x1503)))+(((r12)*(x1495)))+(x1500)+(((cj5)*(x1490)))+(((sj7)*(x1493)))+(((cj7)*(x1502))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1504)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x1491)))+(((IkReal(-1.00000000000000))*(x1494)*(x1503)))+(((IkReal(-1.00000000000000))*(x1494)*(x1501)))+(((x1495)*(x1498)))+(((sj7)*(x1502)))+(((IkReal(-1.00000000000000))*(x1491)*(x1493)))+(x1499));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1505=((sj5)*(sj6));
IkReal x1506=((r22)*(sj7));
IkReal x1507=((r20)*(sj8));
IkReal x1508=((cj8)*(r21));
IkReal x1509=((cj5)*(sj6));
IkReal x1510=((cj7)*(cj8)*(r20));
IkReal x1511=((cj7)*(r21)*(sj8));
if( IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(x1505)*(x1511)))+(((cj5)*(x1507)))+(((cj5)*(x1508)))+(((x1505)*(x1510)))+(((x1505)*(x1506))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((x1509)*(x1511)))+(((sj5)*(x1507)))+(((sj5)*(x1508)))+(((IkReal(-1.00000000000000))*(x1509)*(x1510)))+(((IkReal(-1.00000000000000))*(x1506)*(x1509))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst15)*(((((IkReal(-1.00000000000000))*(x1505)*(x1511)))+(((cj5)*(x1507)))+(((cj5)*(x1508)))+(((x1505)*(x1510)))+(((x1505)*(x1506)))))), ((gconst15)*(((((x1509)*(x1511)))+(((sj5)*(x1507)))+(((sj5)*(x1508)))+(((IkReal(-1.00000000000000))*(x1509)*(x1510)))+(((IkReal(-1.00000000000000))*(x1506)*(x1509)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1512=IKsin(j4);
IkReal x1513=IKcos(j4);
IkReal x1514=((IkReal(1.00000000000000))*(cj8));
IkReal x1515=((cj3)*(r01));
IkReal x1516=((IkReal(1.00000000000000))*(sj8));
IkReal x1517=((r11)*(sj3));
IkReal x1518=((cj3)*(r00));
IkReal x1519=((IkReal(1.00000000000000))*(sj6));
IkReal x1520=((IkReal(1.00000000000000))*(cj7));
IkReal x1521=((cj3)*(r02));
IkReal x1522=((sj3)*(sj7));
IkReal x1523=((cj7)*(cj8));
IkReal x1524=((r21)*(sj8));
IkReal x1525=((r10)*(sj3));
IkReal x1526=((sj5)*(x1513));
IkReal x1527=((cj5)*(x1513));
IkReal x1528=((cj6)*(x1512));
IkReal x1529=((cj5)*(x1512));
IkReal x1530=((sj5)*(x1512));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1519)*(x1529)))+(((IkReal(-1.00000000000000))*(x1519)*(x1526)))+(((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[1]=((((cj7)*(x1524)))+(((IkReal(-1.00000000000000))*(cj7)*(r20)*(x1514)))+(x1530)+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((IkReal(-1.00000000000000))*(x1527))));
evalcond[2]=((((cj6)*(x1526)))+(((IkReal(-1.00000000000000))*(r20)*(sj7)*(x1514)))+(((cj5)*(x1528)))+(((sj7)*(x1524)))+(((cj7)*(r22))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1516)*(x1518)))+(((IkReal(-1.00000000000000))*(x1519)*(x1527)))+(((IkReal(-1.00000000000000))*(x1514)*(x1515)))+(((IkReal(-1.00000000000000))*(x1514)*(x1517)))+(((sj6)*(x1530)))+(((IkReal(-1.00000000000000))*(x1516)*(x1525))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj7)*(x1515)*(x1516)))+(((r12)*(x1522)))+(((IkReal(-1.00000000000000))*(cj7)*(x1516)*(x1517)))+(((x1518)*(x1523)))+(((x1523)*(x1525)))+(x1526)+(x1529)+(((sj7)*(x1521))));
evalcond[5]=((((cj8)*(sj7)*(x1518)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x1520)))+(((IkReal(-1.00000000000000))*(sj7)*(x1515)*(x1516)))+(((cj6)*(x1527)))+(((cj8)*(r10)*(x1522)))+(((IkReal(-1.00000000000000))*(sj7)*(x1516)*(x1517)))+(((IkReal(-1.00000000000000))*(sj5)*(x1528)))+(((IkReal(-1.00000000000000))*(x1520)*(x1521))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}

static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    IkReal tol = 1e-5*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        if( IKabs(wi[i]) < tol*100 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "375ffd5a1bd2565b9d93634412dce778"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE

int ik_solve(IkReal eerot[9], IkReal eetrans[3], std::vector<std::vector<IkReal> >& sol_joint, std::vector<IkReal> free_joint)
{
    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
	for(std::size_t i = 0; i < vfree.size(); ++i)
		vfree[i] = free_joint[i];
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        return -1;
    }

	sol_joint.resize(solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
		sol_joint[i].resize(solvalues.size());
        for( std::size_t j = 0; j < solvalues.size(); ++j)
			sol_joint[i][j] = solvalues[j];
    }
    return 0;
}

} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_RIGHT6D_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
