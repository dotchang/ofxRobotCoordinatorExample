/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 60 generated on 2012-09-02 09:31:18.002970
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==60);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_RIGHT6DF0 {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63,x64,x65,x66,x67,x68,x69,x70,x71,x72,x73,x74,x75,x76;
x0=IKsin(j[2]);
x1=IKsin(j[3]);
x2=IKcos(j[2]);
x3=IKcos(j[3]);
x4=IKcos(j[6]);
x5=IKsin(j[5]);
x6=IKsin(j[4]);
x7=IKcos(j[4]);
x8=IKcos(j[1]);
x9=IKcos(j[5]);
x10=IKsin(j[6]);
x11=IKsin(j[1]);
x12=IKsin(j[0]);
x13=IKcos(j[0]);
x14=((IkReal(1.00000000000000))*(x5));
x15=((IkReal(0.258820142606703))*(x5));
x16=((IkReal(1.00000000000000))*(x1));
x17=((IkReal(0.258820142606703))*(x10));
x18=((IkReal(1.00000000000000))*(x9));
x19=((IkReal(0.965925532213041))*(x9));
x20=((IkReal(0.0900000000000000))*(x3));
x21=((IkReal(0.0900000000000000))*(x1));
x22=((IkReal(0.965925532213041))*(x5));
x23=((IkReal(0.258820142606703))*(x4));
x24=((IkReal(0.965925532213041))*(x4));
x25=((IkReal(0.258820142606703))*(x9));
x26=((IkReal(0.965925532213041))*(x10));
x27=((IkReal(1.00000000000000))*(x3));
x28=((IkReal(1.00000000000000))*(x6));
x29=((IkReal(1.00000000000000))*(x7));
x30=((x4)*(x6));
x31=((x7)*(x9));
x32=((x0)*(x11));
x33=((x11)*(x2));
x34=((x2)*(x8));
x35=((x0)*(x1));
x36=((x2)*(x3));
x37=((x6)*(x8));
x38=((x11)*(x29));
x39=((x2)*(x27));
x40=((x0)*(x21));
x41=((x2)*(x20));
x42=((x0)*(x27));
x43=((x0)*(x16)*(x8));
x44=((x16)*(x32));
x45=((((IkReal(-1.00000000000000))*(x0)*(x16)))+(x39));
x46=((x42)+(((x16)*(x2))));
x47=((IkReal(-1.00000000000000))*(x46));
x48=((((x0)*(x20)))+(((x2)*(x21))));
x49=((((IkReal(0.965925532213041))*(x1)*(x2)))+(((IkReal(0.965925532213041))*(x0)*(x3))));
x50=((((IkReal(0.258820142606703))*(x0)*(x3)))+(((IkReal(0.258820142606703))*(x1)*(x2))));
x51=((((IkReal(-1.00000000000000))*(x44)))+(((x3)*(x33))));
x52=((x47)*(x6));
x53=((((IkReal(-1.00000000000000))*(x27)*(x33)))+(x44));
x54=((((IkReal(-1.00000000000000))*(x27)*(x34)))+(x43));
x55=((((x27)*(x32)))+(((x16)*(x33))));
x56=((((x16)*(x34)))+(((x42)*(x8))));
x57=((((x20)*(x32)))+(((x21)*(x33))));
x58=((x51)*(x7));
x59=((x54)*(x6));
x60=((((x29)*(((((IkReal(-1.00000000000000))*(x3)*(x34)))+(x43)))))+(((x11)*(x28))));
x61=((((x53)*(x6)))+(((x7)*(x8))));
x62=((((IkReal(-1.00000000000000))*(x29)*(x51)))+(((IkReal(-1.00000000000000))*(x28)*(x8))));
x63=((((IkReal(-0.0900000000000000))*(x37)))+(((IkReal(-0.0900000000000000))*(x58))));
x64=((((IkReal(-1.00000000000000))*(x28)*(x53)))+(((IkReal(-1.00000000000000))*(x29)*(x8))));
x65=((((IkReal(-1.00000000000000))*(x14)*(x46)*(x7)))+(((x18)*(((((IkReal(-1.00000000000000))*(x35)))+(x39))))));
x66=((((x25)*(x46)*(x7)))+(((x15)*(x45))));
x67=((((x60)*(x9)))+(((x5)*(x56))));
x68=((((x18)*(x56)))+(((IkReal(-1.00000000000000))*(x14)*(x60))));
x69=((((x18)*(x55)))+(((IkReal(-1.00000000000000))*(x14)*(x62))));
x70=((((x19)*(x62)))+(((x22)*(x55))));
x71=((((x23)*(x65)))+(((x17)*(x52))));
x72=((((x17)*(x65)))+(((x23)*(x46)*(x6))));
x73=((((x4)*(((((IkReal(-1.00000000000000))*(x38)))+(x59)))))+(((x10)*(x68))));
x74=((((x10)*(((((IkReal(-1.00000000000000))*(x28)*(x54)))+(x38)))))+(((x4)*(x68))));
x75=((((x26)*(x69)))+(((x24)*(x61))));
x76=((((x26)*(x64)))+(((x24)*(x69))));
eerot[0]=((((IkReal(-1.00000000000000))*(x12)*(x76)))+(((x12)*(x71)))+(((x13)*(x74))));
eerot[1]=((((IkReal(-1.00000000000000))*(x12)*(x75)))+(((x12)*(x72)))+(((x13)*(x73))));
eerot[2]=((((x12)*(x66)))+(((x13)*(x67)))+(((IkReal(-1.00000000000000))*(x12)*(x70))));
eetrans[0]=((((((((IkReal(0.00776460427820108))*(IKcos(j[3]))*(IKsin(j[2]))))+(((((((IkReal(0.0232938128346032))*(IKcos(j[2]))*(IKcos(j[3]))))+(((IkReal(-0.0232938128346032))*(IKsin(j[2]))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((IkReal(-0.0608227335125751))*(IKcos(j[2]))*(IKcos(j[3]))))+(((((((IkReal(0.0232938128346032))*(IKcos(j[3]))*(IKsin(j[2]))))+(((IkReal(0.0232938128346032))*(IKcos(j[2]))*(IKsin(j[3]))))))*(IKcos(j[4]))*(IKcos(j[5]))))+(((IkReal(0.0608227335125751))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((IkReal(0.0232938128346032))*(IKsin(j[2]))*(IKsin(j[3]))))+(((IkReal(-0.0232938128346032))*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKcos(j[5]))))+(((((((IkReal(0.0232938128346032))*(IKcos(j[3]))*(IKsin(j[2]))))+(((IkReal(0.0232938128346032))*(IKcos(j[2]))*(IKsin(j[3]))))))*(IKcos(j[4]))*(IKsin(j[5]))))+(((IkReal(-0.0647050356516757))*(IKcos(j[2]))))+(((IkReal(0.00776460427820108))*(IKcos(j[2]))*(IKsin(j[3]))))))*(IKsin(j[0]))))+(((((((((((IkReal(-0.965925532213041))*(((((IkReal(0.0900000000000000))*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((IkReal(-0.0900000000000000))*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((IkReal(0.0869332978991737))*(IKcos(j[1]))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((IkReal(0.0917629255602389))*(IKcos(j[1]))))+(((IkReal(0.226992500070065))*(IKcos(j[3]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((((((IkReal(-0.0869332978991737))*(IKcos(j[3]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(-0.0869332978991737))*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKsin(j[5]))))+(((IkReal(-0.0289777659663912))*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((IkReal(-0.965925532213041))*(((((IkReal(0.0900000000000000))*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((IkReal(-0.0900000000000000))*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((IkReal(0.0869332978991737))*(IKcos(j[1]))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((IkReal(0.0289777659663912))*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((IkReal(0.241481383053260))*(IKsin(j[1]))*(IKsin(j[2]))))+(((((((IkReal(0.0869332978991737))*(IKcos(j[3]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(0.0869332978991737))*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((IkReal(0.226992500070065))*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKsin(j[0]))))+(((((((IkReal(-0.250000000000000))*(IKcos(j[1]))*(IKsin(j[2]))))+(((IkReal(-0.0300000000000000))*(IKcos(j[1]))*(IKcos(j[2]))*(IKcos(j[3]))))+(((((((IkReal(0.0900000000000000))*(IKsin(j[1]))*(IKsin(j[4]))))+(((((((IkReal(-0.0900000000000000))*(IKcos(j[1]))*(IKcos(j[2]))*(IKcos(j[3]))))+(((IkReal(0.0900000000000000))*(IKcos(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((IkReal(-0.235000000000000))*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[2]))))+(((IkReal(-0.235000000000000))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[3]))))+(((((((IkReal(-0.0900000000000000))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[3]))))+(((IkReal(-0.0900000000000000))*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[2]))))))*(IKcos(j[5]))))+(((IkReal(0.0950000000000000))*(IKsin(j[1]))))+(((IkReal(0.0300000000000000))*(IKcos(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((IkReal(0.0900000000000000))*(IKsin(j[1]))*(IKsin(j[4]))))+(((((((IkReal(-0.0900000000000000))*(IKcos(j[1]))*(IKcos(j[2]))*(IKcos(j[3]))))+(((IkReal(0.0900000000000000))*(IKcos(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((IkReal(0.0900000000000000))*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[2]))))+(((IkReal(0.0900000000000000))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKcos(j[0]))))+(((IkReal(0.145000000000000))*(IKsin(j[0])))));
eerot[3]=((((x12)*(x74)))+(((IkReal(-1.00000000000000))*(x13)*(x71)))+(((x13)*(x76))));
eerot[4]=((((x12)*(x73)))+(((IkReal(-1.00000000000000))*(x13)*(x72)))+(((x13)*(x75))));
eerot[5]=((((x12)*(x67)))+(((x13)*(x70)))+(((IkReal(-1.00000000000000))*(x13)*(x66))));
eetrans[1]=((((((((IkReal(-0.0289777659663912))*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))+(((IkReal(-0.0917629255602389))*(IKcos(j[1]))))+(((((((IkReal(-0.0869332978991737))*(IKcos(j[3]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(-0.0869332978991737))*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((IkReal(0.0289777659663912))*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((IkReal(0.965925532213041))*(((((IkReal(0.0900000000000000))*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((IkReal(-0.0900000000000000))*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((IkReal(-0.0869332978991737))*(IKcos(j[1]))*(IKsin(j[4]))))))*(IKcos(j[5]))))+(((((((IkReal(0.965925532213041))*(((((IkReal(0.0900000000000000))*(IKsin(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((IkReal(-0.0900000000000000))*(IKcos(j[2]))*(IKcos(j[3]))*(IKsin(j[1]))))))*(IKcos(j[4]))))+(((IkReal(-0.0869332978991737))*(IKcos(j[1]))*(IKsin(j[4]))))))*(IKsin(j[5]))))+(((IkReal(-0.241481383053260))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(-0.226992500070065))*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))+(((IkReal(-0.226992500070065))*(IKcos(j[3]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((((((IkReal(0.0869332978991737))*(IKcos(j[3]))*(IKsin(j[1]))*(IKsin(j[2]))))+(((IkReal(0.0869332978991737))*(IKcos(j[2]))*(IKsin(j[1]))*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKcos(j[0]))))+(((IkReal(-0.145000000000000))*(IKcos(j[0]))))+(((((((IkReal(-0.00776460427820108))*(IKcos(j[2]))*(IKsin(j[3]))))+(((((((IkReal(-0.0232938128346032))*(IKcos(j[3]))*(IKsin(j[2]))))+(((IkReal(-0.0232938128346032))*(IKcos(j[2]))*(IKsin(j[3]))))))*(IKcos(j[4]))*(IKcos(j[5]))))+(((((((IkReal(0.0232938128346032))*(IKcos(j[2]))*(IKcos(j[3]))))+(((IkReal(-0.0232938128346032))*(IKsin(j[2]))*(IKsin(j[3]))))))*(IKcos(j[5]))))+(((((((IkReal(-0.0232938128346032))*(IKcos(j[3]))*(IKsin(j[2]))))+(((IkReal(-0.0232938128346032))*(IKcos(j[2]))*(IKsin(j[3]))))))*(IKcos(j[4]))*(IKsin(j[5]))))+(((IkReal(0.0608227335125751))*(IKcos(j[2]))*(IKcos(j[3]))))+(((IkReal(-0.0608227335125751))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((IkReal(0.0232938128346032))*(IKsin(j[2]))*(IKsin(j[3]))))+(((IkReal(-0.0232938128346032))*(IKcos(j[2]))*(IKcos(j[3]))))))*(IKsin(j[5]))))+(((IkReal(0.0647050356516757))*(IKcos(j[2]))))+(((IkReal(-0.00776460427820108))*(IKcos(j[3]))*(IKsin(j[2]))))))*(IKcos(j[0]))))+(((((((IkReal(-0.250000000000000))*(IKcos(j[1]))*(IKsin(j[2]))))+(((IkReal(-0.0300000000000000))*(IKcos(j[1]))*(IKcos(j[2]))*(IKcos(j[3]))))+(((((((IkReal(0.0900000000000000))*(IKsin(j[1]))*(IKsin(j[4]))))+(((((((IkReal(-0.0900000000000000))*(IKcos(j[1]))*(IKcos(j[2]))*(IKcos(j[3]))))+(((IkReal(0.0900000000000000))*(IKcos(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKcos(j[5]))))+(((IkReal(-0.235000000000000))*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[2]))))+(((IkReal(-0.235000000000000))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[3]))))+(((((((IkReal(-0.0900000000000000))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[3]))))+(((IkReal(-0.0900000000000000))*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[2]))))))*(IKcos(j[5]))))+(((IkReal(0.0950000000000000))*(IKsin(j[1]))))+(((IkReal(0.0300000000000000))*(IKcos(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))+(((((((IkReal(0.0900000000000000))*(IKsin(j[1]))*(IKsin(j[4]))))+(((((((IkReal(-0.0900000000000000))*(IKcos(j[1]))*(IKcos(j[2]))*(IKcos(j[3]))))+(((IkReal(0.0900000000000000))*(IKcos(j[1]))*(IKsin(j[2]))*(IKsin(j[3]))))))*(IKcos(j[4]))))))*(IKsin(j[5]))))+(((((((IkReal(0.0900000000000000))*(IKcos(j[1]))*(IKcos(j[3]))*(IKsin(j[2]))))+(((IkReal(0.0900000000000000))*(IKcos(j[1]))*(IKcos(j[2]))*(IKsin(j[3]))))))*(IKsin(j[5]))))))*(IKsin(j[0])))));
eerot[6]=((((x23)*(x69)))+(((x26)*(x52)))+(((x17)*(x64)))+(((x24)*(x65))));
eerot[7]=((((x26)*(x65)))+(((x23)*(x61)))+(((x17)*(x69)))+(((x24)*(x46)*(x6))));
eerot[8]=((((x15)*(x55)))+(((x22)*(x45)))+(((x25)*(x62)))+(((x19)*(x46)*(x7))));
IkReal x77=((x48)*(x7));
eetrans[2]=((IkReal(0.370296000000000))+(((IkReal(-0.0608227335125751))*(x3)*(x32)))+(((IkReal(0.226992500070065))*(x35)))+(((x15)*(x63)))+(((IkReal(0.0289777659663912))*(x0)*(x3)))+(((x15)*(x57)))+(((IkReal(0.0289777659663912))*(x1)*(x2)))+(((IkReal(-0.0245879135476367))*(x8)))+(((x19)*(x77)))+(((IkReal(-0.226992500070065))*(x36)))+(((x25)*(x63)))+(((IkReal(-0.0647050356516757))*(x32)))+(((x19)*(((((IkReal(-1.00000000000000))*(x41)))+(x40)))))+(((IkReal(-0.241481383053260))*(x2)))+(((IkReal(-0.0608227335125751))*(x1)*(x33)))+(((x22)*(((((IkReal(-1.00000000000000))*(x40)))+(x41)))))+(((IkReal(0.00776460427820108))*(x1)*(x32)))+(((IkReal(-0.00776460427820108))*(x3)*(x33)))+(((x22)*(x77)))+(((IkReal(-1.00000000000000))*(x25)*(x57))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {0}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j7,cj7,sj7,htj7,j8,cj8,sj8,htj8,j0,cj0,sj0,htj0,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8,_ij0[2], _nj0;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1;  _ij0[0] = -1; _ij0[1] = -1; _nj0 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j0=pfree[0]; cj0=cos(pfree[0]); sj0=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((((IkReal(-1.00000000000000))*(r10)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(r00)*(IKcos(j0)))));
new_r01=((((r01)*(IKcos(j0))))+(((r11)*(IKsin(j0)))));
new_r02=((((IkReal(-1.00000000000000))*(r12)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(r02)*(IKcos(j0)))));
IkReal x78=IKcos(j0);
IkReal x79=IKsin(j0);
new_px=((((py)*(x79)))+(((IkReal(-0.0900000000000000))*(r12)*(x79)))+(((px)*(x78)))+(((IkReal(-0.0900000000000000))*(r02)*(x78))));
new_r10=((((IkReal(0.965925532213041))*(r00)*(IKsin(j0))))+(((IkReal(-0.258820142606703))*(r20)))+(((IkReal(-0.965925532213041))*(r10)*(IKcos(j0)))));
new_r11=((((IkReal(0.965925532213041))*(r11)*(IKcos(j0))))+(((IkReal(0.258820142606703))*(r21)))+(((IkReal(-0.965925532213041))*(r01)*(IKsin(j0)))));
new_r12=((((IkReal(0.965925532213041))*(r02)*(IKsin(j0))))+(((IkReal(-0.258820142606703))*(r22)))+(((IkReal(-0.965925532213041))*(r12)*(IKcos(j0)))));
IkReal x80=IKsin(j0);
IkReal x81=IKcos(j0);
new_py=((IkReal(0.0442191386441994))+(((IkReal(-0.965925532213041))*(px)*(x80)))+(((IkReal(-0.0869332978991737))*(r12)*(x81)))+(((IkReal(0.258820142606703))*(pz)))+(((IkReal(0.965925532213041))*(py)*(x81)))+(((IkReal(0.0869332978991737))*(r02)*(x80)))+(((IkReal(-0.0232938128346032))*(r22))));
new_r20=((((IkReal(-0.965925532213041))*(r20)))+(((IkReal(0.258820142606703))*(r10)*(IKcos(j0))))+(((IkReal(-0.258820142606703))*(r00)*(IKsin(j0)))));
new_r21=((((IkReal(0.258820142606703))*(r01)*(IKsin(j0))))+(((IkReal(-0.258820142606703))*(r11)*(IKcos(j0))))+(((IkReal(0.965925532213041))*(r21))));
new_r22=((((IkReal(-0.965925532213041))*(r22)))+(((IkReal(0.258820142606703))*(r12)*(IKcos(j0))))+(((IkReal(-0.258820142606703))*(r02)*(IKsin(j0)))));
IkReal x82=IKsin(j0);
IkReal x83=IKcos(j0);
new_pz=((IkReal(-0.395207281554332))+(((IkReal(0.258820142606703))*(px)*(x82)))+(((IkReal(0.0232938128346032))*(r12)*(x83)))+(((IkReal(-0.258820142606703))*(py)*(x83)))+(((IkReal(-0.0232938128346032))*(r02)*(x82)))+(((IkReal(0.965925532213041))*(pz)))+(((IkReal(-0.0869332978991737))*(r22))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
IkReal op[72], zeror[48];
int numroots;
IkReal x84=((IkReal(0.650000000000000))*(npx));
IkReal x85=((IkReal(0.0600000000000000))*(npz));
IkReal x86=((IkReal(1.00000000000000))*(pp));
IkReal x87=((IkReal(0.0600000000000000))*(npy));
IkReal x88=((IkReal(0.0950000000000000))*(r22));
IkReal x89=((IkReal(0.120000000000000))*(npx));
IkReal x90=((IkReal(0.0950000000000000))*(r21));
IkReal x91=((IkReal(1.00000000000000))*(rxp0_2));
IkReal x92=((IkReal(0.190000000000000))*(r20));
IkReal x93=((IkReal(2.00000000000000))*(rxp1_2));
IkReal x94=((IkReal(0.940000000000000))*(npz));
IkReal x95=((IkReal(2.00000000000000))*(rxp2_2));
IkReal x96=((IkReal(0.180000000000000))*(r21));
IkReal x97=((IkReal(0.360000000000000))*(r20));
IkReal x98=((IkReal(0.380000000000000))*(r21));
IkReal x99=((IkReal(0.290000000000000))*(npx));
IkReal x100=((IkReal(-0.00570000000000000))+(((IkReal(-1.00000000000000))*(x87))));
IkReal x101=((IkReal(0.580000000000000))*(npy));
IkReal x102=((IkReal(0.00570000000000000))+(((IkReal(-1.00000000000000))*(x87))));
IkReal x103=((rxp0_2)+(((IkReal(-1.00000000000000))*(x88))));
IkReal x104=((IkReal(-1.30000000000000))*(npy));
IkReal x105=((IkReal(-0.0950000000000000))*(r21));
IkReal x106=((IkReal(-0.00570000000000000))+(x87));
IkReal x107=((rxp0_2)+(x88));
IkReal x108=((x88)+(((IkReal(-1.00000000000000))*(x91))));
IkReal x109=((IkReal(0.00570000000000000))+(x87));
IkReal x110=((IkReal(-2.00000000000000))*(rxp1_2));
IkReal x111=((IkReal(-0.0350000000000000))+(x84));
IkReal x112=((IkReal(0.0496000000000000))+(x85));
IkReal x113=((x86)+(x85));
IkReal x114=((((IkReal(-1.00000000000000))*(x91)))+(((IkReal(-1.00000000000000))*(x88))));
IkReal x115=((x89)+(x94));
IkReal x116=((x95)+(x96));
op[0]=((((IkReal(-1.00000000000000))*(x113)))+(x111));
op[1]=x106;
op[2]=x104;
op[3]=x89;
op[4]=((IkReal(-0.0350000000000000))+(((IkReal(-1.00000000000000))*(x113)))+(((IkReal(-1.00000000000000))*(x84))));
op[5]=x100;
op[6]=x114;
op[7]=x90;
op[8]=x93;
op[9]=x92;
op[10]=x103;
op[11]=x105;
op[12]=x109;
op[13]=((x111)+(x85)+(((IkReal(-1.00000000000000))*(x86))));
op[14]=x89;
op[15]=x104;
op[16]=x102;
op[17]=((IkReal(-0.0350000000000000))+(x85)+(((IkReal(-1.00000000000000))*(x84)))+(((IkReal(-1.00000000000000))*(x86))));
op[18]=x90;
op[19]=x108;
op[20]=x92;
op[21]=x93;
op[22]=x105;
op[23]=x107;
op[24]=((IkReal(-0.0108000000000000))+(x115));
op[25]=IkReal(0);
op[26]=((IkReal(-0.240000000000000))*(npy));
op[27]=IkReal(0);
op[28]=((IkReal(-0.0108000000000000))+(x94)+(((IkReal(-1.00000000000000))*(x89))));
op[29]=IkReal(0);
op[30]=((x92)+(x96)+(((IkReal(-1.00000000000000))*(x95))));
op[31]=IkReal(0);
op[32]=((x97)+(((IkReal(-1.00000000000000))*(x98))));
op[33]=IkReal(0);
op[34]=((((IkReal(-1.00000000000000))*(x116)))+(((IkReal(-1.00000000000000))*(x92))));
op[35]=IkReal(0);
op[36]=IkReal(0);
op[37]=((IkReal(0.0108000000000000))+(x94)+(((IkReal(-1.00000000000000))*(x89))));
op[38]=IkReal(0);
op[39]=((IkReal(0.240000000000000))*(npy));
op[40]=IkReal(0);
op[41]=((IkReal(0.0108000000000000))+(x115));
op[42]=IkReal(0);
op[43]=((x96)+(((IkReal(-1.00000000000000))*(x95)))+(((IkReal(-1.00000000000000))*(x92))));
op[44]=IkReal(0);
op[45]=((x98)+(x97));
op[46]=IkReal(0);
op[47]=((((IkReal(-1.00000000000000))*(x116)))+(x92));
op[48]=((x112)+(((IkReal(-1.00000000000000))*(x99)))+(((IkReal(-1.00000000000000))*(x86))));
op[49]=x106;
op[50]=x101;
op[51]=x89;
op[52]=((x112)+(x99)+(((IkReal(-1.00000000000000))*(x86))));
op[53]=x100;
op[54]=x107;
op[55]=x90;
op[56]=x110;
op[57]=x92;
op[58]=x108;
op[59]=x105;
op[60]=x109;
op[61]=((IkReal(0.0496000000000000))+(((IkReal(-1.00000000000000))*(x113)))+(((IkReal(-1.00000000000000))*(x99))));
op[62]=x89;
op[63]=x101;
op[64]=x102;
op[65]=((IkReal(0.0496000000000000))+(((IkReal(-1.00000000000000))*(x113)))+(x99));
op[66]=x90;
op[67]=x103;
op[68]=x92;
op[69]=x110;
op[70]=x105;
op[71]=x114;
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j7array[16], cj7array[16], sj7array[16], j8array[16], cj8array[16], sj8array[16], j6array[16], cj6array[16], sj6array[16];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ij7 += 3)
{
IkReal htj7 = zeror[ij7+0], htj8 = zeror[ij7+1], htj6 = zeror[ij7+2];
j7array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj7)));
j8array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj8)));
j6array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj6)));
IkReal x117=(htj7)*(htj7);
IkReal x118=(htj8)*(htj8);
IkReal x119=(htj6)*(htj6);
cj7array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x117))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x117)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x117))))));
cj8array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x118))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x118)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x118))))));
cj6array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x119))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x119)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x119))))));
sj7array[numsolutions]=((IkReal(2.00000000000000))*(htj7)*(((IKabs(((IkReal(1.00000000000000))+((htj7)*(htj7)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj7)*(htj7))))):(IkReal)1.0e30)));
sj8array[numsolutions]=((IkReal(2.00000000000000))*(htj8)*(((IKabs(((IkReal(1.00000000000000))+((htj8)*(htj8)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj8)*(htj8))))):(IkReal)1.0e30)));
sj6array[numsolutions]=((IkReal(2.00000000000000))*(htj6)*(((IKabs(((IkReal(1.00000000000000))+((htj6)*(htj6)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj6)*(htj6))))):(IkReal)1.0e30)));
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
if( j8array[numsolutions] > IKPI )
{
    j8array[numsolutions]-=IK2PI;
}
else if( j8array[numsolutions] < -IKPI )
{
    j8array[numsolutions]+=IK2PI;
}
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j7valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj7 = 16;
_nj8 = 1;
_nj6 = 1;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
_ij8[0] = 0; _ij8[1] = -1;
_ij6[0] = 0; _ij6[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( !j7valid[iij7] ) { continue; }
if( IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(cj8array[ij7]-cj8array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij7]-sj8array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(cj6array[ij7]-cj6array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij7]-sj6array[iij7]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j7valid[iij7]=false; _ij7[1] = iij7; _ij8[1] = 0; _ij6[1] = 0;  break; 
}
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];

    j8 = j8array[ij7]; cj8 = cj8array[ij7]; sj8 = sj8array[ij7];

    j6 = j6array[ij7]; cj6 = cj6array[ij7]; sj6 = sj6array[ij7];

{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x120=(sj8)*(sj8);
IkReal x121=(cj8)*(cj8);
IkReal x122=((r00)*(r11));
IkReal x123=((r02)*(sj7));
IkReal x124=((cj7)*(x121));
IkReal x125=((IkReal(1.00000000000000))*(r12)*(sj7));
IkReal x126=((IkReal(1.00000000000000))*(r01)*(r10));
IkReal x127=((cj7)*(x120));
gconst0=IKsign(((((IkReal(-1.00000000000000))*(r00)*(sj8)*(x125)))+(((IkReal(-1.00000000000000))*(x126)*(x127)))+(((r10)*(sj8)*(x123)))+(((x122)*(x127)))+(((x122)*(x124)))+(((IkReal(-1.00000000000000))*(x124)*(x126)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x125)))+(((cj8)*(r11)*(x123)))));
IkReal x128=(sj8)*(sj8);
IkReal x129=(cj8)*(cj8);
IkReal x130=((r00)*(r11));
IkReal x131=((r02)*(sj7));
IkReal x132=((cj7)*(x129));
IkReal x133=((IkReal(1.00000000000000))*(r12)*(sj7));
IkReal x134=((IkReal(1.00000000000000))*(r01)*(r10));
IkReal x135=((cj7)*(x128));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x134)*(x135)))+(((r10)*(sj8)*(x131)))+(((IkReal(-1.00000000000000))*(x132)*(x134)))+(((x130)*(x135)))+(((x130)*(x132)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x133)))+(((cj8)*(r11)*(x131)))+(((IkReal(-1.00000000000000))*(r00)*(sj8)*(x133))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
IkReal x136=((sj7)*(sj8));
IkReal x137=((IkReal(1.00000000000000))*(cj8)*(sj7));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((((r21)*(x136)))+(((cj7)*(r22)))+(((IkReal(-1.00000000000000))*(r20)*(x137))));
evalcond[2]=((IkReal(0.0950000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(npx)*(x137)))+(((npy)*(x136)))+(((cj7)*(npz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x138=((IkReal(4.00000000000000))*(npx));
IkReal x139=((IkReal(4.00000000000000))*(npy));
if( IKabs(((IkReal(0.120000000000000))+(((IkReal(-1.00000000000000))*(cj8)*(x139)))+(((IkReal(-1.00000000000000))*(sj8)*(x138))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.940000000000000))+(((cj7)*(cj8)*(x138)))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x139)))+(((IkReal(-0.360000000000000))*(cj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.120000000000000))+(((IkReal(-1.00000000000000))*(cj8)*(x139)))+(((IkReal(-1.00000000000000))*(sj8)*(x138)))))+IKsqr(((IkReal(-0.940000000000000))+(((cj7)*(cj8)*(x138)))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x139)))+(((IkReal(-0.360000000000000))*(cj7)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(0.120000000000000))+(((IkReal(-1.00000000000000))*(cj8)*(x139)))+(((IkReal(-1.00000000000000))*(sj8)*(x138)))), ((IkReal(-0.940000000000000))+(((cj7)*(cj8)*(x138)))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x139)))+(((IkReal(-0.360000000000000))*(cj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0300000000000000))+(((npx)*(sj8)))+(((cj8)*(npy)))+(((IkReal(0.250000000000000))*(IKsin(j5)))));
evalcond[1]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(npz)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((IkReal(0.250000000000000))*(IKcos(j5)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst24;
gconst24=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst23;
IkReal x140=(cj8)*(cj8);
IkReal x141=(sj8)*(sj8);
IkReal x142=((cj7)*(r02));
IkReal x143=((IkReal(1.00000000000000))*(r00));
IkReal x144=((cj7)*(r12));
IkReal x145=((r01)*(r10));
IkReal x146=((sj7)*(x141));
IkReal x147=((sj7)*(x140));
gconst23=IKsign(((((cj8)*(r11)*(x142)))+(((x145)*(x147)))+(((x145)*(x146)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x144)))+(((r10)*(sj8)*(x142)))+(((IkReal(-1.00000000000000))*(r11)*(x143)*(x146)))+(((IkReal(-1.00000000000000))*(r11)*(x143)*(x147)))+(((IkReal(-1.00000000000000))*(sj8)*(x143)*(x144)))));
IkReal x148=(cj8)*(cj8);
IkReal x149=(sj8)*(sj8);
IkReal x150=((cj7)*(r02));
IkReal x151=((IkReal(1.00000000000000))*(r00));
IkReal x152=((cj7)*(r12));
IkReal x153=((r01)*(r10));
IkReal x154=((sj7)*(x149));
IkReal x155=((sj7)*(x148));
dummyeval[0]=((((x153)*(x155)))+(((x153)*(x154)))+(((cj8)*(r11)*(x150)))+(((IkReal(-1.00000000000000))*(sj8)*(x151)*(x152)))+(((IkReal(-1.00000000000000))*(r11)*(x151)*(x155)))+(((IkReal(-1.00000000000000))*(r11)*(x151)*(x154)))+(((r10)*(sj8)*(x150)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x152))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x156=((IkReal(1.00000000000000))*(cj8));
IkReal x157=((IkReal(1.00000000000000))*(sj8));
if( IKabs(((gconst23)*(((((IkReal(-1.00000000000000))*(r10)*(x157)))+(((IkReal(-1.00000000000000))*(r11)*(x156))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst23)*(((((IkReal(-1.00000000000000))*(r00)*(x157)))+(((IkReal(-1.00000000000000))*(r01)*(x156))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst23)*(((((IkReal(-1.00000000000000))*(r10)*(x157)))+(((IkReal(-1.00000000000000))*(r11)*(x156)))))), ((gconst23)*(((((IkReal(-1.00000000000000))*(r00)*(x157)))+(((IkReal(-1.00000000000000))*(r01)*(x156)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x158=IKsin(j3);
IkReal x159=IKcos(j3);
IkReal x160=((r01)*(sj8));
IkReal x161=((cj8)*(sj7));
IkReal x162=((IkReal(1.00000000000000))*(sj7));
IkReal x163=((IkReal(1.00000000000000))*(r12));
IkReal x164=((r11)*(sj8));
IkReal x165=((IkReal(1.00000000000000))*(r00));
IkReal x166=((cj7)*(x158));
IkReal x167=((r10)*(x159));
IkReal x168=((IkReal(1.00000000000000))*(cj7)*(x159));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj8)*(x167)))+(((IkReal(-1.00000000000000))*(cj8)*(r11)*(x159)))+(((r00)*(sj8)*(x158)))+(((cj8)*(r01)*(x158))));
evalcond[1]=((((r12)*(sj7)*(x159)))+(((IkReal(-1.00000000000000))*(r02)*(x158)*(x162)))+(((IkReal(-1.00000000000000))*(cj8)*(x165)*(x166)))+(((cj7)*(cj8)*(x167)))+(((x160)*(x166)))+(((IkReal(-1.00000000000000))*(x164)*(x168))));
evalcond[2]=((IkReal(1.00000000000000))+(((x161)*(x167)))+(((IkReal(-1.00000000000000))*(x159)*(x162)*(x164)))+(((IkReal(-1.00000000000000))*(x158)*(x161)*(x165)))+(((sj7)*(x158)*(x160)))+(((IkReal(-1.00000000000000))*(cj7)*(x159)*(x163)))+(((r02)*(x166))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x159)*(x160)*(x162)))+(((IkReal(-1.00000000000000))*(r02)*(x168)))+(((r10)*(x158)*(x161)))+(((IkReal(-1.00000000000000))*(x163)*(x166)))+(((IkReal(-1.00000000000000))*(x158)*(x162)*(x164)))+(((r00)*(x159)*(x161))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst25;
gconst25=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x169=((sj5)*(sj8));
IkReal x170=((IkReal(1.00000000000000))*(cj7));
IkReal x171=((cj8)*(sj5));
IkReal x172=((r22)*(sj7));
IkReal x173=((cj5)*(r20));
IkReal x174=((cj5)*(r21));
if( IKabs(((gconst25)*(((((sj8)*(x173)))+(((cj7)*(r20)*(x171)))+(((IkReal(-1.00000000000000))*(r21)*(x169)*(x170)))+(((cj8)*(x174)))+(((sj5)*(x172))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst25)*(((((r20)*(x169)))+(((IkReal(-1.00000000000000))*(cj8)*(x170)*(x173)))+(((IkReal(-1.00000000000000))*(cj5)*(x172)))+(((r21)*(x171)))+(((cj7)*(sj8)*(x174))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst25)*(((((sj8)*(x173)))+(((cj7)*(r20)*(x171)))+(((IkReal(-1.00000000000000))*(r21)*(x169)*(x170)))+(((cj8)*(x174)))+(((sj5)*(x172)))))), ((gconst25)*(((((r20)*(x169)))+(((IkReal(-1.00000000000000))*(cj8)*(x170)*(x173)))+(((IkReal(-1.00000000000000))*(cj5)*(x172)))+(((r21)*(x171)))+(((cj7)*(sj8)*(x174)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x175=IKsin(j4);
IkReal x176=IKcos(j4);
IkReal x177=((IkReal(1.00000000000000))*(cj8));
IkReal x178=((cj3)*(r01));
IkReal x179=((cj3)*(r00));
IkReal x180=((cj7)*(cj8));
IkReal x181=((IkReal(1.00000000000000))*(cj5));
IkReal x182=((IkReal(1.00000000000000))*(sj8));
IkReal x183=((r11)*(sj3));
IkReal x184=((r10)*(sj3));
IkReal x185=((sj5)*(x175));
IkReal x186=((sj5)*(x176));
IkReal x187=((x176)*(x181));
evalcond[0]=((((cj8)*(r21)))+(((IkReal(-1.00000000000000))*(x186)))+(((IkReal(-1.00000000000000))*(x175)*(x181)))+(((r20)*(sj8))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj7)*(r20)*(x177)))+(((IkReal(-1.00000000000000))*(x187)))+(x185)+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((cj7)*(r21)*(sj8))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x187)))+(((IkReal(-1.00000000000000))*(x177)*(x178)))+(x185)+(((IkReal(-1.00000000000000))*(x177)*(x183)))+(((IkReal(-1.00000000000000))*(x179)*(x182)))+(((IkReal(-1.00000000000000))*(x182)*(x184))));
evalcond[3]=((((r12)*(sj3)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(x182)*(x183)))+(((cj5)*(x175)))+(((x180)*(x184)))+(((x179)*(x180)))+(x186)+(((cj3)*(r02)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(x178)*(x182))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x188=((sj5)*(sj8));
IkReal x189=((IkReal(1.00000000000000))*(cj7));
IkReal x190=((cj8)*(sj5));
IkReal x191=((r22)*(sj7));
IkReal x192=((cj5)*(cj8));
IkReal x193=((cj5)*(sj8));
if( IKabs(((gconst24)*(((((cj7)*(r20)*(x190)))+(((r20)*(x193)))+(((r21)*(x192)))+(((IkReal(-1.00000000000000))*(r21)*(x188)*(x189)))+(((sj5)*(x191))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst24)*(((((r20)*(x188)))+(((cj7)*(r21)*(x193)))+(((IkReal(-1.00000000000000))*(cj5)*(x191)))+(((r21)*(x190)))+(((IkReal(-1.00000000000000))*(r20)*(x189)*(x192))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst24)*(((((cj7)*(r20)*(x190)))+(((r20)*(x193)))+(((r21)*(x192)))+(((IkReal(-1.00000000000000))*(r21)*(x188)*(x189)))+(((sj5)*(x191)))))), ((gconst24)*(((((r20)*(x188)))+(((cj7)*(r21)*(x193)))+(((IkReal(-1.00000000000000))*(cj5)*(x191)))+(((r21)*(x190)))+(((IkReal(-1.00000000000000))*(r20)*(x189)*(x192)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x194=IKsin(j4);
IkReal x195=IKcos(j4);
IkReal x196=((IkReal(1.00000000000000))*(cj5));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj5)*(x195)))+(((IkReal(-1.00000000000000))*(x194)*(x196)))+(((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x195)*(x196)))+(((IkReal(-1.00000000000000))*(cj7)*(cj8)*(r20)))+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((cj7)*(r21)*(sj8)))+(((sj5)*(x194))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst26;
IkReal x197=(cj8)*(cj8);
IkReal x198=(sj8)*(sj8);
IkReal x199=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x200=((IkReal(1.00000000000000))*(x197));
IkReal x201=((IkReal(1.00000000000000))*(x198));
gconst26=IKsign(((((IkReal(-1.00000000000000))*(x201)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(x200)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(x200)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(x201)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x199)))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x199)))));
IkReal x202=(cj8)*(cj8);
IkReal x203=(sj8)*(sj8);
IkReal x204=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x205=((IkReal(1.00000000000000))*(x202));
IkReal x206=((IkReal(1.00000000000000))*(x203));
dummyeval[0]=((((IkReal(-1.00000000000000))*(r00)*(r01)*(x204)))+(((IkReal(-1.00000000000000))*(x206)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x204)))+(((IkReal(-1.00000000000000))*(x205)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(x206)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(x205)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x207=((cj8)*(r01));
IkReal x208=((cj4)*(cj5));
IkReal x209=((r10)*(sj8));
IkReal x210=((cj8)*(r11));
IkReal x211=((r00)*(sj8));
IkReal x212=((IkReal(1.00000000000000))*(sj4)*(sj5));
if( IKabs(((gconst26)*(((((x208)*(x210)))+(((IkReal(-1.00000000000000))*(x210)*(x212)))+(((x208)*(x209)))+(((IkReal(-1.00000000000000))*(x209)*(x212))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst26)*(((((x208)*(x211)))+(((IkReal(-1.00000000000000))*(x207)*(x212)))+(((IkReal(-1.00000000000000))*(x211)*(x212)))+(((x207)*(x208))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst26)*(((((x208)*(x210)))+(((IkReal(-1.00000000000000))*(x210)*(x212)))+(((x208)*(x209)))+(((IkReal(-1.00000000000000))*(x209)*(x212)))))), ((gconst26)*(((((x208)*(x211)))+(((IkReal(-1.00000000000000))*(x207)*(x212)))+(((IkReal(-1.00000000000000))*(x211)*(x212)))+(((x207)*(x208)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x213=IKsin(j3);
IkReal x214=IKcos(j3);
IkReal x215=((cj7)*(sj8));
IkReal x216=((r00)*(sj8));
IkReal x217=((cj8)*(r11));
IkReal x218=((cj7)*(r02));
IkReal x219=((cj7)*(r12));
IkReal x220=((cj8)*(r10));
IkReal x221=((sj7)*(sj8));
IkReal x222=((cj8)*(r00));
IkReal x223=((r10)*(sj8));
IkReal x224=((r01)*(x213));
IkReal x225=((IkReal(1.00000000000000))*(x214));
IkReal x226=((IkReal(1.00000000000000))*(x213));
IkReal x227=((sj7)*(x213));
IkReal x228=((sj7)*(x214));
IkReal x229=((cj7)*(x214));
IkReal x230=((cj8)*(x228));
evalcond[0]=((((cj8)*(x224)))+(((x213)*(x216)))+(((IkReal(-1.00000000000000))*(x223)*(x225)))+(((IkReal(-1.00000000000000))*(x217)*(x225))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x216)*(x225)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x225)))+(((sj4)*(sj5)))+(((IkReal(-1.00000000000000))*(x223)*(x226)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)))+(((IkReal(-1.00000000000000))*(x217)*(x226))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj7)*(x222)*(x226)))+(((x215)*(x224)))+(((IkReal(-1.00000000000000))*(r02)*(sj7)*(x226)))+(((r12)*(x228)))+(((IkReal(-1.00000000000000))*(r11)*(x215)*(x225)))+(((x220)*(x229))));
evalcond[3]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(sj7)*(x222)*(x226)))+(((x213)*(x218)))+(((IkReal(-1.00000000000000))*(r11)*(x221)*(x225)))+(((IkReal(-1.00000000000000))*(x219)*(x225)))+(((x220)*(x228)))+(((x221)*(x224))));
evalcond[4]=((((x222)*(x229)))+(((IkReal(-1.00000000000000))*(r01)*(x215)*(x225)))+(((r12)*(x227)))+(((cj5)*(sj4)))+(((IkReal(-1.00000000000000))*(r11)*(x215)*(x226)))+(((cj4)*(sj5)))+(((r02)*(x228)))+(((cj7)*(x213)*(x220))));
evalcond[5]=((((x222)*(x228)))+(((IkReal(-1.00000000000000))*(r11)*(x221)*(x226)))+(((IkReal(-1.00000000000000))*(x219)*(x226)))+(((x220)*(x227)))+(((IkReal(-1.00000000000000))*(r01)*(x221)*(x225)))+(((IkReal(-1.00000000000000))*(x218)*(x225))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

} else
{
IkReal x231=((sj7)*(sj8));
IkReal x232=((IkReal(1.00000000000000))*(cj8)*(sj7));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r20)*(x232)))+(((r21)*(x231)))+(((cj7)*(r22))));
evalcond[2]=((IkReal(-0.0950000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(npx)*(x232)))+(((cj7)*(npz)))+(((npy)*(x231))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x233=((IkReal(4.00000000000000))*(npx));
IkReal x234=((IkReal(4.00000000000000))*(npy));
if( IKabs(((IkReal(0.120000000000000))+(((sj8)*(x233)))+(((cj8)*(x234))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.940000000000000))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((cj7)*(cj8)*(x233)))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x234)))+(((IkReal(-0.360000000000000))*(cj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.120000000000000))+(((sj8)*(x233)))+(((cj8)*(x234)))))+IKsqr(((IkReal(-0.940000000000000))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((cj7)*(cj8)*(x233)))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x234)))+(((IkReal(-0.360000000000000))*(cj7)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(0.120000000000000))+(((sj8)*(x233)))+(((cj8)*(x234)))), ((IkReal(-0.940000000000000))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((cj7)*(cj8)*(x233)))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x234)))+(((IkReal(-0.360000000000000))*(cj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0300000000000000))+(((npx)*(sj8)))+(((cj8)*(npy)))+(((IkReal(-0.250000000000000))*(IKsin(j5)))));
evalcond[1]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(npz)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((IkReal(0.250000000000000))*(IKcos(j5)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst29;
gconst29=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst28;
IkReal x235=(sj8)*(sj8);
IkReal x236=(cj8)*(cj8);
IkReal x237=((IkReal(1.00000000000000))*(r10));
IkReal x238=((cj7)*(sj8));
IkReal x239=((r00)*(r11));
IkReal x240=((cj7)*(cj8));
IkReal x241=((sj7)*(x235));
IkReal x242=((sj7)*(x236));
gconst28=IKsign(((((r01)*(r12)*(x240)))+(((IkReal(-1.00000000000000))*(r01)*(x237)*(x241)))+(((IkReal(-1.00000000000000))*(r01)*(x237)*(x242)))+(((IkReal(-1.00000000000000))*(r02)*(r11)*(x240)))+(((x239)*(x241)))+(((x239)*(x242)))+(((r00)*(r12)*(x238)))+(((IkReal(-1.00000000000000))*(r02)*(x237)*(x238)))));
IkReal x243=(sj8)*(sj8);
IkReal x244=(cj8)*(cj8);
IkReal x245=((IkReal(1.00000000000000))*(r10));
IkReal x246=((cj7)*(sj8));
IkReal x247=((r00)*(r11));
IkReal x248=((cj7)*(cj8));
IkReal x249=((sj7)*(x243));
IkReal x250=((sj7)*(x244));
dummyeval[0]=((((r01)*(r12)*(x248)))+(((IkReal(-1.00000000000000))*(r02)*(r11)*(x248)))+(((IkReal(-1.00000000000000))*(r01)*(x245)*(x250)))+(((IkReal(-1.00000000000000))*(r01)*(x245)*(x249)))+(((IkReal(-1.00000000000000))*(r02)*(x245)*(x246)))+(((r00)*(r12)*(x246)))+(((x247)*(x249)))+(((x247)*(x250))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x251=((IkReal(1.00000000000000))*(cj8));
IkReal x252=((IkReal(1.00000000000000))*(sj8));
if( IKabs(((gconst28)*(((((IkReal(-1.00000000000000))*(r11)*(x251)))+(((IkReal(-1.00000000000000))*(r10)*(x252))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst28)*(((((IkReal(-1.00000000000000))*(r00)*(x252)))+(((IkReal(-1.00000000000000))*(r01)*(x251))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst28)*(((((IkReal(-1.00000000000000))*(r11)*(x251)))+(((IkReal(-1.00000000000000))*(r10)*(x252)))))), ((gconst28)*(((((IkReal(-1.00000000000000))*(r00)*(x252)))+(((IkReal(-1.00000000000000))*(r01)*(x251)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x253=IKsin(j3);
IkReal x254=IKcos(j3);
IkReal x255=((r01)*(sj8));
IkReal x256=((cj8)*(sj7));
IkReal x257=((IkReal(1.00000000000000))*(sj7));
IkReal x258=((IkReal(1.00000000000000))*(r12));
IkReal x259=((r11)*(sj8));
IkReal x260=((IkReal(1.00000000000000))*(r00));
IkReal x261=((cj7)*(x253));
IkReal x262=((r10)*(x254));
IkReal x263=((IkReal(1.00000000000000))*(cj7)*(x254));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj8)*(x262)))+(((r00)*(sj8)*(x253)))+(((cj8)*(r01)*(x253)))+(((IkReal(-1.00000000000000))*(cj8)*(r11)*(x254))));
evalcond[1]=((((cj7)*(cj8)*(x262)))+(((IkReal(-1.00000000000000))*(r02)*(x253)*(x257)))+(((IkReal(-1.00000000000000))*(cj8)*(x260)*(x261)))+(((IkReal(-1.00000000000000))*(x259)*(x263)))+(((r12)*(sj7)*(x254)))+(((x255)*(x261))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x253)*(x256)*(x260)))+(((IkReal(-1.00000000000000))*(x254)*(x257)*(x259)))+(((r02)*(x261)))+(((IkReal(-1.00000000000000))*(cj7)*(x254)*(x258)))+(((sj7)*(x253)*(x255)))+(((x256)*(x262))));
evalcond[3]=((((r10)*(x253)*(x256)))+(((IkReal(-1.00000000000000))*(x258)*(x261)))+(((r00)*(x254)*(x256)))+(((IkReal(-1.00000000000000))*(x253)*(x257)*(x259)))+(((IkReal(-1.00000000000000))*(r02)*(x263)))+(((IkReal(-1.00000000000000))*(x254)*(x255)*(x257))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst30;
gconst30=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x264=((cj8)*(r21));
IkReal x265=((r22)*(sj7));
IkReal x266=((sj5)*(sj8));
IkReal x267=((IkReal(1.00000000000000))*(sj5));
IkReal x268=((cj5)*(cj7));
IkReal x269=((cj8)*(r20));
if( IKabs(((gconst30)*(((((IkReal(-1.00000000000000))*(cj7)*(x267)*(x269)))+(((cj5)*(x264)))+(((cj5)*(r20)*(sj8)))+(((cj7)*(r21)*(x266)))+(((IkReal(-1.00000000000000))*(x265)*(x267))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst30)*(((((cj5)*(x265)))+(((sj5)*(x264)))+(((IkReal(-1.00000000000000))*(r21)*(sj8)*(x268)))+(((x268)*(x269)))+(((r20)*(x266))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst30)*(((((IkReal(-1.00000000000000))*(cj7)*(x267)*(x269)))+(((cj5)*(x264)))+(((cj5)*(r20)*(sj8)))+(((cj7)*(r21)*(x266)))+(((IkReal(-1.00000000000000))*(x265)*(x267)))))), ((gconst30)*(((((cj5)*(x265)))+(((sj5)*(x264)))+(((IkReal(-1.00000000000000))*(r21)*(sj8)*(x268)))+(((x268)*(x269)))+(((r20)*(x266)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x270=IKsin(j4);
IkReal x271=IKcos(j4);
IkReal x272=((IkReal(1.00000000000000))*(cj8));
IkReal x273=((cj3)*(r01));
IkReal x274=((cj3)*(r00));
IkReal x275=((cj7)*(cj8));
IkReal x276=((r11)*(sj3));
IkReal x277=((IkReal(1.00000000000000))*(sj8));
IkReal x278=((r10)*(sj3));
IkReal x279=((sj5)*(x271));
IkReal x280=((cj5)*(x270));
IkReal x281=((cj5)*(x271));
IkReal x282=((sj5)*(x270));
IkReal x283=((x279)+(x280));
evalcond[0]=((((cj8)*(r21)))+(x283)+(((r20)*(sj8))));
evalcond[1]=((x282)+(((IkReal(-1.00000000000000))*(x281)))+(((IkReal(-1.00000000000000))*(cj7)*(r20)*(x272)))+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((cj7)*(r21)*(sj8))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x272)*(x276)))+(((IkReal(-1.00000000000000))*(x272)*(x273)))+(((IkReal(-1.00000000000000))*(x274)*(x277)))+(((IkReal(-1.00000000000000))*(x277)*(x278)))+(x281)+(((IkReal(-1.00000000000000))*(x282))));
evalcond[3]=((((r12)*(sj3)*(sj7)))+(((x275)*(x278)))+(((x274)*(x275)))+(x283)+(((cj3)*(r02)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(x273)*(x277)))+(((IkReal(-1.00000000000000))*(cj7)*(x276)*(x277))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x284=((r22)*(sj7));
IkReal x285=((cj8)*(sj5));
IkReal x286=((sj5)*(sj8));
IkReal x287=((cj7)*(r20));
IkReal x288=((cj5)*(cj8));
IkReal x289=((cj7)*(r21));
IkReal x290=((cj5)*(sj8));
if( IKabs(((gconst29)*(((((x286)*(x289)))+(((IkReal(-1.00000000000000))*(x285)*(x287)))+(((r21)*(x288)))+(((IkReal(-1.00000000000000))*(sj5)*(x284)))+(((r20)*(x290))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst29)*(((((IkReal(-1.00000000000000))*(x289)*(x290)))+(((r21)*(x285)))+(((x287)*(x288)))+(((cj5)*(x284)))+(((r20)*(x286))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst29)*(((((x286)*(x289)))+(((IkReal(-1.00000000000000))*(x285)*(x287)))+(((r21)*(x288)))+(((IkReal(-1.00000000000000))*(sj5)*(x284)))+(((r20)*(x290)))))), ((gconst29)*(((((IkReal(-1.00000000000000))*(x289)*(x290)))+(((r21)*(x285)))+(((x287)*(x288)))+(((cj5)*(x284)))+(((r20)*(x286)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x291=IKsin(j4);
IkReal x292=IKcos(j4);
evalcond[0]=((((sj5)*(x292)))+(((cj8)*(r21)))+(((cj5)*(x291)))+(((r20)*(sj8))));
evalcond[1]=((((sj5)*(x291)))+(((IkReal(-1.00000000000000))*(cj5)*(x292)))+(((IkReal(-1.00000000000000))*(cj7)*(cj8)*(r20)))+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((cj7)*(r21)*(sj8))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst31;
IkReal x293=(cj8)*(cj8);
IkReal x294=(sj8)*(sj8);
IkReal x295=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x296=((IkReal(1.00000000000000))*(x293));
IkReal x297=((IkReal(1.00000000000000))*(x294));
gconst31=IKsign(((((IkReal(-1.00000000000000))*(x296)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x295)))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x295)))+(((IkReal(-1.00000000000000))*(x297)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(x297)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(x296)*((r01)*(r01))))));
IkReal x298=(cj8)*(cj8);
IkReal x299=(sj8)*(sj8);
IkReal x300=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x301=((IkReal(1.00000000000000))*(x298));
IkReal x302=((IkReal(1.00000000000000))*(x299));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x302)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(x301)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x300)))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x300)))+(((IkReal(-1.00000000000000))*(x302)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(x301)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x303=((sj4)*(sj5));
IkReal x304=((r10)*(sj8));
IkReal x305=((cj8)*(r01));
IkReal x306=((r00)*(sj8));
IkReal x307=((cj8)*(r11));
IkReal x308=((IkReal(1.00000000000000))*(cj4)*(cj5));
if( IKabs(((gconst31)*(((((x303)*(x307)))+(((x303)*(x304)))+(((IkReal(-1.00000000000000))*(x307)*(x308)))+(((IkReal(-1.00000000000000))*(x304)*(x308))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst31)*(((((x303)*(x306)))+(((x303)*(x305)))+(((IkReal(-1.00000000000000))*(x306)*(x308)))+(((IkReal(-1.00000000000000))*(x305)*(x308))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst31)*(((((x303)*(x307)))+(((x303)*(x304)))+(((IkReal(-1.00000000000000))*(x307)*(x308)))+(((IkReal(-1.00000000000000))*(x304)*(x308)))))), ((gconst31)*(((((x303)*(x306)))+(((x303)*(x305)))+(((IkReal(-1.00000000000000))*(x306)*(x308)))+(((IkReal(-1.00000000000000))*(x305)*(x308)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x309=IKsin(j3);
IkReal x310=IKcos(j3);
IkReal x311=((cj7)*(sj8));
IkReal x312=((r00)*(sj8));
IkReal x313=((cj8)*(r11));
IkReal x314=((cj7)*(r02));
IkReal x315=((cj7)*(r12));
IkReal x316=((r12)*(sj7));
IkReal x317=((r02)*(sj7));
IkReal x318=((sj7)*(sj8));
IkReal x319=((r10)*(sj8));
IkReal x320=((cj8)*(r00));
IkReal x321=((r01)*(x309));
IkReal x322=((cj8)*(r10)*(sj7));
IkReal x323=((IkReal(1.00000000000000))*(x310));
IkReal x324=((IkReal(1.00000000000000))*(x309));
IkReal x325=((cj7)*(cj8)*(r10));
IkReal x326=((x310)*(x320));
evalcond[0]=((((cj8)*(x321)))+(((x309)*(x312)))+(((IkReal(-1.00000000000000))*(x319)*(x323)))+(((IkReal(-1.00000000000000))*(x313)*(x323))));
evalcond[1]=((((cj4)*(cj5)))+(((IkReal(-1.00000000000000))*(x319)*(x324)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x323)))+(((IkReal(-1.00000000000000))*(x313)*(x324)))+(((IkReal(-1.00000000000000))*(sj4)*(sj5)))+(((IkReal(-1.00000000000000))*(x312)*(x323))));
evalcond[2]=((((x310)*(x316)))+(((x310)*(x325)))+(((IkReal(-1.00000000000000))*(x317)*(x324)))+(((x311)*(x321)))+(((IkReal(-1.00000000000000))*(r11)*(x311)*(x323)))+(((IkReal(-1.00000000000000))*(cj7)*(x320)*(x324))));
evalcond[3]=((IkReal(-1.00000000000000))+(((x318)*(x321)))+(((IkReal(-1.00000000000000))*(r11)*(x318)*(x323)))+(((x310)*(x322)))+(((IkReal(-1.00000000000000))*(sj7)*(x320)*(x324)))+(((IkReal(-1.00000000000000))*(x315)*(x323)))+(((x309)*(x314))));
evalcond[4]=((((x310)*(x317)))+(((cj5)*(sj4)))+(((cj4)*(sj5)))+(((x309)*(x316)))+(((x309)*(x325)))+(((cj7)*(x326)))+(((IkReal(-1.00000000000000))*(r11)*(x311)*(x324)))+(((IkReal(-1.00000000000000))*(r01)*(x311)*(x323))));
evalcond[5]=((((IkReal(-1.00000000000000))*(r11)*(x318)*(x324)))+(((IkReal(-1.00000000000000))*(x314)*(x323)))+(((IkReal(-1.00000000000000))*(r01)*(x318)*(x323)))+(((IkReal(-1.00000000000000))*(x315)*(x324)))+(((sj7)*(x326)))+(((x309)*(x322))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x327=((IkReal(4.00000000000000))*(sj7));
IkReal x328=((npy)*(sj8));
IkReal x329=((IkReal(4.00000000000000))*(cj7));
IkReal x330=((cj8)*(npx));
if( IKabs(((IkReal(0.120000000000000))+(((IkReal(0.360000000000000))*(sj7)))+(((x327)*(x328)))+(((npz)*(x329)))+(((IkReal(-1.00000000000000))*(x327)*(x330))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.940000000000000))+(((x329)*(x330)))+(((npz)*(x327)))+(((IkReal(-1.00000000000000))*(x328)*(x329)))+(((IkReal(-0.360000000000000))*(cj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.120000000000000))+(((IkReal(0.360000000000000))*(sj7)))+(((x327)*(x328)))+(((npz)*(x329)))+(((IkReal(-1.00000000000000))*(x327)*(x330)))))+IKsqr(((IkReal(-0.940000000000000))+(((x329)*(x330)))+(((npz)*(x327)))+(((IkReal(-1.00000000000000))*(x328)*(x329)))+(((IkReal(-0.360000000000000))*(cj7)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(0.120000000000000))+(((IkReal(0.360000000000000))*(sj7)))+(((x327)*(x328)))+(((npz)*(x329)))+(((IkReal(-1.00000000000000))*(x327)*(x330)))), ((IkReal(-0.940000000000000))+(((x329)*(x330)))+(((npz)*(x327)))+(((IkReal(-1.00000000000000))*(x328)*(x329)))+(((IkReal(-0.360000000000000))*(cj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x331=((IkReal(1.00000000000000))*(sj7));
IkReal x332=((npy)*(sj8));
IkReal x333=((cj8)*(npx));
evalcond[0]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(cj7)*(x333)))+(((cj7)*(x332)))+(((IkReal(-1.00000000000000))*(npz)*(x331)))+(((IkReal(0.250000000000000))*(IKcos(j5)))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(-0.250000000000000))*(IKsin(j5))))+(((IkReal(-1.00000000000000))*(x331)*(x333)))+(((cj7)*(npz)))+(((sj7)*(x332))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst33;
IkReal x334=(sj8)*(sj8);
IkReal x335=(cj8)*(cj8);
IkReal x336=((IkReal(2.00000000000000))*(cj8)*(sj8));
gconst33=IKsign(((((r00)*(r01)*(x336)))+(((x334)*((r10)*(r10))))+(((x335)*((r01)*(r01))))+(((x334)*((r00)*(r00))))+(((r10)*(r11)*(x336)))+(((x335)*((r11)*(r11))))));
IkReal x337=(sj8)*(sj8);
IkReal x338=(cj8)*(cj8);
IkReal x339=((IkReal(2.00000000000000))*(cj8)*(sj8));
dummyeval[0]=((((x337)*((r00)*(r00))))+(((r00)*(r01)*(x339)))+(((x337)*((r10)*(r10))))+(((r10)*(r11)*(x339)))+(((x338)*((r11)*(r11))))+(((x338)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst34;
gconst34=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x340=((sj5)*(sj7));
IkReal x341=((r21)*(sj8));
IkReal x342=((cj5)*(sj7));
IkReal x343=((cj7)*(sj5));
IkReal x344=((cj5)*(cj7));
IkReal x345=((IkReal(1.00000000000000))*(cj8)*(r20));
if( IKabs(((gconst34)*(((((r22)*(x344)))+(((x341)*(x342)))+(((x341)*(x343)))+(((IkReal(-1.00000000000000))*(r22)*(x340)))+(((IkReal(-1.00000000000000))*(x343)*(x345)))+(((IkReal(-1.00000000000000))*(x342)*(x345))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst34)*(((((IkReal(-1.00000000000000))*(x341)*(x344)))+(((r22)*(x342)))+(((r22)*(x343)))+(((IkReal(-1.00000000000000))*(x340)*(x345)))+(((x340)*(x341)))+(((cj8)*(r20)*(x344))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst34)*(((((r22)*(x344)))+(((x341)*(x342)))+(((x341)*(x343)))+(((IkReal(-1.00000000000000))*(r22)*(x340)))+(((IkReal(-1.00000000000000))*(x343)*(x345)))+(((IkReal(-1.00000000000000))*(x342)*(x345)))))), ((gconst34)*(((((IkReal(-1.00000000000000))*(x341)*(x344)))+(((r22)*(x342)))+(((r22)*(x343)))+(((IkReal(-1.00000000000000))*(x340)*(x345)))+(((x340)*(x341)))+(((cj8)*(r20)*(x344)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x346=IKcos(j4);
IkReal x347=IKsin(j4);
IkReal x348=((r21)*(sj8));
IkReal x349=((IkReal(1.00000000000000))*(cj8)*(r20));
evalcond[0]=((((sj5)*(x347)))+(((cj7)*(x348)))+(((IkReal(-1.00000000000000))*(cj7)*(x349)))+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((IkReal(-1.00000000000000))*(cj5)*(x346))));
evalcond[1]=((((sj5)*(x346)))+(((cj5)*(x347)))+(((sj7)*(x348)))+(((cj7)*(r22)))+(((IkReal(-1.00000000000000))*(sj7)*(x349))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst35;
IkReal x350=(sj8)*(sj8);
IkReal x351=(cj8)*(cj8);
IkReal x352=((IkReal(2.00000000000000))*(cj8)*(sj8));
gconst35=IKsign(((((r00)*(r01)*(x352)))+(((x351)*((r11)*(r11))))+(((x350)*((r10)*(r10))))+(((x351)*((r01)*(r01))))+(((r10)*(r11)*(x352)))+(((x350)*((r00)*(r00))))));
IkReal x353=(sj8)*(sj8);
IkReal x354=(cj8)*(cj8);
IkReal x355=((IkReal(2.00000000000000))*(cj8)*(sj8));
dummyeval[0]=((((x353)*((r00)*(r00))))+(((x354)*((r11)*(r11))))+(((r00)*(r01)*(x355)))+(((x353)*((r10)*(r10))))+(((x354)*((r01)*(r01))))+(((r10)*(r11)*(x355))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst35)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst35)*(((((r10)*(sj8)))+(((cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst35)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)))))), ((gconst35)*(((((r10)*(sj8)))+(((cj8)*(r11)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x356=IKsin(j3);
IkReal x357=IKcos(j3);
IkReal x358=((r01)*(sj8));
IkReal x359=((cj8)*(r00));
IkReal x360=((r00)*(sj8));
IkReal x361=((cj8)*(r11));
IkReal x362=((r11)*(sj8));
IkReal x363=((r10)*(sj8));
IkReal x364=((cj8)*(r10));
IkReal x365=((cj7)*(x356));
IkReal x366=((sj7)*(x357));
IkReal x367=((IkReal(1.00000000000000))*(x356));
IkReal x368=((IkReal(1.00000000000000))*(x357));
IkReal x369=((cj8)*(x356));
IkReal x370=((IkReal(1.00000000000000))*(x362));
IkReal x371=((sj7)*(x356));
IkReal x372=((cj7)*(x357));
evalcond[0]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x363)*(x368)))+(((IkReal(-1.00000000000000))*(x361)*(x368)))+(((r01)*(x369)))+(((x356)*(x360))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj8)*(r01)*(x368)))+(((IkReal(-1.00000000000000))*(x363)*(x367)))+(((IkReal(-1.00000000000000))*(x361)*(x367)))+(((IkReal(-1.00000000000000))*(x360)*(x368))));
evalcond[2]=((((x358)*(x365)))+(((IkReal(-1.00000000000000))*(cj7)*(x362)*(x368)))+(((x364)*(x372)))+(((IkReal(-1.00000000000000))*(r02)*(sj7)*(x367)))+(((IkReal(-1.00000000000000))*(x359)*(x365)))+(((r12)*(x366))));
evalcond[3]=((((x358)*(x371)))+(((x364)*(x366)))+(((IkReal(-1.00000000000000))*(x366)*(x370)))+(((IkReal(-1.00000000000000))*(cj7)*(r12)*(x368)))+(((IkReal(-1.00000000000000))*(sj7)*(x359)*(x367)))+(((r02)*(x365))));
evalcond[4]=((((x364)*(x365)))+(((cj5)*(sj4)))+(((IkReal(-1.00000000000000))*(cj7)*(x358)*(x368)))+(((x359)*(x372)))+(((cj4)*(sj5)))+(((r12)*(x371)))+(((IkReal(-1.00000000000000))*(x365)*(x370)))+(((r02)*(x366))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj7)*(r02)*(x368)))+(((IkReal(-1.00000000000000))*(x358)*(x366)))+(((x364)*(x371)))+(((x359)*(x366)))+(((cj4)*(cj5)))+(((IkReal(-1.00000000000000))*(sj7)*(x362)*(x367)))+(((IkReal(-1.00000000000000))*(r12)*(x365)))+(((IkReal(-1.00000000000000))*(sj4)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst33)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst33)*(((((r10)*(sj8)))+(((cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst33)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)))))), ((gconst33)*(((((r10)*(sj8)))+(((cj8)*(r11)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x373=IKsin(j3);
IkReal x374=IKcos(j3);
IkReal x375=((IkReal(1.00000000000000))*(sj8));
IkReal x376=((IkReal(1.00000000000000))*(cj8));
IkReal x377=((r01)*(sj8));
IkReal x378=((cj8)*(r10));
IkReal x379=((sj7)*(x374));
IkReal x380=((cj7)*(x373));
IkReal x381=((r00)*(x373));
IkReal x382=((sj7)*(x373));
IkReal x383=((cj7)*(x374));
evalcond[0]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r11)*(x374)*(x376)))+(((cj8)*(r01)*(x373)))+(((sj8)*(x381)))+(((IkReal(-1.00000000000000))*(r10)*(x374)*(x375))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(x374)*(x375)))+(((IkReal(-1.00000000000000))*(r11)*(x373)*(x376)))+(((IkReal(-1.00000000000000))*(r10)*(x373)*(x375)))+(((IkReal(-1.00000000000000))*(r01)*(x374)*(x376))));
evalcond[2]=((((x378)*(x383)))+(((x377)*(x380)))+(((IkReal(-1.00000000000000))*(r02)*(x382)))+(((IkReal(-1.00000000000000))*(r00)*(x376)*(x380)))+(((r12)*(x379)))+(((IkReal(-1.00000000000000))*(r11)*(x375)*(x383))));
evalcond[3]=((((x377)*(x382)))+(((r02)*(x380)))+(((IkReal(-1.00000000000000))*(r11)*(x375)*(x379)))+(((x378)*(x379)))+(((IkReal(-1.00000000000000))*(r12)*(x383)))+(((IkReal(-1.00000000000000))*(sj7)*(x376)*(x381))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst36;
gconst36=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x384=((sj5)*(sj7));
IkReal x385=((r21)*(sj8));
IkReal x386=((cj5)*(sj7));
IkReal x387=((cj8)*(r20));
IkReal x388=((cj5)*(cj7));
IkReal x389=((cj7)*(sj5));
if( IKabs(((gconst36)*(((((r22)*(x388)))+(((IkReal(-1.00000000000000))*(r22)*(x384)))+(((IkReal(-1.00000000000000))*(x386)*(x387)))+(((IkReal(-1.00000000000000))*(x387)*(x389)))+(((x385)*(x389)))+(((x385)*(x386))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst36)*(((((r22)*(x389)))+(((r22)*(x386)))+(((IkReal(-1.00000000000000))*(x385)*(x388)))+(((x387)*(x388)))+(((x384)*(x385)))+(((IkReal(-1.00000000000000))*(x384)*(x387))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst36)*(((((r22)*(x388)))+(((IkReal(-1.00000000000000))*(r22)*(x384)))+(((IkReal(-1.00000000000000))*(x386)*(x387)))+(((IkReal(-1.00000000000000))*(x387)*(x389)))+(((x385)*(x389)))+(((x385)*(x386)))))), ((gconst36)*(((((r22)*(x389)))+(((r22)*(x386)))+(((IkReal(-1.00000000000000))*(x385)*(x388)))+(((x387)*(x388)))+(((x384)*(x385)))+(((IkReal(-1.00000000000000))*(x384)*(x387)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x390=IKcos(j4);
IkReal x391=IKsin(j4);
IkReal x392=((IkReal(1.00000000000000))*(cj7));
IkReal x393=((cj8)*(r20));
IkReal x394=((cj3)*(r02));
IkReal x395=((IkReal(1.00000000000000))*(sj7));
IkReal x396=((sj3)*(sj7));
IkReal x397=((r21)*(sj8));
IkReal x398=((cj8)*(r10));
IkReal x399=((sj5)*(x390));
IkReal x400=((cj5)*(x391));
IkReal x401=((r11)*(sj3)*(sj8));
IkReal x402=((cj3)*(cj8)*(r00));
IkReal x403=((cj5)*(x390));
IkReal x404=((cj3)*(r01)*(sj8));
IkReal x405=((sj5)*(x391));
IkReal x406=((x399)+(x400));
evalcond[0]=((x405)+(((IkReal(-1.00000000000000))*(r22)*(x395)))+(((IkReal(-1.00000000000000))*(x403)))+(((IkReal(-1.00000000000000))*(x392)*(x393)))+(((cj7)*(x397))));
evalcond[1]=((((sj7)*(x397)))+(x406)+(((cj7)*(r22)))+(((IkReal(-1.00000000000000))*(x393)*(x395))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x392)*(x401)))+(((IkReal(-1.00000000000000))*(x392)*(x404)))+(((cj7)*(x402)))+(((sj7)*(x394)))+(x406)+(((cj7)*(sj3)*(x398)))+(((r12)*(x396))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x395)*(x404)))+(((IkReal(-1.00000000000000))*(x395)*(x401)))+(((x396)*(x398)))+(((sj7)*(x402)))+(x403)+(((IkReal(-1.00000000000000))*(x405)))+(((IkReal(-1.00000000000000))*(x392)*(x394)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x392))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x407=((IkReal(4.00000000000000))*(sj7));
IkReal x408=((npy)*(sj8));
IkReal x409=((IkReal(4.00000000000000))*(cj7));
IkReal x410=((cj8)*(npx));
if( IKabs(((IkReal(0.120000000000000))+(((x407)*(x410)))+(((IkReal(-1.00000000000000))*(npz)*(x409)))+(((IkReal(-0.360000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x407)*(x408))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.940000000000000))+(((x409)*(x410)))+(((npz)*(x407)))+(((IkReal(-0.360000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(x408)*(x409))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.120000000000000))+(((x407)*(x410)))+(((IkReal(-1.00000000000000))*(npz)*(x409)))+(((IkReal(-0.360000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x407)*(x408)))))+IKsqr(((IkReal(-0.940000000000000))+(((x409)*(x410)))+(((npz)*(x407)))+(((IkReal(-0.360000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(x408)*(x409)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(0.120000000000000))+(((x407)*(x410)))+(((IkReal(-1.00000000000000))*(npz)*(x409)))+(((IkReal(-0.360000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x407)*(x408)))), ((IkReal(-0.940000000000000))+(((x409)*(x410)))+(((npz)*(x407)))+(((IkReal(-0.360000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(x408)*(x409)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x411=((IkReal(1.00000000000000))*(sj7));
IkReal x412=((npy)*(sj8));
IkReal x413=((cj8)*(npx));
evalcond[0]=((IkReal(0.235000000000000))+(((cj7)*(x412)))+(((IkReal(-1.00000000000000))*(cj7)*(x413)))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(npz)*(x411)))+(((IkReal(0.250000000000000))*(IKcos(j5)))));
evalcond[1]=((IkReal(-0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((sj7)*(x412)))+(((IkReal(0.250000000000000))*(IKsin(j5))))+(((IkReal(-1.00000000000000))*(x411)*(x413)))+(((cj7)*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst38;
IkReal x414=(cj8)*(cj8);
IkReal x415=(sj8)*(sj8);
IkReal x416=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x417=((IkReal(1.00000000000000))*(x414));
IkReal x418=((IkReal(1.00000000000000))*(x415));
gconst38=IKsign(((((IkReal(-1.00000000000000))*(x418)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(x417)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(x417)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x416)))+(((IkReal(-1.00000000000000))*(x418)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x416)))));
IkReal x419=(cj8)*(cj8);
IkReal x420=(sj8)*(sj8);
IkReal x421=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x422=((IkReal(1.00000000000000))*(x419));
IkReal x423=((IkReal(1.00000000000000))*(x420));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x423)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x421)))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x421)))+(((IkReal(-1.00000000000000))*(x422)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(x422)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(x423)*((r00)*(r00)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst39;
gconst39=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x424=((cj7)*(sj5));
IkReal x425=((r21)*(sj8));
IkReal x426=((cj5)*(cj7));
IkReal x427=((cj8)*(r20));
IkReal x428=((sj5)*(sj7));
IkReal x429=((IkReal(1.00000000000000))*(cj5)*(sj7));
if( IKabs(((gconst39)*(((((IkReal(-1.00000000000000))*(x424)*(x425)))+(((x424)*(x427)))+(((IkReal(-1.00000000000000))*(x427)*(x429)))+(((cj5)*(sj7)*(x425)))+(((r22)*(x428)))+(((r22)*(x426))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst39)*(((((x425)*(x428)))+(((x425)*(x426)))+(((IkReal(-1.00000000000000))*(x427)*(x428)))+(((IkReal(-1.00000000000000))*(x426)*(x427)))+(((r22)*(x424)))+(((IkReal(-1.00000000000000))*(r22)*(x429))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst39)*(((((IkReal(-1.00000000000000))*(x424)*(x425)))+(((x424)*(x427)))+(((IkReal(-1.00000000000000))*(x427)*(x429)))+(((cj5)*(sj7)*(x425)))+(((r22)*(x428)))+(((r22)*(x426)))))), ((gconst39)*(((((x425)*(x428)))+(((x425)*(x426)))+(((IkReal(-1.00000000000000))*(x427)*(x428)))+(((IkReal(-1.00000000000000))*(x426)*(x427)))+(((r22)*(x424)))+(((IkReal(-1.00000000000000))*(r22)*(x429)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x430=IKcos(j4);
IkReal x431=IKsin(j4);
IkReal x432=((IkReal(1.00000000000000))*(cj5));
IkReal x433=((r21)*(sj8));
IkReal x434=((IkReal(1.00000000000000))*(cj8)*(r20));
evalcond[0]=((((IkReal(-1.00000000000000))*(x430)*(x432)))+(((cj7)*(x433)))+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(x434)))+(((sj5)*(x431))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj5)*(x430)))+(((IkReal(-1.00000000000000))*(sj7)*(x434)))+(((sj7)*(x433)))+(((IkReal(-1.00000000000000))*(x431)*(x432)))+(((cj7)*(r22))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst40;
IkReal x435=(cj8)*(cj8);
IkReal x436=(sj8)*(sj8);
IkReal x437=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x438=((IkReal(1.00000000000000))*(x435));
IkReal x439=((IkReal(1.00000000000000))*(x436));
gconst40=IKsign(((((IkReal(-1.00000000000000))*(x438)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x437)))+(((IkReal(-1.00000000000000))*(x439)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x437)))+(((IkReal(-1.00000000000000))*(x439)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(x438)*((r11)*(r11))))));
IkReal x440=(cj8)*(cj8);
IkReal x441=(sj8)*(sj8);
IkReal x442=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x443=((IkReal(1.00000000000000))*(x440));
IkReal x444=((IkReal(1.00000000000000))*(x441));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x444)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x442)))+(((IkReal(-1.00000000000000))*(x443)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(x443)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x442)))+(((IkReal(-1.00000000000000))*(x444)*((r10)*(r10)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst40)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst40)*(((((r10)*(sj8)))+(((cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst40)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)))))), ((gconst40)*(((((r10)*(sj8)))+(((cj8)*(r11)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x445=IKsin(j3);
IkReal x446=IKcos(j3);
IkReal x447=((r01)*(sj8));
IkReal x448=((cj8)*(r00));
IkReal x449=((r00)*(sj8));
IkReal x450=((cj8)*(r11));
IkReal x451=((r11)*(sj8));
IkReal x452=((r10)*(sj8));
IkReal x453=((cj8)*(r10));
IkReal x454=((cj7)*(x445));
IkReal x455=((sj7)*(x446));
IkReal x456=((IkReal(1.00000000000000))*(x445));
IkReal x457=((IkReal(1.00000000000000))*(x446));
IkReal x458=((cj8)*(x445));
IkReal x459=((IkReal(1.00000000000000))*(x451));
IkReal x460=((sj7)*(x445));
IkReal x461=((cj7)*(x446));
evalcond[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x452)*(x457)))+(((IkReal(-1.00000000000000))*(x450)*(x457)))+(((x445)*(x449)))+(((r01)*(x458))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj8)*(r01)*(x457)))+(((IkReal(-1.00000000000000))*(x452)*(x456)))+(((IkReal(-1.00000000000000))*(x450)*(x456)))+(((IkReal(-1.00000000000000))*(x449)*(x457))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(sj7)*(x456)))+(((x453)*(x461)))+(((x447)*(x454)))+(((r12)*(x455)))+(((IkReal(-1.00000000000000))*(x448)*(x454)))+(((IkReal(-1.00000000000000))*(cj7)*(x451)*(x457))));
evalcond[3]=((((x453)*(x455)))+(((x447)*(x460)))+(((IkReal(-1.00000000000000))*(x455)*(x459)))+(((r02)*(x454)))+(((IkReal(-1.00000000000000))*(cj7)*(r12)*(x457)))+(((IkReal(-1.00000000000000))*(sj7)*(x448)*(x456))));
evalcond[4]=((((x453)*(x454)))+(((IkReal(-1.00000000000000))*(cj7)*(x447)*(x457)))+(((cj5)*(sj4)))+(((IkReal(-1.00000000000000))*(x454)*(x459)))+(((cj4)*(sj5)))+(((r12)*(x460)))+(((x448)*(x461)))+(((r02)*(x455))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj7)*(x451)*(x456)))+(((x453)*(x460)))+(((IkReal(-1.00000000000000))*(x447)*(x455)))+(((sj4)*(sj5)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)))+(((x448)*(x455)))+(((IkReal(-1.00000000000000))*(r12)*(x454)))+(((IkReal(-1.00000000000000))*(cj7)*(r02)*(x457))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst38)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst38)*(((((r10)*(sj8)))+(((cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst38)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)))))), ((gconst38)*(((((r10)*(sj8)))+(((cj8)*(r11)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x462=IKsin(j3);
IkReal x463=IKcos(j3);
IkReal x464=((IkReal(1.00000000000000))*(sj8));
IkReal x465=((IkReal(1.00000000000000))*(cj8));
IkReal x466=((r01)*(sj8));
IkReal x467=((cj8)*(r10));
IkReal x468=((sj7)*(x463));
IkReal x469=((cj7)*(x462));
IkReal x470=((r00)*(x462));
IkReal x471=((sj7)*(x462));
IkReal x472=((cj7)*(x463));
evalcond[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r11)*(x463)*(x465)))+(((cj8)*(r01)*(x462)))+(((IkReal(-1.00000000000000))*(r10)*(x463)*(x464)))+(((sj8)*(x470))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r10)*(x462)*(x464)))+(((IkReal(-1.00000000000000))*(r11)*(x462)*(x465)))+(((IkReal(-1.00000000000000))*(r00)*(x463)*(x464)))+(((IkReal(-1.00000000000000))*(r01)*(x463)*(x465))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r00)*(x465)*(x469)))+(((x466)*(x469)))+(((IkReal(-1.00000000000000))*(r02)*(x471)))+(((IkReal(-1.00000000000000))*(r11)*(x464)*(x472)))+(((r12)*(x468)))+(((x467)*(x472))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj7)*(x465)*(x470)))+(((x466)*(x471)))+(((x467)*(x468)))+(((r02)*(x469)))+(((IkReal(-1.00000000000000))*(r11)*(x464)*(x468)))+(((IkReal(-1.00000000000000))*(r12)*(x472))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst41;
gconst41=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x473=((cj7)*(sj5));
IkReal x474=((r21)*(sj8));
IkReal x475=((cj5)*(cj7));
IkReal x476=((cj8)*(r20));
IkReal x477=((sj5)*(sj7));
IkReal x478=((IkReal(1.00000000000000))*(cj5)*(sj7));
if( IKabs(((gconst41)*(((((x473)*(x476)))+(((IkReal(-1.00000000000000))*(x476)*(x478)))+(((r22)*(x475)))+(((r22)*(x477)))+(((IkReal(-1.00000000000000))*(x473)*(x474)))+(((cj5)*(sj7)*(x474))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst41)*(((((IkReal(-1.00000000000000))*(x475)*(x476)))+(((IkReal(-1.00000000000000))*(x476)*(x477)))+(((IkReal(-1.00000000000000))*(r22)*(x478)))+(((x474)*(x477)))+(((x474)*(x475)))+(((r22)*(x473))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst41)*(((((x473)*(x476)))+(((IkReal(-1.00000000000000))*(x476)*(x478)))+(((r22)*(x475)))+(((r22)*(x477)))+(((IkReal(-1.00000000000000))*(x473)*(x474)))+(((cj5)*(sj7)*(x474)))))), ((gconst41)*(((((IkReal(-1.00000000000000))*(x475)*(x476)))+(((IkReal(-1.00000000000000))*(x476)*(x477)))+(((IkReal(-1.00000000000000))*(r22)*(x478)))+(((x474)*(x477)))+(((x474)*(x475)))+(((r22)*(x473)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x479=IKcos(j4);
IkReal x480=IKsin(j4);
IkReal x481=((IkReal(1.00000000000000))*(cj7));
IkReal x482=((cj8)*(r20));
IkReal x483=((cj3)*(r02));
IkReal x484=((IkReal(1.00000000000000))*(sj7));
IkReal x485=((sj3)*(sj7));
IkReal x486=((r21)*(sj8));
IkReal x487=((IkReal(1.00000000000000))*(cj5));
IkReal x488=((cj8)*(r10));
IkReal x489=((sj5)*(x480));
IkReal x490=((sj5)*(x479));
IkReal x491=((r11)*(sj3)*(sj8));
IkReal x492=((cj3)*(cj8)*(r00));
IkReal x493=((cj3)*(r01)*(sj8));
IkReal x494=((x479)*(x487));
evalcond[0]=((((IkReal(-1.00000000000000))*(x494)))+(((cj7)*(x486)))+(((IkReal(-1.00000000000000))*(x481)*(x482)))+(x489)+(((IkReal(-1.00000000000000))*(r22)*(x484))));
evalcond[1]=((((sj7)*(x486)))+(((IkReal(-1.00000000000000))*(x490)))+(((IkReal(-1.00000000000000))*(x480)*(x487)))+(((IkReal(-1.00000000000000))*(x482)*(x484)))+(((cj7)*(r22))));
evalcond[2]=((((sj7)*(x483)))+(((cj7)*(x492)))+(((r12)*(x485)))+(((cj7)*(sj3)*(x488)))+(((cj5)*(x480)))+(x490)+(((IkReal(-1.00000000000000))*(x481)*(x491)))+(((IkReal(-1.00000000000000))*(x481)*(x493))));
evalcond[3]=((((x485)*(x488)))+(((IkReal(-1.00000000000000))*(x494)))+(((IkReal(-1.00000000000000))*(x481)*(x483)))+(x489)+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x481)))+(((IkReal(-1.00000000000000))*(x484)*(x491)))+(((IkReal(-1.00000000000000))*(x484)*(x493)))+(((sj7)*(x492))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x495=((IkReal(4.00000000000000))*(sj7));
IkReal x496=((npy)*(sj8));
IkReal x497=((IkReal(4.00000000000000))*(cj7));
IkReal x498=((cj8)*(npx));
if( IKabs(((((IKabs(cj6) != 0)?((IkReal)1/(cj6)):(IkReal)1.0e30))*(((((IkReal(0.360000000000000))*(sj7)))+(((x495)*(x496)))+(((IkReal(-1.00000000000000))*(x495)*(x498)))+(((IkReal(0.380000000000000))*(sj6)))+(((npz)*(x497)))+(((IkReal(0.120000000000000))*(cj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(x496)*(x497)))+(((x497)*(x498)))+(((npz)*(x495)))+(((IkReal(-0.360000000000000))*(cj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(cj6) != 0)?((IkReal)1/(cj6)):(IkReal)1.0e30))*(((((IkReal(0.360000000000000))*(sj7)))+(((x495)*(x496)))+(((IkReal(-1.00000000000000))*(x495)*(x498)))+(((IkReal(0.380000000000000))*(sj6)))+(((npz)*(x497)))+(((IkReal(0.120000000000000))*(cj6)))))))+IKsqr(((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(x496)*(x497)))+(((x497)*(x498)))+(((npz)*(x495)))+(((IkReal(-0.360000000000000))*(cj7)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(cj6) != 0)?((IkReal)1/(cj6)):(IkReal)1.0e30))*(((((IkReal(0.360000000000000))*(sj7)))+(((x495)*(x496)))+(((IkReal(-1.00000000000000))*(x495)*(x498)))+(((IkReal(0.380000000000000))*(sj6)))+(((npz)*(x497)))+(((IkReal(0.120000000000000))*(cj6)))))), ((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(x496)*(x497)))+(((x497)*(x498)))+(((npz)*(x495)))+(((IkReal(-0.360000000000000))*(cj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x499=IKsin(j5);
IkReal x500=((IkReal(1.00000000000000))*(sj7));
IkReal x501=((npy)*(sj8));
IkReal x502=((cj8)*(npx));
IkReal x503=((IkReal(0.250000000000000))*(x499));
evalcond[0]=((((IkReal(-0.0300000000000000))*(sj6)))+(((sj6)*(x503)))+(((npx)*(sj8)))+(((cj8)*(npy)))+(((IkReal(0.0950000000000000))*(cj6))));
evalcond[1]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(npz)*(x500)))+(((IkReal(-1.00000000000000))*(cj7)*(x502)))+(((cj7)*(x501)))+(((IkReal(0.250000000000000))*(IKcos(j5)))));
evalcond[2]=((((IkReal(0.0900000000000000))*(sj7)))+(((sj7)*(x501)))+(((IkReal(0.0950000000000000))*(sj6)))+(((IkReal(0.0300000000000000))*(cj6)))+(((IkReal(-1.00000000000000))*(cj6)*(x503)))+(((cj7)*(npz)))+(((IkReal(-1.00000000000000))*(x500)*(x502))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x504=(sj8)*(sj8);
IkReal x505=(cj8)*(cj8);
IkReal x506=((r00)*(r11));
IkReal x507=((r02)*(sj7));
IkReal x508=((cj7)*(x505));
IkReal x509=((IkReal(1.00000000000000))*(r12)*(sj7));
IkReal x510=((IkReal(1.00000000000000))*(r01)*(r10));
IkReal x511=((cj7)*(x504));
gconst1=IKsign(((((x506)*(x508)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x509)))+(((r10)*(sj8)*(x507)))+(((IkReal(-1.00000000000000))*(r00)*(sj8)*(x509)))+(((x506)*(x511)))+(((cj8)*(r11)*(x507)))+(((IkReal(-1.00000000000000))*(x508)*(x510)))+(((IkReal(-1.00000000000000))*(x510)*(x511)))));
IkReal x512=(sj8)*(sj8);
IkReal x513=(cj8)*(cj8);
IkReal x514=((r00)*(r11));
IkReal x515=((r02)*(sj7));
IkReal x516=((cj7)*(x513));
IkReal x517=((IkReal(1.00000000000000))*(r12)*(sj7));
IkReal x518=((IkReal(1.00000000000000))*(r01)*(r10));
IkReal x519=((cj7)*(x512));
dummyeval[0]=((((r10)*(sj8)*(x515)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x517)))+(((cj8)*(r11)*(x515)))+(((IkReal(-1.00000000000000))*(r00)*(sj8)*(x517)))+(((x514)*(x519)))+(((x514)*(x516)))+(((IkReal(-1.00000000000000))*(x518)*(x519)))+(((IkReal(-1.00000000000000))*(x516)*(x518))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x520=((IkReal(1.00000000000000))*(sj7));
IkReal x521=((npy)*(sj8));
IkReal x522=((cj8)*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(0.235000000000000))+(((cj7)*(x521)))+(((IkReal(-1.00000000000000))*(npz)*(x520)))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(cj7)*(x522)))+(((IkReal(0.250000000000000))*(cj5))));
evalcond[4]=((IkReal(0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x520)*(x522)))+(((cj7)*(npz)))+(((sj7)*(x521)))+(((IkReal(-0.250000000000000))*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
IkReal x523=(sj8)*(sj8);
IkReal x524=(cj8)*(cj8);
IkReal x525=((IkReal(2.00000000000000))*(cj8)*(sj8));
gconst7=IKsign(((((x524)*((r11)*(r11))))+(((x524)*((r01)*(r01))))+(((x523)*((r00)*(r00))))+(((r10)*(r11)*(x525)))+(((x523)*((r10)*(r10))))+(((r00)*(r01)*(x525)))));
IkReal x526=(sj8)*(sj8);
IkReal x527=(cj8)*(cj8);
IkReal x528=((IkReal(2.00000000000000))*(cj8)*(sj8));
dummyeval[0]=((((x526)*((r10)*(r10))))+(((x527)*((r01)*(r01))))+(((r10)*(r11)*(x528)))+(((x526)*((r00)*(r00))))+(((x527)*((r11)*(r11))))+(((r00)*(r01)*(x528))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x529=((sj5)*(sj7));
IkReal x530=((r21)*(sj8));
IkReal x531=((cj5)*(sj7));
IkReal x532=((cj8)*(r20));
IkReal x533=((cj5)*(cj7));
IkReal x534=((cj7)*(sj5));
if( IKabs(((gconst8)*(((((IkReal(-1.00000000000000))*(x532)*(x534)))+(((IkReal(-1.00000000000000))*(x531)*(x532)))+(((r22)*(x533)))+(((x530)*(x531)))+(((x530)*(x534)))+(((IkReal(-1.00000000000000))*(r22)*(x529))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((IkReal(-1.00000000000000))*(x529)*(x532)))+(((r22)*(x531)))+(((r22)*(x534)))+(((IkReal(-1.00000000000000))*(x530)*(x533)))+(((x529)*(x530)))+(((x532)*(x533))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst8)*(((((IkReal(-1.00000000000000))*(x532)*(x534)))+(((IkReal(-1.00000000000000))*(x531)*(x532)))+(((r22)*(x533)))+(((x530)*(x531)))+(((x530)*(x534)))+(((IkReal(-1.00000000000000))*(r22)*(x529)))))), ((gconst8)*(((((IkReal(-1.00000000000000))*(x529)*(x532)))+(((r22)*(x531)))+(((r22)*(x534)))+(((IkReal(-1.00000000000000))*(x530)*(x533)))+(((x529)*(x530)))+(((x532)*(x533)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x535=IKcos(j4);
IkReal x536=IKsin(j4);
IkReal x537=((r21)*(sj8));
IkReal x538=((IkReal(1.00000000000000))*(cj8)*(r20));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj5)*(x535)))+(((cj7)*(x537)))+(((sj5)*(x536)))+(((IkReal(-1.00000000000000))*(cj7)*(x538)))+(((IkReal(-1.00000000000000))*(r22)*(sj7))));
evalcond[1]=((((cj5)*(x536)))+(((sj5)*(x535)))+(((IkReal(-1.00000000000000))*(sj7)*(x538)))+(((sj7)*(x537)))+(((cj7)*(r22))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst9;
IkReal x539=(sj8)*(sj8);
IkReal x540=(cj8)*(cj8);
IkReal x541=((IkReal(2.00000000000000))*(cj8)*(sj8));
gconst9=IKsign(((((x540)*((r11)*(r11))))+(((x540)*((r01)*(r01))))+(((r10)*(r11)*(x541)))+(((r00)*(r01)*(x541)))+(((x539)*((r10)*(r10))))+(((x539)*((r00)*(r00))))));
IkReal x542=(sj8)*(sj8);
IkReal x543=(cj8)*(cj8);
IkReal x544=((IkReal(2.00000000000000))*(cj8)*(sj8));
dummyeval[0]=((((x542)*((r10)*(r10))))+(((x543)*((r01)*(r01))))+(((r10)*(r11)*(x544)))+(((r00)*(r01)*(x544)))+(((x543)*((r11)*(r11))))+(((x542)*((r00)*(r00)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst9)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((r10)*(sj8)))+(((cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst9)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)))))), ((gconst9)*(((((r10)*(sj8)))+(((cj8)*(r11)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x545=IKsin(j3);
IkReal x546=IKcos(j3);
IkReal x547=((r01)*(sj8));
IkReal x548=((cj8)*(r00));
IkReal x549=((r00)*(sj8));
IkReal x550=((cj8)*(r11));
IkReal x551=((r11)*(sj8));
IkReal x552=((r10)*(sj8));
IkReal x553=((cj8)*(r10));
IkReal x554=((cj7)*(x545));
IkReal x555=((sj7)*(x546));
IkReal x556=((IkReal(1.00000000000000))*(x545));
IkReal x557=((IkReal(1.00000000000000))*(x546));
IkReal x558=((cj8)*(x545));
IkReal x559=((IkReal(1.00000000000000))*(x551));
IkReal x560=((sj7)*(x545));
IkReal x561=((cj7)*(x546));
evalcond[0]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x550)*(x557)))+(((IkReal(-1.00000000000000))*(x552)*(x557)))+(((r01)*(x558)))+(((x545)*(x549))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj8)*(r01)*(x557)))+(((IkReal(-1.00000000000000))*(x550)*(x556)))+(((IkReal(-1.00000000000000))*(x552)*(x556)))+(((IkReal(-1.00000000000000))*(x549)*(x557))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj7)*(x551)*(x557)))+(((r12)*(x555)))+(((IkReal(-1.00000000000000))*(x548)*(x554)))+(((x553)*(x561)))+(((x547)*(x554)))+(((IkReal(-1.00000000000000))*(r02)*(sj7)*(x556))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x555)*(x559)))+(((IkReal(-1.00000000000000))*(sj7)*(x548)*(x556)))+(((r02)*(x554)))+(((x553)*(x555)))+(((x547)*(x560)))+(((IkReal(-1.00000000000000))*(cj7)*(r12)*(x557))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x554)*(x559)))+(((r02)*(x555)))+(((cj5)*(sj4)))+(((cj4)*(sj5)))+(((x548)*(x561)))+(((r12)*(x560)))+(((IkReal(-1.00000000000000))*(cj7)*(x547)*(x557)))+(((x553)*(x554))));
evalcond[5]=((((x548)*(x555)))+(((IkReal(-1.00000000000000))*(sj7)*(x551)*(x556)))+(((IkReal(-1.00000000000000))*(x547)*(x555)))+(((IkReal(-1.00000000000000))*(cj7)*(r02)*(x557)))+(((IkReal(-1.00000000000000))*(r12)*(x554)))+(((x553)*(x560)))+(((cj4)*(cj5)))+(((IkReal(-1.00000000000000))*(sj4)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst7)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((r10)*(sj8)))+(((cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst7)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)))))), ((gconst7)*(((((r10)*(sj8)))+(((cj8)*(r11)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x562=IKsin(j3);
IkReal x563=IKcos(j3);
IkReal x564=((IkReal(1.00000000000000))*(sj8));
IkReal x565=((IkReal(1.00000000000000))*(cj8));
IkReal x566=((r01)*(sj8));
IkReal x567=((cj8)*(r10));
IkReal x568=((sj7)*(x563));
IkReal x569=((cj7)*(x562));
IkReal x570=((r00)*(x562));
IkReal x571=((sj7)*(x562));
IkReal x572=((cj7)*(x563));
evalcond[0]=((IkReal(1.00000000000000))+(((cj8)*(r01)*(x562)))+(((IkReal(-1.00000000000000))*(r10)*(x563)*(x564)))+(((IkReal(-1.00000000000000))*(r11)*(x563)*(x565)))+(((sj8)*(x570))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r11)*(x562)*(x565)))+(((IkReal(-1.00000000000000))*(r00)*(x563)*(x564)))+(((IkReal(-1.00000000000000))*(r01)*(x563)*(x565)))+(((IkReal(-1.00000000000000))*(r10)*(x562)*(x564))));
evalcond[2]=((((x566)*(x569)))+(((x567)*(x572)))+(((IkReal(-1.00000000000000))*(r02)*(x571)))+(((IkReal(-1.00000000000000))*(r11)*(x564)*(x572)))+(((r12)*(x568)))+(((IkReal(-1.00000000000000))*(r00)*(x565)*(x569))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj7)*(x565)*(x570)))+(((IkReal(-1.00000000000000))*(r11)*(x564)*(x568)))+(((IkReal(-1.00000000000000))*(r12)*(x572)))+(((x567)*(x568)))+(((x566)*(x571)))+(((r02)*(x569))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x573=((r21)*(sj8));
IkReal x574=((sj5)*(sj7));
IkReal x575=((cj5)*(sj7));
IkReal x576=((cj5)*(cj7));
IkReal x577=((cj8)*(r20));
IkReal x578=((cj7)*(sj5));
if( IKabs(((gconst10)*(((((x573)*(x575)))+(((x573)*(x578)))+(((IkReal(-1.00000000000000))*(r22)*(x574)))+(((IkReal(-1.00000000000000))*(x575)*(x577)))+(((IkReal(-1.00000000000000))*(x577)*(x578)))+(((r22)*(x576))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((x576)*(x577)))+(((x573)*(x574)))+(((IkReal(-1.00000000000000))*(x573)*(x576)))+(((r22)*(x575)))+(((r22)*(x578)))+(((IkReal(-1.00000000000000))*(x574)*(x577))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst10)*(((((x573)*(x575)))+(((x573)*(x578)))+(((IkReal(-1.00000000000000))*(r22)*(x574)))+(((IkReal(-1.00000000000000))*(x575)*(x577)))+(((IkReal(-1.00000000000000))*(x577)*(x578)))+(((r22)*(x576)))))), ((gconst10)*(((((x576)*(x577)))+(((x573)*(x574)))+(((IkReal(-1.00000000000000))*(x573)*(x576)))+(((r22)*(x575)))+(((r22)*(x578)))+(((IkReal(-1.00000000000000))*(x574)*(x577)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x579=IKcos(j4);
IkReal x580=IKsin(j4);
IkReal x581=((IkReal(1.00000000000000))*(cj7));
IkReal x582=((cj8)*(r20));
IkReal x583=((cj3)*(r02));
IkReal x584=((IkReal(1.00000000000000))*(sj7));
IkReal x585=((sj3)*(sj7));
IkReal x586=((r21)*(sj8));
IkReal x587=((cj8)*(r10));
IkReal x588=((sj5)*(x579));
IkReal x589=((cj5)*(x580));
IkReal x590=((r11)*(sj3)*(sj8));
IkReal x591=((cj3)*(cj8)*(r00));
IkReal x592=((cj5)*(x579));
IkReal x593=((cj3)*(r01)*(sj8));
IkReal x594=((sj5)*(x580));
IkReal x595=((x588)+(x589));
evalcond[0]=((((IkReal(-1.00000000000000))*(r22)*(x584)))+(((cj7)*(x586)))+(((IkReal(-1.00000000000000))*(x592)))+(x594)+(((IkReal(-1.00000000000000))*(x581)*(x582))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x582)*(x584)))+(x595)+(((cj7)*(r22)))+(((sj7)*(x586))));
evalcond[2]=((((cj7)*(sj3)*(x587)))+(((r12)*(x585)))+(((IkReal(-1.00000000000000))*(x581)*(x590)))+(((IkReal(-1.00000000000000))*(x581)*(x593)))+(x595)+(((cj7)*(x591)))+(((sj7)*(x583))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x594)))+(((sj7)*(x591)))+(((x585)*(x587)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x581)))+(((IkReal(-1.00000000000000))*(x584)*(x590)))+(((IkReal(-1.00000000000000))*(x584)*(x593)))+(x592)+(((IkReal(-1.00000000000000))*(x581)*(x583))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
IkReal x596=((IkReal(1.00000000000000))*(sj7));
IkReal x597=((npy)*(sj8));
IkReal x598=((cj8)*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(0.235000000000000))+(((IkReal(-1.00000000000000))*(cj7)*(x598)))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(0.250000000000000))*(cj5)))+(((cj7)*(x597)))+(((IkReal(-1.00000000000000))*(npz)*(x596))));
evalcond[4]=((IkReal(-0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x596)*(x598)))+(((IkReal(0.250000000000000))*(sj5)))+(((sj7)*(x597)))+(((cj7)*(npz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
IkReal x599=(cj8)*(cj8);
IkReal x600=(sj8)*(sj8);
IkReal x601=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x602=((IkReal(1.00000000000000))*(x599));
IkReal x603=((IkReal(1.00000000000000))*(x600));
gconst11=IKsign(((((IkReal(-1.00000000000000))*(x603)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x601)))+(((IkReal(-1.00000000000000))*(x603)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(x602)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x601)))+(((IkReal(-1.00000000000000))*(x602)*((r01)*(r01))))));
IkReal x604=(cj8)*(cj8);
IkReal x605=(sj8)*(sj8);
IkReal x606=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x607=((IkReal(1.00000000000000))*(x604));
IkReal x608=((IkReal(1.00000000000000))*(x605));
dummyeval[0]=((((IkReal(-1.00000000000000))*(r00)*(r01)*(x606)))+(((IkReal(-1.00000000000000))*(x607)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(x607)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x606)))+(((IkReal(-1.00000000000000))*(x608)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(x608)*((r00)*(r00)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x609=((cj7)*(sj5));
IkReal x610=((r21)*(sj8));
IkReal x611=((cj5)*(cj7));
IkReal x612=((cj8)*(r20));
IkReal x613=((sj5)*(sj7));
IkReal x614=((IkReal(1.00000000000000))*(cj5)*(sj7));
if( IKabs(((gconst12)*(((((IkReal(-1.00000000000000))*(x612)*(x614)))+(((cj5)*(sj7)*(x610)))+(((x609)*(x612)))+(((IkReal(-1.00000000000000))*(x609)*(x610)))+(((r22)*(x611)))+(((r22)*(x613))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((IkReal(-1.00000000000000))*(x611)*(x612)))+(((IkReal(-1.00000000000000))*(x612)*(x613)))+(((IkReal(-1.00000000000000))*(r22)*(x614)))+(((x610)*(x611)))+(((x610)*(x613)))+(((r22)*(x609))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst12)*(((((IkReal(-1.00000000000000))*(x612)*(x614)))+(((cj5)*(sj7)*(x610)))+(((x609)*(x612)))+(((IkReal(-1.00000000000000))*(x609)*(x610)))+(((r22)*(x611)))+(((r22)*(x613)))))), ((gconst12)*(((((IkReal(-1.00000000000000))*(x611)*(x612)))+(((IkReal(-1.00000000000000))*(x612)*(x613)))+(((IkReal(-1.00000000000000))*(r22)*(x614)))+(((x610)*(x611)))+(((x610)*(x613)))+(((r22)*(x609)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x615=IKcos(j4);
IkReal x616=IKsin(j4);
IkReal x617=((IkReal(1.00000000000000))*(cj5));
IkReal x618=((r21)*(sj8));
IkReal x619=((IkReal(1.00000000000000))*(cj8)*(r20));
evalcond[0]=((((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((IkReal(-1.00000000000000))*(x615)*(x617)))+(((IkReal(-1.00000000000000))*(cj7)*(x619)))+(((cj7)*(x618)))+(((sj5)*(x616))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj7)*(x619)))+(((IkReal(-1.00000000000000))*(sj5)*(x615)))+(((IkReal(-1.00000000000000))*(x616)*(x617)))+(((cj7)*(r22)))+(((sj7)*(x618))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst13;
IkReal x620=(cj8)*(cj8);
IkReal x621=(sj8)*(sj8);
IkReal x622=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x623=((IkReal(1.00000000000000))*(x620));
IkReal x624=((IkReal(1.00000000000000))*(x621));
gconst13=IKsign(((((IkReal(-1.00000000000000))*(x623)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(x623)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(x624)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x622)))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x622)))+(((IkReal(-1.00000000000000))*(x624)*((r00)*(r00))))));
IkReal x625=(cj8)*(cj8);
IkReal x626=(sj8)*(sj8);
IkReal x627=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x628=((IkReal(1.00000000000000))*(x625));
IkReal x629=((IkReal(1.00000000000000))*(x626));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x628)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(x629)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(x628)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x627)))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x627)))+(((IkReal(-1.00000000000000))*(x629)*((r10)*(r10)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst13)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((r10)*(sj8)))+(((cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst13)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)))))), ((gconst13)*(((((r10)*(sj8)))+(((cj8)*(r11)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x630=IKsin(j3);
IkReal x631=IKcos(j3);
IkReal x632=((r01)*(sj8));
IkReal x633=((cj8)*(r00));
IkReal x634=((r00)*(sj8));
IkReal x635=((cj8)*(r11));
IkReal x636=((r11)*(sj8));
IkReal x637=((r10)*(sj8));
IkReal x638=((cj8)*(r10));
IkReal x639=((cj7)*(x630));
IkReal x640=((sj7)*(x631));
IkReal x641=((IkReal(1.00000000000000))*(x630));
IkReal x642=((IkReal(1.00000000000000))*(x631));
IkReal x643=((cj8)*(x630));
IkReal x644=((IkReal(1.00000000000000))*(x636));
IkReal x645=((sj7)*(x630));
IkReal x646=((cj7)*(x631));
evalcond[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x635)*(x642)))+(((IkReal(-1.00000000000000))*(x637)*(x642)))+(((r01)*(x643)))+(((x630)*(x634))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x635)*(x641)))+(((IkReal(-1.00000000000000))*(x637)*(x641)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x642)))+(((IkReal(-1.00000000000000))*(x634)*(x642))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj7)*(x636)*(x642)))+(((IkReal(-1.00000000000000))*(r02)*(sj7)*(x641)))+(((x638)*(x646)))+(((IkReal(-1.00000000000000))*(x633)*(x639)))+(((r12)*(x640)))+(((x632)*(x639))));
evalcond[3]=((((r02)*(x639)))+(((x638)*(x640)))+(((IkReal(-1.00000000000000))*(cj7)*(r12)*(x642)))+(((IkReal(-1.00000000000000))*(x640)*(x644)))+(((x632)*(x645)))+(((IkReal(-1.00000000000000))*(sj7)*(x633)*(x641))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj7)*(x632)*(x642)))+(((IkReal(-1.00000000000000))*(x639)*(x644)))+(((cj5)*(sj4)))+(((x638)*(x639)))+(((r02)*(x640)))+(((cj4)*(sj5)))+(((r12)*(x645)))+(((x633)*(x646))));
evalcond[5]=((((x638)*(x645)))+(((IkReal(-1.00000000000000))*(r12)*(x639)))+(((IkReal(-1.00000000000000))*(x632)*(x640)))+(((IkReal(-1.00000000000000))*(sj7)*(x636)*(x641)))+(((sj4)*(sj5)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)))+(((x633)*(x640)))+(((IkReal(-1.00000000000000))*(cj7)*(r02)*(x642))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst11)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((r10)*(sj8)))+(((cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst11)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)))))), ((gconst11)*(((((r10)*(sj8)))+(((cj8)*(r11)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x647=IKsin(j3);
IkReal x648=IKcos(j3);
IkReal x649=((IkReal(1.00000000000000))*(sj8));
IkReal x650=((IkReal(1.00000000000000))*(cj8));
IkReal x651=((r01)*(sj8));
IkReal x652=((cj8)*(r10));
IkReal x653=((sj7)*(x648));
IkReal x654=((cj7)*(x647));
IkReal x655=((r00)*(x647));
IkReal x656=((sj7)*(x647));
IkReal x657=((cj7)*(x648));
evalcond[0]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r10)*(x648)*(x649)))+(((sj8)*(x655)))+(((IkReal(-1.00000000000000))*(r11)*(x648)*(x650)))+(((cj8)*(r01)*(x647))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r01)*(x648)*(x650)))+(((IkReal(-1.00000000000000))*(r10)*(x647)*(x649)))+(((IkReal(-1.00000000000000))*(r11)*(x647)*(x650)))+(((IkReal(-1.00000000000000))*(r00)*(x648)*(x649))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r00)*(x650)*(x654)))+(((IkReal(-1.00000000000000))*(r02)*(x656)))+(((x652)*(x657)))+(((IkReal(-1.00000000000000))*(r11)*(x649)*(x657)))+(((x651)*(x654)))+(((r12)*(x653))));
evalcond[3]=((((r02)*(x654)))+(((x652)*(x653)))+(((IkReal(-1.00000000000000))*(r11)*(x649)*(x653)))+(((x651)*(x656)))+(((IkReal(-1.00000000000000))*(sj7)*(x650)*(x655)))+(((IkReal(-1.00000000000000))*(r12)*(x657))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x658=((IkReal(1.00000000000000))*(sj5));
IkReal x659=((cj7)*(sj5));
IkReal x660=((cj8)*(r20));
IkReal x661=((cj5)*(cj7));
IkReal x662=((sj5)*(sj7));
IkReal x663=((r21)*(sj8));
IkReal x664=((cj7)*(x663));
IkReal x665=((IkReal(1.00000000000000))*(cj5)*(sj7));
if( IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(x660)*(x665)))+(((cj5)*(sj7)*(x663)))+(((IkReal(-1.00000000000000))*(x658)*(x664)))+(((x659)*(x660)))+(((r22)*(x661)))+(((r22)*(x662))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(r22)*(x665)))+(((x662)*(x663)))+(((r22)*(x659)))+(((x661)*(x663)))+(((IkReal(-1.00000000000000))*(x660)*(x661)))+(((IkReal(-1.00000000000000))*(sj7)*(x658)*(x660))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst14)*(((((IkReal(-1.00000000000000))*(x660)*(x665)))+(((cj5)*(sj7)*(x663)))+(((IkReal(-1.00000000000000))*(x658)*(x664)))+(((x659)*(x660)))+(((r22)*(x661)))+(((r22)*(x662)))))), ((gconst14)*(((((IkReal(-1.00000000000000))*(r22)*(x665)))+(((x662)*(x663)))+(((r22)*(x659)))+(((x661)*(x663)))+(((IkReal(-1.00000000000000))*(x660)*(x661)))+(((IkReal(-1.00000000000000))*(sj7)*(x658)*(x660)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x666=IKcos(j4);
IkReal x667=IKsin(j4);
IkReal x668=((IkReal(1.00000000000000))*(cj7));
IkReal x669=((cj8)*(r20));
IkReal x670=((cj3)*(r02));
IkReal x671=((IkReal(1.00000000000000))*(sj7));
IkReal x672=((sj3)*(sj7));
IkReal x673=((r21)*(sj8));
IkReal x674=((IkReal(1.00000000000000))*(cj5));
IkReal x675=((cj8)*(r10));
IkReal x676=((sj5)*(x667));
IkReal x677=((sj5)*(x666));
IkReal x678=((r11)*(sj3)*(sj8));
IkReal x679=((cj3)*(cj8)*(r00));
IkReal x680=((cj3)*(r01)*(sj8));
IkReal x681=((x666)*(x674));
evalcond[0]=((((IkReal(-1.00000000000000))*(r22)*(x671)))+(((IkReal(-1.00000000000000))*(x681)))+(((cj7)*(x673)))+(((IkReal(-1.00000000000000))*(x668)*(x669)))+(x676));
evalcond[1]=((((IkReal(-1.00000000000000))*(x667)*(x674)))+(((IkReal(-1.00000000000000))*(x669)*(x671)))+(((IkReal(-1.00000000000000))*(x677)))+(((sj7)*(x673)))+(((cj7)*(r22))));
evalcond[2]=((((r12)*(x672)))+(((IkReal(-1.00000000000000))*(x668)*(x680)))+(((cj7)*(x679)))+(((cj7)*(sj3)*(x675)))+(((IkReal(-1.00000000000000))*(x668)*(x678)))+(x677)+(((sj7)*(x670)))+(((cj5)*(x667))));
evalcond[3]=((((x672)*(x675)))+(((IkReal(-1.00000000000000))*(x681)))+(((IkReal(-1.00000000000000))*(x668)*(x670)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x668)))+(x676)+(((IkReal(-1.00000000000000))*(x671)*(x678)))+(((sj7)*(x679)))+(((IkReal(-1.00000000000000))*(x671)*(x680))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x682=((cj6)*(cj7));
IkReal x683=((IkReal(1.00000000000000))*(sj8));
IkReal x684=((cj6)*(sj7));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(r11)*(x682)*(x683)))+(((cj8)*(r10)*(x682)))+(((r12)*(x684))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(r01)*(x682)*(x683)))+(((cj8)*(r00)*(x682)))+(((r02)*(x684))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(r11)*(x682)*(x683)))+(((cj8)*(r10)*(x682)))+(((r12)*(x684)))))), ((gconst1)*(((((IkReal(-1.00000000000000))*(r01)*(x682)*(x683)))+(((cj8)*(r00)*(x682)))+(((r02)*(x684)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x685=IKsin(j3);
IkReal x686=IKcos(j3);
IkReal x687=((IkReal(1.00000000000000))*(r11));
IkReal x688=((r01)*(sj8));
IkReal x689=((cj8)*(r10));
IkReal x690=((IkReal(1.00000000000000))*(sj7));
IkReal x691=((sj7)*(x686));
IkReal x692=((cj7)*(x685));
IkReal x693=((r00)*(x685));
IkReal x694=((cj7)*(x686));
evalcond[0]=((cj6)+(((IkReal(-1.00000000000000))*(r10)*(sj8)*(x686)))+(((sj8)*(x693)))+(((IkReal(-1.00000000000000))*(cj8)*(x686)*(x687)))+(((cj8)*(r01)*(x685))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj8)*(x687)*(x694)))+(((x688)*(x692)))+(((x689)*(x694)))+(((r12)*(x691)))+(((IkReal(-1.00000000000000))*(r02)*(x685)*(x690)))+(((IkReal(-1.00000000000000))*(cj8)*(r00)*(x692))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj8)*(x687)*(x691)))+(sj6)+(((x689)*(x691)))+(((r02)*(x692)))+(((sj7)*(x685)*(x688)))+(((IkReal(-1.00000000000000))*(cj8)*(x690)*(x693)))+(((IkReal(-1.00000000000000))*(r12)*(x694))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
IkReal x695=((cj3)*(cj8));
IkReal x696=((IkReal(1.00000000000000))*(sj7));
IkReal x697=((cj8)*(npx));
IkReal x698=((cj8)*(sj3));
IkReal x699=((npy)*(sj8));
IkReal x700=((r02)*(sj3));
IkReal x701=((IkReal(1.00000000000000))*(r11));
IkReal x702=((cj3)*(r12));
IkReal x703=((IkReal(1.00000000000000))*(cj7));
IkReal x704=((sj3)*(sj8));
IkReal x705=((IkReal(1.00000000000000))*(cj3)*(sj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(0.235000000000000))+(((cj7)*(x699)))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(0.250000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(x697)*(x703)))+(((IkReal(-1.00000000000000))*(npz)*(x696))));
evalcond[4]=((IkReal(1.00000000000000))+(((r00)*(x704)))+(((IkReal(-1.00000000000000))*(x695)*(x701)))+(((IkReal(-1.00000000000000))*(r10)*(x705)))+(((r01)*(x698))));
evalcond[5]=((IkReal(0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x696)*(x697)))+(((sj7)*(x699)))+(((cj7)*(npz)))+(((IkReal(-0.250000000000000))*(sj5))));
evalcond[6]=((((IkReal(-1.00000000000000))*(r10)*(x704)))+(((IkReal(-1.00000000000000))*(x698)*(x701)))+(((IkReal(-1.00000000000000))*(r00)*(x705)))+(((IkReal(-1.00000000000000))*(r01)*(x695))));
evalcond[7]=((((IkReal(-1.00000000000000))*(r00)*(x698)*(x703)))+(((cj7)*(r10)*(x695)))+(((IkReal(-1.00000000000000))*(x696)*(x700)))+(((cj7)*(r01)*(x704)))+(((IkReal(-1.00000000000000))*(cj3)*(cj7)*(sj8)*(x701)))+(((sj7)*(x702))));
evalcond[8]=((((IkReal(-1.00000000000000))*(r00)*(x696)*(x698)))+(((IkReal(-1.00000000000000))*(x702)*(x703)))+(((IkReal(-1.00000000000000))*(cj3)*(r11)*(sj8)*(x696)))+(((r01)*(sj7)*(x704)))+(((cj7)*(x700)))+(((r10)*(sj7)*(x695))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x706=((sj5)*(sj7));
IkReal x707=((r21)*(sj8));
IkReal x708=((cj5)*(sj7));
IkReal x709=((cj7)*(sj5));
IkReal x710=((cj5)*(cj7));
IkReal x711=((IkReal(1.00000000000000))*(cj8)*(r20));
if( IKabs(((gconst4)*(((((r22)*(x710)))+(((x707)*(x708)))+(((x707)*(x709)))+(((IkReal(-1.00000000000000))*(x709)*(x711)))+(((IkReal(-1.00000000000000))*(x708)*(x711)))+(((IkReal(-1.00000000000000))*(r22)*(x706))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((r22)*(x708)))+(((r22)*(x709)))+(((IkReal(-1.00000000000000))*(x706)*(x711)))+(((x706)*(x707)))+(((IkReal(-1.00000000000000))*(x707)*(x710)))+(((cj8)*(r20)*(x710))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst4)*(((((r22)*(x710)))+(((x707)*(x708)))+(((x707)*(x709)))+(((IkReal(-1.00000000000000))*(x709)*(x711)))+(((IkReal(-1.00000000000000))*(x708)*(x711)))+(((IkReal(-1.00000000000000))*(r22)*(x706)))))), ((gconst4)*(((((r22)*(x708)))+(((r22)*(x709)))+(((IkReal(-1.00000000000000))*(x706)*(x711)))+(((x706)*(x707)))+(((IkReal(-1.00000000000000))*(x707)*(x710)))+(((cj8)*(r20)*(x710)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x712=IKcos(j4);
IkReal x713=IKsin(j4);
IkReal x714=((IkReal(1.00000000000000))*(cj7));
IkReal x715=((cj8)*(r20));
IkReal x716=((cj3)*(r02));
IkReal x717=((IkReal(1.00000000000000))*(sj7));
IkReal x718=((sj3)*(sj7));
IkReal x719=((r21)*(sj8));
IkReal x720=((cj8)*(r10));
IkReal x721=((sj5)*(x712));
IkReal x722=((cj5)*(x713));
IkReal x723=((r11)*(sj3)*(sj8));
IkReal x724=((cj3)*(cj8)*(r00));
IkReal x725=((cj5)*(x712));
IkReal x726=((cj3)*(r01)*(sj8));
IkReal x727=((sj5)*(x713));
IkReal x728=((x721)+(x722));
evalcond[0]=((((IkReal(-1.00000000000000))*(r22)*(x717)))+(((IkReal(-1.00000000000000))*(x714)*(x715)))+(((cj7)*(x719)))+(((IkReal(-1.00000000000000))*(x725)))+(x727));
evalcond[1]=((x728)+(((cj7)*(r22)))+(((sj7)*(x719)))+(((IkReal(-1.00000000000000))*(x715)*(x717))));
evalcond[2]=((((cj7)*(sj3)*(x720)))+(((cj7)*(x724)))+(x728)+(((IkReal(-1.00000000000000))*(x714)*(x723)))+(((IkReal(-1.00000000000000))*(x714)*(x726)))+(((r12)*(x718)))+(((sj7)*(x716))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x714)*(x716)))+(((IkReal(-1.00000000000000))*(x717)*(x726)))+(((IkReal(-1.00000000000000))*(x717)*(x723)))+(((IkReal(-1.00000000000000))*(x727)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x714)))+(((x718)*(x720)))+(x725)+(((sj7)*(x724))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x729=((cj3)*(cj8));
IkReal x730=((IkReal(1.00000000000000))*(sj7));
IkReal x731=((cj8)*(npx));
IkReal x732=((cj8)*(sj3));
IkReal x733=((npy)*(sj8));
IkReal x734=((r02)*(sj3));
IkReal x735=((IkReal(1.00000000000000))*(r11));
IkReal x736=((cj3)*(r12));
IkReal x737=((IkReal(1.00000000000000))*(cj7));
IkReal x738=((sj3)*(sj8));
IkReal x739=((IkReal(1.00000000000000))*(cj3)*(sj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(x731)*(x737)))+(((IkReal(-1.00000000000000))*(npz)*(x730)))+(((cj7)*(x733)))+(((IkReal(0.250000000000000))*(cj5))));
evalcond[4]=((IkReal(-1.00000000000000))+(((r00)*(x738)))+(((r01)*(x732)))+(((IkReal(-1.00000000000000))*(r10)*(x739)))+(((IkReal(-1.00000000000000))*(x729)*(x735))));
evalcond[5]=((IkReal(-0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(0.250000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(x730)*(x731)))+(((cj7)*(npz)))+(((sj7)*(x733))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x732)*(x735)))+(((IkReal(-1.00000000000000))*(r01)*(x729)))+(((IkReal(-1.00000000000000))*(r10)*(x738)))+(((IkReal(-1.00000000000000))*(r00)*(x739))));
evalcond[7]=((((cj7)*(r10)*(x729)))+(((IkReal(-1.00000000000000))*(cj3)*(cj7)*(sj8)*(x735)))+(((IkReal(-1.00000000000000))*(r00)*(x732)*(x737)))+(((IkReal(-1.00000000000000))*(x730)*(x734)))+(((sj7)*(x736)))+(((cj7)*(r01)*(x738))));
evalcond[8]=((((r01)*(sj7)*(x738)))+(((r10)*(sj7)*(x729)))+(((IkReal(-1.00000000000000))*(x736)*(x737)))+(((cj7)*(x734)))+(((IkReal(-1.00000000000000))*(cj3)*(r11)*(sj8)*(x730)))+(((IkReal(-1.00000000000000))*(r00)*(x730)*(x732))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x740=((cj7)*(sj5));
IkReal x741=((r21)*(sj8));
IkReal x742=((cj5)*(cj7));
IkReal x743=((cj8)*(r20));
IkReal x744=((sj5)*(sj7));
IkReal x745=((IkReal(1.00000000000000))*(cj5)*(sj7));
if( IKabs(((gconst5)*(((((r22)*(x744)))+(((r22)*(x742)))+(((x740)*(x743)))+(((cj5)*(sj7)*(x741)))+(((IkReal(-1.00000000000000))*(x740)*(x741)))+(((IkReal(-1.00000000000000))*(x743)*(x745))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((r22)*(x740)))+(((IkReal(-1.00000000000000))*(x742)*(x743)))+(((x741)*(x744)))+(((x741)*(x742)))+(((IkReal(-1.00000000000000))*(r22)*(x745)))+(((IkReal(-1.00000000000000))*(x743)*(x744))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst5)*(((((r22)*(x744)))+(((r22)*(x742)))+(((x740)*(x743)))+(((cj5)*(sj7)*(x741)))+(((IkReal(-1.00000000000000))*(x740)*(x741)))+(((IkReal(-1.00000000000000))*(x743)*(x745)))))), ((gconst5)*(((((r22)*(x740)))+(((IkReal(-1.00000000000000))*(x742)*(x743)))+(((x741)*(x744)))+(((x741)*(x742)))+(((IkReal(-1.00000000000000))*(r22)*(x745)))+(((IkReal(-1.00000000000000))*(x743)*(x744)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x746=IKcos(j4);
IkReal x747=IKsin(j4);
IkReal x748=((IkReal(1.00000000000000))*(cj7));
IkReal x749=((cj8)*(r20));
IkReal x750=((cj3)*(r02));
IkReal x751=((IkReal(1.00000000000000))*(sj7));
IkReal x752=((sj3)*(sj7));
IkReal x753=((r21)*(sj8));
IkReal x754=((IkReal(1.00000000000000))*(cj5));
IkReal x755=((cj8)*(r10));
IkReal x756=((sj5)*(x747));
IkReal x757=((sj5)*(x746));
IkReal x758=((r11)*(sj3)*(sj8));
IkReal x759=((cj3)*(cj8)*(r00));
IkReal x760=((cj3)*(r01)*(sj8));
IkReal x761=((x746)*(x754));
evalcond[0]=((((IkReal(-1.00000000000000))*(x761)))+(((IkReal(-1.00000000000000))*(r22)*(x751)))+(((cj7)*(x753)))+(x756)+(((IkReal(-1.00000000000000))*(x748)*(x749))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x747)*(x754)))+(((IkReal(-1.00000000000000))*(x757)))+(((sj7)*(x753)))+(((IkReal(-1.00000000000000))*(x749)*(x751)))+(((cj7)*(r22))));
evalcond[2]=((((cj7)*(sj3)*(x755)))+(((r12)*(x752)))+(((sj7)*(x750)))+(((cj7)*(x759)))+(x757)+(((cj5)*(x747)))+(((IkReal(-1.00000000000000))*(x748)*(x758)))+(((IkReal(-1.00000000000000))*(x748)*(x760))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r12)*(sj3)*(x748)))+(((x752)*(x755)))+(((IkReal(-1.00000000000000))*(x751)*(x760)))+(((IkReal(-1.00000000000000))*(x761)))+(((IkReal(-1.00000000000000))*(x751)*(x758)))+(((sj7)*(x759)))+(x756)+(((IkReal(-1.00000000000000))*(x748)*(x750))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x762=((sj5)*(sj6));
IkReal x763=((r22)*(sj7));
IkReal x764=((r20)*(sj8));
IkReal x765=((cj8)*(r21));
IkReal x766=((cj5)*(sj6));
IkReal x767=((cj7)*(cj8)*(r20));
IkReal x768=((cj7)*(r21)*(sj8));
if( IKabs(((gconst3)*(((((x762)*(x763)))+(((x762)*(x767)))+(((cj5)*(x765)))+(((cj5)*(x764)))+(((IkReal(-1.00000000000000))*(x762)*(x768))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(x766)*(x767)))+(((x766)*(x768)))+(((IkReal(-1.00000000000000))*(x763)*(x766)))+(((sj5)*(x764)))+(((sj5)*(x765))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst3)*(((((x762)*(x763)))+(((x762)*(x767)))+(((cj5)*(x765)))+(((cj5)*(x764)))+(((IkReal(-1.00000000000000))*(x762)*(x768)))))), ((gconst3)*(((((IkReal(-1.00000000000000))*(x766)*(x767)))+(((x766)*(x768)))+(((IkReal(-1.00000000000000))*(x763)*(x766)))+(((sj5)*(x764)))+(((sj5)*(x765)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x769=IKsin(j4);
IkReal x770=IKcos(j4);
IkReal x771=((IkReal(1.00000000000000))*(cj8));
IkReal x772=((cj3)*(r01));
IkReal x773=((IkReal(1.00000000000000))*(sj8));
IkReal x774=((r11)*(sj3));
IkReal x775=((cj3)*(r00));
IkReal x776=((IkReal(1.00000000000000))*(sj6));
IkReal x777=((IkReal(1.00000000000000))*(cj7));
IkReal x778=((cj3)*(r02));
IkReal x779=((sj3)*(sj7));
IkReal x780=((cj7)*(cj8));
IkReal x781=((r21)*(sj8));
IkReal x782=((r10)*(sj3));
IkReal x783=((sj5)*(x770));
IkReal x784=((cj5)*(x770));
IkReal x785=((cj6)*(x769));
IkReal x786=((cj5)*(x769));
IkReal x787=((sj5)*(x769));
evalcond[0]=((((cj8)*(r21)))+(((IkReal(-1.00000000000000))*(x776)*(x786)))+(((IkReal(-1.00000000000000))*(x776)*(x783)))+(((r20)*(sj8))));
evalcond[1]=((((cj7)*(x781)))+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(x787)+(((IkReal(-1.00000000000000))*(x784)))+(((IkReal(-1.00000000000000))*(cj7)*(r20)*(x771))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r20)*(sj7)*(x771)))+(((sj7)*(x781)))+(((cj5)*(x785)))+(((cj7)*(r22)))+(((cj6)*(x783))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x773)*(x782)))+(((sj6)*(x787)))+(((IkReal(-1.00000000000000))*(x776)*(x784)))+(((IkReal(-1.00000000000000))*(x771)*(x774)))+(((IkReal(-1.00000000000000))*(x771)*(x772)))+(((IkReal(-1.00000000000000))*(x773)*(x775))));
evalcond[4]=((((x775)*(x780)))+(((sj7)*(x778)))+(((IkReal(-1.00000000000000))*(cj7)*(x773)*(x774)))+(((r12)*(x779)))+(((x780)*(x782)))+(x783)+(x786)+(((IkReal(-1.00000000000000))*(cj7)*(x772)*(x773))));
evalcond[5]=((((IkReal(-1.00000000000000))*(r12)*(sj3)*(x777)))+(((IkReal(-1.00000000000000))*(sj7)*(x773)*(x774)))+(((IkReal(-1.00000000000000))*(sj7)*(x772)*(x773)))+(((IkReal(-1.00000000000000))*(sj5)*(x785)))+(((IkReal(-1.00000000000000))*(x777)*(x778)))+(((cj8)*(sj7)*(x775)))+(((cj8)*(r10)*(x779)))+(((cj6)*(x784))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x788=((sj5)*(sj6));
IkReal x789=((r22)*(sj7));
IkReal x790=((r20)*(sj8));
IkReal x791=((cj8)*(r21));
IkReal x792=((cj5)*(sj6));
IkReal x793=((cj7)*(cj8)*(r20));
IkReal x794=((cj7)*(r21)*(sj8));
if( IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(x788)*(x794)))+(((x788)*(x789)))+(((cj5)*(x790)))+(((cj5)*(x791)))+(((x788)*(x793))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((sj5)*(x790)))+(((sj5)*(x791)))+(((IkReal(-1.00000000000000))*(x789)*(x792)))+(((x792)*(x794)))+(((IkReal(-1.00000000000000))*(x792)*(x793))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst2)*(((((IkReal(-1.00000000000000))*(x788)*(x794)))+(((x788)*(x789)))+(((cj5)*(x790)))+(((cj5)*(x791)))+(((x788)*(x793)))))), ((gconst2)*(((((sj5)*(x790)))+(((sj5)*(x791)))+(((IkReal(-1.00000000000000))*(x789)*(x792)))+(((x792)*(x794)))+(((IkReal(-1.00000000000000))*(x792)*(x793)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x795=IKsin(j4);
IkReal x796=IKcos(j4);
IkReal x797=((IkReal(1.00000000000000))*(cj5));
IkReal x798=((r21)*(sj8));
IkReal x799=((IkReal(1.00000000000000))*(cj8)*(r20));
IkReal x800=((sj5)*(x796));
evalcond[0]=((((cj8)*(r21)))+(((IkReal(-1.00000000000000))*(sj6)*(x800)))+(((IkReal(-1.00000000000000))*(sj6)*(x795)*(x797)))+(((r20)*(sj8))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x796)*(x797)))+(((sj5)*(x795)))+(((cj7)*(x798)))+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(x799))));
evalcond[2]=((((sj7)*(x798)))+(((cj6)*(x800)))+(((cj5)*(cj6)*(x795)))+(((IkReal(-1.00000000000000))*(sj7)*(x799)))+(((cj7)*(r22))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst6;
IkReal x801=(sj8)*(sj8);
IkReal x802=(cj8)*(cj8);
IkReal x803=((r00)*(r11));
IkReal x804=((r02)*(sj7));
IkReal x805=((cj7)*(x802));
IkReal x806=((IkReal(1.00000000000000))*(r12)*(sj7));
IkReal x807=((IkReal(1.00000000000000))*(r01)*(r10));
IkReal x808=((cj7)*(x801));
gconst6=IKsign(((((IkReal(-1.00000000000000))*(cj8)*(r01)*(x806)))+(((IkReal(-1.00000000000000))*(x807)*(x808)))+(((IkReal(-1.00000000000000))*(x805)*(x807)))+(((cj8)*(r11)*(x804)))+(((x803)*(x808)))+(((x803)*(x805)))+(((IkReal(-1.00000000000000))*(r00)*(sj8)*(x806)))+(((r10)*(sj8)*(x804)))));
IkReal x809=(sj8)*(sj8);
IkReal x810=(cj8)*(cj8);
IkReal x811=((r00)*(r11));
IkReal x812=((r02)*(sj7));
IkReal x813=((cj7)*(x810));
IkReal x814=((IkReal(1.00000000000000))*(r12)*(sj7));
IkReal x815=((IkReal(1.00000000000000))*(r01)*(r10));
IkReal x816=((cj7)*(x809));
dummyeval[0]=((((r10)*(sj8)*(x812)))+(((IkReal(-1.00000000000000))*(r00)*(sj8)*(x814)))+(((IkReal(-1.00000000000000))*(x815)*(x816)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x814)))+(((x811)*(x816)))+(((x811)*(x813)))+(((IkReal(-1.00000000000000))*(x813)*(x815)))+(((cj8)*(r11)*(x812))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x817=((cj6)*(cj7));
IkReal x818=((IkReal(1.00000000000000))*(sj8));
IkReal x819=((cj6)*(sj7));
if( IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(r11)*(x817)*(x818)))+(((cj8)*(r10)*(x817)))+(((r12)*(x819))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((IkReal(-1.00000000000000))*(r01)*(x817)*(x818)))+(((cj8)*(r00)*(x817)))+(((r02)*(x819))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst6)*(((((IkReal(-1.00000000000000))*(r11)*(x817)*(x818)))+(((cj8)*(r10)*(x817)))+(((r12)*(x819)))))), ((gconst6)*(((((IkReal(-1.00000000000000))*(r01)*(x817)*(x818)))+(((cj8)*(r00)*(x817)))+(((r02)*(x819)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x820=IKsin(j3);
IkReal x821=IKcos(j3);
IkReal x822=((cj4)*(cj5));
IkReal x823=((r01)*(sj8));
IkReal x824=((cj8)*(r00));
IkReal x825=((r00)*(sj8));
IkReal x826=((cj8)*(r11));
IkReal x827=((r11)*(sj8));
IkReal x828=((sj4)*(sj5));
IkReal x829=((r10)*(sj8));
IkReal x830=((cj8)*(r10));
IkReal x831=((cj7)*(x820));
IkReal x832=((sj7)*(x821));
IkReal x833=((IkReal(1.00000000000000))*(x820));
IkReal x834=((IkReal(1.00000000000000))*(x821));
IkReal x835=((cj8)*(x820));
IkReal x836=((IkReal(1.00000000000000))*(x827));
IkReal x837=((sj7)*(x820));
IkReal x838=((cj7)*(x821));
evalcond[0]=((((x820)*(x825)))+(cj6)+(((IkReal(-1.00000000000000))*(x826)*(x834)))+(((r01)*(x835)))+(((IkReal(-1.00000000000000))*(x829)*(x834))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x826)*(x833)))+(((sj6)*(x828)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x834)))+(((IkReal(-1.00000000000000))*(x825)*(x834)))+(((IkReal(-1.00000000000000))*(sj6)*(x822)))+(((IkReal(-1.00000000000000))*(x829)*(x833))));
evalcond[2]=((((x830)*(x838)))+(((x823)*(x831)))+(((IkReal(-1.00000000000000))*(r02)*(sj7)*(x833)))+(((r12)*(x832)))+(((IkReal(-1.00000000000000))*(x824)*(x831)))+(((IkReal(-1.00000000000000))*(cj7)*(x827)*(x834))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x832)*(x836)))+(sj6)+(((r02)*(x831)))+(((IkReal(-1.00000000000000))*(cj7)*(r12)*(x834)))+(((x830)*(x832)))+(((x823)*(x837)))+(((IkReal(-1.00000000000000))*(sj7)*(x824)*(x833))));
evalcond[4]=((((x824)*(x838)))+(((IkReal(-1.00000000000000))*(cj7)*(x823)*(x834)))+(((r02)*(x832)))+(((cj5)*(sj4)))+(((cj4)*(sj5)))+(((x830)*(x831)))+(((r12)*(x837)))+(((IkReal(-1.00000000000000))*(x831)*(x836))));
evalcond[5]=((((cj6)*(x822)))+(((x824)*(x832)))+(((IkReal(-1.00000000000000))*(cj7)*(r02)*(x834)))+(((IkReal(-1.00000000000000))*(x823)*(x832)))+(((x830)*(x837)))+(((IkReal(-1.00000000000000))*(r12)*(x831)))+(((IkReal(-1.00000000000000))*(cj6)*(x828)))+(((IkReal(-1.00000000000000))*(sj7)*(x827)*(x833))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x839=((IkReal(4.00000000000000))*(npx));
IkReal x840=((IkReal(4.00000000000000))*(npy));
if( IKabs(((((IKabs(sj6) != 0)?((IkReal)1/(sj6)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj8)*(x840)))+(((IkReal(-0.380000000000000))*(cj6)))+(((IkReal(-1.00000000000000))*(sj8)*(x839)))+(((IkReal(0.120000000000000))*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x840)))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((cj7)*(cj8)*(x839)))+(((IkReal(-0.360000000000000))*(cj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj6) != 0)?((IkReal)1/(sj6)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj8)*(x840)))+(((IkReal(-0.380000000000000))*(cj6)))+(((IkReal(-1.00000000000000))*(sj8)*(x839)))+(((IkReal(0.120000000000000))*(sj6)))))))+IKsqr(((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x840)))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((cj7)*(cj8)*(x839)))+(((IkReal(-0.360000000000000))*(cj7)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(sj6) != 0)?((IkReal)1/(sj6)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj8)*(x840)))+(((IkReal(-0.380000000000000))*(cj6)))+(((IkReal(-1.00000000000000))*(sj8)*(x839)))+(((IkReal(0.120000000000000))*(sj6)))))), ((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x840)))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((cj7)*(cj8)*(x839)))+(((IkReal(-0.360000000000000))*(cj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x841=IKsin(j5);
IkReal x842=((IkReal(1.00000000000000))*(sj7));
IkReal x843=((npy)*(sj8));
IkReal x844=((cj8)*(npx));
IkReal x845=((IkReal(0.250000000000000))*(x841));
evalcond[0]=((((IkReal(-0.0300000000000000))*(sj6)))+(((npx)*(sj8)))+(((cj8)*(npy)))+(((sj6)*(x845)))+(((IkReal(0.0950000000000000))*(cj6))));
evalcond[1]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(npz)*(x842)))+(((cj7)*(x843)))+(((IkReal(-1.00000000000000))*(cj7)*(x844)))+(((IkReal(0.250000000000000))*(IKcos(j5)))));
evalcond[2]=((((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(0.0950000000000000))*(sj6)))+(((sj7)*(x843)))+(((IkReal(0.0300000000000000))*(cj6)))+(((IkReal(-1.00000000000000))*(x842)*(x844)))+(((cj7)*(npz)))+(((IkReal(-1.00000000000000))*(cj6)*(x845))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x846=(sj8)*(sj8);
IkReal x847=(cj8)*(cj8);
IkReal x848=((r00)*(r11));
IkReal x849=((r02)*(sj7));
IkReal x850=((cj7)*(x847));
IkReal x851=((IkReal(1.00000000000000))*(r12)*(sj7));
IkReal x852=((IkReal(1.00000000000000))*(r01)*(r10));
IkReal x853=((cj7)*(x846));
gconst1=IKsign(((((x848)*(x853)))+(((x848)*(x850)))+(((r10)*(sj8)*(x849)))+(((IkReal(-1.00000000000000))*(x852)*(x853)))+(((IkReal(-1.00000000000000))*(x850)*(x852)))+(((IkReal(-1.00000000000000))*(r00)*(sj8)*(x851)))+(((cj8)*(r11)*(x849)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x851)))));
IkReal x854=(sj8)*(sj8);
IkReal x855=(cj8)*(cj8);
IkReal x856=((r00)*(r11));
IkReal x857=((r02)*(sj7));
IkReal x858=((cj7)*(x855));
IkReal x859=((IkReal(1.00000000000000))*(r12)*(sj7));
IkReal x860=((IkReal(1.00000000000000))*(r01)*(r10));
IkReal x861=((cj7)*(x854));
dummyeval[0]=((((cj8)*(r11)*(x857)))+(((IkReal(-1.00000000000000))*(x860)*(x861)))+(((x856)*(x861)))+(((r10)*(sj8)*(x857)))+(((IkReal(-1.00000000000000))*(r00)*(sj8)*(x859)))+(((x856)*(x858)))+(((IkReal(-1.00000000000000))*(x858)*(x860)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x859))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x862=((IkReal(1.00000000000000))*(sj7));
IkReal x863=((npy)*(sj8));
IkReal x864=((cj8)*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(0.235000000000000))+(((IkReal(-1.00000000000000))*(cj7)*(x864)))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(npz)*(x862)))+(((IkReal(0.250000000000000))*(cj5)))+(((cj7)*(x863))));
evalcond[4]=((IkReal(0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x862)*(x864)))+(((sj7)*(x863)))+(((cj7)*(npz)))+(((IkReal(-0.250000000000000))*(sj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst7;
IkReal x865=(sj8)*(sj8);
IkReal x866=(cj8)*(cj8);
IkReal x867=((IkReal(2.00000000000000))*(cj8)*(sj8));
gconst7=IKsign(((((x865)*((r00)*(r00))))+(((x866)*((r01)*(r01))))+(((r00)*(r01)*(x867)))+(((r10)*(r11)*(x867)))+(((x866)*((r11)*(r11))))+(((x865)*((r10)*(r10))))));
IkReal x868=(sj8)*(sj8);
IkReal x869=(cj8)*(cj8);
IkReal x870=((IkReal(2.00000000000000))*(cj8)*(sj8));
dummyeval[0]=((((r00)*(r01)*(x870)))+(((r10)*(r11)*(x870)))+(((x869)*((r01)*(r01))))+(((x868)*((r00)*(r00))))+(((x869)*((r11)*(r11))))+(((x868)*((r10)*(r10)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x871=((sj5)*(sj7));
IkReal x872=((r21)*(sj8));
IkReal x873=((cj5)*(sj7));
IkReal x874=((cj8)*(r20));
IkReal x875=((cj5)*(cj7));
IkReal x876=((cj7)*(sj5));
if( IKabs(((gconst8)*(((((x872)*(x873)))+(((x872)*(x876)))+(((r22)*(x875)))+(((IkReal(-1.00000000000000))*(x873)*(x874)))+(((IkReal(-1.00000000000000))*(x874)*(x876)))+(((IkReal(-1.00000000000000))*(r22)*(x871))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((x871)*(x872)))+(((x874)*(x875)))+(((IkReal(-1.00000000000000))*(x872)*(x875)))+(((r22)*(x873)))+(((r22)*(x876)))+(((IkReal(-1.00000000000000))*(x871)*(x874))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst8)*(((((x872)*(x873)))+(((x872)*(x876)))+(((r22)*(x875)))+(((IkReal(-1.00000000000000))*(x873)*(x874)))+(((IkReal(-1.00000000000000))*(x874)*(x876)))+(((IkReal(-1.00000000000000))*(r22)*(x871)))))), ((gconst8)*(((((x871)*(x872)))+(((x874)*(x875)))+(((IkReal(-1.00000000000000))*(x872)*(x875)))+(((r22)*(x873)))+(((r22)*(x876)))+(((IkReal(-1.00000000000000))*(x871)*(x874)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x877=IKcos(j4);
IkReal x878=IKsin(j4);
IkReal x879=((r21)*(sj8));
IkReal x880=((IkReal(1.00000000000000))*(cj8)*(r20));
evalcond[0]=((((sj5)*(x878)))+(((IkReal(-1.00000000000000))*(cj7)*(x880)))+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((IkReal(-1.00000000000000))*(cj5)*(x877)))+(((cj7)*(x879))));
evalcond[1]=((((sj5)*(x877)))+(((sj7)*(x879)))+(((cj5)*(x878)))+(((IkReal(-1.00000000000000))*(sj7)*(x880)))+(((cj7)*(r22))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst9;
IkReal x881=(sj8)*(sj8);
IkReal x882=(cj8)*(cj8);
IkReal x883=((IkReal(2.00000000000000))*(cj8)*(sj8));
gconst9=IKsign(((((x881)*((r00)*(r00))))+(((r10)*(r11)*(x883)))+(((x882)*((r01)*(r01))))+(((r00)*(r01)*(x883)))+(((x882)*((r11)*(r11))))+(((x881)*((r10)*(r10))))));
IkReal x884=(sj8)*(sj8);
IkReal x885=(cj8)*(cj8);
IkReal x886=((IkReal(2.00000000000000))*(cj8)*(sj8));
dummyeval[0]=((((x885)*((r11)*(r11))))+(((x884)*((r00)*(r00))))+(((r10)*(r11)*(x886)))+(((r00)*(r01)*(x886)))+(((x885)*((r01)*(r01))))+(((x884)*((r10)*(r10)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst9)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst9)*(((((r10)*(sj8)))+(((cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst9)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)))))), ((gconst9)*(((((r10)*(sj8)))+(((cj8)*(r11)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x887=IKsin(j3);
IkReal x888=IKcos(j3);
IkReal x889=((r01)*(sj8));
IkReal x890=((cj8)*(r00));
IkReal x891=((r00)*(sj8));
IkReal x892=((cj8)*(r11));
IkReal x893=((r11)*(sj8));
IkReal x894=((r10)*(sj8));
IkReal x895=((cj8)*(r10));
IkReal x896=((cj7)*(x887));
IkReal x897=((sj7)*(x888));
IkReal x898=((IkReal(1.00000000000000))*(x887));
IkReal x899=((IkReal(1.00000000000000))*(x888));
IkReal x900=((cj8)*(x887));
IkReal x901=((IkReal(1.00000000000000))*(x893));
IkReal x902=((sj7)*(x887));
IkReal x903=((cj7)*(x888));
evalcond[0]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x892)*(x899)))+(((r01)*(x900)))+(((IkReal(-1.00000000000000))*(x894)*(x899)))+(((x887)*(x891))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x892)*(x898)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x899)))+(((IkReal(-1.00000000000000))*(x894)*(x898)))+(((IkReal(-1.00000000000000))*(x891)*(x899))));
evalcond[2]=((((x895)*(x903)))+(((IkReal(-1.00000000000000))*(r02)*(sj7)*(x898)))+(((x889)*(x896)))+(((IkReal(-1.00000000000000))*(x890)*(x896)))+(((IkReal(-1.00000000000000))*(cj7)*(x893)*(x899)))+(((r12)*(x897))));
evalcond[3]=((((r02)*(x896)))+(((IkReal(-1.00000000000000))*(x897)*(x901)))+(((x895)*(x897)))+(((IkReal(-1.00000000000000))*(sj7)*(x890)*(x898)))+(((IkReal(-1.00000000000000))*(cj7)*(r12)*(x899)))+(((x889)*(x902))));
evalcond[4]=((((r02)*(x897)))+(((IkReal(-1.00000000000000))*(x896)*(x901)))+(((x890)*(x903)))+(((x895)*(x896)))+(((cj5)*(sj4)))+(((IkReal(-1.00000000000000))*(cj7)*(x889)*(x899)))+(((r12)*(x902)))+(((cj4)*(sj5))));
evalcond[5]=((((x895)*(x902)))+(((IkReal(-1.00000000000000))*(cj7)*(r02)*(x899)))+(((IkReal(-1.00000000000000))*(x889)*(x897)))+(((cj4)*(cj5)))+(((IkReal(-1.00000000000000))*(sj7)*(x893)*(x898)))+(((x890)*(x897)))+(((IkReal(-1.00000000000000))*(r12)*(x896)))+(((IkReal(-1.00000000000000))*(sj4)*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst7)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((r10)*(sj8)))+(((cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst7)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)))))), ((gconst7)*(((((r10)*(sj8)))+(((cj8)*(r11)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x904=IKsin(j3);
IkReal x905=IKcos(j3);
IkReal x906=((IkReal(1.00000000000000))*(sj8));
IkReal x907=((IkReal(1.00000000000000))*(cj8));
IkReal x908=((r01)*(sj8));
IkReal x909=((cj8)*(r10));
IkReal x910=((sj7)*(x905));
IkReal x911=((cj7)*(x904));
IkReal x912=((r00)*(x904));
IkReal x913=((sj7)*(x904));
IkReal x914=((cj7)*(x905));
evalcond[0]=((IkReal(1.00000000000000))+(((sj8)*(x912)))+(((cj8)*(r01)*(x904)))+(((IkReal(-1.00000000000000))*(r11)*(x905)*(x907)))+(((IkReal(-1.00000000000000))*(r10)*(x905)*(x906))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r10)*(x904)*(x906)))+(((IkReal(-1.00000000000000))*(r01)*(x905)*(x907)))+(((IkReal(-1.00000000000000))*(r11)*(x904)*(x907)))+(((IkReal(-1.00000000000000))*(r00)*(x905)*(x906))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r11)*(x906)*(x914)))+(((x909)*(x914)))+(((r12)*(x910)))+(((IkReal(-1.00000000000000))*(r02)*(x913)))+(((IkReal(-1.00000000000000))*(r00)*(x907)*(x911)))+(((x908)*(x911))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r11)*(x906)*(x910)))+(((x909)*(x910)))+(((IkReal(-1.00000000000000))*(sj7)*(x907)*(x912)))+(((IkReal(-1.00000000000000))*(r12)*(x914)))+(((r02)*(x911)))+(((x908)*(x913))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x915=((r21)*(sj8));
IkReal x916=((sj5)*(sj7));
IkReal x917=((cj5)*(sj7));
IkReal x918=((cj5)*(cj7));
IkReal x919=((cj8)*(r20));
IkReal x920=((cj7)*(sj5));
if( IKabs(((gconst10)*(((((IkReal(-1.00000000000000))*(r22)*(x916)))+(((x915)*(x920)))+(((IkReal(-1.00000000000000))*(x917)*(x919)))+(((IkReal(-1.00000000000000))*(x919)*(x920)))+(((r22)*(x918)))+(((x915)*(x917))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst10)*(((((r22)*(x920)))+(((IkReal(-1.00000000000000))*(x915)*(x918)))+(((x918)*(x919)))+(((IkReal(-1.00000000000000))*(x916)*(x919)))+(((r22)*(x917)))+(((x915)*(x916))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst10)*(((((IkReal(-1.00000000000000))*(r22)*(x916)))+(((x915)*(x920)))+(((IkReal(-1.00000000000000))*(x917)*(x919)))+(((IkReal(-1.00000000000000))*(x919)*(x920)))+(((r22)*(x918)))+(((x915)*(x917)))))), ((gconst10)*(((((r22)*(x920)))+(((IkReal(-1.00000000000000))*(x915)*(x918)))+(((x918)*(x919)))+(((IkReal(-1.00000000000000))*(x916)*(x919)))+(((r22)*(x917)))+(((x915)*(x916)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x921=IKcos(j4);
IkReal x922=IKsin(j4);
IkReal x923=((IkReal(1.00000000000000))*(cj7));
IkReal x924=((cj8)*(r20));
IkReal x925=((cj3)*(r02));
IkReal x926=((IkReal(1.00000000000000))*(sj7));
IkReal x927=((sj3)*(sj7));
IkReal x928=((r21)*(sj8));
IkReal x929=((cj8)*(r10));
IkReal x930=((sj5)*(x921));
IkReal x931=((cj5)*(x922));
IkReal x932=((r11)*(sj3)*(sj8));
IkReal x933=((cj3)*(cj8)*(r00));
IkReal x934=((cj5)*(x921));
IkReal x935=((cj3)*(r01)*(sj8));
IkReal x936=((sj5)*(x922));
IkReal x937=((x931)+(x930));
evalcond[0]=((((cj7)*(x928)))+(((IkReal(-1.00000000000000))*(r22)*(x926)))+(((IkReal(-1.00000000000000))*(x934)))+(x936)+(((IkReal(-1.00000000000000))*(x923)*(x924))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x924)*(x926)))+(x937)+(((cj7)*(r22)))+(((sj7)*(x928))));
evalcond[2]=((((cj7)*(x933)))+(((r12)*(x927)))+(x937)+(((sj7)*(x925)))+(((IkReal(-1.00000000000000))*(x923)*(x932)))+(((IkReal(-1.00000000000000))*(x923)*(x935)))+(((cj7)*(sj3)*(x929))));
evalcond[3]=((((x927)*(x929)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x923)))+(((IkReal(-1.00000000000000))*(x936)))+(((IkReal(-1.00000000000000))*(x926)*(x935)))+(((IkReal(-1.00000000000000))*(x926)*(x932)))+(x934)+(((sj7)*(x933)))+(((IkReal(-1.00000000000000))*(x923)*(x925))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
IkReal x938=((IkReal(1.00000000000000))*(sj7));
IkReal x939=((npy)*(sj8));
IkReal x940=((cj8)*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((cj7)*(x939)))+(((IkReal(0.250000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(npz)*(x938)))+(((IkReal(-1.00000000000000))*(cj7)*(x940))));
evalcond[4]=((IkReal(-0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(0.250000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(x938)*(x940)))+(((cj7)*(npz)))+(((sj7)*(x939))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst11;
IkReal x941=(cj8)*(cj8);
IkReal x942=(sj8)*(sj8);
IkReal x943=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x944=((IkReal(1.00000000000000))*(x941));
IkReal x945=((IkReal(1.00000000000000))*(x942));
gconst11=IKsign(((((IkReal(-1.00000000000000))*(x944)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(x945)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x943)))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x943)))+(((IkReal(-1.00000000000000))*(x944)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(x945)*((r00)*(r00))))));
IkReal x946=(cj8)*(cj8);
IkReal x947=(sj8)*(sj8);
IkReal x948=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x949=((IkReal(1.00000000000000))*(x946));
IkReal x950=((IkReal(1.00000000000000))*(x947));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x950)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x948)))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x948)))+(((IkReal(-1.00000000000000))*(x949)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(x949)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(x950)*((r10)*(r10)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x951=((cj7)*(sj5));
IkReal x952=((r21)*(sj8));
IkReal x953=((cj5)*(cj7));
IkReal x954=((cj8)*(r20));
IkReal x955=((sj5)*(sj7));
IkReal x956=((IkReal(1.00000000000000))*(cj5)*(sj7));
if( IKabs(((gconst12)*(((((x951)*(x954)))+(((r22)*(x955)))+(((r22)*(x953)))+(((IkReal(-1.00000000000000))*(x951)*(x952)))+(((IkReal(-1.00000000000000))*(x954)*(x956)))+(((cj5)*(sj7)*(x952))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst12)*(((((r22)*(x951)))+(((x952)*(x955)))+(((x952)*(x953)))+(((IkReal(-1.00000000000000))*(r22)*(x956)))+(((IkReal(-1.00000000000000))*(x954)*(x955)))+(((IkReal(-1.00000000000000))*(x953)*(x954))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst12)*(((((x951)*(x954)))+(((r22)*(x955)))+(((r22)*(x953)))+(((IkReal(-1.00000000000000))*(x951)*(x952)))+(((IkReal(-1.00000000000000))*(x954)*(x956)))+(((cj5)*(sj7)*(x952)))))), ((gconst12)*(((((r22)*(x951)))+(((x952)*(x955)))+(((x952)*(x953)))+(((IkReal(-1.00000000000000))*(r22)*(x956)))+(((IkReal(-1.00000000000000))*(x954)*(x955)))+(((IkReal(-1.00000000000000))*(x953)*(x954)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[2];
IkReal x957=IKcos(j4);
IkReal x958=IKsin(j4);
IkReal x959=((IkReal(1.00000000000000))*(cj5));
IkReal x960=((r21)*(sj8));
IkReal x961=((IkReal(1.00000000000000))*(cj8)*(r20));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj7)*(x961)))+(((IkReal(-1.00000000000000))*(x957)*(x959)))+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((sj5)*(x958)))+(((cj7)*(x960))));
evalcond[1]=((((sj7)*(x960)))+(((IkReal(-1.00000000000000))*(x958)*(x959)))+(((IkReal(-1.00000000000000))*(sj5)*(x957)))+(((cj7)*(r22)))+(((IkReal(-1.00000000000000))*(sj7)*(x961))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst13;
IkReal x962=(cj8)*(cj8);
IkReal x963=(sj8)*(sj8);
IkReal x964=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x965=((IkReal(1.00000000000000))*(x962));
IkReal x966=((IkReal(1.00000000000000))*(x963));
gconst13=IKsign(((((IkReal(-1.00000000000000))*(x966)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(x965)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x964)))+(((IkReal(-1.00000000000000))*(x965)*((r01)*(r01))))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x964)))+(((IkReal(-1.00000000000000))*(x966)*((r00)*(r00))))));
IkReal x967=(cj8)*(cj8);
IkReal x968=(sj8)*(sj8);
IkReal x969=((IkReal(2.00000000000000))*(cj8)*(sj8));
IkReal x970=((IkReal(1.00000000000000))*(x967));
IkReal x971=((IkReal(1.00000000000000))*(x968));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x970)*((r11)*(r11))))+(((IkReal(-1.00000000000000))*(x971)*((r10)*(r10))))+(((IkReal(-1.00000000000000))*(r00)*(r01)*(x969)))+(((IkReal(-1.00000000000000))*(r10)*(r11)*(x969)))+(((IkReal(-1.00000000000000))*(x971)*((r00)*(r00))))+(((IkReal(-1.00000000000000))*(x970)*((r01)*(r01)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst13)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst13)*(((((r10)*(sj8)))+(((cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst13)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)))))), ((gconst13)*(((((r10)*(sj8)))+(((cj8)*(r11)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x972=IKsin(j3);
IkReal x973=IKcos(j3);
IkReal x974=((r01)*(sj8));
IkReal x975=((cj8)*(r00));
IkReal x976=((r00)*(sj8));
IkReal x977=((cj8)*(r11));
IkReal x978=((r11)*(sj8));
IkReal x979=((r10)*(sj8));
IkReal x980=((cj8)*(r10));
IkReal x981=((cj7)*(x972));
IkReal x982=((sj7)*(x973));
IkReal x983=((IkReal(1.00000000000000))*(x972));
IkReal x984=((IkReal(1.00000000000000))*(x973));
IkReal x985=((cj8)*(x972));
IkReal x986=((IkReal(1.00000000000000))*(x978));
IkReal x987=((sj7)*(x972));
IkReal x988=((cj7)*(x973));
evalcond[0]=((IkReal(-1.00000000000000))+(((r01)*(x985)))+(((IkReal(-1.00000000000000))*(x977)*(x984)))+(((IkReal(-1.00000000000000))*(x979)*(x984)))+(((x972)*(x976))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj8)*(r01)*(x984)))+(((IkReal(-1.00000000000000))*(x977)*(x983)))+(((IkReal(-1.00000000000000))*(x976)*(x984)))+(((IkReal(-1.00000000000000))*(x979)*(x983))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj7)*(x978)*(x984)))+(((IkReal(-1.00000000000000))*(x975)*(x981)))+(((r12)*(x982)))+(((x974)*(x981)))+(((IkReal(-1.00000000000000))*(r02)*(sj7)*(x983)))+(((x980)*(x988))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x982)*(x986)))+(((IkReal(-1.00000000000000))*(cj7)*(r12)*(x984)))+(((x974)*(x987)))+(((x980)*(x982)))+(((r02)*(x981)))+(((IkReal(-1.00000000000000))*(sj7)*(x975)*(x983))));
evalcond[4]=((((IkReal(-1.00000000000000))*(cj7)*(x974)*(x984)))+(((x975)*(x988)))+(((cj5)*(sj4)))+(((cj4)*(sj5)))+(((r12)*(x987)))+(((IkReal(-1.00000000000000))*(x981)*(x986)))+(((x980)*(x981)))+(((r02)*(x982))));
evalcond[5]=((((x975)*(x982)))+(((IkReal(-1.00000000000000))*(sj7)*(x978)*(x983)))+(((sj4)*(sj5)))+(((IkReal(-1.00000000000000))*(r12)*(x981)))+(((IkReal(-1.00000000000000))*(cj4)*(cj5)))+(((IkReal(-1.00000000000000))*(x974)*(x982)))+(((IkReal(-1.00000000000000))*(cj7)*(r02)*(x984)))+(((x980)*(x987))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
if( IKabs(((gconst11)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst11)*(((((r10)*(sj8)))+(((cj8)*(r11))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst11)*(((((IkReal(-1.00000000000000))*(r00)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)))))), ((gconst11)*(((((r10)*(sj8)))+(((cj8)*(r11)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[4];
IkReal x989=IKsin(j3);
IkReal x990=IKcos(j3);
IkReal x991=((IkReal(1.00000000000000))*(sj8));
IkReal x992=((IkReal(1.00000000000000))*(cj8));
IkReal x993=((r01)*(sj8));
IkReal x994=((cj8)*(r10));
IkReal x995=((sj7)*(x990));
IkReal x996=((cj7)*(x989));
IkReal x997=((r00)*(x989));
IkReal x998=((sj7)*(x989));
IkReal x999=((cj7)*(x990));
evalcond[0]=((IkReal(-1.00000000000000))+(((cj8)*(r01)*(x989)))+(((sj8)*(x997)))+(((IkReal(-1.00000000000000))*(r11)*(x990)*(x992)))+(((IkReal(-1.00000000000000))*(r10)*(x990)*(x991))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r10)*(x989)*(x991)))+(((IkReal(-1.00000000000000))*(r01)*(x990)*(x992)))+(((IkReal(-1.00000000000000))*(r11)*(x989)*(x992)))+(((IkReal(-1.00000000000000))*(r00)*(x990)*(x991))));
evalcond[2]=((((x993)*(x996)))+(((IkReal(-1.00000000000000))*(r11)*(x991)*(x999)))+(((r12)*(x995)))+(((x994)*(x999)))+(((IkReal(-1.00000000000000))*(r00)*(x992)*(x996)))+(((IkReal(-1.00000000000000))*(r02)*(x998))));
evalcond[3]=((((x993)*(x998)))+(((IkReal(-1.00000000000000))*(r11)*(x991)*(x995)))+(((x994)*(x995)))+(((r02)*(x996)))+(((IkReal(-1.00000000000000))*(sj7)*(x992)*(x997)))+(((IkReal(-1.00000000000000))*(r12)*(x999))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst14;
gconst14=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1000=((IkReal(1.00000000000000))*(sj5));
IkReal x1001=((cj7)*(sj5));
IkReal x1002=((cj8)*(r20));
IkReal x1003=((cj5)*(cj7));
IkReal x1004=((sj5)*(sj7));
IkReal x1005=((r21)*(sj8));
IkReal x1006=((cj7)*(x1005));
IkReal x1007=((IkReal(1.00000000000000))*(cj5)*(sj7));
if( IKabs(((gconst14)*(((((cj5)*(sj7)*(x1005)))+(((IkReal(-1.00000000000000))*(x1002)*(x1007)))+(((IkReal(-1.00000000000000))*(x1000)*(x1006)))+(((x1001)*(x1002)))+(((r22)*(x1004)))+(((r22)*(x1003))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst14)*(((((IkReal(-1.00000000000000))*(x1002)*(x1003)))+(((IkReal(-1.00000000000000))*(sj7)*(x1000)*(x1002)))+(((x1004)*(x1005)))+(((r22)*(x1001)))+(((IkReal(-1.00000000000000))*(r22)*(x1007)))+(((x1003)*(x1005))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst14)*(((((cj5)*(sj7)*(x1005)))+(((IkReal(-1.00000000000000))*(x1002)*(x1007)))+(((IkReal(-1.00000000000000))*(x1000)*(x1006)))+(((x1001)*(x1002)))+(((r22)*(x1004)))+(((r22)*(x1003)))))), ((gconst14)*(((((IkReal(-1.00000000000000))*(x1002)*(x1003)))+(((IkReal(-1.00000000000000))*(sj7)*(x1000)*(x1002)))+(((x1004)*(x1005)))+(((r22)*(x1001)))+(((IkReal(-1.00000000000000))*(r22)*(x1007)))+(((x1003)*(x1005)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1008=IKcos(j4);
IkReal x1009=IKsin(j4);
IkReal x1010=((IkReal(1.00000000000000))*(cj7));
IkReal x1011=((cj8)*(r20));
IkReal x1012=((cj3)*(r02));
IkReal x1013=((IkReal(1.00000000000000))*(sj7));
IkReal x1014=((sj3)*(sj7));
IkReal x1015=((r21)*(sj8));
IkReal x1016=((IkReal(1.00000000000000))*(cj5));
IkReal x1017=((cj8)*(r10));
IkReal x1018=((sj5)*(x1009));
IkReal x1019=((sj5)*(x1008));
IkReal x1020=((r11)*(sj3)*(sj8));
IkReal x1021=((cj3)*(cj8)*(r00));
IkReal x1022=((cj3)*(r01)*(sj8));
IkReal x1023=((x1008)*(x1016));
evalcond[0]=((((IkReal(-1.00000000000000))*(r22)*(x1013)))+(((IkReal(-1.00000000000000))*(x1010)*(x1011)))+(x1018)+(((IkReal(-1.00000000000000))*(x1023)))+(((cj7)*(x1015))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1011)*(x1013)))+(((sj7)*(x1015)))+(((IkReal(-1.00000000000000))*(x1009)*(x1016)))+(((cj7)*(r22)))+(((IkReal(-1.00000000000000))*(x1019))));
evalcond[2]=((x1019)+(((sj7)*(x1012)))+(((cj5)*(x1009)))+(((r12)*(x1014)))+(((cj7)*(sj3)*(x1017)))+(((cj7)*(x1021)))+(((IkReal(-1.00000000000000))*(x1010)*(x1022)))+(((IkReal(-1.00000000000000))*(x1010)*(x1020))));
evalcond[3]=((((x1014)*(x1017)))+(((IkReal(-1.00000000000000))*(x1010)*(x1012)))+(x1018)+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x1010)))+(((IkReal(-1.00000000000000))*(x1023)))+(((sj7)*(x1021)))+(((IkReal(-1.00000000000000))*(x1013)*(x1020)))+(((IkReal(-1.00000000000000))*(x1013)*(x1022))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1024=((cj6)*(cj7));
IkReal x1025=((IkReal(1.00000000000000))*(sj8));
IkReal x1026=((cj6)*(sj7));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(r11)*(x1024)*(x1025)))+(((r12)*(x1026)))+(((cj8)*(r10)*(x1024))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(r01)*(x1024)*(x1025)))+(((cj8)*(r00)*(x1024)))+(((r02)*(x1026))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(r11)*(x1024)*(x1025)))+(((r12)*(x1026)))+(((cj8)*(r10)*(x1024)))))), ((gconst1)*(((((IkReal(-1.00000000000000))*(r01)*(x1024)*(x1025)))+(((cj8)*(r00)*(x1024)))+(((r02)*(x1026)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1027=IKsin(j3);
IkReal x1028=IKcos(j3);
IkReal x1029=((IkReal(1.00000000000000))*(r11));
IkReal x1030=((r01)*(sj8));
IkReal x1031=((cj8)*(r10));
IkReal x1032=((IkReal(1.00000000000000))*(sj7));
IkReal x1033=((sj7)*(x1028));
IkReal x1034=((cj7)*(x1027));
IkReal x1035=((r00)*(x1027));
IkReal x1036=((cj7)*(x1028));
evalcond[0]=((cj6)+(((sj8)*(x1035)))+(((cj8)*(r01)*(x1027)))+(((IkReal(-1.00000000000000))*(r10)*(sj8)*(x1028)))+(((IkReal(-1.00000000000000))*(cj8)*(x1028)*(x1029))));
evalcond[1]=((((x1031)*(x1036)))+(((x1030)*(x1034)))+(((IkReal(-1.00000000000000))*(cj8)*(r00)*(x1034)))+(((r12)*(x1033)))+(((IkReal(-1.00000000000000))*(r02)*(x1027)*(x1032)))+(((IkReal(-1.00000000000000))*(sj8)*(x1029)*(x1036))));
evalcond[2]=((((x1031)*(x1033)))+(sj6)+(((r02)*(x1034)))+(((sj7)*(x1027)*(x1030)))+(((IkReal(-1.00000000000000))*(cj8)*(x1032)*(x1035)))+(((IkReal(-1.00000000000000))*(r12)*(x1036)))+(((IkReal(-1.00000000000000))*(sj8)*(x1029)*(x1033))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
IkReal x1037=((cj3)*(cj8));
IkReal x1038=((IkReal(1.00000000000000))*(sj7));
IkReal x1039=((cj8)*(npx));
IkReal x1040=((cj8)*(sj3));
IkReal x1041=((npy)*(sj8));
IkReal x1042=((r02)*(sj3));
IkReal x1043=((IkReal(1.00000000000000))*(r11));
IkReal x1044=((cj3)*(r12));
IkReal x1045=((IkReal(1.00000000000000))*(cj7));
IkReal x1046=((sj3)*(sj8));
IkReal x1047=((IkReal(1.00000000000000))*(cj3)*(sj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(0.235000000000000))+(((cj7)*(x1041)))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(x1039)*(x1045)))+(((IkReal(0.250000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(npz)*(x1038))));
evalcond[4]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r10)*(x1047)))+(((IkReal(-1.00000000000000))*(x1037)*(x1043)))+(((r01)*(x1040)))+(((r00)*(x1046))));
evalcond[5]=((IkReal(0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x1038)*(x1039)))+(((sj7)*(x1041)))+(((cj7)*(npz)))+(((IkReal(-0.250000000000000))*(sj5))));
evalcond[6]=((((IkReal(-1.00000000000000))*(r00)*(x1047)))+(((IkReal(-1.00000000000000))*(r10)*(x1046)))+(((IkReal(-1.00000000000000))*(r01)*(x1037)))+(((IkReal(-1.00000000000000))*(x1040)*(x1043))));
evalcond[7]=((((cj7)*(r10)*(x1037)))+(((IkReal(-1.00000000000000))*(x1038)*(x1042)))+(((IkReal(-1.00000000000000))*(cj3)*(cj7)*(sj8)*(x1043)))+(((cj7)*(r01)*(x1046)))+(((sj7)*(x1044)))+(((IkReal(-1.00000000000000))*(r00)*(x1040)*(x1045))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x1044)*(x1045)))+(((cj7)*(x1042)))+(((r10)*(sj7)*(x1037)))+(((r01)*(sj7)*(x1046)))+(((IkReal(-1.00000000000000))*(r00)*(x1038)*(x1040)))+(((IkReal(-1.00000000000000))*(cj3)*(r11)*(sj8)*(x1038))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1048=((sj5)*(sj7));
IkReal x1049=((r21)*(sj8));
IkReal x1050=((cj5)*(sj7));
IkReal x1051=((cj7)*(sj5));
IkReal x1052=((cj5)*(cj7));
IkReal x1053=((IkReal(1.00000000000000))*(cj8)*(r20));
if( IKabs(((gconst4)*(((((x1049)*(x1050)))+(((x1049)*(x1051)))+(((IkReal(-1.00000000000000))*(r22)*(x1048)))+(((r22)*(x1052)))+(((IkReal(-1.00000000000000))*(x1050)*(x1053)))+(((IkReal(-1.00000000000000))*(x1051)*(x1053))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(x1049)*(x1052)))+(((x1048)*(x1049)))+(((cj8)*(r20)*(x1052)))+(((IkReal(-1.00000000000000))*(x1048)*(x1053)))+(((r22)*(x1050)))+(((r22)*(x1051))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst4)*(((((x1049)*(x1050)))+(((x1049)*(x1051)))+(((IkReal(-1.00000000000000))*(r22)*(x1048)))+(((r22)*(x1052)))+(((IkReal(-1.00000000000000))*(x1050)*(x1053)))+(((IkReal(-1.00000000000000))*(x1051)*(x1053)))))), ((gconst4)*(((((IkReal(-1.00000000000000))*(x1049)*(x1052)))+(((x1048)*(x1049)))+(((cj8)*(r20)*(x1052)))+(((IkReal(-1.00000000000000))*(x1048)*(x1053)))+(((r22)*(x1050)))+(((r22)*(x1051)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1054=IKcos(j4);
IkReal x1055=IKsin(j4);
IkReal x1056=((IkReal(1.00000000000000))*(cj7));
IkReal x1057=((cj8)*(r20));
IkReal x1058=((cj3)*(r02));
IkReal x1059=((IkReal(1.00000000000000))*(sj7));
IkReal x1060=((sj3)*(sj7));
IkReal x1061=((r21)*(sj8));
IkReal x1062=((cj8)*(r10));
IkReal x1063=((sj5)*(x1054));
IkReal x1064=((cj5)*(x1055));
IkReal x1065=((r11)*(sj3)*(sj8));
IkReal x1066=((cj3)*(cj8)*(r00));
IkReal x1067=((cj5)*(x1054));
IkReal x1068=((cj3)*(r01)*(sj8));
IkReal x1069=((sj5)*(x1055));
IkReal x1070=((x1063)+(x1064));
evalcond[0]=((((cj7)*(x1061)))+(x1069)+(((IkReal(-1.00000000000000))*(r22)*(x1059)))+(((IkReal(-1.00000000000000))*(x1056)*(x1057)))+(((IkReal(-1.00000000000000))*(x1067))));
evalcond[1]=((x1070)+(((sj7)*(x1061)))+(((IkReal(-1.00000000000000))*(x1057)*(x1059)))+(((cj7)*(r22))));
evalcond[2]=((((r12)*(x1060)))+(((cj7)*(x1066)))+(x1070)+(((sj7)*(x1058)))+(((IkReal(-1.00000000000000))*(x1056)*(x1065)))+(((IkReal(-1.00000000000000))*(x1056)*(x1068)))+(((cj7)*(sj3)*(x1062))));
evalcond[3]=((x1067)+(((x1060)*(x1062)))+(((IkReal(-1.00000000000000))*(x1059)*(x1065)))+(((IkReal(-1.00000000000000))*(x1059)*(x1068)))+(((sj7)*(x1066)))+(((IkReal(-1.00000000000000))*(x1056)*(x1058)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x1056)))+(((IkReal(-1.00000000000000))*(x1069))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x1071=((cj3)*(cj8));
IkReal x1072=((IkReal(1.00000000000000))*(sj7));
IkReal x1073=((cj8)*(npx));
IkReal x1074=((cj8)*(sj3));
IkReal x1075=((npy)*(sj8));
IkReal x1076=((r02)*(sj3));
IkReal x1077=((IkReal(1.00000000000000))*(r11));
IkReal x1078=((cj3)*(r12));
IkReal x1079=((IkReal(1.00000000000000))*(cj7));
IkReal x1080=((sj3)*(sj8));
IkReal x1081=((IkReal(1.00000000000000))*(cj3)*(sj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(0.235000000000000))+(((cj7)*(x1075)))+(((IkReal(-1.00000000000000))*(x1073)*(x1079)))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(0.250000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(npz)*(x1072))));
evalcond[4]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r10)*(x1081)))+(((IkReal(-1.00000000000000))*(x1071)*(x1077)))+(((r00)*(x1080)))+(((r01)*(x1074))));
evalcond[5]=((IkReal(-0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((sj7)*(x1075)))+(((IkReal(0.250000000000000))*(sj5)))+(((cj7)*(npz)))+(((IkReal(-1.00000000000000))*(x1072)*(x1073))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x1074)*(x1077)))+(((IkReal(-1.00000000000000))*(r10)*(x1080)))+(((IkReal(-1.00000000000000))*(r00)*(x1081)))+(((IkReal(-1.00000000000000))*(r01)*(x1071))));
evalcond[7]=((((IkReal(-1.00000000000000))*(r00)*(x1074)*(x1079)))+(((sj7)*(x1078)))+(((IkReal(-1.00000000000000))*(cj3)*(cj7)*(sj8)*(x1077)))+(((cj7)*(r10)*(x1071)))+(((IkReal(-1.00000000000000))*(x1072)*(x1076)))+(((cj7)*(r01)*(x1080))));
evalcond[8]=((((r01)*(sj7)*(x1080)))+(((cj7)*(x1076)))+(((IkReal(-1.00000000000000))*(x1078)*(x1079)))+(((IkReal(-1.00000000000000))*(cj3)*(r11)*(sj8)*(x1072)))+(((IkReal(-1.00000000000000))*(r00)*(x1072)*(x1074)))+(((r10)*(sj7)*(x1071))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1082=((cj7)*(sj5));
IkReal x1083=((r21)*(sj8));
IkReal x1084=((cj5)*(cj7));
IkReal x1085=((cj8)*(r20));
IkReal x1086=((sj5)*(sj7));
IkReal x1087=((IkReal(1.00000000000000))*(cj5)*(sj7));
if( IKabs(((gconst5)*(((((x1082)*(x1085)))+(((IkReal(-1.00000000000000))*(x1082)*(x1083)))+(((r22)*(x1086)))+(((r22)*(x1084)))+(((IkReal(-1.00000000000000))*(x1085)*(x1087)))+(((cj5)*(sj7)*(x1083))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst5)*(((((IkReal(-1.00000000000000))*(x1085)*(x1086)))+(((r22)*(x1082)))+(((IkReal(-1.00000000000000))*(x1084)*(x1085)))+(((IkReal(-1.00000000000000))*(r22)*(x1087)))+(((x1083)*(x1084)))+(((x1083)*(x1086))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst5)*(((((x1082)*(x1085)))+(((IkReal(-1.00000000000000))*(x1082)*(x1083)))+(((r22)*(x1086)))+(((r22)*(x1084)))+(((IkReal(-1.00000000000000))*(x1085)*(x1087)))+(((cj5)*(sj7)*(x1083)))))), ((gconst5)*(((((IkReal(-1.00000000000000))*(x1085)*(x1086)))+(((r22)*(x1082)))+(((IkReal(-1.00000000000000))*(x1084)*(x1085)))+(((IkReal(-1.00000000000000))*(r22)*(x1087)))+(((x1083)*(x1084)))+(((x1083)*(x1086)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1088=IKcos(j4);
IkReal x1089=IKsin(j4);
IkReal x1090=((IkReal(1.00000000000000))*(cj7));
IkReal x1091=((cj8)*(r20));
IkReal x1092=((cj3)*(r02));
IkReal x1093=((IkReal(1.00000000000000))*(sj7));
IkReal x1094=((sj3)*(sj7));
IkReal x1095=((r21)*(sj8));
IkReal x1096=((IkReal(1.00000000000000))*(cj5));
IkReal x1097=((cj8)*(r10));
IkReal x1098=((sj5)*(x1089));
IkReal x1099=((sj5)*(x1088));
IkReal x1100=((r11)*(sj3)*(sj8));
IkReal x1101=((cj3)*(cj8)*(r00));
IkReal x1102=((cj3)*(r01)*(sj8));
IkReal x1103=((x1088)*(x1096));
evalcond[0]=((x1098)+(((IkReal(-1.00000000000000))*(x1090)*(x1091)))+(((cj7)*(x1095)))+(((IkReal(-1.00000000000000))*(x1103)))+(((IkReal(-1.00000000000000))*(r22)*(x1093))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1091)*(x1093)))+(((IkReal(-1.00000000000000))*(x1089)*(x1096)))+(((IkReal(-1.00000000000000))*(x1099)))+(((sj7)*(x1095)))+(((cj7)*(r22))));
evalcond[2]=((((cj5)*(x1089)))+(((cj7)*(x1101)))+(((IkReal(-1.00000000000000))*(x1090)*(x1100)))+(((IkReal(-1.00000000000000))*(x1090)*(x1102)))+(x1099)+(((cj7)*(sj3)*(x1097)))+(((r12)*(x1094)))+(((sj7)*(x1092))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r12)*(sj3)*(x1090)))+(x1098)+(((IkReal(-1.00000000000000))*(x1093)*(x1102)))+(((IkReal(-1.00000000000000))*(x1093)*(x1100)))+(((IkReal(-1.00000000000000))*(x1090)*(x1092)))+(((x1094)*(x1097)))+(((sj7)*(x1101)))+(((IkReal(-1.00000000000000))*(x1103))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1104=((sj5)*(sj6));
IkReal x1105=((r22)*(sj7));
IkReal x1106=((r20)*(sj8));
IkReal x1107=((cj8)*(r21));
IkReal x1108=((cj5)*(sj6));
IkReal x1109=((cj7)*(cj8)*(r20));
IkReal x1110=((cj7)*(r21)*(sj8));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(x1104)*(x1110)))+(((cj5)*(x1107)))+(((cj5)*(x1106)))+(((x1104)*(x1105)))+(((x1104)*(x1109))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((x1108)*(x1110)))+(((IkReal(-1.00000000000000))*(x1105)*(x1108)))+(((IkReal(-1.00000000000000))*(x1108)*(x1109)))+(((sj5)*(x1107)))+(((sj5)*(x1106))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(x1104)*(x1110)))+(((cj5)*(x1107)))+(((cj5)*(x1106)))+(((x1104)*(x1105)))+(((x1104)*(x1109)))))), ((gconst3)*(((((x1108)*(x1110)))+(((IkReal(-1.00000000000000))*(x1105)*(x1108)))+(((IkReal(-1.00000000000000))*(x1108)*(x1109)))+(((sj5)*(x1107)))+(((sj5)*(x1106)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1111=IKsin(j4);
IkReal x1112=IKcos(j4);
IkReal x1113=((IkReal(1.00000000000000))*(cj8));
IkReal x1114=((cj3)*(r01));
IkReal x1115=((IkReal(1.00000000000000))*(sj8));
IkReal x1116=((r11)*(sj3));
IkReal x1117=((cj3)*(r00));
IkReal x1118=((IkReal(1.00000000000000))*(sj6));
IkReal x1119=((IkReal(1.00000000000000))*(cj7));
IkReal x1120=((cj3)*(r02));
IkReal x1121=((sj3)*(sj7));
IkReal x1122=((cj7)*(cj8));
IkReal x1123=((r21)*(sj8));
IkReal x1124=((r10)*(sj3));
IkReal x1125=((sj5)*(x1112));
IkReal x1126=((cj5)*(x1112));
IkReal x1127=((cj6)*(x1111));
IkReal x1128=((cj5)*(x1111));
IkReal x1129=((sj5)*(x1111));
evalcond[0]=((((cj8)*(r21)))+(((IkReal(-1.00000000000000))*(x1118)*(x1125)))+(((IkReal(-1.00000000000000))*(x1118)*(x1128)))+(((r20)*(sj8))));
evalcond[1]=((x1129)+(((cj7)*(x1123)))+(((IkReal(-1.00000000000000))*(cj7)*(r20)*(x1113)))+(((IkReal(-1.00000000000000))*(x1126)))+(((IkReal(-1.00000000000000))*(r22)*(sj7))));
evalcond[2]=((((cj5)*(x1127)))+(((IkReal(-1.00000000000000))*(r20)*(sj7)*(x1113)))+(((sj7)*(x1123)))+(((cj7)*(r22)))+(((cj6)*(x1125))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1113)*(x1114)))+(((IkReal(-1.00000000000000))*(x1113)*(x1116)))+(((IkReal(-1.00000000000000))*(x1118)*(x1126)))+(((sj6)*(x1129)))+(((IkReal(-1.00000000000000))*(x1115)*(x1124)))+(((IkReal(-1.00000000000000))*(x1115)*(x1117))));
evalcond[4]=((x1128)+(x1125)+(((IkReal(-1.00000000000000))*(cj7)*(x1114)*(x1115)))+(((IkReal(-1.00000000000000))*(cj7)*(x1115)*(x1116)))+(((x1117)*(x1122)))+(((sj7)*(x1120)))+(((x1122)*(x1124)))+(((r12)*(x1121))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj7)*(x1115)*(x1116)))+(((IkReal(-1.00000000000000))*(sj7)*(x1114)*(x1115)))+(((IkReal(-1.00000000000000))*(sj5)*(x1127)))+(((cj8)*(r10)*(x1121)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x1119)))+(((IkReal(-1.00000000000000))*(x1119)*(x1120)))+(((cj6)*(x1126)))+(((cj8)*(sj7)*(x1117))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1130=((sj5)*(sj6));
IkReal x1131=((r22)*(sj7));
IkReal x1132=((r20)*(sj8));
IkReal x1133=((cj8)*(r21));
IkReal x1134=((cj5)*(sj6));
IkReal x1135=((cj7)*(cj8)*(r20));
IkReal x1136=((cj7)*(r21)*(sj8));
if( IKabs(((gconst2)*(((((x1130)*(x1135)))+(((x1130)*(x1131)))+(((IkReal(-1.00000000000000))*(x1130)*(x1136)))+(((cj5)*(x1132)))+(((cj5)*(x1133))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(x1131)*(x1134)))+(((x1134)*(x1136)))+(((IkReal(-1.00000000000000))*(x1134)*(x1135)))+(((sj5)*(x1133)))+(((sj5)*(x1132))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst2)*(((((x1130)*(x1135)))+(((x1130)*(x1131)))+(((IkReal(-1.00000000000000))*(x1130)*(x1136)))+(((cj5)*(x1132)))+(((cj5)*(x1133)))))), ((gconst2)*(((((IkReal(-1.00000000000000))*(x1131)*(x1134)))+(((x1134)*(x1136)))+(((IkReal(-1.00000000000000))*(x1134)*(x1135)))+(((sj5)*(x1133)))+(((sj5)*(x1132)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x1137=IKsin(j4);
IkReal x1138=IKcos(j4);
IkReal x1139=((IkReal(1.00000000000000))*(cj5));
IkReal x1140=((r21)*(sj8));
IkReal x1141=((IkReal(1.00000000000000))*(cj8)*(r20));
IkReal x1142=((sj5)*(x1138));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj6)*(x1142)))+(((cj8)*(r21)))+(((IkReal(-1.00000000000000))*(sj6)*(x1137)*(x1139)))+(((r20)*(sj8))));
evalcond[1]=((((sj5)*(x1137)))+(((IkReal(-1.00000000000000))*(x1138)*(x1139)))+(((IkReal(-1.00000000000000))*(cj7)*(x1141)))+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((cj7)*(x1140))));
evalcond[2]=((((sj7)*(x1140)))+(((cj6)*(x1142)))+(((IkReal(-1.00000000000000))*(sj7)*(x1141)))+(((cj5)*(cj6)*(x1137)))+(((cj7)*(r22))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst6;
IkReal x1143=(sj8)*(sj8);
IkReal x1144=(cj8)*(cj8);
IkReal x1145=((r00)*(r11));
IkReal x1146=((r02)*(sj7));
IkReal x1147=((cj7)*(x1144));
IkReal x1148=((IkReal(1.00000000000000))*(r12)*(sj7));
IkReal x1149=((IkReal(1.00000000000000))*(r01)*(r10));
IkReal x1150=((cj7)*(x1143));
gconst6=IKsign(((((x1145)*(x1147)))+(((IkReal(-1.00000000000000))*(x1149)*(x1150)))+(((IkReal(-1.00000000000000))*(r00)*(sj8)*(x1148)))+(((r10)*(sj8)*(x1146)))+(((cj8)*(r11)*(x1146)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x1148)))+(((IkReal(-1.00000000000000))*(x1147)*(x1149)))+(((x1145)*(x1150)))));
IkReal x1151=(sj8)*(sj8);
IkReal x1152=(cj8)*(cj8);
IkReal x1153=((r00)*(r11));
IkReal x1154=((r02)*(sj7));
IkReal x1155=((cj7)*(x1152));
IkReal x1156=((IkReal(1.00000000000000))*(r12)*(sj7));
IkReal x1157=((IkReal(1.00000000000000))*(r01)*(r10));
IkReal x1158=((cj7)*(x1151));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x1157)*(x1158)))+(((IkReal(-1.00000000000000))*(x1155)*(x1157)))+(((x1153)*(x1158)))+(((x1153)*(x1155)))+(((r10)*(sj8)*(x1154)))+(((IkReal(-1.00000000000000))*(r00)*(sj8)*(x1156)))+(((cj8)*(r11)*(x1154)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x1156))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1159=((cj6)*(cj7));
IkReal x1160=((IkReal(1.00000000000000))*(sj8));
IkReal x1161=((cj6)*(sj7));
if( IKabs(((gconst6)*(((((r12)*(x1161)))+(((cj8)*(r10)*(x1159)))+(((IkReal(-1.00000000000000))*(r11)*(x1159)*(x1160))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst6)*(((((cj8)*(r00)*(x1159)))+(((r02)*(x1161)))+(((IkReal(-1.00000000000000))*(r01)*(x1159)*(x1160))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst6)*(((((r12)*(x1161)))+(((cj8)*(r10)*(x1159)))+(((IkReal(-1.00000000000000))*(r11)*(x1159)*(x1160)))))), ((gconst6)*(((((cj8)*(r00)*(x1159)))+(((r02)*(x1161)))+(((IkReal(-1.00000000000000))*(r01)*(x1159)*(x1160)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[6];
IkReal x1162=IKsin(j3);
IkReal x1163=IKcos(j3);
IkReal x1164=((cj4)*(cj5));
IkReal x1165=((r01)*(sj8));
IkReal x1166=((cj8)*(r00));
IkReal x1167=((r00)*(sj8));
IkReal x1168=((cj8)*(r11));
IkReal x1169=((r11)*(sj8));
IkReal x1170=((sj4)*(sj5));
IkReal x1171=((r10)*(sj8));
IkReal x1172=((cj8)*(r10));
IkReal x1173=((cj7)*(x1162));
IkReal x1174=((sj7)*(x1163));
IkReal x1175=((IkReal(1.00000000000000))*(x1162));
IkReal x1176=((IkReal(1.00000000000000))*(x1163));
IkReal x1177=((cj8)*(x1162));
IkReal x1178=((IkReal(1.00000000000000))*(x1169));
IkReal x1179=((sj7)*(x1162));
IkReal x1180=((cj7)*(x1163));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1168)*(x1176)))+(cj6)+(((x1162)*(x1167)))+(((r01)*(x1177)))+(((IkReal(-1.00000000000000))*(x1171)*(x1176))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1168)*(x1175)))+(((IkReal(-1.00000000000000))*(cj8)*(r01)*(x1176)))+(((sj6)*(x1170)))+(((IkReal(-1.00000000000000))*(x1171)*(x1175)))+(((IkReal(-1.00000000000000))*(sj6)*(x1164)))+(((IkReal(-1.00000000000000))*(x1167)*(x1176))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj7)*(x1169)*(x1176)))+(((x1165)*(x1173)))+(((IkReal(-1.00000000000000))*(r02)*(sj7)*(x1175)))+(((x1172)*(x1180)))+(((IkReal(-1.00000000000000))*(x1166)*(x1173)))+(((r12)*(x1174))));
evalcond[3]=((((r02)*(x1173)))+(sj6)+(((x1165)*(x1179)))+(((x1172)*(x1174)))+(((IkReal(-1.00000000000000))*(sj7)*(x1166)*(x1175)))+(((IkReal(-1.00000000000000))*(cj7)*(r12)*(x1176)))+(((IkReal(-1.00000000000000))*(x1174)*(x1178))));
evalcond[4]=((((r02)*(x1174)))+(((IkReal(-1.00000000000000))*(x1173)*(x1178)))+(((x1166)*(x1180)))+(((cj5)*(sj4)))+(((IkReal(-1.00000000000000))*(cj7)*(x1165)*(x1176)))+(((r12)*(x1179)))+(((cj4)*(sj5)))+(((x1172)*(x1173))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x1170)))+(((x1166)*(x1174)))+(((IkReal(-1.00000000000000))*(cj7)*(r02)*(x1176)))+(((IkReal(-1.00000000000000))*(x1165)*(x1174)))+(((IkReal(-1.00000000000000))*(sj7)*(x1169)*(x1175)))+(((x1172)*(x1179)))+(((cj6)*(x1164)))+(((IkReal(-1.00000000000000))*(r12)*(x1173))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j3array[1], cj3array[1], sj3array[1];
bool j3valid[1]={false};
_nj3 = 1;
IkReal x1181=((cj6)*(sj7));
IkReal x1182=((cj6)*(cj7));
IkReal x1183=((IkReal(1.00000000000000))*(sj8));
if( IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(r11)*(x1182)*(x1183)))+(((cj8)*(r10)*(x1182)))+(((r12)*(x1181))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((cj8)*(r00)*(x1182)))+(((r02)*(x1181)))+(((IkReal(-1.00000000000000))*(r01)*(x1182)*(x1183))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j3array[0]=IKatan2(((gconst0)*(((((IkReal(-1.00000000000000))*(r11)*(x1182)*(x1183)))+(((cj8)*(r10)*(x1182)))+(((r12)*(x1181)))))), ((gconst0)*(((((cj8)*(r00)*(x1182)))+(((r02)*(x1181)))+(((IkReal(-1.00000000000000))*(r01)*(x1182)*(x1183)))))));
sj3array[0]=IKsin(j3array[0]);
cj3array[0]=IKcos(j3array[0]);
if( j3array[0] > IKPI )
{
    j3array[0]-=IK2PI;
}
else if( j3array[0] < -IKPI )
{    j3array[0]+=IK2PI;
}
j3valid[0] = true;
for(int ij3 = 0; ij3 < 1; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 1; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];
{
IkReal evalcond[3];
IkReal x1184=IKsin(j3);
IkReal x1185=IKcos(j3);
IkReal x1186=((IkReal(1.00000000000000))*(r11));
IkReal x1187=((r01)*(sj8));
IkReal x1188=((cj8)*(r10));
IkReal x1189=((IkReal(1.00000000000000))*(sj7));
IkReal x1190=((sj7)*(x1185));
IkReal x1191=((cj7)*(x1184));
IkReal x1192=((r00)*(x1184));
IkReal x1193=((cj7)*(x1185));
evalcond[0]=((cj6)+(((IkReal(-1.00000000000000))*(cj8)*(x1185)*(x1186)))+(((cj8)*(r01)*(x1184)))+(((sj8)*(x1192)))+(((IkReal(-1.00000000000000))*(r10)*(sj8)*(x1185))));
evalcond[1]=((((x1187)*(x1191)))+(((x1188)*(x1193)))+(((IkReal(-1.00000000000000))*(r02)*(x1184)*(x1189)))+(((IkReal(-1.00000000000000))*(sj8)*(x1186)*(x1193)))+(((IkReal(-1.00000000000000))*(cj8)*(r00)*(x1191)))+(((r12)*(x1190))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r12)*(x1193)))+(sj6)+(((IkReal(-1.00000000000000))*(cj8)*(x1189)*(x1192)))+(((x1188)*(x1190)))+(((sj7)*(x1184)*(x1187)))+(((r02)*(x1191)))+(((IkReal(-1.00000000000000))*(sj8)*(x1186)*(x1190))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
dummyeval[0]=sj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj6;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
IkReal x1194=((IkReal(1.00000000000000))*(cj3));
IkReal x1195=((cj7)*(r02));
IkReal x1196=((cj8)*(sj7));
IkReal x1197=((r01)*(sj3));
IkReal x1198=((IkReal(1.00000000000000))*(sj3));
IkReal x1199=((sj7)*(sj8));
IkReal x1200=((cj7)*(r12));
IkReal x1201=((cj7)*(cj8));
IkReal x1202=((cj3)*(r10));
IkReal x1203=((cj7)*(sj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r10)*(sj8)*(x1194)))+(((r00)*(sj3)*(sj8)))+(((cj8)*(x1197)))+(((IkReal(-1.00000000000000))*(cj8)*(r11)*(x1194))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r20)*(x1196)))+(((r21)*(x1199)))+(((cj7)*(r22))));
evalcond[3]=((IkReal(0.0950000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(npx)*(x1196)))+(((npy)*(x1199)))+(((cj7)*(npz))));
evalcond[4]=((((cj3)*(r12)*(sj7)))+(((IkReal(-1.00000000000000))*(r02)*(sj7)*(x1198)))+(((IkReal(-1.00000000000000))*(r00)*(x1198)*(x1201)))+(((x1197)*(x1203)))+(((x1201)*(x1202)))+(((IkReal(-1.00000000000000))*(r11)*(x1194)*(x1203))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r00)*(x1196)*(x1198)))+(((x1197)*(x1199)))+(((sj3)*(x1195)))+(((IkReal(-1.00000000000000))*(x1194)*(x1200)))+(((x1196)*(x1202)))+(((IkReal(-1.00000000000000))*(r11)*(x1194)*(x1199))));
evalcond[6]=((((IkReal(-1.00000000000000))*(r11)*(x1198)*(x1199)))+(((IkReal(-1.00000000000000))*(x1194)*(x1195)))+(((cj3)*(r00)*(x1196)))+(((IkReal(-1.00000000000000))*(r01)*(x1194)*(x1199)))+(((r10)*(sj3)*(x1196)))+(((IkReal(-1.00000000000000))*(x1198)*(x1200))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1204=((IkReal(4.00000000000000))*(npx));
IkReal x1205=((IkReal(4.00000000000000))*(npy));
if( IKabs(((IkReal(0.120000000000000))+(((IkReal(-1.00000000000000))*(sj8)*(x1204)))+(((IkReal(-1.00000000000000))*(cj8)*(x1205))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x1205)))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((IkReal(-0.360000000000000))*(cj7)))+(((cj7)*(cj8)*(x1204))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.120000000000000))+(((IkReal(-1.00000000000000))*(sj8)*(x1204)))+(((IkReal(-1.00000000000000))*(cj8)*(x1205)))))+IKsqr(((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x1205)))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((IkReal(-0.360000000000000))*(cj7)))+(((cj7)*(cj8)*(x1204)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(0.120000000000000))+(((IkReal(-1.00000000000000))*(sj8)*(x1204)))+(((IkReal(-1.00000000000000))*(cj8)*(x1205)))), ((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x1205)))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((IkReal(-0.360000000000000))*(cj7)))+(((cj7)*(cj8)*(x1204)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(-0.0300000000000000))+(((npx)*(sj8)))+(((cj8)*(npy)))+(((IkReal(0.250000000000000))*(IKsin(j5)))));
evalcond[1]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(npz)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((IkReal(0.250000000000000))*(IKcos(j5)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst18;
gconst18=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1206=((sj5)*(sj8));
IkReal x1207=((IkReal(1.00000000000000))*(cj7));
IkReal x1208=((cj8)*(sj5));
IkReal x1209=((r22)*(sj7));
IkReal x1210=((cj5)*(r20));
IkReal x1211=((cj5)*(r21));
if( IKabs(((gconst18)*(((((cj7)*(r20)*(x1208)))+(((sj5)*(x1209)))+(((IkReal(-1.00000000000000))*(r21)*(x1206)*(x1207)))+(((sj8)*(x1210)))+(((cj8)*(x1211))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst18)*(((((IkReal(-1.00000000000000))*(cj5)*(x1209)))+(((r21)*(x1208)))+(((r20)*(x1206)))+(((IkReal(-1.00000000000000))*(cj8)*(x1207)*(x1210)))+(((cj7)*(sj8)*(x1211))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst18)*(((((cj7)*(r20)*(x1208)))+(((sj5)*(x1209)))+(((IkReal(-1.00000000000000))*(r21)*(x1206)*(x1207)))+(((sj8)*(x1210)))+(((cj8)*(x1211)))))), ((gconst18)*(((((IkReal(-1.00000000000000))*(cj5)*(x1209)))+(((r21)*(x1208)))+(((r20)*(x1206)))+(((IkReal(-1.00000000000000))*(cj8)*(x1207)*(x1210)))+(((cj7)*(sj8)*(x1211)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1212=IKsin(j4);
IkReal x1213=IKcos(j4);
IkReal x1214=((IkReal(1.00000000000000))*(cj8));
IkReal x1215=((cj3)*(r01));
IkReal x1216=((cj3)*(r00));
IkReal x1217=((cj7)*(cj8));
IkReal x1218=((IkReal(1.00000000000000))*(cj5));
IkReal x1219=((IkReal(1.00000000000000))*(sj8));
IkReal x1220=((r11)*(sj3));
IkReal x1221=((r10)*(sj3));
IkReal x1222=((sj5)*(x1212));
IkReal x1223=((sj5)*(x1213));
IkReal x1224=((x1213)*(x1218));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1223)))+(((cj8)*(r21)))+(((IkReal(-1.00000000000000))*(x1212)*(x1218)))+(((r20)*(sj8))));
evalcond[1]=((x1222)+(((IkReal(-1.00000000000000))*(cj7)*(r20)*(x1214)))+(((IkReal(-1.00000000000000))*(x1224)))+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((cj7)*(r21)*(sj8))));
evalcond[2]=((x1222)+(((IkReal(-1.00000000000000))*(x1224)))+(((IkReal(-1.00000000000000))*(x1214)*(x1220)))+(((IkReal(-1.00000000000000))*(x1214)*(x1215)))+(((IkReal(-1.00000000000000))*(x1216)*(x1219)))+(((IkReal(-1.00000000000000))*(x1219)*(x1221))));
evalcond[3]=((((r12)*(sj3)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(x1219)*(x1220)))+(x1223)+(((x1217)*(x1221)))+(((cj5)*(x1212)))+(((cj3)*(r02)*(sj7)))+(((x1216)*(x1217)))+(((IkReal(-1.00000000000000))*(cj7)*(x1215)*(x1219))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
IkReal x1225=((IkReal(1.00000000000000))*(cj3));
IkReal x1226=((cj7)*(r02));
IkReal x1227=((cj8)*(sj7));
IkReal x1228=((r01)*(sj3));
IkReal x1229=((IkReal(1.00000000000000))*(sj3));
IkReal x1230=((sj7)*(sj8));
IkReal x1231=((cj7)*(r12));
IkReal x1232=((cj7)*(cj8));
IkReal x1233=((cj3)*(r10));
IkReal x1234=((cj7)*(sj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r10)*(sj8)*(x1225)))+(((r00)*(sj3)*(sj8)))+(((IkReal(-1.00000000000000))*(cj8)*(r11)*(x1225)))+(((cj8)*(x1228))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r20)*(x1227)))+(((cj7)*(r22)))+(((r21)*(x1230))));
evalcond[3]=((IkReal(-0.0950000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((npy)*(x1230)))+(((cj7)*(npz)))+(((IkReal(-1.00000000000000))*(npx)*(x1227))));
evalcond[4]=((((cj3)*(r12)*(sj7)))+(((IkReal(-1.00000000000000))*(r02)*(sj7)*(x1229)))+(((x1228)*(x1234)))+(((IkReal(-1.00000000000000))*(r11)*(x1225)*(x1234)))+(((x1232)*(x1233)))+(((IkReal(-1.00000000000000))*(r00)*(x1229)*(x1232))));
evalcond[5]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x1225)*(x1231)))+(((sj3)*(x1226)))+(((IkReal(-1.00000000000000))*(r00)*(x1227)*(x1229)))+(((x1228)*(x1230)))+(((IkReal(-1.00000000000000))*(r11)*(x1225)*(x1230)))+(((x1227)*(x1233))));
evalcond[6]=((((IkReal(-1.00000000000000))*(x1225)*(x1226)))+(((cj3)*(r00)*(x1227)))+(((r10)*(sj3)*(x1227)))+(((IkReal(-1.00000000000000))*(x1229)*(x1231)))+(((IkReal(-1.00000000000000))*(r01)*(x1225)*(x1230)))+(((IkReal(-1.00000000000000))*(r11)*(x1229)*(x1230))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1235=((IkReal(4.00000000000000))*(npx));
IkReal x1236=((IkReal(4.00000000000000))*(npy));
if( IKabs(((IkReal(0.120000000000000))+(((cj8)*(x1236)))+(((sj8)*(x1235))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.940000000000000))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((cj7)*(cj8)*(x1235)))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x1236)))+(((IkReal(-0.360000000000000))*(cj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.120000000000000))+(((cj8)*(x1236)))+(((sj8)*(x1235)))))+IKsqr(((IkReal(-0.940000000000000))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((cj7)*(cj8)*(x1235)))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x1236)))+(((IkReal(-0.360000000000000))*(cj7)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(0.120000000000000))+(((cj8)*(x1236)))+(((sj8)*(x1235)))), ((IkReal(-0.940000000000000))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((cj7)*(cj8)*(x1235)))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x1236)))+(((IkReal(-0.360000000000000))*(cj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0300000000000000))+(((npx)*(sj8)))+(((cj8)*(npy)))+(((IkReal(-0.250000000000000))*(IKsin(j5)))));
evalcond[1]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(npz)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(cj8)*(npx)))+(((cj7)*(npy)*(sj8)))+(((IkReal(0.250000000000000))*(IKcos(j5)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst19;
gconst19=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1237=((r22)*(sj7));
IkReal x1238=((cj8)*(r21));
IkReal x1239=((sj5)*(sj8));
IkReal x1240=((IkReal(1.00000000000000))*(sj5));
IkReal x1241=((cj5)*(cj7));
IkReal x1242=((cj8)*(r20));
if( IKabs(((gconst19)*(((((IkReal(-1.00000000000000))*(cj7)*(x1240)*(x1242)))+(((cj5)*(r20)*(sj8)))+(((cj5)*(x1238)))+(((cj7)*(r21)*(x1239)))+(((IkReal(-1.00000000000000))*(x1237)*(x1240))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst19)*(((((r20)*(x1239)))+(((sj5)*(x1238)))+(((cj5)*(x1237)))+(((IkReal(-1.00000000000000))*(r21)*(sj8)*(x1241)))+(((x1241)*(x1242))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst19)*(((((IkReal(-1.00000000000000))*(cj7)*(x1240)*(x1242)))+(((cj5)*(r20)*(sj8)))+(((cj5)*(x1238)))+(((cj7)*(r21)*(x1239)))+(((IkReal(-1.00000000000000))*(x1237)*(x1240)))))), ((gconst19)*(((((r20)*(x1239)))+(((sj5)*(x1238)))+(((cj5)*(x1237)))+(((IkReal(-1.00000000000000))*(r21)*(sj8)*(x1241)))+(((x1241)*(x1242)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1243=IKsin(j4);
IkReal x1244=IKcos(j4);
IkReal x1245=((IkReal(1.00000000000000))*(cj8));
IkReal x1246=((cj3)*(r01));
IkReal x1247=((cj3)*(r00));
IkReal x1248=((cj7)*(cj8));
IkReal x1249=((r11)*(sj3));
IkReal x1250=((IkReal(1.00000000000000))*(sj8));
IkReal x1251=((r10)*(sj3));
IkReal x1252=((sj5)*(x1244));
IkReal x1253=((cj5)*(x1243));
IkReal x1254=((cj5)*(x1244));
IkReal x1255=((sj5)*(x1243));
IkReal x1256=((x1252)+(x1253));
evalcond[0]=((x1256)+(((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[1]=((x1255)+(((IkReal(-1.00000000000000))*(cj7)*(r20)*(x1245)))+(((IkReal(-1.00000000000000))*(r22)*(sj7)))+(((IkReal(-1.00000000000000))*(x1254)))+(((cj7)*(r21)*(sj8))));
evalcond[2]=((x1254)+(((IkReal(-1.00000000000000))*(x1245)*(x1246)))+(((IkReal(-1.00000000000000))*(x1245)*(x1249)))+(((IkReal(-1.00000000000000))*(x1247)*(x1250)))+(((IkReal(-1.00000000000000))*(x1250)*(x1251)))+(((IkReal(-1.00000000000000))*(x1255))));
evalcond[3]=((((r12)*(sj3)*(sj7)))+(x1256)+(((IkReal(-1.00000000000000))*(cj7)*(x1246)*(x1250)))+(((x1247)*(x1248)))+(((cj3)*(r02)*(sj7)))+(((IkReal(-1.00000000000000))*(cj7)*(x1249)*(x1250)))+(((x1248)*(x1251))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
IkReal x1257=((cj3)*(cj8));
IkReal x1258=((r01)*(sj3));
IkReal x1259=((r02)*(sj3));
IkReal x1260=((IkReal(1.00000000000000))*(sj7));
IkReal x1261=((IkReal(1.00000000000000))*(r11));
IkReal x1262=((cj3)*(r12));
IkReal x1263=((IkReal(1.00000000000000))*(cj7));
IkReal x1264=((cj8)*(sj3));
IkReal x1265=((sj3)*(sj8));
IkReal x1266=((IkReal(1.00000000000000))*(cj3)*(sj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r10)*(x1266)))+(((cj8)*(x1258)))+(((IkReal(-1.00000000000000))*(x1257)*(x1261)))+(((r00)*(x1265))));
evalcond[4]=((((IkReal(-1.00000000000000))*(r01)*(x1257)))+(((IkReal(-1.00000000000000))*(r10)*(x1265)))+(((IkReal(-1.00000000000000))*(x1261)*(x1264)))+(((IkReal(-1.00000000000000))*(r00)*(x1266))));
evalcond[5]=((((IkReal(-1.00000000000000))*(r00)*(x1263)*(x1264)))+(((sj7)*(x1262)))+(((cj7)*(r10)*(x1257)))+(((cj7)*(sj8)*(x1258)))+(((IkReal(-1.00000000000000))*(x1259)*(x1260)))+(((IkReal(-1.00000000000000))*(cj3)*(cj7)*(sj8)*(x1261))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj3)*(r11)*(sj8)*(x1260)))+(((r10)*(sj7)*(x1257)))+(((cj7)*(x1259)))+(((sj7)*(sj8)*(x1258)))+(((IkReal(-1.00000000000000))*(x1262)*(x1263)))+(((IkReal(-1.00000000000000))*(r00)*(x1260)*(x1264))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1267=((IkReal(4.00000000000000))*(sj7));
IkReal x1268=((npy)*(sj8));
IkReal x1269=((IkReal(4.00000000000000))*(cj7));
IkReal x1270=((cj8)*(npx));
if( IKabs(((IkReal(0.120000000000000))+(((IkReal(0.360000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x1267)*(x1270)))+(((npz)*(x1269)))+(((x1267)*(x1268))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.940000000000000))+(((x1269)*(x1270)))+(((IkReal(-1.00000000000000))*(x1268)*(x1269)))+(((npz)*(x1267)))+(((IkReal(-0.360000000000000))*(cj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.120000000000000))+(((IkReal(0.360000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x1267)*(x1270)))+(((npz)*(x1269)))+(((x1267)*(x1268)))))+IKsqr(((IkReal(-0.940000000000000))+(((x1269)*(x1270)))+(((IkReal(-1.00000000000000))*(x1268)*(x1269)))+(((npz)*(x1267)))+(((IkReal(-0.360000000000000))*(cj7)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(0.120000000000000))+(((IkReal(0.360000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x1267)*(x1270)))+(((npz)*(x1269)))+(((x1267)*(x1268)))), ((IkReal(-0.940000000000000))+(((x1269)*(x1270)))+(((IkReal(-1.00000000000000))*(x1268)*(x1269)))+(((npz)*(x1267)))+(((IkReal(-0.360000000000000))*(cj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x1271=((IkReal(1.00000000000000))*(sj7));
IkReal x1272=((npy)*(sj8));
IkReal x1273=((cj8)*(npx));
evalcond[0]=((IkReal(0.235000000000000))+(((cj7)*(x1272)))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(npz)*(x1271)))+(((IkReal(-1.00000000000000))*(cj7)*(x1273)))+(((IkReal(0.250000000000000))*(IKcos(j5)))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x1271)*(x1273)))+(((sj7)*(x1272)))+(((IkReal(-0.250000000000000))*(IKsin(j5))))+(((cj7)*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst20;
gconst20=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1274=((cj5)*(sj7));
IkReal x1275=((cj8)*(r20));
IkReal x1276=((cj5)*(cj7));
IkReal x1277=((IkReal(1.00000000000000))*(sj5));
IkReal x1278=((r21)*(sj8));
IkReal x1279=((cj7)*(sj5));
if( IKabs(((gconst20)*(((((IkReal(-1.00000000000000))*(r22)*(sj7)*(x1277)))+(((IkReal(-1.00000000000000))*(x1274)*(x1275)))+(((r22)*(x1276)))+(((x1278)*(x1279)))+(((x1274)*(x1278)))+(((IkReal(-1.00000000000000))*(cj7)*(x1275)*(x1277))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst20)*(((((x1275)*(x1276)))+(((sj5)*(sj7)*(x1278)))+(((r22)*(x1274)))+(((r22)*(x1279)))+(((IkReal(-1.00000000000000))*(x1276)*(x1278)))+(((IkReal(-1.00000000000000))*(sj7)*(x1275)*(x1277))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst20)*(((((IkReal(-1.00000000000000))*(r22)*(sj7)*(x1277)))+(((IkReal(-1.00000000000000))*(x1274)*(x1275)))+(((r22)*(x1276)))+(((x1278)*(x1279)))+(((x1274)*(x1278)))+(((IkReal(-1.00000000000000))*(cj7)*(x1275)*(x1277)))))), ((gconst20)*(((((x1275)*(x1276)))+(((sj5)*(sj7)*(x1278)))+(((r22)*(x1274)))+(((r22)*(x1279)))+(((IkReal(-1.00000000000000))*(x1276)*(x1278)))+(((IkReal(-1.00000000000000))*(sj7)*(x1275)*(x1277)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1280=IKcos(j4);
IkReal x1281=IKsin(j4);
IkReal x1282=((IkReal(1.00000000000000))*(cj7));
IkReal x1283=((cj8)*(r20));
IkReal x1284=((cj3)*(r02));
IkReal x1285=((IkReal(1.00000000000000))*(sj7));
IkReal x1286=((sj3)*(sj7));
IkReal x1287=((r21)*(sj8));
IkReal x1288=((cj8)*(r10));
IkReal x1289=((sj5)*(x1280));
IkReal x1290=((cj5)*(x1281));
IkReal x1291=((r11)*(sj3)*(sj8));
IkReal x1292=((cj3)*(cj8)*(r00));
IkReal x1293=((cj5)*(x1280));
IkReal x1294=((cj3)*(r01)*(sj8));
IkReal x1295=((sj5)*(x1281));
IkReal x1296=((x1289)+(x1290));
evalcond[0]=((x1295)+(((IkReal(-1.00000000000000))*(r22)*(x1285)))+(((cj7)*(x1287)))+(((IkReal(-1.00000000000000))*(x1293)))+(((IkReal(-1.00000000000000))*(x1282)*(x1283))));
evalcond[1]=((x1296)+(((IkReal(-1.00000000000000))*(x1283)*(x1285)))+(((cj7)*(r22)))+(((sj7)*(x1287))));
evalcond[2]=((x1296)+(((IkReal(-1.00000000000000))*(x1282)*(x1291)))+(((IkReal(-1.00000000000000))*(x1282)*(x1294)))+(((cj7)*(sj3)*(x1288)))+(((cj7)*(x1292)))+(((sj7)*(x1284)))+(((r12)*(x1286))));
evalcond[3]=((x1293)+(((sj7)*(x1292)))+(((IkReal(-1.00000000000000))*(x1295)))+(((x1286)*(x1288)))+(((IkReal(-1.00000000000000))*(x1285)*(x1294)))+(((IkReal(-1.00000000000000))*(x1285)*(x1291)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x1282)))+(((IkReal(-1.00000000000000))*(x1282)*(x1284))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
IkReal x1297=((cj3)*(cj8));
IkReal x1298=((r01)*(sj3));
IkReal x1299=((r02)*(sj3));
IkReal x1300=((IkReal(1.00000000000000))*(sj7));
IkReal x1301=((IkReal(1.00000000000000))*(r11));
IkReal x1302=((cj3)*(r12));
IkReal x1303=((IkReal(1.00000000000000))*(cj7));
IkReal x1304=((cj8)*(sj3));
IkReal x1305=((sj3)*(sj8));
IkReal x1306=((IkReal(1.00000000000000))*(cj3)*(sj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x1297)*(x1301)))+(((IkReal(-1.00000000000000))*(r10)*(x1306)))+(((cj8)*(x1298)))+(((r00)*(x1305))));
evalcond[4]=((((IkReal(-1.00000000000000))*(r00)*(x1306)))+(((IkReal(-1.00000000000000))*(r01)*(x1297)))+(((IkReal(-1.00000000000000))*(x1301)*(x1304)))+(((IkReal(-1.00000000000000))*(r10)*(x1305))));
evalcond[5]=((((cj7)*(r10)*(x1297)))+(((IkReal(-1.00000000000000))*(x1299)*(x1300)))+(((IkReal(-1.00000000000000))*(cj3)*(cj7)*(sj8)*(x1301)))+(((cj7)*(sj8)*(x1298)))+(((IkReal(-1.00000000000000))*(r00)*(x1303)*(x1304)))+(((sj7)*(x1302))));
evalcond[6]=((((IkReal(-1.00000000000000))*(cj3)*(r11)*(sj8)*(x1300)))+(((r10)*(sj7)*(x1297)))+(((sj7)*(sj8)*(x1298)))+(((IkReal(-1.00000000000000))*(x1302)*(x1303)))+(((cj7)*(x1299)))+(((IkReal(-1.00000000000000))*(r00)*(x1300)*(x1304))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1307=((IkReal(4.00000000000000))*(sj7));
IkReal x1308=((npy)*(sj8));
IkReal x1309=((IkReal(4.00000000000000))*(cj7));
IkReal x1310=((cj8)*(npx));
if( IKabs(((IkReal(0.120000000000000))+(((IkReal(-1.00000000000000))*(x1307)*(x1308)))+(((x1307)*(x1310)))+(((IkReal(-1.00000000000000))*(npz)*(x1309)))+(((IkReal(-0.360000000000000))*(sj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(x1308)*(x1309)))+(((x1309)*(x1310)))+(((npz)*(x1307)))+(((IkReal(-0.360000000000000))*(cj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.120000000000000))+(((IkReal(-1.00000000000000))*(x1307)*(x1308)))+(((x1307)*(x1310)))+(((IkReal(-1.00000000000000))*(npz)*(x1309)))+(((IkReal(-0.360000000000000))*(sj7)))))+IKsqr(((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(x1308)*(x1309)))+(((x1309)*(x1310)))+(((npz)*(x1307)))+(((IkReal(-0.360000000000000))*(cj7)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((IkReal(0.120000000000000))+(((IkReal(-1.00000000000000))*(x1307)*(x1308)))+(((x1307)*(x1310)))+(((IkReal(-1.00000000000000))*(npz)*(x1309)))+(((IkReal(-0.360000000000000))*(sj7)))), ((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(x1308)*(x1309)))+(((x1309)*(x1310)))+(((npz)*(x1307)))+(((IkReal(-0.360000000000000))*(cj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[2];
IkReal x1311=((IkReal(1.00000000000000))*(sj7));
IkReal x1312=((npy)*(sj8));
IkReal x1313=((cj8)*(npx));
evalcond[0]=((IkReal(0.235000000000000))+(((IkReal(-1.00000000000000))*(npz)*(x1311)))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(cj7)*(x1313)))+(((cj7)*(x1312)))+(((IkReal(0.250000000000000))*(IKcos(j5)))));
evalcond[1]=((IkReal(-0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x1311)*(x1313)))+(((IkReal(0.250000000000000))*(IKsin(j5))))+(((sj7)*(x1312)))+(((cj7)*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst21;
gconst21=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1314=((cj7)*(sj5));
IkReal x1315=((r21)*(sj8));
IkReal x1316=((cj8)*(r20));
IkReal x1317=((cj5)*(cj7));
IkReal x1318=((sj5)*(sj7));
IkReal x1319=((IkReal(1.00000000000000))*(cj5)*(sj7));
if( IKabs(((gconst21)*(((((x1314)*(x1316)))+(((IkReal(-1.00000000000000))*(x1314)*(x1315)))+(((r22)*(x1318)))+(((r22)*(x1317)))+(((cj5)*(sj7)*(x1315)))+(((IkReal(-1.00000000000000))*(x1316)*(x1319))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst21)*(((((IkReal(-1.00000000000000))*(r22)*(x1319)))+(((r22)*(x1314)))+(((IkReal(-1.00000000000000))*(x1316)*(x1317)))+(((IkReal(-1.00000000000000))*(x1316)*(x1318)))+(((x1315)*(x1317)))+(((x1315)*(x1318))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst21)*(((((x1314)*(x1316)))+(((IkReal(-1.00000000000000))*(x1314)*(x1315)))+(((r22)*(x1318)))+(((r22)*(x1317)))+(((cj5)*(sj7)*(x1315)))+(((IkReal(-1.00000000000000))*(x1316)*(x1319)))))), ((gconst21)*(((((IkReal(-1.00000000000000))*(r22)*(x1319)))+(((r22)*(x1314)))+(((IkReal(-1.00000000000000))*(x1316)*(x1317)))+(((IkReal(-1.00000000000000))*(x1316)*(x1318)))+(((x1315)*(x1317)))+(((x1315)*(x1318)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1320=IKcos(j4);
IkReal x1321=IKsin(j4);
IkReal x1322=((IkReal(1.00000000000000))*(cj7));
IkReal x1323=((cj8)*(r20));
IkReal x1324=((cj3)*(r02));
IkReal x1325=((IkReal(1.00000000000000))*(sj7));
IkReal x1326=((sj3)*(sj7));
IkReal x1327=((r21)*(sj8));
IkReal x1328=((IkReal(1.00000000000000))*(cj5));
IkReal x1329=((cj8)*(r10));
IkReal x1330=((sj5)*(x1321));
IkReal x1331=((sj5)*(x1320));
IkReal x1332=((r11)*(sj3)*(sj8));
IkReal x1333=((cj3)*(cj8)*(r00));
IkReal x1334=((cj3)*(r01)*(sj8));
IkReal x1335=((x1320)*(x1328));
evalcond[0]=((x1330)+(((IkReal(-1.00000000000000))*(r22)*(x1325)))+(((IkReal(-1.00000000000000))*(x1322)*(x1323)))+(((cj7)*(x1327)))+(((IkReal(-1.00000000000000))*(x1335))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1323)*(x1325)))+(((IkReal(-1.00000000000000))*(x1331)))+(((IkReal(-1.00000000000000))*(x1321)*(x1328)))+(((sj7)*(x1327)))+(((cj7)*(r22))));
evalcond[2]=((x1331)+(((cj7)*(sj3)*(x1329)))+(((cj5)*(x1321)))+(((IkReal(-1.00000000000000))*(x1322)*(x1332)))+(((IkReal(-1.00000000000000))*(x1322)*(x1334)))+(((cj7)*(x1333)))+(((r12)*(x1326)))+(((sj7)*(x1324))));
evalcond[3]=((x1330)+(((IkReal(-1.00000000000000))*(x1325)*(x1334)))+(((IkReal(-1.00000000000000))*(x1325)*(x1332)))+(((IkReal(-1.00000000000000))*(x1322)*(x1324)))+(((sj7)*(x1333)))+(((x1326)*(x1329)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x1322)))+(((IkReal(-1.00000000000000))*(x1335))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1336=((IkReal(4.00000000000000))*(sj7));
IkReal x1337=((npy)*(sj8));
IkReal x1338=((IkReal(4.00000000000000))*(cj7));
IkReal x1339=((cj8)*(npx));
if( IKabs(((((IKabs(cj6) != 0)?((IkReal)1/(cj6)):(IkReal)1.0e30))*(((((IkReal(0.360000000000000))*(sj7)))+(((x1336)*(x1337)))+(((npz)*(x1338)))+(((IkReal(0.380000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(x1336)*(x1339)))+(((IkReal(0.120000000000000))*(cj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.940000000000000))+(((x1338)*(x1339)))+(((IkReal(-1.00000000000000))*(x1337)*(x1338)))+(((npz)*(x1336)))+(((IkReal(-0.360000000000000))*(cj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(cj6) != 0)?((IkReal)1/(cj6)):(IkReal)1.0e30))*(((((IkReal(0.360000000000000))*(sj7)))+(((x1336)*(x1337)))+(((npz)*(x1338)))+(((IkReal(0.380000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(x1336)*(x1339)))+(((IkReal(0.120000000000000))*(cj6)))))))+IKsqr(((IkReal(-0.940000000000000))+(((x1338)*(x1339)))+(((IkReal(-1.00000000000000))*(x1337)*(x1338)))+(((npz)*(x1336)))+(((IkReal(-0.360000000000000))*(cj7)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(cj6) != 0)?((IkReal)1/(cj6)):(IkReal)1.0e30))*(((((IkReal(0.360000000000000))*(sj7)))+(((x1336)*(x1337)))+(((npz)*(x1338)))+(((IkReal(0.380000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(x1336)*(x1339)))+(((IkReal(0.120000000000000))*(cj6)))))), ((IkReal(-0.940000000000000))+(((x1338)*(x1339)))+(((IkReal(-1.00000000000000))*(x1337)*(x1338)))+(((npz)*(x1336)))+(((IkReal(-0.360000000000000))*(cj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1340=IKsin(j5);
IkReal x1341=((IkReal(1.00000000000000))*(sj7));
IkReal x1342=((npy)*(sj8));
IkReal x1343=((cj8)*(npx));
IkReal x1344=((IkReal(0.250000000000000))*(x1340));
evalcond[0]=((((IkReal(-0.0300000000000000))*(sj6)))+(((npx)*(sj8)))+(((sj6)*(x1344)))+(((cj8)*(npy)))+(((IkReal(0.0950000000000000))*(cj6))));
evalcond[1]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(npz)*(x1341)))+(((cj7)*(x1342)))+(((IkReal(0.250000000000000))*(IKcos(j5))))+(((IkReal(-1.00000000000000))*(cj7)*(x1343))));
evalcond[2]=((((IkReal(0.0900000000000000))*(sj7)))+(((sj7)*(x1342)))+(((IkReal(0.0950000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(x1341)*(x1343)))+(((IkReal(-1.00000000000000))*(cj6)*(x1344)))+(((IkReal(0.0300000000000000))*(cj6)))+(((cj7)*(npz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
IkReal x1345=((cj3)*(cj8));
IkReal x1346=((IkReal(1.00000000000000))*(sj7));
IkReal x1347=((cj8)*(npx));
IkReal x1348=((cj8)*(sj3));
IkReal x1349=((npy)*(sj8));
IkReal x1350=((r02)*(sj3));
IkReal x1351=((IkReal(1.00000000000000))*(r11));
IkReal x1352=((cj3)*(r12));
IkReal x1353=((IkReal(1.00000000000000))*(cj7));
IkReal x1354=((sj3)*(sj8));
IkReal x1355=((IkReal(1.00000000000000))*(cj3)*(sj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(x1347)*(x1353)))+(((IkReal(0.250000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(npz)*(x1346)))+(((cj7)*(x1349))));
evalcond[4]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r10)*(x1355)))+(((IkReal(-1.00000000000000))*(x1345)*(x1351)))+(((r01)*(x1348)))+(((r00)*(x1354))));
evalcond[5]=((IkReal(0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((sj7)*(x1349)))+(((IkReal(-1.00000000000000))*(x1346)*(x1347)))+(((cj7)*(npz)))+(((IkReal(-0.250000000000000))*(sj5))));
evalcond[6]=((((IkReal(-1.00000000000000))*(r10)*(x1354)))+(((IkReal(-1.00000000000000))*(r00)*(x1355)))+(((IkReal(-1.00000000000000))*(x1348)*(x1351)))+(((IkReal(-1.00000000000000))*(r01)*(x1345))));
evalcond[7]=((((IkReal(-1.00000000000000))*(r00)*(x1348)*(x1353)))+(((IkReal(-1.00000000000000))*(cj3)*(cj7)*(sj8)*(x1351)))+(((IkReal(-1.00000000000000))*(x1346)*(x1350)))+(((cj7)*(r10)*(x1345)))+(((cj7)*(r01)*(x1354)))+(((sj7)*(x1352))));
evalcond[8]=((((IkReal(-1.00000000000000))*(r00)*(x1346)*(x1348)))+(((IkReal(-1.00000000000000))*(x1352)*(x1353)))+(((r10)*(sj7)*(x1345)))+(((r01)*(sj7)*(x1354)))+(((cj7)*(x1350)))+(((IkReal(-1.00000000000000))*(cj3)*(r11)*(sj8)*(x1346))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1356=((sj5)*(sj7));
IkReal x1357=((r21)*(sj8));
IkReal x1358=((cj8)*(r20));
IkReal x1359=((cj5)*(cj7));
IkReal x1360=((cj7)*(sj5));
IkReal x1361=((cj5)*(sj7));
if( IKabs(((gconst16)*(((((x1357)*(x1361)))+(((x1357)*(x1360)))+(((r22)*(x1359)))+(((IkReal(-1.00000000000000))*(x1358)*(x1360)))+(((IkReal(-1.00000000000000))*(x1358)*(x1361)))+(((IkReal(-1.00000000000000))*(r22)*(x1356))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((r22)*(x1360)))+(((r22)*(x1361)))+(((x1358)*(x1359)))+(((IkReal(-1.00000000000000))*(x1357)*(x1359)))+(((IkReal(-1.00000000000000))*(x1356)*(x1358)))+(((x1356)*(x1357))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst16)*(((((x1357)*(x1361)))+(((x1357)*(x1360)))+(((r22)*(x1359)))+(((IkReal(-1.00000000000000))*(x1358)*(x1360)))+(((IkReal(-1.00000000000000))*(x1358)*(x1361)))+(((IkReal(-1.00000000000000))*(r22)*(x1356)))))), ((gconst16)*(((((r22)*(x1360)))+(((r22)*(x1361)))+(((x1358)*(x1359)))+(((IkReal(-1.00000000000000))*(x1357)*(x1359)))+(((IkReal(-1.00000000000000))*(x1356)*(x1358)))+(((x1356)*(x1357)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1362=IKcos(j4);
IkReal x1363=IKsin(j4);
IkReal x1364=((IkReal(1.00000000000000))*(cj7));
IkReal x1365=((cj8)*(r20));
IkReal x1366=((cj3)*(r02));
IkReal x1367=((IkReal(1.00000000000000))*(sj7));
IkReal x1368=((sj3)*(sj7));
IkReal x1369=((r21)*(sj8));
IkReal x1370=((cj8)*(r10));
IkReal x1371=((sj5)*(x1362));
IkReal x1372=((cj5)*(x1363));
IkReal x1373=((r11)*(sj3)*(sj8));
IkReal x1374=((cj3)*(cj8)*(r00));
IkReal x1375=((cj5)*(x1362));
IkReal x1376=((cj3)*(r01)*(sj8));
IkReal x1377=((sj5)*(x1363));
IkReal x1378=((x1371)+(x1372));
evalcond[0]=((x1377)+(((IkReal(-1.00000000000000))*(x1364)*(x1365)))+(((IkReal(-1.00000000000000))*(x1375)))+(((IkReal(-1.00000000000000))*(r22)*(x1367)))+(((cj7)*(x1369))));
evalcond[1]=((x1378)+(((IkReal(-1.00000000000000))*(x1365)*(x1367)))+(((cj7)*(r22)))+(((sj7)*(x1369))));
evalcond[2]=((x1378)+(((IkReal(-1.00000000000000))*(x1364)*(x1373)))+(((IkReal(-1.00000000000000))*(x1364)*(x1376)))+(((r12)*(x1368)))+(((cj7)*(x1374)))+(((cj7)*(sj3)*(x1370)))+(((sj7)*(x1366))));
evalcond[3]=((x1375)+(((IkReal(-1.00000000000000))*(x1364)*(x1366)))+(((IkReal(-1.00000000000000))*(x1377)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x1364)))+(((x1368)*(x1370)))+(((IkReal(-1.00000000000000))*(x1367)*(x1373)))+(((IkReal(-1.00000000000000))*(x1367)*(x1376)))+(((sj7)*(x1374))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x1379=((cj3)*(cj8));
IkReal x1380=((IkReal(1.00000000000000))*(sj7));
IkReal x1381=((cj8)*(npx));
IkReal x1382=((cj8)*(sj3));
IkReal x1383=((npy)*(sj8));
IkReal x1384=((r02)*(sj3));
IkReal x1385=((IkReal(1.00000000000000))*(r11));
IkReal x1386=((cj3)*(r12));
IkReal x1387=((IkReal(1.00000000000000))*(cj7));
IkReal x1388=((sj3)*(sj8));
IkReal x1389=((IkReal(1.00000000000000))*(cj3)*(sj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(npz)*(x1380)))+(((cj7)*(x1383)))+(((IkReal(0.250000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(x1381)*(x1387))));
evalcond[4]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r10)*(x1389)))+(((r00)*(x1388)))+(((r01)*(x1382)))+(((IkReal(-1.00000000000000))*(x1379)*(x1385))));
evalcond[5]=((IkReal(-0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((sj7)*(x1383)))+(((IkReal(0.250000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(x1380)*(x1381)))+(((cj7)*(npz))));
evalcond[6]=((((IkReal(-1.00000000000000))*(r10)*(x1388)))+(((IkReal(-1.00000000000000))*(r01)*(x1379)))+(((IkReal(-1.00000000000000))*(x1382)*(x1385)))+(((IkReal(-1.00000000000000))*(r00)*(x1389))));
evalcond[7]=((((sj7)*(x1386)))+(((cj7)*(r01)*(x1388)))+(((IkReal(-1.00000000000000))*(cj3)*(cj7)*(sj8)*(x1385)))+(((IkReal(-1.00000000000000))*(x1380)*(x1384)))+(((cj7)*(r10)*(x1379)))+(((IkReal(-1.00000000000000))*(r00)*(x1382)*(x1387))));
evalcond[8]=((((IkReal(-1.00000000000000))*(r00)*(x1380)*(x1382)))+(((r01)*(sj7)*(x1388)))+(((IkReal(-1.00000000000000))*(cj3)*(r11)*(sj8)*(x1380)))+(((cj7)*(x1384)))+(((r10)*(sj7)*(x1379)))+(((IkReal(-1.00000000000000))*(x1386)*(x1387))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1390=((cj7)*(sj5));
IkReal x1391=((r21)*(sj8));
IkReal x1392=((cj5)*(cj7));
IkReal x1393=((cj8)*(r20));
IkReal x1394=((sj5)*(sj7));
IkReal x1395=((IkReal(1.00000000000000))*(cj5)*(sj7));
if( IKabs(((gconst17)*(((((IkReal(-1.00000000000000))*(x1390)*(x1391)))+(((IkReal(-1.00000000000000))*(x1393)*(x1395)))+(((x1390)*(x1393)))+(((cj5)*(sj7)*(x1391)))+(((r22)*(x1392)))+(((r22)*(x1394))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((IkReal(-1.00000000000000))*(r22)*(x1395)))+(((IkReal(-1.00000000000000))*(x1393)*(x1394)))+(((x1391)*(x1392)))+(((x1391)*(x1394)))+(((r22)*(x1390)))+(((IkReal(-1.00000000000000))*(x1392)*(x1393))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst17)*(((((IkReal(-1.00000000000000))*(x1390)*(x1391)))+(((IkReal(-1.00000000000000))*(x1393)*(x1395)))+(((x1390)*(x1393)))+(((cj5)*(sj7)*(x1391)))+(((r22)*(x1392)))+(((r22)*(x1394)))))), ((gconst17)*(((((IkReal(-1.00000000000000))*(r22)*(x1395)))+(((IkReal(-1.00000000000000))*(x1393)*(x1394)))+(((x1391)*(x1392)))+(((x1391)*(x1394)))+(((r22)*(x1390)))+(((IkReal(-1.00000000000000))*(x1392)*(x1393)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1396=IKcos(j4);
IkReal x1397=IKsin(j4);
IkReal x1398=((IkReal(1.00000000000000))*(cj7));
IkReal x1399=((cj8)*(r20));
IkReal x1400=((cj3)*(r02));
IkReal x1401=((IkReal(1.00000000000000))*(sj7));
IkReal x1402=((sj3)*(sj7));
IkReal x1403=((r21)*(sj8));
IkReal x1404=((IkReal(1.00000000000000))*(cj5));
IkReal x1405=((cj8)*(r10));
IkReal x1406=((sj5)*(x1397));
IkReal x1407=((sj5)*(x1396));
IkReal x1408=((r11)*(sj3)*(sj8));
IkReal x1409=((cj3)*(cj8)*(r00));
IkReal x1410=((cj3)*(r01)*(sj8));
IkReal x1411=((x1396)*(x1404));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1411)))+(((IkReal(-1.00000000000000))*(r22)*(x1401)))+(((cj7)*(x1403)))+(x1406)+(((IkReal(-1.00000000000000))*(x1398)*(x1399))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1407)))+(((IkReal(-1.00000000000000))*(x1399)*(x1401)))+(((sj7)*(x1403)))+(((IkReal(-1.00000000000000))*(x1397)*(x1404)))+(((cj7)*(r22))));
evalcond[2]=((((sj7)*(x1400)))+(((IkReal(-1.00000000000000))*(x1398)*(x1408)))+(((r12)*(x1402)))+(((IkReal(-1.00000000000000))*(x1398)*(x1410)))+(((cj5)*(x1397)))+(((cj7)*(x1409)))+(x1407)+(((cj7)*(sj3)*(x1405))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1411)))+(((sj7)*(x1409)))+(((IkReal(-1.00000000000000))*(x1398)*(x1400)))+(((IkReal(-1.00000000000000))*(x1401)*(x1410)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x1398)))+(x1406)+(((IkReal(-1.00000000000000))*(x1401)*(x1408)))+(((x1402)*(x1405))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1412=((sj5)*(sj6));
IkReal x1413=((r22)*(sj7));
IkReal x1414=((r20)*(sj8));
IkReal x1415=((cj8)*(r21));
IkReal x1416=((cj5)*(sj6));
IkReal x1417=((cj7)*(cj8)*(r20));
IkReal x1418=((cj7)*(r21)*(sj8));
if( IKabs(((gconst15)*(((((x1412)*(x1413)))+(((x1412)*(x1417)))+(((cj5)*(x1415)))+(((cj5)*(x1414)))+(((IkReal(-1.00000000000000))*(x1412)*(x1418))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((IkReal(-1.00000000000000))*(x1416)*(x1417)))+(((sj5)*(x1415)))+(((sj5)*(x1414)))+(((x1416)*(x1418)))+(((IkReal(-1.00000000000000))*(x1413)*(x1416))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst15)*(((((x1412)*(x1413)))+(((x1412)*(x1417)))+(((cj5)*(x1415)))+(((cj5)*(x1414)))+(((IkReal(-1.00000000000000))*(x1412)*(x1418)))))), ((gconst15)*(((((IkReal(-1.00000000000000))*(x1416)*(x1417)))+(((sj5)*(x1415)))+(((sj5)*(x1414)))+(((x1416)*(x1418)))+(((IkReal(-1.00000000000000))*(x1413)*(x1416)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1419=IKsin(j4);
IkReal x1420=IKcos(j4);
IkReal x1421=((IkReal(1.00000000000000))*(cj8));
IkReal x1422=((cj3)*(r01));
IkReal x1423=((IkReal(1.00000000000000))*(sj8));
IkReal x1424=((r11)*(sj3));
IkReal x1425=((cj3)*(r00));
IkReal x1426=((IkReal(1.00000000000000))*(sj6));
IkReal x1427=((IkReal(1.00000000000000))*(cj7));
IkReal x1428=((cj3)*(r02));
IkReal x1429=((sj3)*(sj7));
IkReal x1430=((cj7)*(cj8));
IkReal x1431=((r21)*(sj8));
IkReal x1432=((r10)*(sj3));
IkReal x1433=((sj5)*(x1420));
IkReal x1434=((cj5)*(x1420));
IkReal x1435=((cj6)*(x1419));
IkReal x1436=((cj5)*(x1419));
IkReal x1437=((sj5)*(x1419));
evalcond[0]=((((cj8)*(r21)))+(((IkReal(-1.00000000000000))*(x1426)*(x1433)))+(((IkReal(-1.00000000000000))*(x1426)*(x1436)))+(((r20)*(sj8))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1434)))+(((cj7)*(x1431)))+(x1437)+(((IkReal(-1.00000000000000))*(cj7)*(r20)*(x1421)))+(((IkReal(-1.00000000000000))*(r22)*(sj7))));
evalcond[2]=((((cj5)*(x1435)))+(((sj7)*(x1431)))+(((cj6)*(x1433)))+(((IkReal(-1.00000000000000))*(r20)*(sj7)*(x1421)))+(((cj7)*(r22))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1421)*(x1422)))+(((IkReal(-1.00000000000000))*(x1421)*(x1424)))+(((sj6)*(x1437)))+(((IkReal(-1.00000000000000))*(x1423)*(x1425)))+(((IkReal(-1.00000000000000))*(x1426)*(x1434)))+(((IkReal(-1.00000000000000))*(x1423)*(x1432))));
evalcond[4]=((((x1430)*(x1432)))+(((x1425)*(x1430)))+(((IkReal(-1.00000000000000))*(cj7)*(x1422)*(x1423)))+(x1436)+(x1433)+(((r12)*(x1429)))+(((IkReal(-1.00000000000000))*(cj7)*(x1423)*(x1424)))+(((sj7)*(x1428))));
evalcond[5]=((((IkReal(-1.00000000000000))*(sj5)*(x1435)))+(((IkReal(-1.00000000000000))*(x1427)*(x1428)))+(((IkReal(-1.00000000000000))*(sj7)*(x1423)*(x1424)))+(((IkReal(-1.00000000000000))*(sj7)*(x1422)*(x1423)))+(((cj8)*(sj7)*(x1425)))+(((cj6)*(x1434)))+(((cj8)*(r10)*(x1429)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x1427))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x1438=((IkReal(4.00000000000000))*(npx));
IkReal x1439=((IkReal(4.00000000000000))*(npy));
if( IKabs(((((IKabs(sj6) != 0)?((IkReal)1/(sj6)):(IkReal)1.0e30))*(((((IkReal(-0.380000000000000))*(cj6)))+(((IkReal(-1.00000000000000))*(sj8)*(x1438)))+(((IkReal(-1.00000000000000))*(cj8)*(x1439)))+(((IkReal(0.120000000000000))*(sj6))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x1439)))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((cj7)*(cj8)*(x1438)))+(((IkReal(-0.360000000000000))*(cj7))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(sj6) != 0)?((IkReal)1/(sj6)):(IkReal)1.0e30))*(((((IkReal(-0.380000000000000))*(cj6)))+(((IkReal(-1.00000000000000))*(sj8)*(x1438)))+(((IkReal(-1.00000000000000))*(cj8)*(x1439)))+(((IkReal(0.120000000000000))*(sj6)))))))+IKsqr(((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x1439)))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((cj7)*(cj8)*(x1438)))+(((IkReal(-0.360000000000000))*(cj7)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(sj6) != 0)?((IkReal)1/(sj6)):(IkReal)1.0e30))*(((((IkReal(-0.380000000000000))*(cj6)))+(((IkReal(-1.00000000000000))*(sj8)*(x1438)))+(((IkReal(-1.00000000000000))*(cj8)*(x1439)))+(((IkReal(0.120000000000000))*(sj6)))))), ((IkReal(-0.940000000000000))+(((IkReal(-1.00000000000000))*(cj7)*(sj8)*(x1439)))+(((IkReal(4.00000000000000))*(npz)*(sj7)))+(((cj7)*(cj8)*(x1438)))+(((IkReal(-0.360000000000000))*(cj7)))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x1440=IKsin(j5);
IkReal x1441=((IkReal(1.00000000000000))*(sj7));
IkReal x1442=((npy)*(sj8));
IkReal x1443=((cj8)*(npx));
IkReal x1444=((IkReal(0.250000000000000))*(x1440));
evalcond[0]=((((IkReal(-0.0300000000000000))*(sj6)))+(((sj6)*(x1444)))+(((npx)*(sj8)))+(((cj8)*(npy)))+(((IkReal(0.0950000000000000))*(cj6))));
evalcond[1]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(npz)*(x1441)))+(((IkReal(-1.00000000000000))*(cj7)*(x1443)))+(((cj7)*(x1442)))+(((IkReal(0.250000000000000))*(IKcos(j5)))));
evalcond[2]=((((IkReal(0.0900000000000000))*(sj7)))+(((sj7)*(x1442)))+(((IkReal(0.0950000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(x1441)*(x1443)))+(((IkReal(0.0300000000000000))*(cj6)))+(((cj7)*(npz)))+(((IkReal(-1.00000000000000))*(cj6)*(x1444))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst15;
gconst15=IKsign(((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5))))));
dummyeval[0]=((((sj6)*((cj5)*(cj5))))+(((sj6)*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[9];
IkReal x1445=((cj3)*(cj8));
IkReal x1446=((IkReal(1.00000000000000))*(sj7));
IkReal x1447=((cj8)*(npx));
IkReal x1448=((cj8)*(sj3));
IkReal x1449=((npy)*(sj8));
IkReal x1450=((r02)*(sj3));
IkReal x1451=((IkReal(1.00000000000000))*(r11));
IkReal x1452=((cj3)*(r12));
IkReal x1453=((IkReal(1.00000000000000))*(cj7));
IkReal x1454=((sj3)*(sj8));
IkReal x1455=((IkReal(1.00000000000000))*(cj3)*(sj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(0.235000000000000))+(((IkReal(-1.00000000000000))*(x1447)*(x1453)))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(npz)*(x1446)))+(((IkReal(0.250000000000000))*(cj5)))+(((cj7)*(x1449))));
evalcond[4]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x1445)*(x1451)))+(((r00)*(x1454)))+(((IkReal(-1.00000000000000))*(r10)*(x1455)))+(((r01)*(x1448))));
evalcond[5]=((IkReal(0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(x1446)*(x1447)))+(((sj7)*(x1449)))+(((cj7)*(npz)))+(((IkReal(-0.250000000000000))*(sj5))));
evalcond[6]=((((IkReal(-1.00000000000000))*(r10)*(x1454)))+(((IkReal(-1.00000000000000))*(x1448)*(x1451)))+(((IkReal(-1.00000000000000))*(r00)*(x1455)))+(((IkReal(-1.00000000000000))*(r01)*(x1445))));
evalcond[7]=((((sj7)*(x1452)))+(((cj7)*(r10)*(x1445)))+(((IkReal(-1.00000000000000))*(cj3)*(cj7)*(sj8)*(x1451)))+(((IkReal(-1.00000000000000))*(x1446)*(x1450)))+(((cj7)*(r01)*(x1454)))+(((IkReal(-1.00000000000000))*(r00)*(x1448)*(x1453))));
evalcond[8]=((((r01)*(sj7)*(x1454)))+(((cj7)*(x1450)))+(((IkReal(-1.00000000000000))*(cj3)*(r11)*(sj8)*(x1446)))+(((IkReal(-1.00000000000000))*(r00)*(x1446)*(x1448)))+(((IkReal(-1.00000000000000))*(x1452)*(x1453)))+(((r10)*(sj7)*(x1445))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst16;
gconst16=IKsign(((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5))))));
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1456=((sj5)*(sj7));
IkReal x1457=((r21)*(sj8));
IkReal x1458=((cj8)*(r20));
IkReal x1459=((cj5)*(cj7));
IkReal x1460=((cj7)*(sj5));
IkReal x1461=((cj5)*(sj7));
if( IKabs(((gconst16)*(((((IkReal(-1.00000000000000))*(x1458)*(x1461)))+(((IkReal(-1.00000000000000))*(x1458)*(x1460)))+(((x1457)*(x1460)))+(((x1457)*(x1461)))+(((r22)*(x1459)))+(((IkReal(-1.00000000000000))*(r22)*(x1456))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst16)*(((((x1456)*(x1457)))+(((x1458)*(x1459)))+(((IkReal(-1.00000000000000))*(x1456)*(x1458)))+(((r22)*(x1461)))+(((r22)*(x1460)))+(((IkReal(-1.00000000000000))*(x1457)*(x1459))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst16)*(((((IkReal(-1.00000000000000))*(x1458)*(x1461)))+(((IkReal(-1.00000000000000))*(x1458)*(x1460)))+(((x1457)*(x1460)))+(((x1457)*(x1461)))+(((r22)*(x1459)))+(((IkReal(-1.00000000000000))*(r22)*(x1456)))))), ((gconst16)*(((((x1456)*(x1457)))+(((x1458)*(x1459)))+(((IkReal(-1.00000000000000))*(x1456)*(x1458)))+(((r22)*(x1461)))+(((r22)*(x1460)))+(((IkReal(-1.00000000000000))*(x1457)*(x1459)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1462=IKcos(j4);
IkReal x1463=IKsin(j4);
IkReal x1464=((IkReal(1.00000000000000))*(cj7));
IkReal x1465=((cj8)*(r20));
IkReal x1466=((cj3)*(r02));
IkReal x1467=((IkReal(1.00000000000000))*(sj7));
IkReal x1468=((sj3)*(sj7));
IkReal x1469=((r21)*(sj8));
IkReal x1470=((cj8)*(r10));
IkReal x1471=((sj5)*(x1462));
IkReal x1472=((cj5)*(x1463));
IkReal x1473=((r11)*(sj3)*(sj8));
IkReal x1474=((cj3)*(cj8)*(r00));
IkReal x1475=((cj5)*(x1462));
IkReal x1476=((cj3)*(r01)*(sj8));
IkReal x1477=((sj5)*(x1463));
IkReal x1478=((x1472)+(x1471));
evalcond[0]=((((IkReal(-1.00000000000000))*(r22)*(x1467)))+(((cj7)*(x1469)))+(((IkReal(-1.00000000000000))*(x1475)))+(((IkReal(-1.00000000000000))*(x1464)*(x1465)))+(x1477));
evalcond[1]=((x1478)+(((sj7)*(x1469)))+(((IkReal(-1.00000000000000))*(x1465)*(x1467)))+(((cj7)*(r22))));
evalcond[2]=((((cj7)*(sj3)*(x1470)))+(((r12)*(x1468)))+(x1478)+(((sj7)*(x1466)))+(((cj7)*(x1474)))+(((IkReal(-1.00000000000000))*(x1464)*(x1473)))+(((IkReal(-1.00000000000000))*(x1464)*(x1476))));
evalcond[3]=((((sj7)*(x1474)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x1464)))+(((IkReal(-1.00000000000000))*(x1477)))+(((IkReal(-1.00000000000000))*(x1464)*(x1466)))+(((IkReal(-1.00000000000000))*(x1467)*(x1473)))+(((IkReal(-1.00000000000000))*(x1467)*(x1476)))+(x1475)+(((x1468)*(x1470))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x1479=((cj3)*(cj8));
IkReal x1480=((IkReal(1.00000000000000))*(sj7));
IkReal x1481=((cj8)*(npx));
IkReal x1482=((cj8)*(sj3));
IkReal x1483=((npy)*(sj8));
IkReal x1484=((r02)*(sj3));
IkReal x1485=((IkReal(1.00000000000000))*(r11));
IkReal x1486=((cj3)*(r12));
IkReal x1487=((IkReal(1.00000000000000))*(cj7));
IkReal x1488=((sj3)*(sj8));
IkReal x1489=((IkReal(1.00000000000000))*(cj3)*(sj8));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j6)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.0950000000000000))+(((npx)*(sj8)))+(((cj8)*(npy))));
evalcond[2]=((((cj8)*(r21)))+(((r20)*(sj8))));
evalcond[3]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(x1481)*(x1487)))+(((IkReal(-1.00000000000000))*(npz)*(x1480)))+(((IkReal(0.250000000000000))*(cj5)))+(((cj7)*(x1483))));
evalcond[4]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x1479)*(x1485)))+(((r01)*(x1482)))+(((r00)*(x1488)))+(((IkReal(-1.00000000000000))*(r10)*(x1489))));
evalcond[5]=((IkReal(-0.0300000000000000))+(((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(0.250000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(x1480)*(x1481)))+(((sj7)*(x1483)))+(((cj7)*(npz))));
evalcond[6]=((((IkReal(-1.00000000000000))*(r01)*(x1479)))+(((IkReal(-1.00000000000000))*(x1482)*(x1485)))+(((IkReal(-1.00000000000000))*(r00)*(x1489)))+(((IkReal(-1.00000000000000))*(r10)*(x1488))));
evalcond[7]=((((IkReal(-1.00000000000000))*(r00)*(x1482)*(x1487)))+(((cj7)*(r10)*(x1479)))+(((IkReal(-1.00000000000000))*(x1480)*(x1484)))+(((IkReal(-1.00000000000000))*(cj3)*(cj7)*(sj8)*(x1485)))+(((sj7)*(x1486)))+(((cj7)*(r01)*(x1488))));
evalcond[8]=((((IkReal(-1.00000000000000))*(r00)*(x1480)*(x1482)))+(((IkReal(-1.00000000000000))*(x1486)*(x1487)))+(((IkReal(-1.00000000000000))*(cj3)*(r11)*(sj8)*(x1480)))+(((cj7)*(x1484)))+(((r10)*(sj7)*(x1479)))+(((r01)*(sj7)*(x1488))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst17;
gconst17=IKsign((((cj5)*(cj5))+((sj5)*(sj5))));
dummyeval[0]=(((cj5)*(cj5))+((sj5)*(sj5)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1490=((cj7)*(sj5));
IkReal x1491=((r21)*(sj8));
IkReal x1492=((cj5)*(cj7));
IkReal x1493=((cj8)*(r20));
IkReal x1494=((sj5)*(sj7));
IkReal x1495=((IkReal(1.00000000000000))*(cj5)*(sj7));
if( IKabs(((gconst17)*(((((cj5)*(sj7)*(x1491)))+(((IkReal(-1.00000000000000))*(x1493)*(x1495)))+(((r22)*(x1492)))+(((r22)*(x1494)))+(((IkReal(-1.00000000000000))*(x1490)*(x1491)))+(((x1490)*(x1493))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst17)*(((((IkReal(-1.00000000000000))*(x1492)*(x1493)))+(((IkReal(-1.00000000000000))*(x1493)*(x1494)))+(((x1491)*(x1494)))+(((x1491)*(x1492)))+(((r22)*(x1490)))+(((IkReal(-1.00000000000000))*(r22)*(x1495))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst17)*(((((cj5)*(sj7)*(x1491)))+(((IkReal(-1.00000000000000))*(x1493)*(x1495)))+(((r22)*(x1492)))+(((r22)*(x1494)))+(((IkReal(-1.00000000000000))*(x1490)*(x1491)))+(((x1490)*(x1493)))))), ((gconst17)*(((((IkReal(-1.00000000000000))*(x1492)*(x1493)))+(((IkReal(-1.00000000000000))*(x1493)*(x1494)))+(((x1491)*(x1494)))+(((x1491)*(x1492)))+(((r22)*(x1490)))+(((IkReal(-1.00000000000000))*(r22)*(x1495)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x1496=IKcos(j4);
IkReal x1497=IKsin(j4);
IkReal x1498=((IkReal(1.00000000000000))*(cj7));
IkReal x1499=((cj8)*(r20));
IkReal x1500=((cj3)*(r02));
IkReal x1501=((IkReal(1.00000000000000))*(sj7));
IkReal x1502=((sj3)*(sj7));
IkReal x1503=((r21)*(sj8));
IkReal x1504=((IkReal(1.00000000000000))*(cj5));
IkReal x1505=((cj8)*(r10));
IkReal x1506=((sj5)*(x1497));
IkReal x1507=((sj5)*(x1496));
IkReal x1508=((r11)*(sj3)*(sj8));
IkReal x1509=((cj3)*(cj8)*(r00));
IkReal x1510=((cj3)*(r01)*(sj8));
IkReal x1511=((x1496)*(x1504));
evalcond[0]=((((IkReal(-1.00000000000000))*(x1511)))+(((IkReal(-1.00000000000000))*(r22)*(x1501)))+(x1506)+(((IkReal(-1.00000000000000))*(x1498)*(x1499)))+(((cj7)*(x1503))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x1499)*(x1501)))+(((IkReal(-1.00000000000000))*(x1507)))+(((sj7)*(x1503)))+(((IkReal(-1.00000000000000))*(x1497)*(x1504)))+(((cj7)*(r22))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x1498)*(x1508)))+(((IkReal(-1.00000000000000))*(x1498)*(x1510)))+(((cj7)*(sj3)*(x1505)))+(((r12)*(x1502)))+(x1507)+(((sj7)*(x1500)))+(((cj5)*(x1497)))+(((cj7)*(x1509))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x1511)))+(((IkReal(-1.00000000000000))*(x1498)*(x1500)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x1498)))+(((IkReal(-1.00000000000000))*(x1501)*(x1510)))+(((IkReal(-1.00000000000000))*(x1501)*(x1508)))+(x1506)+(((sj7)*(x1509)))+(((x1502)*(x1505))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x1512=((sj5)*(sj6));
IkReal x1513=((r22)*(sj7));
IkReal x1514=((r20)*(sj8));
IkReal x1515=((cj8)*(r21));
IkReal x1516=((cj5)*(sj6));
IkReal x1517=((cj7)*(cj8)*(r20));
IkReal x1518=((cj7)*(r21)*(sj8));
if( IKabs(((gconst15)*(((((cj5)*(x1514)))+(((cj5)*(x1515)))+(((IkReal(-1.00000000000000))*(x1512)*(x1518)))+(((x1512)*(x1513)))+(((x1512)*(x1517))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst15)*(((((sj5)*(x1514)))+(((sj5)*(x1515)))+(((IkReal(-1.00000000000000))*(x1516)*(x1517)))+(((IkReal(-1.00000000000000))*(x1513)*(x1516)))+(((x1516)*(x1518))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst15)*(((((cj5)*(x1514)))+(((cj5)*(x1515)))+(((IkReal(-1.00000000000000))*(x1512)*(x1518)))+(((x1512)*(x1513)))+(((x1512)*(x1517)))))), ((gconst15)*(((((sj5)*(x1514)))+(((sj5)*(x1515)))+(((IkReal(-1.00000000000000))*(x1516)*(x1517)))+(((IkReal(-1.00000000000000))*(x1513)*(x1516)))+(((x1516)*(x1518)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x1519=IKsin(j4);
IkReal x1520=IKcos(j4);
IkReal x1521=((IkReal(1.00000000000000))*(cj8));
IkReal x1522=((cj3)*(r01));
IkReal x1523=((IkReal(1.00000000000000))*(sj8));
IkReal x1524=((r11)*(sj3));
IkReal x1525=((cj3)*(r00));
IkReal x1526=((IkReal(1.00000000000000))*(sj6));
IkReal x1527=((IkReal(1.00000000000000))*(cj7));
IkReal x1528=((cj3)*(r02));
IkReal x1529=((sj3)*(sj7));
IkReal x1530=((cj7)*(cj8));
IkReal x1531=((r21)*(sj8));
IkReal x1532=((r10)*(sj3));
IkReal x1533=((sj5)*(x1520));
IkReal x1534=((cj5)*(x1520));
IkReal x1535=((cj6)*(x1519));
IkReal x1536=((cj5)*(x1519));
IkReal x1537=((sj5)*(x1519));
evalcond[0]=((((cj8)*(r21)))+(((IkReal(-1.00000000000000))*(x1526)*(x1533)))+(((IkReal(-1.00000000000000))*(x1526)*(x1536)))+(((r20)*(sj8))));
evalcond[1]=((((cj7)*(x1531)))+(((IkReal(-1.00000000000000))*(x1534)))+(((IkReal(-1.00000000000000))*(cj7)*(r20)*(x1521)))+(x1537)+(((IkReal(-1.00000000000000))*(r22)*(sj7))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r20)*(sj7)*(x1521)))+(((cj6)*(x1533)))+(((cj5)*(x1535)))+(((sj7)*(x1531)))+(((cj7)*(r22))));
evalcond[3]=((((sj6)*(x1537)))+(((IkReal(-1.00000000000000))*(x1523)*(x1525)))+(((IkReal(-1.00000000000000))*(x1526)*(x1534)))+(((IkReal(-1.00000000000000))*(x1523)*(x1532)))+(((IkReal(-1.00000000000000))*(x1521)*(x1522)))+(((IkReal(-1.00000000000000))*(x1521)*(x1524))));
evalcond[4]=((((x1525)*(x1530)))+(((IkReal(-1.00000000000000))*(cj7)*(x1522)*(x1523)))+(((IkReal(-1.00000000000000))*(cj7)*(x1523)*(x1524)))+(((r12)*(x1529)))+(((x1530)*(x1532)))+(x1536)+(x1533)+(((sj7)*(x1528))));
evalcond[5]=((((cj8)*(sj7)*(x1525)))+(((IkReal(-1.00000000000000))*(r12)*(sj3)*(x1527)))+(((cj8)*(r10)*(x1529)))+(((cj6)*(x1534)))+(((IkReal(-1.00000000000000))*(sj5)*(x1535)))+(((IkReal(-1.00000000000000))*(x1527)*(x1528)))+(((IkReal(-1.00000000000000))*(sj7)*(x1523)*(x1524)))+(((IkReal(-1.00000000000000))*(sj7)*(x1522)*(x1523))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j3;
vinfos[1].indices[0] = _ij3[0];
vinfos[1].indices[1] = _ij3[1];
vinfos[1].maxsolutions = _nj3;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j4;
vinfos[2].indices[0] = _ij4[0];
vinfos[2].indices[1] = _ij4[1];
vinfos[2].maxsolutions = _nj4;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j5;
vinfos[3].indices[0] = _ij5[0];
vinfos[3].indices[1] = _ij5[1];
vinfos[3].maxsolutions = _nj5;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j6;
vinfos[4].indices[0] = _ij6[0];
vinfos[4].indices[1] = _ij6[1];
vinfos[4].maxsolutions = _nj6;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j7;
vinfos[5].indices[0] = _ij7[0];
vinfos[5].indices[1] = _ij7[1];
vinfos[5].maxsolutions = _nj7;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j8;
vinfos[6].indices[0] = _ij8[0];
vinfos[6].indices[1] = _ij8[1];
vinfos[6].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}

static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    IkReal tol = 1e-5*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        if( IKabs(wi[i]) < tol*100 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "cf7f276f190ed5d86826cbba81e8b1f4"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE

int ik_solve(IkReal eerot[9], IkReal eetrans[3], std::vector<std::vector<IkReal> >& sol_joint, std::vector<IkReal> free_joint)
{
    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
	for(std::size_t i = 0; i < vfree.size(); ++i)
		vfree[i] = free_joint[i];
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        return -1;
    }

	sol_joint.resize(solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
		sol_joint[i].resize(solvalues.size());
        for( std::size_t j = 0; j < solvalues.size(); ++j)
			sol_joint[i][j] = solvalues[j];
    }
    return 0;
}

} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_RIGHT6DF0_NAMESPACE
using namespace IKFAST_RIGHT6DF0_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
