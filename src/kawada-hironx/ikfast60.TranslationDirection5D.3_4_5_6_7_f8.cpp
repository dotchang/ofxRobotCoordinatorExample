/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 60 generated on 2012-09-02 09:54:39.602573
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==60);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_RIGHT5DF8 {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51;
x0=IKsin(j[0]);
x1=IKcos(j[0]);
x2=IKcos(j[2]);
x3=IKsin(j[1]);
x4=IKcos(j[1]);
x5=IKsin(j[2]);
x6=IKsin(j[4]);
x7=IKcos(j[4]);
x8=IKcos(j[3]);
x9=IKsin(j[3]);
x10=((IkReal(0.965925532213041))*(x7));
x11=((IkReal(0.258820142606703))*(x7));
x12=((IkReal(0.258820142606703))*(x6));
x13=((IkReal(0.0400000000000000))*(x3));
x14=((IkReal(0.965925532213041))*(x6));
x15=((IkReal(0.0289777659663912))*(x0));
x16=((IkReal(0.00776460427820108))*(x0));
x17=((IkReal(1.00000000000000))*(x0));
x18=((IkReal(0.226992500070065))*(x0));
x19=((IkReal(0.0300000000000000))*(x1));
x20=((IkReal(0.235000000000000))*(x1));
x21=((IkReal(0.0900000000000000))*(x8));
x22=((IkReal(1.00000000000000))*(x1));
x23=((IkReal(0.0900000000000000))*(x1));
x24=((IkReal(0.0608227335125751))*(x0));
x25=((IkReal(0.0900000000000000))*(x0));
x26=((IkReal(1.00000000000000))*(x8));
x27=((IkReal(0.0400000000000000))*(x0));
x28=((x1)*(x9));
x29=((x3)*(x5));
x30=((x2)*(x4));
x31=((x4)*(x5));
x32=((x2)*(x3));
x33=((x0)*(x3));
x34=((IkReal(-0.0400000000000000))*(x8));
x35=((((IkReal(-0.0900000000000000))*(x30)))+(((IkReal(0.0900000000000000))*(x29))));
x36=((((IkReal(0.0400000000000000))*(x30)))+(((IkReal(-1.00000000000000))*(x13)*(x5))));
x37=((((IkReal(-1.00000000000000))*(x29)))+(((IkReal(1.00000000000000))*(x30))));
x38=((((IkReal(0.0400000000000000))*(x31)))+(((x13)*(x2))));
x39=((((IkReal(0.0900000000000000))*(x32)))+(((IkReal(0.0900000000000000))*(x31))));
x40=((((IkReal(1.00000000000000))*(x31)))+(((IkReal(1.00000000000000))*(x32))));
x41=((x35)*(x7));
x42=((((IkReal(-1.00000000000000))*(x22)*(x29)))+(((x1)*(x30))));
x43=((((IkReal(-1.00000000000000))*(x17)*(x29)))+(((x0)*(x30))));
x44=((x39)*(x8));
x45=((x40)*(x8));
x46=((x38)*(x8));
x47=((x25)*(((((IkReal(-1.00000000000000))*(x32)))+(((IkReal(-1.00000000000000))*(x31))))));
x48=((((x27)*(x31)))+(((x0)*(x13)*(x2))));
x49=((x17)*(((x32)+(x31))));
x50=((x43)*(x8));
x51=((((IkReal(-1.00000000000000))*(x22)*(x9)))+(((IkReal(-1.00000000000000))*(x26)*(x43))));
IkReal x52=((IkReal(1.00000000000000))*(x23));
IkReal x53=((IkReal(1.00000000000000))*(x20));
eetrans[0]=((((x19)*(x29)))+(((IkReal(0.0950000000000000))*(x0)))+(((IkReal(-1.00000000000000))*(x32)*(x53)))+(((x6)*(((((IkReal(0.0400000000000000))*(x1)*(x31)))+(((x1)*(x13)*(x2)))))))+(((IkReal(-1.00000000000000))*(x31)*(x53)))+(((x6)*(((((IkReal(-1.00000000000000))*(x21)*(x42)))+(((x25)*(x9)))))))+(((IkReal(-0.250000000000000))*(x1)*(x3)))+(((x7)*(((((IkReal(-1.00000000000000))*(x32)*(x52)))+(((IkReal(-1.00000000000000))*(x31)*(x52)))))))+(((IkReal(-1.00000000000000))*(x19)*(x30)))+(((x7)*(((((x27)*(x9)))+(((x34)*(x42))))))));
IkReal x54=((IkReal(1.00000000000000))*(x18));
IkReal x55=((IkReal(1.00000000000000))*(x12));
IkReal x56=((IkReal(1.00000000000000))*(x11));
eetrans[1]=((IkReal(-0.145000000000000))+(((IkReal(-1.00000000000000))*(x35)*(x56)))+(((IkReal(0.0608227335125751))*(x30)))+(((IkReal(-0.0608227335125751))*(x29)))+(((x14)*(((((IkReal(-0.0900000000000000))*(x28)))+(((IkReal(-0.0900000000000000))*(x50)))))))+(((x10)*(x47)))+(((IkReal(-1.00000000000000))*(x32)*(x54)))+(((IkReal(-0.00776460427820108))*(x31)))+(((IkReal(-0.00776460427820108))*(x32)))+(((IkReal(-1.00000000000000))*(x31)*(x54)))+(((IkReal(-1.00000000000000))*(x46)*(x56)))+(((x14)*(x48)))+(((x10)*(((((IkReal(-0.0400000000000000))*(x28)))+(((IkReal(-0.0400000000000000))*(x50)))))))+(((IkReal(-0.0917629255602389))*(x1)))+(((IkReal(-0.241481383053260))*(x33)))+(((IkReal(-1.00000000000000))*(x36)*(x55)))+(((IkReal(0.0647050356516757))*(x4)))+(((IkReal(-1.00000000000000))*(x44)*(x55)))+(((x15)*(x29)))+(((IkReal(-1.00000000000000))*(x15)*(x30))));
IkReal x57=((IkReal(1.00000000000000))*(x24));
eetrans[2]=((IkReal(0.370296000000000))+(((IkReal(0.226992500070065))*(x29)))+(((x12)*(((((IkReal(-1.00000000000000))*(x21)*(x43)))+(((IkReal(-1.00000000000000))*(x23)*(x9)))))))+(((x11)*(((((x34)*(x43)))+(((IkReal(-0.0400000000000000))*(x28)))))))+(((x10)*(x35)))+(((x10)*(x46)))+(((IkReal(-1.00000000000000))*(x32)*(x57)))+(((x11)*(x47)))+(((IkReal(-0.0245879135476367))*(x1)))+(((IkReal(-0.226992500070065))*(x30)))+(((IkReal(-1.00000000000000))*(x31)*(x57)))+(((x14)*(x44)))+(((IkReal(-0.0647050356516757))*(x33)))+(((IkReal(-1.00000000000000))*(x16)*(x30)))+(((x14)*(x36)))+(((IkReal(-0.241481383053260))*(x4)))+(((x16)*(x29)))+(((x12)*(x48)))+(((IkReal(0.0289777659663912))*(x32)))+(((IkReal(0.0289777659663912))*(x31))));
eerot[0]=((((x6)*(((((x22)*(x32)))+(((x22)*(x31)))))))+(((x7)*(((((x17)*(x9)))+(((IkReal(-1.00000000000000))*(x26)*(x42))))))));
eerot[1]=((((IkReal(-1.00000000000000))*(x12)*(x37)))+(((x14)*(x49)))+(((x10)*(x51)))+(((IkReal(-1.00000000000000))*(x11)*(x45))));
eerot[2]=((((x10)*(x45)))+(((x11)*(x51)))+(((x14)*(x37)))+(((x12)*(x49))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {5}; return freeparams; }
IKFAST_API int GetNumJoints() { return 6; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x56000007; }

class IKSolver {
public:
IkReal j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j7,cj7,sj7,htj7,j8,cj8,sj8,htj8,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij7[2], _nj7,_ij8[2], _nj8;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1; j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1;  _ij8[0] = -1; _ij8[1] = -1; _nj8 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

j8=pfree[0]; cj8=cos(pfree[0]); sj8=sin(pfree[0]);
r00 = eerot[0];
r01 = eerot[1];
r02 = eerot[2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];
new_r00=r00;
new_px=((((IkReal(-0.0500000000000000))*(r00)))+(px));
new_r01=((((IkReal(0.965925532213041))*(r01)))+(((IkReal(0.258820142606703))*(r02))));
new_py=((IkReal(0.0442191386441994))+(((IkReal(-0.0482962766106520))*(r01)))+(((IkReal(-0.0129410071303351))*(r02)))+(((IkReal(0.258820142606703))*(pz)))+(((IkReal(0.965925532213041))*(py))));
new_r02=((((IkReal(0.965925532213041))*(r02)))+(((IkReal(-0.258820142606703))*(r01))));
new_pz=((IkReal(-0.395207281554332))+(((IkReal(-0.258820142606703))*(py)))+(((IkReal(-0.0482962766106520))*(r02)))+(((IkReal(0.0129410071303351))*(r01)))+(((IkReal(0.965925532213041))*(pz))));
r00 = new_r00; r01 = new_r01; r02 = new_r02; px = new_px; py = new_py; pz = new_pz;

pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
IkReal op[72], zeror[48];
int numroots;
IkReal x58=((IkReal(0.170212765957447))*(py));
IkReal x59=((IkReal(0.458723404255319))*(r01));
IkReal x60=((IkReal(0.196063829787234))*(r02));
IkReal x61=((IkReal(0.0300000000000000))*(r01));
IkReal x62=((IkReal(0.0950000000000000))*(r00));
IkReal x63=(py)*(py);
IkReal x64=((IkReal(0.0141000000000000))*(r01));
IkReal x65=((IkReal(0.0446500000000000))*(r00));
IkReal x66=((IkReal(0.0194000000000000))*(r01));
IkReal x67=((IkReal(0.00285000000000000))*(r02));
IkReal x68=((IkReal(0.0800000000000000))*(py));
IkReal x69=(pz)*(pz);
IkReal x70=(px)*(px);
IkReal x71=((IkReal(0.235450000000000))*(r00));
IkReal x72=((IkReal(0.0800000000000000))*(px));
IkReal x73=((IkReal(0.00705000000000000))*(r02));
IkReal x74=((IkReal(0.0150000000000000))*(r00));
IkReal x75=((IkReal(0.0475000000000000))*(r01));
IkReal x76=((IkReal(0.0800000000000000))*(pz));
IkReal x77=((pp)*(r02));
IkReal x78=((pp)*(r00));
IkReal x79=((IkReal(0.160000000000000))*(px));
IkReal x80=((IkReal(0.0300000000000000))*(r02));
IkReal x81=((IkReal(0.0141000000000000))*(r00));
IkReal x82=((IkReal(0.160000000000000))*(pz));
IkReal x83=((IkReal(0.000450000000000000))*(r00));
IkReal x84=((IkReal(0.917446808510638))*(r00));
IkReal x85=((IkReal(0.340425531914894))*(px));
IkReal x86=((IkReal(0.190000000000000))*(r01));
IkReal x87=((IkReal(0.0600000000000000))*(r00));
IkReal x88=((IkReal(0.0282000000000000))*(r00));
IkReal x89=((IkReal(0.0893000000000000))*(r01));
IkReal x90=((IkReal(0.0388000000000000))*(r00));
IkReal x91=((IkReal(0.470900000000000))*(r01));
IkReal x92=((IkReal(0.160000000000000))*(py));
IkReal x93=((IkReal(0.000900000000000000))*(r01));
IkReal x94=((py)*(r00));
IkReal x95=((IkReal(0.392127659574468))*(r00));
IkReal x96=((IkReal(0.190000000000000))*(r02));
IkReal x97=((px)*(r01));
IkReal x98=((IkReal(0.0893000000000000))*(r02));
IkReal x99=((IkReal(0.00570000000000000))*(r00));
IkReal x100=((pp)*(r01));
IkReal x101=((IkReal(0.470900000000000))*(r02));
IkReal x102=((IkReal(0.000900000000000000))*(r02));
IkReal x103=((pz)*(r01));
IkReal x104=((IkReal(4.00000000000000))*(py));
IkReal x105=((py)*(r02));
IkReal x106=((px)*(r02));
IkReal x107=((pz)*(r02));
IkReal x108=((pz)*(r00));
IkReal x109=((IkReal(2.00000000000000))*(py));
IkReal x110=((py)*(r01));
IkReal x111=((px)*(r00));
IkReal x112=((IkReal(2.00000000000000))*(px));
IkReal x113=((IkReal(2.00000000000000))*(pz));
IkReal x114=((IkReal(0.404255319148936))*(x110));
IkReal x115=((IkReal(0.404255319148936))*(x107));
IkReal x116=((IkReal(2.06382978723404))*(x103));
IkReal x117=((IkReal(0.404255319148936))*(x111));
IkReal x118=((IkReal(2.06382978723404))*(x105));
IkReal x119=((IkReal(2.12765957446809))*(x100));
IkReal x120=((IkReal(0.470000000000000))*(x97));
IkReal x121=((IkReal(0.470000000000000))*(x94));
IkReal x122=((pz)*(x61));
IkReal x123=((IkReal(0.190000000000000))*(x111));
IkReal x124=((py)*(x86));
IkReal x125=((pz)*(x96));
IkReal x126=((IkReal(1.00000000000000))*(x100));
IkReal x127=((py)*(x80));
IkReal x128=((IkReal(0.190000000000000))*(x94));
IkReal x129=((IkReal(0.970000000000000))*(x106));
IkReal x130=((px)*(x86));
IkReal x131=((IkReal(0.970000000000000))*(x108));
IkReal x132=((pz)*(x86));
IkReal x133=((pz)*(x87));
IkReal x134=((IkReal(0.0600000000000000))*(x106));
IkReal x135=((py)*(x96));
IkReal x136=((IkReal(0.500000000000000))*(x107));
IkReal x137=((IkReal(0.500000000000000))*(x110));
IkReal x138=((IkReal(0.500000000000000))*(x111));
IkReal x139=((IkReal(2.00000000000000))*(x78));
IkReal x140=((IkReal(0.380000000000000))*(x94));
IkReal x141=((IkReal(0.380000000000000))*(x97));
IkReal x142=((IkReal(2.00000000000000))*(x77));
IkReal x143=((IkReal(0.380000000000000))*(x105));
IkReal x144=((IkReal(1.00000000000000))*(x77));
IkReal x145=((IkReal(0.0300000000000000))*(x108));
IkReal x146=((px)*(x80));
IkReal x147=((IkReal(1.00000000000000))*(x78));
IkReal x148=((IkReal(4.12765957446809))*(x106));
IkReal x149=((IkReal(4.25531914893617))*(x78));
IkReal x150=((IkReal(4.12765957446809))*(x108));
IkReal x151=((IkReal(1.94000000000000))*(x105));
IkReal x152=((IkReal(2.00000000000000))*(x100));
IkReal x153=((IkReal(1.94000000000000))*(x103));
IkReal x154=((IkReal(0.120000000000000))*(x103));
IkReal x155=((IkReal(0.380000000000000))*(x106));
IkReal x156=((IkReal(0.120000000000000))*(x105));
IkReal x157=((IkReal(0.380000000000000))*(x108));
IkReal x158=((IkReal(0.760000000000000))*(x106));
IkReal x159=((IkReal(0.760000000000000))*(x108));
IkReal x160=((IkReal(0.0600000000000000))*(x103));
IkReal x161=((IkReal(0.0600000000000000))*(x105));
IkReal x162=((IkReal(1.00000000000000))*(x97));
IkReal x163=((IkReal(4.12765957446809))*(x94));
IkReal x164=((IkReal(4.12765957446809))*(x97));
IkReal x165=((IkReal(2.00000000000000))*(x105));
IkReal x166=((IkReal(2.00000000000000))*(x103));
IkReal x167=((IkReal(1.00000000000000))*(x94));
IkReal x168=((IkReal(0.940000000000000))*(x105));
IkReal x169=((IkReal(0.940000000000000))*(x103));
IkReal x170=((py)*(x87));
IkReal x171=((IkReal(0.0600000000000000))*(x97));
IkReal x172=((IkReal(0.380000000000000))*(x103));
IkReal x173=((IkReal(0.0200000000000000))+(x77));
IkReal x174=((r02)*(x69));
IkReal x175=((r01)*(x63));
IkReal x176=((r00)*(x70));
IkReal x177=((IkReal(4.25531914893617))*(x175));
IkReal x178=((IkReal(4.25531914893617))*(pz)*(x105));
IkReal x179=((IkReal(4.25531914893617))*(px)*(x94));
IkReal x180=((x112)*(x94));
IkReal x181=((IkReal(2.00000000000000))*(x175));
IkReal x182=((x105)*(x113));
IkReal x183=((x109)*(x97));
IkReal x184=((IkReal(2.00000000000000))*(x176));
IkReal x185=((x106)*(x113));
IkReal x186=((x108)*(x112));
IkReal x187=((IkReal(2.00000000000000))*(x174));
IkReal x188=((x103)*(x109));
IkReal x189=((IkReal(4.00000000000000))*(pz)*(x106));
IkReal x190=((IkReal(4.00000000000000))*(x176));
IkReal x191=((x104)*(x97));
IkReal x192=((IkReal(8.51063829787234))*(x176));
IkReal x193=((IkReal(8.51063829787234))*(py)*(x97));
IkReal x194=((IkReal(8.51063829787234))*(pz)*(x106));
IkReal x195=((x104)*(x107));
IkReal x196=((IkReal(4.00000000000000))*(px)*(x94));
IkReal x197=((IkReal(4.00000000000000))*(x175));
IkReal x198=((x103)*(x104));
IkReal x199=((IkReal(4.00000000000000))*(px)*(x108));
IkReal x200=((IkReal(4.00000000000000))*(x174));
IkReal x201=((x72)+(x78));
IkReal x202=((x61)+(x62));
IkReal x203=((x118)+(x60));
IkReal x204=((x121)+(x64));
IkReal x205=((x147)+(x72));
IkReal x206=((x155)+(x61));
IkReal x207=((x156)+(x62));
IkReal x208=((x122)+(x68));
IkReal x209=((x132)+(x75));
IkReal x210=((x134)+(x76));
IkReal x211=((x152)+(x92));
IkReal x212=((x154)+(x62));
IkReal x213=((x139)+(x79));
IkReal x214=((x116)+(x60));
IkReal x215=((x132)+(x74));
IkReal x216=((x120)+(x64));
IkReal x217=((x157)+(x61));
IkReal x218=((x146)+(x128));
IkReal x219=((x131)+(x128));
IkReal x220=((x131)+(x130));
IkReal x221=((x128)+(x129));
IkReal x222=((x145)+(x128));
IkReal x223=((x130)+(x129));
IkReal x224=((x133)+(x132));
IkReal x225=((x146)+(x130));
IkReal x226=((x145)+(x130));
IkReal x227=((x119)+(x59)+(x58));
IkReal x228=((x149)+(x84)+(x85));
IkReal x229=((x135)+(x75)+(x74));
IkReal x230=((x142)+(x143)+(x82));
IkReal x231=((x140)+(x213));
IkReal x232=((x135)+(x133)+(x75));
IkReal x233=((x172)+(x142)+(x82));
IkReal x234=((x173)+(x133)+(x76)+(x74));
IkReal x235=((IkReal(-0.00760000000000000))+(x124)+(x125)+(x123));
IkReal x236=((IkReal(-0.0161702127659574))+(x117)+(x115)+(x114));
IkReal x237=((x184)+(x185)+(x183));
IkReal x238=((x199)+(x198)+(x200));
IkReal x239=((x144)+(x137)+(x136)+(x138));
IkReal x240=((x197)+(x196)+(x195));
IkReal x241=((x193)+(x192)+(x194));
IkReal x242=((x179)+(x178)+(x177));
IkReal x243=((x127)+(x235));
IkReal x244=((x180)+(x181)+(x182)+(x66));
IkReal x245=((x191)+(x190)+(x189)+(x90));
IkReal x246=((x172)+(x238));
IkReal x247=((x143)+(x238));
IkReal x248=((IkReal(0.0200000000000000))+(x186)+(x187)+(x188)+(x73));
IkReal x249=((x141)+(x191)+(x190)+(x189)+(x81));
IkReal x250=((x140)+(x191)+(x190)+(x189)+(x81));
IkReal x251=((((IkReal(4.00000000000000))*(x100)))+(((IkReal(-8.00000000000000))*(x175)))+(((IkReal(-8.00000000000000))*(pz)*(x105)))+(((IkReal(-0.0282000000000000))*(r01)))+(((IkReal(0.320000000000000))*(py)))+(((IkReal(-8.00000000000000))*(px)*(x94))));
IkReal x252=((x236)+(x242));
IkReal x253=((x134)+(x137)+(x136)+(x138)+(x186)+(x187)+(x188)+(x73));
IkReal x254=((x137)+(x136)+(x133)+(x138)+(x186)+(x187)+(x188)+(x74)+(x73));
op[0]=((((IkReal(-1.00000000000000))*(x116)))+(x252)+(x203)+(((IkReal(-1.00000000000000))*(x227))));
op[1]=((((IkReal(-1.00000000000000))*(x162)))+(x202)+(x94));
op[2]=((((IkReal(-1.00000000000000))*(x164)))+(x163)+(x95));
op[3]=((((IkReal(-1.00000000000000))*(x165)))+(x166)+(((IkReal(-1.00000000000000))*(x96))));
op[4]=((x116)+(((IkReal(-1.00000000000000))*(x203)))+(x252)+(((IkReal(-1.00000000000000))*(x227))));
op[5]=((((IkReal(-1.00000000000000))*(x167)))+(x61)+(x97)+(((IkReal(-1.00000000000000))*(x62))));
op[6]=((x121)+(x65)+(((IkReal(-1.00000000000000))*(x216))));
op[7]=((((IkReal(-1.00000000000000))*(x126)))+(((IkReal(-1.00000000000000))*(x208)))+(x243)+(x244)+(x67));
op[8]=((((IkReal(-1.00000000000000))*(x168)))+(x169)+(((IkReal(-1.00000000000000))*(x98))));
op[9]=((((IkReal(-1.00000000000000))*(x171)))+(x170)+(x99));
op[10]=((x120)+(((IkReal(-1.00000000000000))*(x204)))+(((IkReal(-1.00000000000000))*(x65))));
op[11]=((((IkReal(-1.00000000000000))*(x127)))+(((IkReal(-1.00000000000000))*(x126)))+(x122)+(x235)+(x244)+(((IkReal(-1.00000000000000))*(x68)))+(((IkReal(-1.00000000000000))*(x67))));
op[12]=((((IkReal(-1.00000000000000))*(x71)))+(((IkReal(-1.00000000000000))*(x205)))+(x223)+(x237)+(((IkReal(-1.00000000000000))*(x219))));
op[13]=((x135)+(((IkReal(-1.00000000000000))*(x209)))+(x234)+(((IkReal(-1.00000000000000))*(x253))));
op[14]=((x101)+(x230)+(((IkReal(-1.00000000000000))*(x246))));
op[15]=((x231)+(((IkReal(-1.00000000000000))*(x249)))+(((IkReal(-1.00000000000000))*(x80))));
op[16]=((((IkReal(-1.00000000000000))*(x237)))+(x221)+(x201)+(x71)+(((IkReal(-1.00000000000000))*(x220))));
op[17]=((((IkReal(-1.00000000000000))*(x239)))+(x224)+(x248)+(((IkReal(-1.00000000000000))*(x210)))+(((IkReal(-1.00000000000000))*(x229))));
op[18]=((x173)+(x135)+(((IkReal(-1.00000000000000))*(x209)))+(x210)+(((IkReal(-1.00000000000000))*(x254))));
op[19]=((((IkReal(-1.00000000000000))*(x237)))+(x222)+(x201)+(x83)+(((IkReal(-1.00000000000000))*(x225))));
op[20]=((x231)+(x80)+(((IkReal(-1.00000000000000))*(x249))));
op[21]=((((IkReal(-1.00000000000000))*(x102)))+(((IkReal(-1.00000000000000))*(x230)))+(x246));
op[22]=((((IkReal(-1.00000000000000))*(x76)))+(x134)+(((IkReal(-1.00000000000000))*(x239)))+(((IkReal(-1.00000000000000))*(x232)))+(x215)+(x248));
op[23]=((((IkReal(-1.00000000000000))*(x205)))+(x226)+(x237)+(((IkReal(-1.00000000000000))*(x218)))+(((IkReal(-1.00000000000000))*(x83))));
op[24]=((((IkReal(-1.00000000000000))*(x148)))+(x150)+(x228)+(((IkReal(-1.00000000000000))*(x241))));
op[25]=((x86)+(((IkReal(-1.00000000000000))*(x87))));
op[26]=((IkReal(0.784255319148936))*(r01));
op[27]=((((IkReal(4.00000000000000))*(x106)))+(((IkReal(-4.00000000000000))*(x108))));
op[28]=((((IkReal(-1.00000000000000))*(x150)))+(x148)+(x228)+(((IkReal(-1.00000000000000))*(x241))));
op[29]=((((IkReal(-1.00000000000000))*(x87)))+(((IkReal(-1.00000000000000))*(x86))));
op[30]=((x88)+(x89));
op[31]=((x133)+(((IkReal(-1.00000000000000))*(x134)))+(x213)+(((IkReal(-1.00000000000000))*(x245))));
op[32]=((((IkReal(1.88000000000000))*(x106)))+(((IkReal(-1.88000000000000))*(x108))));
op[33]=((IkReal(0.0114000000000000))*(r01));
op[34]=((x88)+(((IkReal(-1.00000000000000))*(x89))));
op[35]=((x134)+(((IkReal(-1.00000000000000))*(x133)))+(x213)+(((IkReal(-1.00000000000000))*(x245))));
op[36]=((((IkReal(-1.00000000000000))*(x153)))+(x151)+(x240)+(((IkReal(-1.00000000000000))*(x91)))+(((IkReal(-1.00000000000000))*(x211))));
op[37]=((((IkReal(-1.00000000000000))*(x155)))+(((IkReal(-1.00000000000000))*(x156)))+(x157)+(x154)+(x202));
op[38]=((((IkReal(-1.00000000000000))*(x158)))+(x159));
op[39]=x251;
op[40]=((((IkReal(-1.00000000000000))*(x153)))+(x151)+(x211)+(x91)+(((IkReal(-1.00000000000000))*(x240))));
op[41]=((((IkReal(-1.00000000000000))*(x156)))+(x155)+(x212)+(((IkReal(-1.00000000000000))*(x217))));
op[42]=((((IkReal(-1.00000000000000))*(x154)))+(x157)+(((IkReal(-1.00000000000000))*(x206)))+(x207));
op[43]=((((IkReal(-1.00000000000000))*(x161)))+(x160)+(x211)+(x93)+(((IkReal(-1.00000000000000))*(x240))));
op[44]=x251;
op[45]=((((IkReal(-1.00000000000000))*(x159)))+(x158));
op[46]=((((IkReal(-1.00000000000000))*(x157)))+(((IkReal(-1.00000000000000))*(x154)))+(x156)+(x155)+(x202));
op[47]=((((IkReal(-1.00000000000000))*(x161)))+(x160)+(x240)+(((IkReal(-1.00000000000000))*(x93)))+(((IkReal(-1.00000000000000))*(x211))));
op[48]=((((IkReal(-1.00000000000000))*(x118)))+(x214)+(x227)+(x236)+(((IkReal(-1.00000000000000))*(x242))));
op[49]=((((IkReal(-1.00000000000000))*(x162)))+(((IkReal(-1.00000000000000))*(x202)))+(x94));
op[50]=((((IkReal(-1.00000000000000))*(x164)))+(x163)+(((IkReal(-1.00000000000000))*(x95))));
op[51]=((((IkReal(-1.00000000000000))*(x166)))+(x165)+(((IkReal(-1.00000000000000))*(x96))));
op[52]=((x118)+(x227)+(x236)+(((IkReal(-1.00000000000000))*(x242)))+(((IkReal(-1.00000000000000))*(x214))));
op[53]=((((IkReal(-1.00000000000000))*(x167)))+(x62)+(x97)+(((IkReal(-1.00000000000000))*(x61))));
op[54]=((((IkReal(-1.00000000000000))*(x120)))+(x204)+(((IkReal(-1.00000000000000))*(x65))));
op[55]=((((IkReal(-1.00000000000000))*(x127)))+(x100)+(x235)+(x208)+(x67)+(((IkReal(-1.00000000000000))*(x244))));
op[56]=((((IkReal(-1.00000000000000))*(x169)))+(x168)+(((IkReal(-1.00000000000000))*(x98))));
op[57]=((((IkReal(-1.00000000000000))*(x171)))+(x170)+(((IkReal(-1.00000000000000))*(x99))));
op[58]=((((IkReal(-1.00000000000000))*(x121)))+(x216)+(x65));
op[59]=((((IkReal(-1.00000000000000))*(x122)))+(x100)+(x243)+(x68)+(((IkReal(-1.00000000000000))*(x244)))+(((IkReal(-1.00000000000000))*(x67))));
op[60]=((((IkReal(-1.00000000000000))*(x237)))+(x220)+(x201)+(x71)+(((IkReal(-1.00000000000000))*(x221))));
op[61]=((x173)+(((IkReal(-1.00000000000000))*(x135)))+(x210)+(x209)+(((IkReal(-1.00000000000000))*(x254))));
op[62]=((x101)+(x233)+(((IkReal(-1.00000000000000))*(x247))));
op[63]=((((IkReal(-1.00000000000000))*(x141)))+(x250)+(((IkReal(-1.00000000000000))*(x213)))+(((IkReal(-1.00000000000000))*(x80))));
op[64]=((((IkReal(-1.00000000000000))*(x71)))+(((IkReal(-1.00000000000000))*(x205)))+(x219)+(x237)+(((IkReal(-1.00000000000000))*(x223))));
op[65]=((((IkReal(-1.00000000000000))*(x76)))+(x134)+(((IkReal(-1.00000000000000))*(x239)))+(x229)+(x248)+(((IkReal(-1.00000000000000))*(x224))));
op[66]=((((IkReal(-1.00000000000000))*(x135)))+(x234)+(x209)+(((IkReal(-1.00000000000000))*(x253))));
op[67]=((((IkReal(-1.00000000000000))*(x205)))+(x218)+(x237)+(((IkReal(-1.00000000000000))*(x83)))+(((IkReal(-1.00000000000000))*(x226))));
op[68]=((((IkReal(-1.00000000000000))*(x141)))+(x250)+(x80)+(((IkReal(-1.00000000000000))*(x213))));
op[69]=((((IkReal(-1.00000000000000))*(x102)))+(((IkReal(-1.00000000000000))*(x233)))+(x247));
op[70]=((((IkReal(-1.00000000000000))*(x239)))+(x232)+(x248)+(((IkReal(-1.00000000000000))*(x210)))+(((IkReal(-1.00000000000000))*(x215))));
op[71]=((((IkReal(-1.00000000000000))*(x237)))+(x225)+(x201)+(x83)+(((IkReal(-1.00000000000000))*(x222))));
solvedialyticpoly8qep(op,zeror,numroots);
IkReal j3array[16], cj3array[16], sj3array[16], j4array[16], cj4array[16], sj4array[16], j5array[16], cj5array[16], sj5array[16];
int numsolutions = 0;
for(int ij3 = 0; ij3 < numroots; ij3 += 3)
{
IkReal htj3 = zeror[ij3+0], htj4 = zeror[ij3+1], htj5 = zeror[ij3+2];
j3array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj3)));
j4array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj4)));
j5array[numsolutions]=((IkReal(2.00000000000000))*(atan(htj5)));
IkReal x255=(htj3)*(htj3);
IkReal x256=(htj4)*(htj4);
IkReal x257=(htj5)*(htj5);
cj3array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x255))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x255)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x255))))));
cj4array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x256))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x256)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x256))))));
cj5array[numsolutions]=((((IKabs(((IkReal(1.00000000000000))+(x257))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+(x257)))):(IkReal)1.0e30))*(((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x257))))));
sj3array[numsolutions]=((IkReal(2.00000000000000))*(htj3)*(((IKabs(((IkReal(1.00000000000000))+((htj3)*(htj3)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj3)*(htj3))))):(IkReal)1.0e30)));
sj4array[numsolutions]=((IkReal(2.00000000000000))*(htj4)*(((IKabs(((IkReal(1.00000000000000))+((htj4)*(htj4)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj4)*(htj4))))):(IkReal)1.0e30)));
sj5array[numsolutions]=((IkReal(2.00000000000000))*(htj5)*(((IKabs(((IkReal(1.00000000000000))+((htj5)*(htj5)))) != 0)?((IkReal)1/(((IkReal(1.00000000000000))+((htj5)*(htj5))))):(IkReal)1.0e30)));
if( j3array[numsolutions] > IKPI )
{
    j3array[numsolutions]-=IK2PI;
}
else if( j3array[numsolutions] < -IKPI )
{
    j3array[numsolutions]+=IK2PI;
}
if( j4array[numsolutions] > IKPI )
{
    j4array[numsolutions]-=IK2PI;
}
else if( j4array[numsolutions] < -IKPI )
{
    j4array[numsolutions]+=IK2PI;
}
if( j5array[numsolutions] > IKPI )
{
    j5array[numsolutions]-=IK2PI;
}
else if( j5array[numsolutions] < -IKPI )
{
    j5array[numsolutions]+=IK2PI;
}
numsolutions++;
}
bool j3valid[16]={true,true,true,true,true,true,true,true,true,true,true,true,true,true,true,true};
_nj3 = 16;
_nj4 = 1;
_nj5 = 1;
for(int ij3 = 0; ij3 < numsolutions; ++ij3)
    {
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
_ij4[0] = 0; _ij4[1] = -1;
_ij5[0] = 0; _ij5[1] = -1;
for(int iij3 = ij3+1; iij3 < numsolutions; ++iij3)
{
if( !j3valid[iij3] ) { continue; }
if( IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(cj4array[ij3]-cj4array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij3]-sj4array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(cj5array[ij3]-cj5array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij3]-sj5array[iij3]) < IKFAST_SOLUTION_THRESH &&  1 )
{
    j3valid[iij3]=false; _ij3[1] = iij3; _ij4[1] = 0; _ij5[1] = 0;  break; 
}
}
    j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

    j4 = j4array[ij3]; cj4 = cj4array[ij3]; sj4 = sj4array[ij3];

    j5 = j5array[ij3]; cj5 = cj5array[ij3]; sj5 = sj5array[ij3];

{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-1.00000000000000))*((cj5)*(cj5))))+(((IkReal(-1.00000000000000))*((sj5)*(sj5)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x258=(cj5)*(cj5);
IkReal x259=(sj5)*(sj5);
IkReal x260=((IkReal(0.0900000000000000))*(px));
IkReal x261=((cj5)*(sj4));
IkReal x262=((sj4)*(sj5));
IkReal x263=((IkReal(0.0900000000000000))*(pz));
IkReal x264=((r01)*(sj3));
IkReal x265=((cj4)*(sj5));
IkReal x266=((cj3)*(x265));
IkReal x267=((cj4)*(cj5)*(r02));
IkReal x268=((IkReal(-1.00000000000000))*(r00));
IkReal x269=((IkReal(0.0900000000000000))*(py)*(sj3));
IkReal x270=((IkReal(1.00000000000000))*(r02)*(x262));
IkReal x271=((((IkReal(1.00000000000000))*(x259)))+(((IkReal(1.00000000000000))*(x258))));
IkReal x272=((IkReal(-1.00000000000000))*(((IKabs(x271) != 0)?((IkReal)1/(x271)):(IkReal)1.0e30)));
if( IKabs(((x272)*(((((x266)*(x268)))+(((IkReal(-1.00000000000000))*(x267)))+(x270)+(((cj3)*(x261)*(x268)))+(((IkReal(-1.00000000000000))*(x261)*(x264)))+(((IkReal(-1.00000000000000))*(x264)*(x265))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x272)*(((IKabs(((((IkReal(0.00810000000000000))*(x258)))+(((IkReal(0.00810000000000000))*(x259))))) != 0)?((IkReal)1/(((((IkReal(0.00810000000000000))*(x258)))+(((IkReal(0.00810000000000000))*(x259)))))):(IkReal)1.0e30))*(((((x271)*(((((IkReal(-1.00000000000000))*(x262)*(x263)))+(((cj3)*(x260)*(x261)))+(((x260)*(x266)))+(((IkReal(0.0211500000000000))*(x259)))+(((IkReal(0.0211500000000000))*(x258)))+(((x261)*(x269)))+(((cj4)*(cj5)*(x263)))+(((x265)*(x269)))+(((IkReal(0.0225000000000000))*(cj5)))))))+(((((((IkReal(-0.00360000000000000))*(x258)))+(((IkReal(-0.00360000000000000))*(x259)))))*(((((cj3)*(r00)*(x261)))+(((x264)*(x265)))+(x267)+(((r00)*(x266)))+(((IkReal(-1.00000000000000))*(x270)))+(((x261)*(x264))))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x272)*(((((x266)*(x268)))+(((IkReal(-1.00000000000000))*(x267)))+(x270)+(((cj3)*(x261)*(x268)))+(((IkReal(-1.00000000000000))*(x261)*(x264)))+(((IkReal(-1.00000000000000))*(x264)*(x265)))))))+IKsqr(((x272)*(((IKabs(((((IkReal(0.00810000000000000))*(x258)))+(((IkReal(0.00810000000000000))*(x259))))) != 0)?((IkReal)1/(((((IkReal(0.00810000000000000))*(x258)))+(((IkReal(0.00810000000000000))*(x259)))))):(IkReal)1.0e30))*(((((x271)*(((((IkReal(-1.00000000000000))*(x262)*(x263)))+(((cj3)*(x260)*(x261)))+(((x260)*(x266)))+(((IkReal(0.0211500000000000))*(x259)))+(((IkReal(0.0211500000000000))*(x258)))+(((x261)*(x269)))+(((cj4)*(cj5)*(x263)))+(((x265)*(x269)))+(((IkReal(0.0225000000000000))*(cj5)))))))+(((((((IkReal(-0.00360000000000000))*(x258)))+(((IkReal(-0.00360000000000000))*(x259)))))*(((((cj3)*(r00)*(x261)))+(((x264)*(x265)))+(x267)+(((r00)*(x266)))+(((IkReal(-1.00000000000000))*(x270)))+(((x261)*(x264)))))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x272)*(((((x266)*(x268)))+(((IkReal(-1.00000000000000))*(x267)))+(x270)+(((cj3)*(x261)*(x268)))+(((IkReal(-1.00000000000000))*(x261)*(x264)))+(((IkReal(-1.00000000000000))*(x264)*(x265)))))), ((x272)*(((IKabs(((((IkReal(0.00810000000000000))*(x258)))+(((IkReal(0.00810000000000000))*(x259))))) != 0)?((IkReal)1/(((((IkReal(0.00810000000000000))*(x258)))+(((IkReal(0.00810000000000000))*(x259)))))):(IkReal)1.0e30))*(((((x271)*(((((IkReal(-1.00000000000000))*(x262)*(x263)))+(((cj3)*(x260)*(x261)))+(((x260)*(x266)))+(((IkReal(0.0211500000000000))*(x259)))+(((IkReal(0.0211500000000000))*(x258)))+(((x261)*(x269)))+(((cj4)*(cj5)*(x263)))+(((x265)*(x269)))+(((IkReal(0.0225000000000000))*(cj5)))))))+(((((((IkReal(-0.00360000000000000))*(x258)))+(((IkReal(-0.00360000000000000))*(x259)))))*(((((cj3)*(r00)*(x261)))+(((x264)*(x265)))+(x267)+(((r00)*(x266)))+(((IkReal(-1.00000000000000))*(x270)))+(((x261)*(x264)))))))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x273=(cj5)*(cj5);
IkReal x274=(sj5)*(sj5);
IkReal x275=IKsin(j7);
IkReal x276=IKcos(j7);
IkReal x277=((IkReal(0.0900000000000000))*(px));
IkReal x278=((cj5)*(sj4));
IkReal x279=((cj4)*(sj5));
IkReal x280=((IkReal(0.0400000000000000))*(px));
IkReal x281=((r01)*(sj3));
IkReal x282=((sj4)*(sj5));
IkReal x283=((IkReal(0.0900000000000000))*(pz));
IkReal x284=((cj4)*(cj5));
IkReal x285=((IkReal(0.0400000000000000))*(pz));
IkReal x286=((cj3)*(x279));
IkReal x287=((IkReal(0.0400000000000000))*(py)*(sj3));
IkReal x288=((IkReal(0.0900000000000000))*(py)*(sj3));
IkReal x289=((((IkReal(0.00360000000000000))*(x273)))+(((IkReal(0.00360000000000000))*(x274))));
evalcond[0]=((((cj3)*(r00)*(x278)))+(((r00)*(x286)))+(((IkReal(-1.00000000000000))*(r02)*(x282)))+(((x279)*(x281)))+(((x278)*(x281)))+(((r02)*(x284)))+(((x275)*(((((IkReal(-1.00000000000000))*(x273)))+(((IkReal(-1.00000000000000))*(x274))))))));
evalcond[1]=((((x284)*(x285)))+(((x279)*(x287)))+(((x278)*(x287)))+(((cj3)*(x278)*(x280)))+(((IkReal(0.0100000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(x282)*(x285)))+(((x280)*(x286)))+(((IkReal(0.00940000000000000))*(x274)))+(((IkReal(0.00940000000000000))*(x273)))+(((x275)*(((((IkReal(-0.00160000000000000))*(x273)))+(((IkReal(-0.00160000000000000))*(x274)))))))+(((x276)*(x289))));
evalcond[2]=((((IkReal(0.0211500000000000))*(x274)))+(((IkReal(0.0211500000000000))*(x273)))+(((x279)*(x288)))+(((x278)*(x288)))+(((cj3)*(x277)*(x278)))+(((x276)*(((((IkReal(0.00810000000000000))*(x273)))+(((IkReal(0.00810000000000000))*(x274)))))))+(((IkReal(-1.00000000000000))*(x282)*(x283)))+(((x277)*(x286)))+(((IkReal(-1.00000000000000))*(x275)*(x289)))+(((x283)*(x284)))+(((IkReal(0.0225000000000000))*(cj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[2];
dummyeval[0]=cj7;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj7;
dummyeval[1]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[3];
dummyeval[0]=((cj7)+(((IkReal(2.25000000000000))*(sj7))));
dummyeval[1]=cj7;
dummyeval[2]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  || IKabs(dummyeval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.55981698316902))+(j7)), IkReal(6.28318530717959))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
IkReal x290=((IkReal(1.00000000000000))*(sj4));
IkReal x291=((cj4)*(sj3));
IkReal x292=((cj3)*(cj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.406138466127514))+(((IkReal(-1.00000000000000))*(r02)*(x290)))+(((r01)*(x291)))+(((r00)*(x292))));
evalcond[2]=((IkReal(0.333488578145101))+(((IkReal(-1.00000000000000))*(pz)*(x290)))+(((py)*(x291)))+(((px)*(x292))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x293=((IkReal(1.09431753188062))*(sj4));
if( IKabs(((((IkReal(1.09431753188062))*(r00)*(sj3)))+(((IkReal(-1.09431753188062))*(cj3)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(1.09431753188062))*(cj4)*(r02)))+(((r01)*(sj3)*(x293)))+(((cj3)*(r00)*(x293))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.09431753188062))*(r00)*(sj3)))+(((IkReal(-1.09431753188062))*(cj3)*(r01)))))+IKsqr(((((IkReal(1.09431753188062))*(cj4)*(r02)))+(((r01)*(sj3)*(x293)))+(((cj3)*(r00)*(x293)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(1.09431753188062))*(r00)*(sj3)))+(((IkReal(-1.09431753188062))*(cj3)*(r01)))), ((((IkReal(1.09431753188062))*(cj4)*(r02)))+(((r01)*(sj3)*(x293)))+(((cj3)*(r00)*(x293)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x294=IKsin(j6);
IkReal x295=IKcos(j6);
IkReal x296=((IkReal(1.00000000000000))*(cj4));
IkReal x297=((IkReal(1.00000000000000))*(sj4));
IkReal x298=((IkReal(1.00000000000000))*(sj3));
evalcond[0]=((((IkReal(0.913811550000000))*(x294)))+(((IkReal(-1.00000000000000))*(r00)*(x298)))+(((cj3)*(r01))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(4.85237587652042e-11))*(x294)))+(((cj3)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x298))));
evalcond[2]=((((IkReal(0.913811550000000))*(x295)))+(((IkReal(-1.00000000000000))*(r02)*(x296)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x297)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x297))));
evalcond[3]=((IkReal(-0.220000000000000))+(((IkReal(4.85237587652042e-11))*(x295)))+(((IkReal(-1.00000000000000))*(pz)*(x296)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x297)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x297))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x299=((IkReal(1.00000000000000))*(sj4));
IkReal x300=((cj4)*(sj3));
IkReal x301=((cj3)*(cj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.406138466127514))+(((IkReal(-1.00000000000000))*(r02)*(x299)))+(((r01)*(x300)))+(((r00)*(x301))));
evalcond[2]=((IkReal(-0.333488578145101))+(((px)*(x301)))+(((IkReal(-1.00000000000000))*(pz)*(x299)))+(((py)*(x300))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x302=((IkReal(1.09431753188062))*(sj4));
if( IKabs(((((IkReal(1.09431753188062))*(r00)*(sj3)))+(((IkReal(-1.09431753188062))*(cj3)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj3)*(r00)*(x302)))+(((IkReal(-1.09431753188062))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x302))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.09431753188062))*(r00)*(sj3)))+(((IkReal(-1.09431753188062))*(cj3)*(r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj3)*(r00)*(x302)))+(((IkReal(-1.09431753188062))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x302)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(1.09431753188062))*(r00)*(sj3)))+(((IkReal(-1.09431753188062))*(cj3)*(r01)))), ((((IkReal(-1.00000000000000))*(cj3)*(r00)*(x302)))+(((IkReal(-1.09431753188062))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x302)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x303=IKsin(j6);
IkReal x304=IKcos(j6);
IkReal x305=((IkReal(1.00000000000000))*(cj4));
IkReal x306=((IkReal(1.00000000000000))*(sj4));
IkReal x307=((IkReal(1.00000000000000))*(sj3));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x307)))+(((IkReal(0.913811550000000))*(x303)))+(((cj3)*(r01))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(x307)))+(((IkReal(4.85237587652042e-11))*(x303)))+(((cj3)*(py))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj3)*(r00)*(x306)))+(((IkReal(-1.00000000000000))*(r02)*(x305)))+(((IkReal(-0.913811550000000))*(x304)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x306))));
evalcond[3]=((IkReal(-0.280000000000000))+(((IkReal(-4.85237587652042e-11))*(x304)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x306)))+(((IkReal(-1.00000000000000))*(pz)*(x305)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x306))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x308=((IkReal(1.00000000000000))*(cj4));
IkReal x309=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.406138466127514))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x309)))+(((IkReal(-1.00000000000000))*(r02)*(x308)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x309))));
evalcond[2]=((IkReal(-0.583488578145101))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x309)))+(((IkReal(-1.00000000000000))*(pz)*(x308)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x309))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x310=((IkReal(1.09431753188062))*(cj3));
IkReal x311=((IkReal(1.09431753188062))*(sj3));
if( IKabs(((((IkReal(-1.00000000000000))*(r01)*(x310)))+(((r00)*(x311))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj4)*(r01)*(x311)))+(((IkReal(1.09431753188062))*(r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(x310))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r01)*(x310)))+(((r00)*(x311)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(r01)*(x311)))+(((IkReal(1.09431753188062))*(r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(x310)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r01)*(x310)))+(((r00)*(x311)))), ((((IkReal(-1.00000000000000))*(cj4)*(r01)*(x311)))+(((IkReal(1.09431753188062))*(r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(x310)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x312=IKsin(j6);
IkReal x313=IKcos(j6);
IkReal x314=((IkReal(1.00000000000000))*(sj4));
IkReal x315=((cj4)*(sj3));
IkReal x316=((cj3)*(cj4));
IkReal x317=((IkReal(1.00000000000000))*(sj3));
evalcond[0]=((((IkReal(0.913811550000000))*(x312)))+(((IkReal(-1.00000000000000))*(r00)*(x317)))+(((cj3)*(r01))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(4.85237587652042e-11))*(x312)))+(((cj3)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x317))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x314)))+(((IkReal(0.913811550000000))*(x313)))+(((r01)*(x315)))+(((r00)*(x316))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(4.85237587652042e-11))*(x313)))+(((py)*(x315)))+(((IkReal(-1.00000000000000))*(pz)*(x314)))+(((px)*(x316))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x318=((IkReal(1.00000000000000))*(cj4));
IkReal x319=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.406138466127514))+(((IkReal(-1.00000000000000))*(r02)*(x318)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x319)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x319))));
evalcond[2]=((IkReal(0.0834885781451006))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x319)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x319)))+(((IkReal(-1.00000000000000))*(pz)*(x318))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x320=((IkReal(1.09431753188062))*(cj3));
IkReal x321=((IkReal(1.09431753188062))*(sj3));
if( IKabs(((((r00)*(x321)))+(((IkReal(-1.00000000000000))*(r01)*(x320))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(r00)*(x320)))+(((cj4)*(r01)*(x321)))+(((IkReal(-1.09431753188062))*(r02)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(x321)))+(((IkReal(-1.00000000000000))*(r01)*(x320)))))+IKsqr(((((cj4)*(r00)*(x320)))+(((cj4)*(r01)*(x321)))+(((IkReal(-1.09431753188062))*(r02)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((r00)*(x321)))+(((IkReal(-1.00000000000000))*(r01)*(x320)))), ((((cj4)*(r00)*(x320)))+(((cj4)*(r01)*(x321)))+(((IkReal(-1.09431753188062))*(r02)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x322=IKsin(j6);
IkReal x323=IKcos(j6);
IkReal x324=((IkReal(1.00000000000000))*(sj4));
IkReal x325=((cj4)*(sj3));
IkReal x326=((cj3)*(cj4));
IkReal x327=((IkReal(1.00000000000000))*(sj3));
evalcond[0]=((((cj3)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x327)))+(((IkReal(0.913811550000000))*(x322))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(4.85237587652042e-11))*(x322)))+(((IkReal(-1.00000000000000))*(px)*(x327)))+(((cj3)*(py))));
evalcond[2]=((((r00)*(x326)))+(((r01)*(x325)))+(((IkReal(-1.00000000000000))*(r02)*(x324)))+(((IkReal(-0.913811550000000))*(x323))));
evalcond[3]=((IkReal(-0.0300000000000000))+(((py)*(x325)))+(((IkReal(-4.85237587652042e-11))*(x323)))+(((IkReal(-1.00000000000000))*(pz)*(x324)))+(((px)*(x326))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x328=((IkReal(20000000.0000000))*(cj4));
if( IKabs(((IkReal(-1957803814.40943))+(((IkReal(20608461204.3098))*(px)*(sj3)))+(((IkReal(-20608461204.3098))*(cj3)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.47158765940308e-8))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj3)*(x328)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x328)))+(((IkReal(-8122769.32255028))*(sj5)))+(((IkReal(20000000.0000000))*(r02)*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1957803814.40943))+(((IkReal(20608461204.3098))*(px)*(sj3)))+(((IkReal(-20608461204.3098))*(cj3)*(py)))))+IKsqr(((IkReal(5.47158765940308e-8))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj3)*(x328)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x328)))+(((IkReal(-8122769.32255028))*(sj5)))+(((IkReal(20000000.0000000))*(r02)*(sj4)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1957803814.40943))+(((IkReal(20608461204.3098))*(px)*(sj3)))+(((IkReal(-20608461204.3098))*(cj3)*(py)))), ((IkReal(5.47158765940308e-8))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj3)*(x328)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x328)))+(((IkReal(-8122769.32255028))*(sj5)))+(((IkReal(20000000.0000000))*(r02)*(sj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x329=IKsin(j6);
IkReal x330=IKcos(j6);
IkReal x331=((IkReal(1.00000000000000))*(sj4));
IkReal x332=((cj4)*(sj3));
IkReal x333=((IkReal(1.00000000000000))*(cj4));
IkReal x334=((IkReal(1.00000000000000))*(sj3));
IkReal x335=((cj3)*(r00));
IkReal x336=((cj3)*(px));
IkReal x337=((cj5)*(x330));
IkReal x338=((sj5)*(x330));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x334)))+(((cj3)*(r01)))+(((IkReal(0.913811550000000))*(x329))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(x334)))+(((IkReal(4.85237587652042e-11))*(x329)))+(((cj3)*(py))));
evalcond[2]=((((r01)*(x332)))+(((IkReal(0.913811550000000))*(x337)))+(((IkReal(0.406138466127514))*(sj5)))+(((IkReal(-1.00000000000000))*(r02)*(x331)))+(((cj4)*(x335))));
evalcond[3]=((((IkReal(0.913811550000000))*(x338)))+(((IkReal(-0.406138466127514))*(cj5)))+(((IkReal(-1.00000000000000))*(r02)*(x333)))+(((IkReal(-1.00000000000000))*(x331)*(x335)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x331))));
evalcond[4]=((((IkReal(4.85237587652042e-11))*(x337)))+(((IkReal(0.0300000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(pz)*(x331)))+(((cj4)*(x336)))+(((py)*(x332)))+(((IkReal(0.333488578145101))*(sj5))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(4.85237587652042e-11))*(x338)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x331)))+(((IkReal(-0.333488578145101))*(cj5)))+(((IkReal(-1.00000000000000))*(pz)*(x333)))+(((IkReal(-1.00000000000000))*(x331)*(x336))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x339=((IkReal(20000000.0000000))*(sj4));
if( IKabs(((((IkReal(1.09431753188062))*(r00)*(sj3)))+(((IkReal(-1.09431753188062))*(cj3)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.47158765940308e-8))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(8122769.32255028))*(cj5)))+(((IkReal(20000000.0000000))*(cj4)*(r02)))+(((r01)*(sj3)*(x339)))+(((cj3)*(r00)*(x339))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.09431753188062))*(r00)*(sj3)))+(((IkReal(-1.09431753188062))*(cj3)*(r01)))))+IKsqr(((IkReal(5.47158765940308e-8))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(8122769.32255028))*(cj5)))+(((IkReal(20000000.0000000))*(cj4)*(r02)))+(((r01)*(sj3)*(x339)))+(((cj3)*(r00)*(x339)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(1.09431753188062))*(r00)*(sj3)))+(((IkReal(-1.09431753188062))*(cj3)*(r01)))), ((IkReal(5.47158765940308e-8))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(8122769.32255028))*(cj5)))+(((IkReal(20000000.0000000))*(cj4)*(r02)))+(((r01)*(sj3)*(x339)))+(((cj3)*(r00)*(x339)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x340=IKsin(j6);
IkReal x341=IKcos(j6);
IkReal x342=((IkReal(1.00000000000000))*(sj4));
IkReal x343=((cj4)*(sj3));
IkReal x344=((IkReal(1.00000000000000))*(cj4));
IkReal x345=((IkReal(1.00000000000000))*(sj3));
IkReal x346=((cj3)*(r00));
IkReal x347=((cj3)*(px));
IkReal x348=((cj5)*(x341));
IkReal x349=((sj5)*(x341));
evalcond[0]=((((cj3)*(r01)))+(((IkReal(0.913811550000000))*(x340)))+(((IkReal(-1.00000000000000))*(r00)*(x345))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(x345)))+(((cj3)*(py)))+(((IkReal(4.85237587652042e-11))*(x340))));
evalcond[2]=((((r01)*(x343)))+(((IkReal(-1.00000000000000))*(r02)*(x342)))+(((cj4)*(x346)))+(((IkReal(0.406138466127514))*(sj5)))+(((IkReal(0.913811550000000))*(x348))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r02)*(x344)))+(((IkReal(-0.406138466127514))*(cj5)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x342)))+(((IkReal(0.913811550000000))*(x349)))+(((IkReal(-1.00000000000000))*(x342)*(x346))));
evalcond[4]=((((py)*(x343)))+(((IkReal(0.0300000000000000))*(cj5)))+(((cj4)*(x347)))+(((IkReal(0.333488578145101))*(sj5)))+(((IkReal(4.85237587652042e-11))*(x348)))+(((IkReal(-1.00000000000000))*(pz)*(x342))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x342)))+(((IkReal(-0.333488578145101))*(cj5)))+(((IkReal(4.85237587652042e-11))*(x349)))+(((IkReal(-1.00000000000000))*(x342)*(x347)))+(((IkReal(-1.00000000000000))*(pz)*(x344))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x350=((IkReal(20000000.0000000))*(cj4));
if( IKabs(((((IkReal(1.09431753188062))*(r00)*(sj3)))+(((IkReal(-1.09431753188062))*(cj3)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.47158765940308e-8))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj3)*(r00)*(x350)))+(((IkReal(-8122769.32255028))*(sj5)))+(((IkReal(20000000.0000000))*(r02)*(sj4)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x350))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.09431753188062))*(r00)*(sj3)))+(((IkReal(-1.09431753188062))*(cj3)*(r01)))))+IKsqr(((IkReal(5.47158765940308e-8))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj3)*(r00)*(x350)))+(((IkReal(-8122769.32255028))*(sj5)))+(((IkReal(20000000.0000000))*(r02)*(sj4)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x350)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(1.09431753188062))*(r00)*(sj3)))+(((IkReal(-1.09431753188062))*(cj3)*(r01)))), ((IkReal(5.47158765940308e-8))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj3)*(r00)*(x350)))+(((IkReal(-8122769.32255028))*(sj5)))+(((IkReal(20000000.0000000))*(r02)*(sj4)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x350)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x351=IKsin(j6);
IkReal x352=IKcos(j6);
IkReal x353=((IkReal(1.00000000000000))*(sj4));
IkReal x354=((cj4)*(sj3));
IkReal x355=((IkReal(1.00000000000000))*(cj4));
IkReal x356=((IkReal(1.00000000000000))*(sj3));
IkReal x357=((cj3)*(r00));
IkReal x358=((cj3)*(px));
IkReal x359=((cj5)*(x352));
IkReal x360=((sj5)*(x352));
evalcond[0]=((((cj3)*(r01)))+(((IkReal(0.913811550000000))*(x351)))+(((IkReal(-1.00000000000000))*(r00)*(x356))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(x356)))+(((IkReal(4.85237587652042e-11))*(x351)))+(((cj3)*(py))));
evalcond[2]=((((r01)*(x354)))+(((cj4)*(x357)))+(((IkReal(0.406138466127514))*(sj5)))+(((IkReal(0.913811550000000))*(x359)))+(((IkReal(-1.00000000000000))*(r02)*(x353))));
evalcond[3]=((((IkReal(-0.406138466127514))*(cj5)))+(((IkReal(0.913811550000000))*(x360)))+(((IkReal(-1.00000000000000))*(x353)*(x357)))+(((IkReal(-1.00000000000000))*(r02)*(x355)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x353))));
evalcond[4]=((((IkReal(4.85237587652042e-11))*(x359)))+(((py)*(x354)))+(((IkReal(0.0300000000000000))*(cj5)))+(((cj4)*(x358)))+(((IkReal(0.333488578145101))*(sj5)))+(((IkReal(-1.00000000000000))*(pz)*(x353))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(-0.333488578145101))*(cj5)))+(((IkReal(4.85237587652042e-11))*(x360)))+(((IkReal(-1.00000000000000))*(x353)*(x358)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x353)))+(((IkReal(-1.00000000000000))*(pz)*(x355))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(0.418224329579229))+(j7)), IkReal(6.28318530717959))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
IkReal x361=((IkReal(1.00000000000000))*(sj4));
IkReal x362=((cj4)*(sj3));
IkReal x363=((cj3)*(cj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.406138466127514))+(((r01)*(x362)))+(((IkReal(-1.00000000000000))*(r02)*(x361)))+(((r00)*(x363))));
evalcond[2]=((IkReal(0.136511421854899))+(((py)*(x362)))+(((px)*(x363)))+(((IkReal(-1.00000000000000))*(pz)*(x361))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x364=((IkReal(1.09431753188062))*(sj4));
if( IKabs(((((IkReal(-1.09431753188062))*(r00)*(sj3)))+(((IkReal(1.09431753188062))*(cj3)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.09431753188062))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x364)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x364))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.09431753188062))*(r00)*(sj3)))+(((IkReal(1.09431753188062))*(cj3)*(r01)))))+IKsqr(((((IkReal(-1.09431753188062))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x364)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x364)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.09431753188062))*(r00)*(sj3)))+(((IkReal(1.09431753188062))*(cj3)*(r01)))), ((((IkReal(-1.09431753188062))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x364)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x364)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x365=IKsin(j6);
IkReal x366=IKcos(j6);
IkReal x367=((IkReal(1.00000000000000))*(cj4));
IkReal x368=((IkReal(1.00000000000000))*(sj4));
IkReal x369=((IkReal(1.00000000000000))*(sj3));
evalcond[0]=((((IkReal(-0.913811550000000))*(x365)))+(((IkReal(-1.00000000000000))*(r00)*(x369)))+(((cj3)*(r01))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(-4.85237587652042e-11))*(x365)))+(((cj3)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x369))));
evalcond[2]=((((IkReal(-0.913811550000000))*(x366)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x368)))+(((IkReal(-1.00000000000000))*(r02)*(x367)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x368))));
evalcond[3]=((IkReal(-0.220000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x368)))+(((IkReal(-4.85237587652042e-11))*(x366)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x368)))+(((IkReal(-1.00000000000000))*(pz)*(x367))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x370=((IkReal(1.00000000000000))*(sj4));
IkReal x371=((cj4)*(sj3));
IkReal x372=((cj3)*(cj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.406138466127514))+(((r00)*(x372)))+(((r01)*(x371)))+(((IkReal(-1.00000000000000))*(r02)*(x370))));
evalcond[2]=((IkReal(-0.136511421854899))+(((px)*(x372)))+(((py)*(x371)))+(((IkReal(-1.00000000000000))*(pz)*(x370))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x373=((IkReal(1.09431753188062))*(sj4));
if( IKabs(((((IkReal(-1.09431753188062))*(r00)*(sj3)))+(((IkReal(1.09431753188062))*(cj3)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(1.09431753188062))*(cj4)*(r02)))+(((r01)*(sj3)*(x373)))+(((cj3)*(r00)*(x373))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.09431753188062))*(r00)*(sj3)))+(((IkReal(1.09431753188062))*(cj3)*(r01)))))+IKsqr(((((IkReal(1.09431753188062))*(cj4)*(r02)))+(((r01)*(sj3)*(x373)))+(((cj3)*(r00)*(x373)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.09431753188062))*(r00)*(sj3)))+(((IkReal(1.09431753188062))*(cj3)*(r01)))), ((((IkReal(1.09431753188062))*(cj4)*(r02)))+(((r01)*(sj3)*(x373)))+(((cj3)*(r00)*(x373)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x374=IKsin(j6);
IkReal x375=IKcos(j6);
IkReal x376=((IkReal(1.00000000000000))*(cj4));
IkReal x377=((IkReal(1.00000000000000))*(sj4));
IkReal x378=((IkReal(1.00000000000000))*(sj3));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x378)))+(((cj3)*(r01)))+(((IkReal(-0.913811550000000))*(x374))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(-4.85237587652042e-11))*(x374)))+(((cj3)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x378))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj3)*(r00)*(x377)))+(((IkReal(-1.00000000000000))*(r02)*(x376)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x377)))+(((IkReal(0.913811550000000))*(x375))));
evalcond[3]=((IkReal(-0.280000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x377)))+(((IkReal(4.85237587652042e-11))*(x375)))+(((IkReal(-1.00000000000000))*(pz)*(x376)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x377))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x379=((IkReal(1.00000000000000))*(cj4));
IkReal x380=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.406138466127514))+(((IkReal(-1.00000000000000))*(r02)*(x379)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x380)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x380))));
evalcond[2]=((IkReal(-0.386511421854899))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x380)))+(((IkReal(-1.00000000000000))*(pz)*(x379)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x380))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x381=((IkReal(1.09431753188062))*(cj3));
IkReal x382=((IkReal(1.09431753188062))*(sj3));
if( IKabs(((((IkReal(-1.00000000000000))*(r00)*(x382)))+(((r01)*(x381))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(r01)*(x382)))+(((cj4)*(r00)*(x381)))+(((IkReal(-1.09431753188062))*(r02)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r00)*(x382)))+(((r01)*(x381)))))+IKsqr(((((cj4)*(r01)*(x382)))+(((cj4)*(r00)*(x381)))+(((IkReal(-1.09431753188062))*(r02)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r00)*(x382)))+(((r01)*(x381)))), ((((cj4)*(r01)*(x382)))+(((cj4)*(r00)*(x381)))+(((IkReal(-1.09431753188062))*(r02)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x383=IKsin(j6);
IkReal x384=IKcos(j6);
IkReal x385=((IkReal(1.00000000000000))*(sj4));
IkReal x386=((cj4)*(sj3));
IkReal x387=((cj3)*(cj4));
IkReal x388=((IkReal(1.00000000000000))*(sj3));
evalcond[0]=((((cj3)*(r01)))+(((IkReal(-0.913811550000000))*(x383)))+(((IkReal(-1.00000000000000))*(r00)*(x388))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(-4.85237587652042e-11))*(x383)))+(((IkReal(-1.00000000000000))*(px)*(x388)))+(((cj3)*(py))));
evalcond[2]=((((IkReal(-0.913811550000000))*(x384)))+(((IkReal(-1.00000000000000))*(r02)*(x385)))+(((r00)*(x387)))+(((r01)*(x386))));
evalcond[3]=((IkReal(0.0300000000000000))+(((px)*(x387)))+(((IkReal(-4.85237587652042e-11))*(x384)))+(((py)*(x386)))+(((IkReal(-1.00000000000000))*(pz)*(x385))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x389=((IkReal(1.00000000000000))*(cj4));
IkReal x390=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.406138466127514))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x390)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x390)))+(((IkReal(-1.00000000000000))*(r02)*(x389))));
evalcond[2]=((IkReal(-0.113488578145101))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x390)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x390)))+(((IkReal(-1.00000000000000))*(pz)*(x389))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x391=((IkReal(1.09431753188062))*(cj3));
IkReal x392=((IkReal(1.09431753188062))*(sj3));
if( IKabs(((((IkReal(-1.00000000000000))*(r00)*(x392)))+(((r01)*(x391))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(1.09431753188062))*(r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(x391)))+(((IkReal(-1.00000000000000))*(cj4)*(r01)*(x392))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r00)*(x392)))+(((r01)*(x391)))))+IKsqr(((((IkReal(1.09431753188062))*(r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(x391)))+(((IkReal(-1.00000000000000))*(cj4)*(r01)*(x392)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r00)*(x392)))+(((r01)*(x391)))), ((((IkReal(1.09431753188062))*(r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(x391)))+(((IkReal(-1.00000000000000))*(cj4)*(r01)*(x392)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x393=IKsin(j6);
IkReal x394=IKcos(j6);
IkReal x395=((IkReal(1.00000000000000))*(sj4));
IkReal x396=((cj4)*(sj3));
IkReal x397=((cj3)*(cj4));
IkReal x398=((IkReal(1.00000000000000))*(sj3));
evalcond[0]=((((IkReal(-0.913811550000000))*(x393)))+(((IkReal(-1.00000000000000))*(r00)*(x398)))+(((cj3)*(r01))));
evalcond[1]=((IkReal(0.0950000000000000))+(((cj3)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x398)))+(((IkReal(-4.85237587652042e-11))*(x393))));
evalcond[2]=((((r00)*(x397)))+(((IkReal(-1.00000000000000))*(r02)*(x395)))+(((r01)*(x396)))+(((IkReal(0.913811550000000))*(x394))));
evalcond[3]=((IkReal(-0.0300000000000000))+(((py)*(x396)))+(((IkReal(-1.00000000000000))*(pz)*(x395)))+(((IkReal(4.85237587652042e-11))*(x394)))+(((px)*(x397))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x399=((IkReal(20000000.0000000))*(cj4));
if( IKabs(((IkReal(1957803814.40943))+(((IkReal(-20608461204.3098))*(px)*(sj3)))+(((IkReal(20608461204.3098))*(cj3)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.47158765940308e-8))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj5)))+(((r01)*(sj3)*(x399)))+(((cj3)*(r00)*(x399)))+(((IkReal(-20000000.0000000))*(r02)*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1957803814.40943))+(((IkReal(-20608461204.3098))*(px)*(sj3)))+(((IkReal(20608461204.3098))*(cj3)*(py)))))+IKsqr(((IkReal(5.47158765940308e-8))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj5)))+(((r01)*(sj3)*(x399)))+(((cj3)*(r00)*(x399)))+(((IkReal(-20000000.0000000))*(r02)*(sj4)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(1957803814.40943))+(((IkReal(-20608461204.3098))*(px)*(sj3)))+(((IkReal(20608461204.3098))*(cj3)*(py)))), ((IkReal(5.47158765940308e-8))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj5)))+(((r01)*(sj3)*(x399)))+(((cj3)*(r00)*(x399)))+(((IkReal(-20000000.0000000))*(r02)*(sj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x400=IKsin(j6);
IkReal x401=IKcos(j6);
IkReal x402=((IkReal(1.00000000000000))*(sj4));
IkReal x403=((cj4)*(sj3));
IkReal x404=((IkReal(1.00000000000000))*(cj4));
IkReal x405=((IkReal(1.00000000000000))*(sj3));
IkReal x406=((cj3)*(r00));
IkReal x407=((cj3)*(px));
IkReal x408=((cj5)*(x401));
IkReal x409=((sj5)*(x401));
evalcond[0]=((((cj3)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x405)))+(((IkReal(-0.913811550000000))*(x400))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(x405)))+(((IkReal(-4.85237587652042e-11))*(x400)))+(((cj3)*(py))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x402)))+(((cj4)*(x406)))+(((r01)*(x403)))+(((IkReal(-0.913811550000000))*(x408)))+(((IkReal(-0.406138466127514))*(sj5))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r01)*(sj3)*(x402)))+(((IkReal(-1.00000000000000))*(r02)*(x404)))+(((IkReal(-1.00000000000000))*(x402)*(x406)))+(((IkReal(0.406138466127514))*(cj5)))+(((IkReal(-0.913811550000000))*(x409))));
evalcond[4]=((((py)*(x403)))+(((IkReal(0.0300000000000000))*(cj5)))+(((cj4)*(x407)))+(((IkReal(0.136511421854899))*(sj5)))+(((IkReal(-4.85237587652042e-11))*(x408)))+(((IkReal(-1.00000000000000))*(pz)*(x402))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x402)))+(((IkReal(-1.00000000000000))*(x402)*(x407)))+(((IkReal(-0.136511421854899))*(cj5)))+(((IkReal(-4.85237587652042e-11))*(x409)))+(((IkReal(-1.00000000000000))*(pz)*(x404))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x410=((IkReal(20000000.0000000))*(sj4));
if( IKabs(((((IkReal(-1.09431753188062))*(r00)*(sj3)))+(((IkReal(1.09431753188062))*(cj3)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.47158765940308e-8))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj3)*(x410)))+(((IkReal(8122769.32255028))*(cj5)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x410)))+(((IkReal(-20000000.0000000))*(cj4)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.09431753188062))*(r00)*(sj3)))+(((IkReal(1.09431753188062))*(cj3)*(r01)))))+IKsqr(((IkReal(5.47158765940308e-8))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj3)*(x410)))+(((IkReal(8122769.32255028))*(cj5)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x410)))+(((IkReal(-20000000.0000000))*(cj4)*(r02)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.09431753188062))*(r00)*(sj3)))+(((IkReal(1.09431753188062))*(cj3)*(r01)))), ((IkReal(5.47158765940308e-8))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj3)*(x410)))+(((IkReal(8122769.32255028))*(cj5)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x410)))+(((IkReal(-20000000.0000000))*(cj4)*(r02)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x411=IKsin(j6);
IkReal x412=IKcos(j6);
IkReal x413=((IkReal(1.00000000000000))*(sj4));
IkReal x414=((cj4)*(sj3));
IkReal x415=((IkReal(1.00000000000000))*(cj4));
IkReal x416=((IkReal(1.00000000000000))*(sj3));
IkReal x417=((cj3)*(r00));
IkReal x418=((cj3)*(px));
IkReal x419=((cj5)*(x412));
IkReal x420=((sj5)*(x412));
evalcond[0]=((((IkReal(-0.913811550000000))*(x411)))+(((cj3)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x416))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(x416)))+(((IkReal(-4.85237587652042e-11))*(x411)))+(((cj3)*(py))));
evalcond[2]=((((IkReal(-0.913811550000000))*(x419)))+(((IkReal(-1.00000000000000))*(r02)*(x413)))+(((cj4)*(x417)))+(((r01)*(x414)))+(((IkReal(-0.406138466127514))*(sj5))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r01)*(sj3)*(x413)))+(((IkReal(-1.00000000000000))*(r02)*(x415)))+(((IkReal(0.406138466127514))*(cj5)))+(((IkReal(-1.00000000000000))*(x413)*(x417)))+(((IkReal(-0.913811550000000))*(x420))));
evalcond[4]=((((py)*(x414)))+(((cj4)*(x418)))+(((IkReal(0.0300000000000000))*(cj5)))+(((IkReal(0.136511421854899))*(sj5)))+(((IkReal(-4.85237587652042e-11))*(x419)))+(((IkReal(-1.00000000000000))*(pz)*(x413))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x413)))+(((IkReal(-0.136511421854899))*(cj5)))+(((IkReal(-1.00000000000000))*(x413)*(x418)))+(((IkReal(-4.85237587652042e-11))*(x420)))+(((IkReal(-1.00000000000000))*(pz)*(x415))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x421=((IkReal(20000000.0000000))*(cj4));
if( IKabs(((((IkReal(-1.09431753188062))*(r00)*(sj3)))+(((IkReal(1.09431753188062))*(cj3)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.47158765940308e-8))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((r01)*(sj3)*(x421)))+(((IkReal(-8122769.32255028))*(sj5)))+(((IkReal(-20000000.0000000))*(r02)*(sj4)))+(((cj3)*(r00)*(x421))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.09431753188062))*(r00)*(sj3)))+(((IkReal(1.09431753188062))*(cj3)*(r01)))))+IKsqr(((IkReal(5.47158765940308e-8))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((r01)*(sj3)*(x421)))+(((IkReal(-8122769.32255028))*(sj5)))+(((IkReal(-20000000.0000000))*(r02)*(sj4)))+(((cj3)*(r00)*(x421)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.09431753188062))*(r00)*(sj3)))+(((IkReal(1.09431753188062))*(cj3)*(r01)))), ((IkReal(5.47158765940308e-8))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((r01)*(sj3)*(x421)))+(((IkReal(-8122769.32255028))*(sj5)))+(((IkReal(-20000000.0000000))*(r02)*(sj4)))+(((cj3)*(r00)*(x421)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x422=IKsin(j6);
IkReal x423=IKcos(j6);
IkReal x424=((IkReal(1.00000000000000))*(sj4));
IkReal x425=((cj4)*(sj3));
IkReal x426=((IkReal(1.00000000000000))*(cj4));
IkReal x427=((IkReal(1.00000000000000))*(sj3));
IkReal x428=((cj3)*(r00));
IkReal x429=((cj3)*(px));
IkReal x430=((cj5)*(x423));
IkReal x431=((sj5)*(x423));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x427)))+(((cj3)*(r01)))+(((IkReal(-0.913811550000000))*(x422))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(x427)))+(((IkReal(-4.85237587652042e-11))*(x422)))+(((cj3)*(py))));
evalcond[2]=((((IkReal(-0.913811550000000))*(x430)))+(((cj4)*(x428)))+(((IkReal(-1.00000000000000))*(r02)*(x424)))+(((r01)*(x425)))+(((IkReal(-0.406138466127514))*(sj5))));
evalcond[3]=((((IkReal(-0.913811550000000))*(x431)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x424)))+(((IkReal(-1.00000000000000))*(r02)*(x426)))+(((IkReal(0.406138466127514))*(cj5)))+(((IkReal(-1.00000000000000))*(x424)*(x428))));
evalcond[4]=((((IkReal(0.0300000000000000))*(cj5)))+(((cj4)*(x429)))+(((IkReal(0.136511421854899))*(sj5)))+(((py)*(x425)))+(((IkReal(-1.00000000000000))*(pz)*(x424)))+(((IkReal(-4.85237587652042e-11))*(x430))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(-0.136511421854899))*(cj5)))+(((IkReal(-1.00000000000000))*(x424)*(x429)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x424)))+(((IkReal(-1.00000000000000))*(pz)*(x426)))+(((IkReal(-4.85237587652042e-11))*(x431))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x432=((r01)*(sj3));
IkReal x433=((IkReal(1.00000000000000))*(sj4));
IkReal x434=((cj3)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j7)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj3)))+(((cj3)*(r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj5)))+(((cj4)*(x434)))+(((cj4)*(x432)))+(((IkReal(-1.00000000000000))*(r02)*(x433))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(x433)*(x434)))+(cj5)+(((IkReal(-1.00000000000000))*(x432)*(x433))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x435=((r01)*(sj3));
IkReal x436=((IkReal(1.00000000000000))*(sj4));
IkReal x437=((cj3)*(r00));
IkReal x438=((IkReal(1.00000000000000))*(cj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj3)))+(((cj3)*(r01))));
evalcond[2]=((((cj4)*(x435)))+(((cj4)*(x437)))+(((IkReal(-1.00000000000000))*(r02)*(x436))));
evalcond[3]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x435)*(x436)))+(((IkReal(-1.00000000000000))*(x436)*(x437)))+(((IkReal(-1.00000000000000))*(r02)*(x438))));
evalcond[4]=((IkReal(-0.445000000000000))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x436)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x436)))+(((IkReal(-1.00000000000000))*(pz)*(x438))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x439=((IkReal(11.1111111111111))*(py));
IkReal x440=((IkReal(11.1111111111111))*(px));
if( IKabs(((IkReal(-1.05555555555556))+(((IkReal(-1.00000000000000))*(cj3)*(x439)))+(((sj3)*(x440))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.333333333333333))+(((IkReal(11.1111111111111))*(pz)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(sj3)*(x439)))+(((IkReal(-1.00000000000000))*(cj3)*(cj4)*(x440))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.05555555555556))+(((IkReal(-1.00000000000000))*(cj3)*(x439)))+(((sj3)*(x440)))))+IKsqr(((IkReal(-0.333333333333333))+(((IkReal(11.1111111111111))*(pz)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(sj3)*(x439)))+(((IkReal(-1.00000000000000))*(cj3)*(cj4)*(x440)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.05555555555556))+(((IkReal(-1.00000000000000))*(cj3)*(x439)))+(((sj3)*(x440)))), ((IkReal(-0.333333333333333))+(((IkReal(11.1111111111111))*(pz)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(sj3)*(x439)))+(((IkReal(-1.00000000000000))*(cj3)*(cj4)*(x440)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0950000000000000))+(((IkReal(0.0900000000000000))*(IKsin(j6))))+(((IkReal(-1.00000000000000))*(px)*(sj3)))+(((cj3)*(py))));
evalcond[1]=((IkReal(0.0300000000000000))+(((cj4)*(py)*(sj3)))+(((cj3)*(cj4)*(px)))+(((IkReal(-1.00000000000000))*(pz)*(sj4)))+(((IkReal(0.0900000000000000))*(IKcos(j6)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x441=((r01)*(sj3));
IkReal x442=((IkReal(1.00000000000000))*(sj4));
IkReal x443=((cj3)*(r00));
IkReal x444=((IkReal(1.00000000000000))*(cj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj3)))+(((cj3)*(r01))));
evalcond[2]=((((cj4)*(x443)))+(((cj4)*(x441)))+(((IkReal(-1.00000000000000))*(r02)*(x442))));
evalcond[3]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r02)*(x444)))+(((IkReal(-1.00000000000000))*(x441)*(x442)))+(((IkReal(-1.00000000000000))*(x442)*(x443))));
evalcond[4]=((IkReal(-0.0550000000000000))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x442)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x442)))+(((IkReal(-1.00000000000000))*(pz)*(x444))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x445=((IkReal(11.1111111111111))*(py));
IkReal x446=((IkReal(11.1111111111111))*(px));
if( IKabs(((IkReal(-1.05555555555556))+(((IkReal(-1.00000000000000))*(cj3)*(x445)))+(((sj3)*(x446))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.333333333333333))+(((cj4)*(sj3)*(x445)))+(((IkReal(-11.1111111111111))*(pz)*(sj4)))+(((cj3)*(cj4)*(x446))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.05555555555556))+(((IkReal(-1.00000000000000))*(cj3)*(x445)))+(((sj3)*(x446)))))+IKsqr(((IkReal(-0.333333333333333))+(((cj4)*(sj3)*(x445)))+(((IkReal(-11.1111111111111))*(pz)*(sj4)))+(((cj3)*(cj4)*(x446)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.05555555555556))+(((IkReal(-1.00000000000000))*(cj3)*(x445)))+(((sj3)*(x446)))), ((IkReal(-0.333333333333333))+(((cj4)*(sj3)*(x445)))+(((IkReal(-11.1111111111111))*(pz)*(sj4)))+(((cj3)*(cj4)*(x446)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0950000000000000))+(((IkReal(0.0900000000000000))*(IKsin(j6))))+(((IkReal(-1.00000000000000))*(px)*(sj3)))+(((cj3)*(py))));
evalcond[1]=((IkReal(-0.0300000000000000))+(((IkReal(-0.0900000000000000))*(IKcos(j6))))+(((cj4)*(py)*(sj3)))+(((cj3)*(cj4)*(px)))+(((IkReal(-1.00000000000000))*(pz)*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x447=((r01)*(sj3));
IkReal x448=((IkReal(1.00000000000000))*(sj4));
IkReal x449=((cj3)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj3)))+(((cj3)*(r01))));
evalcond[2]=((IkReal(-1.00000000000000))+(((cj4)*(x449)))+(((cj4)*(x447)))+(((IkReal(-1.00000000000000))*(r02)*(x448))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(x448)*(x449)))+(((IkReal(-1.00000000000000))*(x447)*(x448))));
evalcond[4]=((IkReal(0.195000000000000))+(((cj4)*(py)*(sj3)))+(((cj3)*(cj4)*(px)))+(((IkReal(-1.00000000000000))*(pz)*(x448))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x450=((IkReal(11.1111111111111))*(py));
IkReal x451=((IkReal(11.1111111111111))*(px));
if( IKabs(((IkReal(-1.05555555555556))+(((sj3)*(x451)))+(((IkReal(-1.00000000000000))*(cj3)*(x450))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(2.44444444444444))+(((sj3)*(sj4)*(x450)))+(((cj3)*(sj4)*(x451)))+(((IkReal(11.1111111111111))*(cj4)*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.05555555555556))+(((sj3)*(x451)))+(((IkReal(-1.00000000000000))*(cj3)*(x450)))))+IKsqr(((IkReal(2.44444444444444))+(((sj3)*(sj4)*(x450)))+(((cj3)*(sj4)*(x451)))+(((IkReal(11.1111111111111))*(cj4)*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.05555555555556))+(((sj3)*(x451)))+(((IkReal(-1.00000000000000))*(cj3)*(x450)))), ((IkReal(2.44444444444444))+(((sj3)*(sj4)*(x450)))+(((cj3)*(sj4)*(x451)))+(((IkReal(11.1111111111111))*(cj4)*(pz)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x452=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(0.0950000000000000))+(((IkReal(0.0900000000000000))*(IKsin(j6))))+(((IkReal(-1.00000000000000))*(px)*(sj3)))+(((cj3)*(py))));
evalcond[1]=((IkReal(-0.220000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x452)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x452)))+(((IkReal(-1.00000000000000))*(cj4)*(pz)))+(((IkReal(0.0900000000000000))*(IKcos(j6)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x453=((r01)*(sj3));
IkReal x454=((IkReal(1.00000000000000))*(sj4));
IkReal x455=((cj3)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj3)))+(((cj3)*(r01))));
evalcond[2]=((IkReal(1.00000000000000))+(((cj4)*(x453)))+(((cj4)*(x455)))+(((IkReal(-1.00000000000000))*(r02)*(x454))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(x454)*(x455)))+(((IkReal(-1.00000000000000))*(x453)*(x454))));
evalcond[4]=((IkReal(-0.195000000000000))+(((cj4)*(py)*(sj3)))+(((cj3)*(cj4)*(px)))+(((IkReal(-1.00000000000000))*(pz)*(x454))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x456=((IkReal(11.1111111111111))*(py));
IkReal x457=((IkReal(11.1111111111111))*(px));
if( IKabs(((IkReal(-1.05555555555556))+(((sj3)*(x457)))+(((IkReal(-1.00000000000000))*(cj3)*(x456))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-3.11111111111111))+(((IkReal(-1.00000000000000))*(sj3)*(sj4)*(x456)))+(((IkReal(-11.1111111111111))*(cj4)*(pz)))+(((IkReal(-1.00000000000000))*(cj3)*(sj4)*(x457))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.05555555555556))+(((sj3)*(x457)))+(((IkReal(-1.00000000000000))*(cj3)*(x456)))))+IKsqr(((IkReal(-3.11111111111111))+(((IkReal(-1.00000000000000))*(sj3)*(sj4)*(x456)))+(((IkReal(-11.1111111111111))*(cj4)*(pz)))+(((IkReal(-1.00000000000000))*(cj3)*(sj4)*(x457)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.05555555555556))+(((sj3)*(x457)))+(((IkReal(-1.00000000000000))*(cj3)*(x456)))), ((IkReal(-3.11111111111111))+(((IkReal(-1.00000000000000))*(sj3)*(sj4)*(x456)))+(((IkReal(-11.1111111111111))*(cj4)*(pz)))+(((IkReal(-1.00000000000000))*(cj3)*(sj4)*(x457)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x458=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(0.0950000000000000))+(((IkReal(0.0900000000000000))*(IKsin(j6))))+(((IkReal(-1.00000000000000))*(px)*(sj3)))+(((cj3)*(py))));
evalcond[1]=((IkReal(-0.280000000000000))+(((IkReal(-0.0900000000000000))*(IKcos(j6))))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x458)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x458)))+(((IkReal(-1.00000000000000))*(cj4)*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x459=((IkReal(100.000000000000))*(sj4));
if( IKabs(((IkReal(-1.05555555555556))+(((IkReal(-11.1111111111111))*(cj3)*(py)))+(((IkReal(11.1111111111111))*(px)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.111111111111111))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((IkReal(25.0000000000000))+(((IkReal(-3.00000000000000))*(sj5)))+(((cj3)*(px)*(x459)))+(((IkReal(19.5000000000000))*(cj5)))+(((IkReal(100.000000000000))*(cj4)*(pz)))+(((py)*(sj3)*(x459))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.05555555555556))+(((IkReal(-11.1111111111111))*(cj3)*(py)))+(((IkReal(11.1111111111111))*(px)*(sj3)))))+IKsqr(((IkReal(0.111111111111111))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((IkReal(25.0000000000000))+(((IkReal(-3.00000000000000))*(sj5)))+(((cj3)*(px)*(x459)))+(((IkReal(19.5000000000000))*(cj5)))+(((IkReal(100.000000000000))*(cj4)*(pz)))+(((py)*(sj3)*(x459)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.05555555555556))+(((IkReal(-11.1111111111111))*(cj3)*(py)))+(((IkReal(11.1111111111111))*(px)*(sj3)))), ((IkReal(0.111111111111111))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((IkReal(25.0000000000000))+(((IkReal(-3.00000000000000))*(sj5)))+(((cj3)*(px)*(x459)))+(((IkReal(19.5000000000000))*(cj5)))+(((IkReal(100.000000000000))*(cj4)*(pz)))+(((py)*(sj3)*(x459)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x460=IKcos(j6);
IkReal x461=((IkReal(1.00000000000000))*(pz));
IkReal x462=((py)*(sj3));
IkReal x463=((cj3)*(px));
IkReal x464=((IkReal(1.00000000000000))*(sj4));
IkReal x465=((IkReal(0.0900000000000000))*(x460));
evalcond[0]=((IkReal(0.0950000000000000))+(((IkReal(0.0900000000000000))*(IKsin(j6))))+(((IkReal(-1.00000000000000))*(px)*(sj3)))+(((cj3)*(py))));
evalcond[1]=((((cj4)*(x462)))+(((cj4)*(x463)))+(((cj5)*(x465)))+(((IkReal(-1.00000000000000))*(sj4)*(x461)))+(((IkReal(0.195000000000000))*(sj5)))+(((IkReal(0.0300000000000000))*(cj5))));
evalcond[2]=((IkReal(-0.250000000000000))+(((IkReal(-1.00000000000000))*(x462)*(x464)))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(x463)*(x464)))+(((IkReal(-1.00000000000000))*(cj4)*(x461)))+(((IkReal(-0.195000000000000))*(cj5)))+(((sj5)*(x465))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x466=((IkReal(100.000000000000))*(cj4));
if( IKabs(((IkReal(-1.05555555555556))+(((IkReal(-11.1111111111111))*(cj3)*(py)))+(((IkReal(11.1111111111111))*(px)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.111111111111111))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(py)*(sj3)*(x466)))+(((IkReal(-19.5000000000000))*(sj5)))+(((IkReal(100.000000000000))*(pz)*(sj4)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x466)))+(((IkReal(-3.00000000000000))*(cj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.05555555555556))+(((IkReal(-11.1111111111111))*(cj3)*(py)))+(((IkReal(11.1111111111111))*(px)*(sj3)))))+IKsqr(((IkReal(0.111111111111111))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(py)*(sj3)*(x466)))+(((IkReal(-19.5000000000000))*(sj5)))+(((IkReal(100.000000000000))*(pz)*(sj4)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x466)))+(((IkReal(-3.00000000000000))*(cj5)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.05555555555556))+(((IkReal(-11.1111111111111))*(cj3)*(py)))+(((IkReal(11.1111111111111))*(px)*(sj3)))), ((IkReal(0.111111111111111))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(py)*(sj3)*(x466)))+(((IkReal(-19.5000000000000))*(sj5)))+(((IkReal(100.000000000000))*(pz)*(sj4)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x466)))+(((IkReal(-3.00000000000000))*(cj5)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x467=IKcos(j6);
IkReal x468=((IkReal(1.00000000000000))*(pz));
IkReal x469=((py)*(sj3));
IkReal x470=((cj3)*(px));
IkReal x471=((IkReal(1.00000000000000))*(sj4));
IkReal x472=((IkReal(0.0900000000000000))*(x467));
evalcond[0]=((IkReal(0.0950000000000000))+(((IkReal(0.0900000000000000))*(IKsin(j6))))+(((IkReal(-1.00000000000000))*(px)*(sj3)))+(((cj3)*(py))));
evalcond[1]=((((cj5)*(x472)))+(((cj4)*(x470)))+(((cj4)*(x469)))+(((IkReal(-1.00000000000000))*(sj4)*(x468)))+(((IkReal(0.195000000000000))*(sj5)))+(((IkReal(0.0300000000000000))*(cj5))));
evalcond[2]=((IkReal(-0.250000000000000))+(((sj5)*(x472)))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj4)*(x468)))+(((IkReal(-0.195000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(x469)*(x471)))+(((IkReal(-1.00000000000000))*(x470)*(x471))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x473=((r01)*(sj3));
IkReal x474=((IkReal(1.00000000000000))*(sj4));
IkReal x475=((cj3)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j7)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj3)))+(((cj3)*(r01))));
evalcond[2]=((((cj4)*(x473)))+(((cj4)*(x475)))+(sj5)+(((IkReal(-1.00000000000000))*(r02)*(x474))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(x473)*(x474)))+(((IkReal(-1.00000000000000))*(x474)*(x475)))+(((IkReal(-1.00000000000000))*(cj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x476=((r01)*(sj3));
IkReal x477=((IkReal(1.00000000000000))*(sj4));
IkReal x478=((cj3)*(r00));
IkReal x479=((IkReal(1.00000000000000))*(cj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj3)))+(((cj3)*(r01))));
evalcond[2]=((((cj4)*(x478)))+(((cj4)*(x476)))+(((IkReal(-1.00000000000000))*(r02)*(x477))));
evalcond[3]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x477)*(x478)))+(((IkReal(-1.00000000000000))*(x476)*(x477)))+(((IkReal(-1.00000000000000))*(r02)*(x479))));
evalcond[4]=((IkReal(-0.525000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x479)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x477)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x477))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x480=((IkReal(11.1111111111111))*(py));
IkReal x481=((IkReal(11.1111111111111))*(px));
if( IKabs(((IkReal(1.05555555555556))+(((cj3)*(x480)))+(((IkReal(-1.00000000000000))*(sj3)*(x481))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.333333333333333))+(((cj4)*(sj3)*(x480)))+(((cj3)*(cj4)*(x481)))+(((IkReal(-11.1111111111111))*(pz)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.05555555555556))+(((cj3)*(x480)))+(((IkReal(-1.00000000000000))*(sj3)*(x481)))))+IKsqr(((IkReal(0.333333333333333))+(((cj4)*(sj3)*(x480)))+(((cj3)*(cj4)*(x481)))+(((IkReal(-11.1111111111111))*(pz)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(1.05555555555556))+(((cj3)*(x480)))+(((IkReal(-1.00000000000000))*(sj3)*(x481)))), ((IkReal(0.333333333333333))+(((cj4)*(sj3)*(x480)))+(((cj3)*(cj4)*(x481)))+(((IkReal(-11.1111111111111))*(pz)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(sj3)))+(((cj3)*(py)))+(((IkReal(-0.0900000000000000))*(IKsin(j6)))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0900000000000000))*(IKcos(j6))))+(((cj4)*(py)*(sj3)))+(((cj3)*(cj4)*(px)))+(((IkReal(-1.00000000000000))*(pz)*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x482=((r01)*(sj3));
IkReal x483=((IkReal(1.00000000000000))*(sj4));
IkReal x484=((cj3)*(r00));
IkReal x485=((IkReal(1.00000000000000))*(cj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj3)))+(((cj3)*(r01))));
evalcond[2]=((((cj4)*(x484)))+(((cj4)*(x482)))+(((IkReal(-1.00000000000000))*(r02)*(x483))));
evalcond[3]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x483)*(x484)))+(((IkReal(-1.00000000000000))*(x482)*(x483)))+(((IkReal(-1.00000000000000))*(r02)*(x485))));
evalcond[4]=((IkReal(0.0250000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x485)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x483)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x483))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x486=((IkReal(11.1111111111111))*(py));
IkReal x487=((IkReal(11.1111111111111))*(px));
if( IKabs(((IkReal(1.05555555555556))+(((cj3)*(x486)))+(((IkReal(-1.00000000000000))*(sj3)*(x487))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.333333333333333))+(((IkReal(11.1111111111111))*(pz)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(sj3)*(x486)))+(((IkReal(-1.00000000000000))*(cj3)*(cj4)*(x487))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.05555555555556))+(((cj3)*(x486)))+(((IkReal(-1.00000000000000))*(sj3)*(x487)))))+IKsqr(((IkReal(0.333333333333333))+(((IkReal(11.1111111111111))*(pz)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(sj3)*(x486)))+(((IkReal(-1.00000000000000))*(cj3)*(cj4)*(x487)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(1.05555555555556))+(((cj3)*(x486)))+(((IkReal(-1.00000000000000))*(sj3)*(x487)))), ((IkReal(0.333333333333333))+(((IkReal(11.1111111111111))*(pz)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(sj3)*(x486)))+(((IkReal(-1.00000000000000))*(cj3)*(cj4)*(x487)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(sj3)))+(((cj3)*(py)))+(((IkReal(-0.0900000000000000))*(IKsin(j6)))));
evalcond[1]=((IkReal(-0.0300000000000000))+(((cj4)*(py)*(sj3)))+(((cj3)*(cj4)*(px)))+(((IkReal(-1.00000000000000))*(pz)*(sj4)))+(((IkReal(0.0900000000000000))*(IKcos(j6)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x488=((r01)*(sj3));
IkReal x489=((IkReal(1.00000000000000))*(sj4));
IkReal x490=((cj3)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj3)))+(((cj3)*(r01))));
evalcond[2]=((IkReal(1.00000000000000))+(((cj4)*(x490)))+(((cj4)*(x488)))+(((IkReal(-1.00000000000000))*(r02)*(x489))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(x489)*(x490)))+(((IkReal(-1.00000000000000))*(x488)*(x489))));
evalcond[4]=((IkReal(0.275000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x489)))+(((cj4)*(py)*(sj3)))+(((cj3)*(cj4)*(px))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x491=((IkReal(11.1111111111111))*(py));
IkReal x492=((IkReal(11.1111111111111))*(px));
if( IKabs(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(sj3)*(x492)))+(((cj3)*(x491))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-2.44444444444444))+(((IkReal(-1.00000000000000))*(cj3)*(sj4)*(x492)))+(((IkReal(-11.1111111111111))*(cj4)*(pz)))+(((IkReal(-1.00000000000000))*(sj3)*(sj4)*(x491))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(sj3)*(x492)))+(((cj3)*(x491)))))+IKsqr(((IkReal(-2.44444444444444))+(((IkReal(-1.00000000000000))*(cj3)*(sj4)*(x492)))+(((IkReal(-11.1111111111111))*(cj4)*(pz)))+(((IkReal(-1.00000000000000))*(sj3)*(sj4)*(x491)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(sj3)*(x492)))+(((cj3)*(x491)))), ((IkReal(-2.44444444444444))+(((IkReal(-1.00000000000000))*(cj3)*(sj4)*(x492)))+(((IkReal(-11.1111111111111))*(cj4)*(pz)))+(((IkReal(-1.00000000000000))*(sj3)*(sj4)*(x491)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x493=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(sj3)))+(((cj3)*(py)))+(((IkReal(-0.0900000000000000))*(IKsin(j6)))));
evalcond[1]=((IkReal(-0.220000000000000))+(((IkReal(-0.0900000000000000))*(IKcos(j6))))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x493)))+(((IkReal(-1.00000000000000))*(cj4)*(pz)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x493))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x494=((r01)*(sj3));
IkReal x495=((IkReal(1.00000000000000))*(sj4));
IkReal x496=((cj3)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj3)))+(((cj3)*(r01))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r02)*(x495)))+(((cj4)*(x494)))+(((cj4)*(x496))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(x494)*(x495)))+(((IkReal(-1.00000000000000))*(x495)*(x496))));
evalcond[4]=((IkReal(-0.275000000000000))+(((cj4)*(py)*(sj3)))+(((cj3)*(cj4)*(px)))+(((IkReal(-1.00000000000000))*(pz)*(x495))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x497=((IkReal(11.1111111111111))*(py));
IkReal x498=((IkReal(11.1111111111111))*(px));
if( IKabs(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(sj3)*(x498)))+(((cj3)*(x497))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(3.11111111111111))+(((sj3)*(sj4)*(x497)))+(((cj3)*(sj4)*(x498)))+(((IkReal(11.1111111111111))*(cj4)*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(sj3)*(x498)))+(((cj3)*(x497)))))+IKsqr(((IkReal(3.11111111111111))+(((sj3)*(sj4)*(x497)))+(((cj3)*(sj4)*(x498)))+(((IkReal(11.1111111111111))*(cj4)*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(sj3)*(x498)))+(((cj3)*(x497)))), ((IkReal(3.11111111111111))+(((sj3)*(sj4)*(x497)))+(((cj3)*(sj4)*(x498)))+(((IkReal(11.1111111111111))*(cj4)*(pz)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x499=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(sj3)))+(((cj3)*(py)))+(((IkReal(-0.0900000000000000))*(IKsin(j6)))));
evalcond[1]=((IkReal(-0.280000000000000))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x499)))+(((IkReal(-1.00000000000000))*(cj4)*(pz)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x499)))+(((IkReal(0.0900000000000000))*(IKcos(j6)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x500=((IkReal(100.000000000000))*(sj4));
if( IKabs(((IkReal(1.05555555555556))+(((IkReal(-11.1111111111111))*(px)*(sj3)))+(((IkReal(11.1111111111111))*(cj3)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.111111111111111))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((IkReal(-25.0000000000000))+(((IkReal(-27.5000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x500)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x500)))+(((IkReal(-100.000000000000))*(cj4)*(pz)))+(((IkReal(3.00000000000000))*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.05555555555556))+(((IkReal(-11.1111111111111))*(px)*(sj3)))+(((IkReal(11.1111111111111))*(cj3)*(py)))))+IKsqr(((IkReal(0.111111111111111))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((IkReal(-25.0000000000000))+(((IkReal(-27.5000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x500)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x500)))+(((IkReal(-100.000000000000))*(cj4)*(pz)))+(((IkReal(3.00000000000000))*(sj5)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(1.05555555555556))+(((IkReal(-11.1111111111111))*(px)*(sj3)))+(((IkReal(11.1111111111111))*(cj3)*(py)))), ((IkReal(0.111111111111111))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((IkReal(-25.0000000000000))+(((IkReal(-27.5000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x500)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x500)))+(((IkReal(-100.000000000000))*(cj4)*(pz)))+(((IkReal(3.00000000000000))*(sj5)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x501=IKcos(j6);
IkReal x502=((IkReal(1.00000000000000))*(pz));
IkReal x503=((py)*(sj3));
IkReal x504=((IkReal(1.00000000000000))*(sj4));
IkReal x505=((cj3)*(px));
IkReal x506=((IkReal(0.0900000000000000))*(x501));
evalcond[0]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(sj3)))+(((cj3)*(py)))+(((IkReal(-0.0900000000000000))*(IKsin(j6)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj4)*(x502)))+(((IkReal(-1.00000000000000))*(cj5)*(x506)))+(((IkReal(0.275000000000000))*(sj5)))+(((IkReal(0.0300000000000000))*(cj5)))+(((cj4)*(x505)))+(((cj4)*(x503))));
evalcond[2]=((IkReal(-0.250000000000000))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj4)*(x502)))+(((IkReal(-1.00000000000000))*(x503)*(x504)))+(((IkReal(-0.275000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(x504)*(x505)))+(((IkReal(-1.00000000000000))*(sj5)*(x506))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x507=((IkReal(100.000000000000))*(cj4));
if( IKabs(((IkReal(1.05555555555556))+(((IkReal(-11.1111111111111))*(px)*(sj3)))+(((IkReal(11.1111111111111))*(cj3)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.111111111111111))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(3.00000000000000))*(cj5)))+(((IkReal(27.5000000000000))*(sj5)))+(((IkReal(-100.000000000000))*(pz)*(sj4)))+(((cj3)*(px)*(x507)))+(((py)*(sj3)*(x507))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.05555555555556))+(((IkReal(-11.1111111111111))*(px)*(sj3)))+(((IkReal(11.1111111111111))*(cj3)*(py)))))+IKsqr(((IkReal(0.111111111111111))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(3.00000000000000))*(cj5)))+(((IkReal(27.5000000000000))*(sj5)))+(((IkReal(-100.000000000000))*(pz)*(sj4)))+(((cj3)*(px)*(x507)))+(((py)*(sj3)*(x507)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(1.05555555555556))+(((IkReal(-11.1111111111111))*(px)*(sj3)))+(((IkReal(11.1111111111111))*(cj3)*(py)))), ((IkReal(0.111111111111111))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(3.00000000000000))*(cj5)))+(((IkReal(27.5000000000000))*(sj5)))+(((IkReal(-100.000000000000))*(pz)*(sj4)))+(((cj3)*(px)*(x507)))+(((py)*(sj3)*(x507)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x508=IKcos(j6);
IkReal x509=((IkReal(1.00000000000000))*(pz));
IkReal x510=((py)*(sj3));
IkReal x511=((IkReal(1.00000000000000))*(sj4));
IkReal x512=((cj3)*(px));
IkReal x513=((IkReal(0.0900000000000000))*(x508));
evalcond[0]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(sj3)))+(((cj3)*(py)))+(((IkReal(-0.0900000000000000))*(IKsin(j6)))));
evalcond[1]=((((cj4)*(x510)))+(((cj4)*(x512)))+(((IkReal(-1.00000000000000))*(sj4)*(x509)))+(((IkReal(0.275000000000000))*(sj5)))+(((IkReal(0.0300000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(cj5)*(x513))));
evalcond[2]=((IkReal(-0.250000000000000))+(((IkReal(-1.00000000000000))*(x511)*(x512)))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj4)*(x509)))+(((IkReal(-1.00000000000000))*(sj5)*(x513)))+(((IkReal(-0.275000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(x510)*(x511))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x514=((IkReal(1.00000000000000))*(cj4));
IkReal x515=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((sj7)+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x515)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x515)))+(((IkReal(-1.00000000000000))*(r02)*(x514))));
evalcond[2]=((IkReal(-0.485000000000000))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x515)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x515)))+(((IkReal(-1.00000000000000))*(pz)*(x514)))+(((IkReal(0.0400000000000000))*(sj7)))+(((IkReal(-0.0900000000000000))*(cj7))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(cj7);
dummyeval[0]=cj7;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x516=((IkReal(1.00000000000000))*(cj3));
if( IKabs(((gconst0)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(r01)*(x516))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(x516)))+(((IkReal(-1.00000000000000))*(cj4)*(r01)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst0)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(r01)*(x516)))))), ((gconst0)*(((((r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(x516)))+(((IkReal(-1.00000000000000))*(cj4)*(r01)*(sj3)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x517=IKsin(j6);
IkReal x518=IKcos(j6);
IkReal x519=((IkReal(0.0900000000000000))*(sj7));
IkReal x520=((cj4)*(sj3));
IkReal x521=((IkReal(1.00000000000000))*(sj4));
IkReal x522=((cj3)*(cj4));
IkReal x523=((IkReal(1.00000000000000))*(sj3));
IkReal x524=((cj7)*(x517));
IkReal x525=((cj7)*(x518));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x523)))+(((cj3)*(r01)))+(x524));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(0.0400000000000000))*(x524)))+(((IkReal(-1.00000000000000))*(px)*(x523)))+(((x517)*(x519)))+(((cj3)*(py))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x521)))+(x525)+(((r01)*(x520)))+(((r00)*(x522))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(0.0400000000000000))*(x525)))+(((px)*(x522)))+(((x518)*(x519)))+(((IkReal(-1.00000000000000))*(pz)*(x521)))+(((py)*(x520))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x526=((IkReal(1.00000000000000))*(cj4));
IkReal x527=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x527)))+(((IkReal(-1.00000000000000))*(r02)*(x526)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x527))));
evalcond[2]=((IkReal(-0.0150000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-0.0400000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(pz)*(x526)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x527)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x527))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(cj7);
dummyeval[0]=cj7;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst1)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(r02)*(sj4)))+(((cj4)*(r01)*(sj3)))+(((cj3)*(cj4)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst1)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(r01)))))), ((gconst1)*(((((IkReal(-1.00000000000000))*(r02)*(sj4)))+(((cj4)*(r01)*(sj3)))+(((cj3)*(cj4)*(r00)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x528=IKsin(j6);
IkReal x529=IKcos(j6);
IkReal x530=((IkReal(1.00000000000000))*(sj4));
IkReal x531=((IkReal(0.0900000000000000))*(sj7));
IkReal x532=((cj4)*(sj3));
IkReal x533=((cj3)*(cj4));
IkReal x534=((IkReal(1.00000000000000))*(sj3));
IkReal x535=((cj7)*(x529));
IkReal x536=((cj7)*(x528));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x534)))+(((cj3)*(r01)))+(x536));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(0.0400000000000000))*(x536)))+(((IkReal(-1.00000000000000))*(px)*(x534)))+(((cj3)*(py)))+(((x528)*(x531))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x535)))+(((IkReal(-1.00000000000000))*(r02)*(x530)))+(((r01)*(x532)))+(((r00)*(x533))));
evalcond[3]=((IkReal(-0.0300000000000000))+(((IkReal(-1.00000000000000))*(x529)*(x531)))+(((px)*(x533)))+(((IkReal(-1.00000000000000))*(pz)*(x530)))+(((IkReal(-0.0400000000000000))*(x535)))+(((py)*(x532))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x537=((IkReal(1.00000000000000))*(sj4));
IkReal x538=((cj4)*(sj3));
IkReal x539=((cj3)*(cj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(r02)*(x537)))+(((r01)*(x538)))+(((r00)*(x539))));
evalcond[2]=((IkReal(0.235000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((px)*(x539)))+(((IkReal(-0.0400000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(pz)*(x537)))+(((py)*(x538))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(cj7);
dummyeval[0]=cj7;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst2)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((cj3)*(r00)*(sj4)))+(((r01)*(sj3)*(sj4)))+(((cj4)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst2)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(r01)))))), ((gconst2)*(((((cj3)*(r00)*(sj4)))+(((r01)*(sj3)*(sj4)))+(((cj4)*(r02)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x540=IKsin(j6);
IkReal x541=IKcos(j6);
IkReal x542=((IkReal(0.0900000000000000))*(sj7));
IkReal x543=((IkReal(1.00000000000000))*(sj4));
IkReal x544=((IkReal(1.00000000000000))*(sj3));
IkReal x545=((IkReal(1.00000000000000))*(cj4));
IkReal x546=((cj7)*(x540));
IkReal x547=((cj7)*(x541));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x544)))+(((cj3)*(r01)))+(x546));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(0.0400000000000000))*(x546)))+(((x540)*(x542)))+(((IkReal(-1.00000000000000))*(px)*(x544)))+(((cj3)*(py))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r01)*(sj3)*(x543)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x543)))+(((IkReal(-1.00000000000000))*(r02)*(x545)))+(x547));
evalcond[3]=((IkReal(-0.220000000000000))+(((IkReal(0.0400000000000000))*(x547)))+(((x541)*(x542)))+(((IkReal(-1.00000000000000))*(pz)*(x545)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x543)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x543))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x548=((IkReal(1.00000000000000))*(sj4));
IkReal x549=((cj4)*(sj3));
IkReal x550=((cj3)*(cj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((sj7)+(((IkReal(-1.00000000000000))*(r02)*(x548)))+(((r00)*(x550)))+(((r01)*(x549))));
evalcond[2]=((IkReal(-0.235000000000000))+(((py)*(x549)))+(((px)*(x550)))+(((IkReal(-1.00000000000000))*(pz)*(x548)))+(((IkReal(0.0400000000000000))*(sj7)))+(((IkReal(-0.0900000000000000))*(cj7))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(cj7);
dummyeval[0]=cj7;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x551=((IkReal(1.00000000000000))*(sj4));
if( IKabs(((gconst3)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(cj3)*(r00)*(x551)))+(((IkReal(-1.00000000000000))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x551))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst3)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(r01)))))), ((gconst3)*(((((IkReal(-1.00000000000000))*(cj3)*(r00)*(x551)))+(((IkReal(-1.00000000000000))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x551)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x552=IKsin(j6);
IkReal x553=IKcos(j6);
IkReal x554=((IkReal(0.0900000000000000))*(sj7));
IkReal x555=((IkReal(1.00000000000000))*(sj4));
IkReal x556=((IkReal(1.00000000000000))*(sj3));
IkReal x557=((IkReal(1.00000000000000))*(cj4));
IkReal x558=((cj7)*(x553));
IkReal x559=((cj7)*(x552));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x556)))+(((cj3)*(r01)))+(x559));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(0.0400000000000000))*(x559)))+(((IkReal(-1.00000000000000))*(px)*(x556)))+(((cj3)*(py)))+(((x552)*(x554))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj3)*(r00)*(x555)))+(((IkReal(-1.00000000000000))*(x558)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x555)))+(((IkReal(-1.00000000000000))*(r02)*(x557))));
evalcond[3]=((IkReal(-0.280000000000000))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x555)))+(((IkReal(-1.00000000000000))*(x553)*(x554)))+(((IkReal(-0.0400000000000000))*(x558)))+(((IkReal(-1.00000000000000))*(pz)*(x557)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x555))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IKabs(((((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(0.0400000000000000))*(cj7))))) != 0)?((IkReal)1/(((((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(0.0400000000000000))*(cj7)))))):(IkReal)1.0e30))*(((IkReal(-0.0950000000000000))+(((IkReal(-1.00000000000000))*(cj3)*(py)))+(((px)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj7) != 0)?((IkReal)1/(cj7)):(IkReal)1.0e30))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj5)*(sj7)))+(((cj3)*(r00)*(sj4)))+(((r01)*(sj3)*(sj4)))+(((cj4)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(0.0400000000000000))*(cj7))))) != 0)?((IkReal)1/(((((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(0.0400000000000000))*(cj7)))))):(IkReal)1.0e30))*(((IkReal(-0.0950000000000000))+(((IkReal(-1.00000000000000))*(cj3)*(py)))+(((px)*(sj3)))))))+IKsqr(((((IKabs(cj7) != 0)?((IkReal)1/(cj7)):(IkReal)1.0e30))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj5)*(sj7)))+(((cj3)*(r00)*(sj4)))+(((r01)*(sj3)*(sj4)))+(((cj4)*(r02)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IKabs(((((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(0.0400000000000000))*(cj7))))) != 0)?((IkReal)1/(((((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(0.0400000000000000))*(cj7)))))):(IkReal)1.0e30))*(((IkReal(-0.0950000000000000))+(((IkReal(-1.00000000000000))*(cj3)*(py)))+(((px)*(sj3)))))), ((((IKabs(cj7) != 0)?((IkReal)1/(cj7)):(IkReal)1.0e30))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj5)*(sj7)))+(((cj3)*(r00)*(sj4)))+(((r01)*(sj3)*(sj4)))+(((cj4)*(r02)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x560=IKsin(j6);
IkReal x561=IKcos(j6);
IkReal x562=((IkReal(1.00000000000000))*(sj4));
IkReal x563=((IkReal(0.0900000000000000))*(sj7));
IkReal x564=((cj4)*(sj3));
IkReal x565=((cj7)*(sj5));
IkReal x566=((IkReal(1.00000000000000))*(cj4));
IkReal x567=((cj5)*(sj7));
IkReal x568=((cj5)*(cj7));
IkReal x569=((IkReal(1.00000000000000))*(sj3));
IkReal x570=((cj3)*(px));
IkReal x571=((cj3)*(r00));
IkReal x572=((sj5)*(sj7));
IkReal x573=((IkReal(0.0400000000000000))*(x561));
IkReal x574=((cj7)*(x560));
evalcond[0]=((((cj3)*(r01)))+(x574)+(((IkReal(-1.00000000000000))*(r00)*(x569))));
evalcond[1]=((IkReal(0.0950000000000000))+(((x560)*(x563)))+(((cj3)*(py)))+(((IkReal(-1.00000000000000))*(px)*(x569)))+(((IkReal(0.0400000000000000))*(x574))));
evalcond[2]=((((r01)*(x564)))+(((x561)*(x568)))+(((IkReal(-1.00000000000000))*(x572)))+(((IkReal(-1.00000000000000))*(r02)*(x562)))+(((cj4)*(x571))));
evalcond[3]=((((x561)*(x565)))+(x567)+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x562)))+(((IkReal(-1.00000000000000))*(r02)*(x566)))+(((IkReal(-1.00000000000000))*(x562)*(x571))));
evalcond[4]=((((IkReal(-0.0400000000000000))*(x572)))+(((IkReal(0.235000000000000))*(sj5)))+(((IkReal(0.0300000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(pz)*(x562)))+(((cj5)*(x561)*(x563)))+(((IkReal(0.0900000000000000))*(x565)))+(((py)*(x564)))+(((x568)*(x573)))+(((cj4)*(x570))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(-0.0900000000000000))*(x568)))+(((sj5)*(x561)*(x563)))+(((IkReal(-1.00000000000000))*(pz)*(x566)))+(((x565)*(x573)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x562)))+(((IkReal(-0.235000000000000))*(cj5)))+(((IkReal(0.0400000000000000))*(x567)))+(((IkReal(-1.00000000000000))*(x562)*(x570))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x575=((IKabs(cj7) != 0)?((IkReal)1/(cj7)):(IkReal)1.0e30);
IkReal x576=((IkReal(1.00000000000000))*(cj3));
if( IKabs(((x575)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(r01)*(x576))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x575)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((sj5)*(sj7)))+(((r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(x576))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x575)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(r01)*(x576)))))))+IKsqr(((x575)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((sj5)*(sj7)))+(((r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(x576)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x575)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(r01)*(x576)))))), ((x575)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((sj5)*(sj7)))+(((r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(r01)*(sj3)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(x576)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x577=IKsin(j6);
IkReal x578=IKcos(j6);
IkReal x579=((IkReal(1.00000000000000))*(sj4));
IkReal x580=((IkReal(0.0900000000000000))*(sj7));
IkReal x581=((cj4)*(sj3));
IkReal x582=((cj7)*(sj5));
IkReal x583=((IkReal(1.00000000000000))*(cj4));
IkReal x584=((cj5)*(sj7));
IkReal x585=((cj5)*(cj7));
IkReal x586=((IkReal(1.00000000000000))*(sj3));
IkReal x587=((cj3)*(px));
IkReal x588=((cj3)*(r00));
IkReal x589=((sj5)*(sj7));
IkReal x590=((IkReal(0.0400000000000000))*(x578));
IkReal x591=((cj7)*(x577));
evalcond[0]=((((cj3)*(r01)))+(x591)+(((IkReal(-1.00000000000000))*(r00)*(x586))));
evalcond[1]=((IkReal(0.0950000000000000))+(((x577)*(x580)))+(((IkReal(-1.00000000000000))*(px)*(x586)))+(((IkReal(0.0400000000000000))*(x591)))+(((cj3)*(py))));
evalcond[2]=((((x578)*(x585)))+(((IkReal(-1.00000000000000))*(x589)))+(((cj4)*(x588)))+(((r01)*(x581)))+(((IkReal(-1.00000000000000))*(r02)*(x579))));
evalcond[3]=((((x578)*(x582)))+(((IkReal(-1.00000000000000))*(r02)*(x583)))+(((IkReal(-1.00000000000000))*(x579)*(x588)))+(x584)+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x579))));
evalcond[4]=((((x585)*(x590)))+(((IkReal(0.235000000000000))*(sj5)))+(((IkReal(-0.0400000000000000))*(x589)))+(((IkReal(0.0300000000000000))*(cj5)))+(((cj5)*(x578)*(x580)))+(((cj4)*(x587)))+(((IkReal(-1.00000000000000))*(pz)*(x579)))+(((IkReal(0.0900000000000000))*(x582)))+(((py)*(x581))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x579)))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(pz)*(x583)))+(((IkReal(-1.00000000000000))*(x579)*(x587)))+(((sj5)*(x578)*(x580)))+(((IkReal(-0.0900000000000000))*(x585)))+(((x582)*(x590)))+(((IkReal(-0.235000000000000))*(cj5)))+(((IkReal(0.0400000000000000))*(x584))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x592=((IKabs(cj7) != 0)?((IkReal)1/(cj7)):(IkReal)1.0e30);
if( IKabs(((x592)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x592)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj5)*(sj7)))+(((cj3)*(r00)*(sj4)))+(((r01)*(sj3)*(sj4)))+(((cj4)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x592)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(r01)))))))+IKsqr(((x592)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj5)*(sj7)))+(((cj3)*(r00)*(sj4)))+(((r01)*(sj3)*(sj4)))+(((cj4)*(r02)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x592)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(r01)))))), ((x592)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj5)*(sj7)))+(((cj3)*(r00)*(sj4)))+(((r01)*(sj3)*(sj4)))+(((cj4)*(r02)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x593=IKsin(j6);
IkReal x594=IKcos(j6);
IkReal x595=((IkReal(1.00000000000000))*(sj4));
IkReal x596=((IkReal(0.0900000000000000))*(sj7));
IkReal x597=((cj4)*(sj3));
IkReal x598=((cj7)*(sj5));
IkReal x599=((IkReal(1.00000000000000))*(cj4));
IkReal x600=((cj5)*(sj7));
IkReal x601=((cj5)*(cj7));
IkReal x602=((IkReal(1.00000000000000))*(sj3));
IkReal x603=((cj3)*(px));
IkReal x604=((cj3)*(r00));
IkReal x605=((sj5)*(sj7));
IkReal x606=((IkReal(0.0400000000000000))*(x594));
IkReal x607=((cj7)*(x593));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x602)))+(((cj3)*(r01)))+(x607));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(0.0400000000000000))*(x607)))+(((cj3)*(py)))+(((x593)*(x596)))+(((IkReal(-1.00000000000000))*(px)*(x602))));
evalcond[2]=((((x594)*(x601)))+(((r01)*(x597)))+(((IkReal(-1.00000000000000))*(x605)))+(((IkReal(-1.00000000000000))*(r02)*(x595)))+(((cj4)*(x604))));
evalcond[3]=((((x594)*(x598)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x595)))+(((IkReal(-1.00000000000000))*(r02)*(x599)))+(x600)+(((IkReal(-1.00000000000000))*(x595)*(x604))));
evalcond[4]=((((IkReal(0.0900000000000000))*(x598)))+(((x601)*(x606)))+(((py)*(x597)))+(((IkReal(0.235000000000000))*(sj5)))+(((IkReal(-0.0400000000000000))*(x605)))+(((IkReal(0.0300000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(pz)*(x595)))+(((cj5)*(x594)*(x596)))+(((cj4)*(x603))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(pz)*(x599)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x595)))+(((IkReal(0.0400000000000000))*(x600)))+(((IkReal(-0.235000000000000))*(cj5)))+(((sj5)*(x594)*(x596)))+(((IkReal(-0.0900000000000000))*(x601)))+(((x598)*(x606)))+(((IkReal(-1.00000000000000))*(x595)*(x603))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x608=(cj5)*(cj5);
IkReal x609=(sj5)*(sj5);
IkReal x610=((cj4)*(sj5));
IkReal x611=((cj3)*(r00));
IkReal x612=((cj5)*(sj4));
IkReal x613=((sj4)*(sj5));
IkReal x614=((r01)*(sj3));
IkReal x615=((IkReal(0.0400000000000000))*(pz));
IkReal x616=((IkReal(0.0400000000000000))*(py)*(sj3));
IkReal x617=((cj4)*(cj5)*(r02));
IkReal x618=((IkReal(0.0400000000000000))*(cj3)*(px));
IkReal x619=((IkReal(1.00000000000000))*(r02)*(x613));
IkReal x620=((((IkReal(1.00000000000000))*(x608)))+(((IkReal(1.00000000000000))*(x609))));
IkReal x621=((IkReal(-1.00000000000000))*(((IKabs(x620) != 0)?((IkReal)1/(x620)):(IkReal)1.0e30)));
if( IKabs(((x621)*(((((IkReal(-1.00000000000000))*(x611)*(x612)))+(((IkReal(-1.00000000000000))*(x612)*(x614)))+(((IkReal(-1.00000000000000))*(x617)))+(((IkReal(-1.00000000000000))*(x610)*(x614)))+(((IkReal(-1.00000000000000))*(x610)*(x611)))+(x619))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x621)*(((IKabs(((((IkReal(0.00360000000000000))*(x609)))+(((IkReal(0.00360000000000000))*(x608))))) != 0)?((IkReal)1/(((((IkReal(0.00360000000000000))*(x609)))+(((IkReal(0.00360000000000000))*(x608)))))):(IkReal)1.0e30))*(((((((((IkReal(-0.00160000000000000))*(x609)))+(((IkReal(-0.00160000000000000))*(x608)))))*(((((x611)*(x612)))+(((x612)*(x614)))+(((IkReal(-1.00000000000000))*(x619)))+(x617)+(((x610)*(x611)))+(((x610)*(x614)))))))+(((x620)*(((((IkReal(0.00940000000000000))*(x609)))+(((IkReal(0.00940000000000000))*(x608)))+(((cj4)*(cj5)*(x615)))+(((IkReal(0.0100000000000000))*(cj5)))+(((x612)*(x618)))+(((x612)*(x616)))+(((IkReal(-1.00000000000000))*(x613)*(x615)))+(((x610)*(x618)))+(((x610)*(x616))))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x621)*(((((IkReal(-1.00000000000000))*(x611)*(x612)))+(((IkReal(-1.00000000000000))*(x612)*(x614)))+(((IkReal(-1.00000000000000))*(x617)))+(((IkReal(-1.00000000000000))*(x610)*(x614)))+(((IkReal(-1.00000000000000))*(x610)*(x611)))+(x619)))))+IKsqr(((x621)*(((IKabs(((((IkReal(0.00360000000000000))*(x609)))+(((IkReal(0.00360000000000000))*(x608))))) != 0)?((IkReal)1/(((((IkReal(0.00360000000000000))*(x609)))+(((IkReal(0.00360000000000000))*(x608)))))):(IkReal)1.0e30))*(((((((((IkReal(-0.00160000000000000))*(x609)))+(((IkReal(-0.00160000000000000))*(x608)))))*(((((x611)*(x612)))+(((x612)*(x614)))+(((IkReal(-1.00000000000000))*(x619)))+(x617)+(((x610)*(x611)))+(((x610)*(x614)))))))+(((x620)*(((((IkReal(0.00940000000000000))*(x609)))+(((IkReal(0.00940000000000000))*(x608)))+(((cj4)*(cj5)*(x615)))+(((IkReal(0.0100000000000000))*(cj5)))+(((x612)*(x618)))+(((x612)*(x616)))+(((IkReal(-1.00000000000000))*(x613)*(x615)))+(((x610)*(x618)))+(((x610)*(x616)))))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((x621)*(((((IkReal(-1.00000000000000))*(x611)*(x612)))+(((IkReal(-1.00000000000000))*(x612)*(x614)))+(((IkReal(-1.00000000000000))*(x617)))+(((IkReal(-1.00000000000000))*(x610)*(x614)))+(((IkReal(-1.00000000000000))*(x610)*(x611)))+(x619)))), ((x621)*(((IKabs(((((IkReal(0.00360000000000000))*(x609)))+(((IkReal(0.00360000000000000))*(x608))))) != 0)?((IkReal)1/(((((IkReal(0.00360000000000000))*(x609)))+(((IkReal(0.00360000000000000))*(x608)))))):(IkReal)1.0e30))*(((((((((IkReal(-0.00160000000000000))*(x609)))+(((IkReal(-0.00160000000000000))*(x608)))))*(((((x611)*(x612)))+(((x612)*(x614)))+(((IkReal(-1.00000000000000))*(x619)))+(x617)+(((x610)*(x611)))+(((x610)*(x614)))))))+(((x620)*(((((IkReal(0.00940000000000000))*(x609)))+(((IkReal(0.00940000000000000))*(x608)))+(((cj4)*(cj5)*(x615)))+(((IkReal(0.0100000000000000))*(cj5)))+(((x612)*(x618)))+(((x612)*(x616)))+(((IkReal(-1.00000000000000))*(x613)*(x615)))+(((x610)*(x618)))+(((x610)*(x616)))))))))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[3];
IkReal x622=(cj5)*(cj5);
IkReal x623=(sj5)*(sj5);
IkReal x624=IKsin(j7);
IkReal x625=IKcos(j7);
IkReal x626=((IkReal(0.0900000000000000))*(px));
IkReal x627=((cj5)*(sj4));
IkReal x628=((cj4)*(sj5));
IkReal x629=((IkReal(0.0400000000000000))*(px));
IkReal x630=((r01)*(sj3));
IkReal x631=((sj4)*(sj5));
IkReal x632=((IkReal(0.0900000000000000))*(pz));
IkReal x633=((cj4)*(cj5));
IkReal x634=((IkReal(0.0400000000000000))*(pz));
IkReal x635=((cj3)*(x628));
IkReal x636=((IkReal(0.0400000000000000))*(py)*(sj3));
IkReal x637=((IkReal(0.0900000000000000))*(py)*(sj3));
IkReal x638=((((IkReal(0.00360000000000000))*(x623)))+(((IkReal(0.00360000000000000))*(x622))));
evalcond[0]=((((r02)*(x633)))+(((x624)*(((((IkReal(-1.00000000000000))*(x623)))+(((IkReal(-1.00000000000000))*(x622)))))))+(((x628)*(x630)))+(((cj3)*(r00)*(x627)))+(((r00)*(x635)))+(((x627)*(x630)))+(((IkReal(-1.00000000000000))*(r02)*(x631))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x631)*(x634)))+(((x624)*(((((IkReal(-0.00160000000000000))*(x622)))+(((IkReal(-0.00160000000000000))*(x623)))))))+(((x628)*(x636)))+(((x629)*(x635)))+(((cj3)*(x627)*(x629)))+(((x625)*(x638)))+(((IkReal(0.0100000000000000))*(cj5)))+(((IkReal(0.00940000000000000))*(x622)))+(((IkReal(0.00940000000000000))*(x623)))+(((x627)*(x636)))+(((x633)*(x634))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x631)*(x632)))+(((x628)*(x637)))+(((IkReal(-1.00000000000000))*(x624)*(x638)))+(((cj3)*(x626)*(x627)))+(((x625)*(((((IkReal(0.00810000000000000))*(x623)))+(((IkReal(0.00810000000000000))*(x622)))))))+(((x632)*(x633)))+(((x627)*(x637)))+(((IkReal(0.0211500000000000))*(x623)))+(((IkReal(0.0211500000000000))*(x622)))+(((IkReal(0.0225000000000000))*(cj5)))+(((x626)*(x635))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[2];
dummyeval[0]=cj7;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=cj7;
dummyeval[1]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[3];
dummyeval[0]=((cj7)+(((IkReal(2.25000000000000))*(sj7))));
dummyeval[1]=cj7;
dummyeval[2]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  || IKabs(dummyeval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.55981698316902))+(j7)), IkReal(6.28318530717959))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
IkReal x639=((IkReal(1.00000000000000))*(sj4));
IkReal x640=((cj4)*(sj3));
IkReal x641=((cj3)*(cj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.406138466127514))+(((IkReal(-1.00000000000000))*(r02)*(x639)))+(((r01)*(x640)))+(((r00)*(x641))));
evalcond[2]=((IkReal(0.333488578145101))+(((IkReal(-1.00000000000000))*(pz)*(x639)))+(((py)*(x640)))+(((px)*(x641))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x642=((IkReal(1.09431753188062))*(sj4));
if( IKabs(((((IkReal(1.09431753188062))*(r00)*(sj3)))+(((IkReal(-1.09431753188062))*(cj3)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((r01)*(sj3)*(x642)))+(((IkReal(1.09431753188062))*(cj4)*(r02)))+(((cj3)*(r00)*(x642))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.09431753188062))*(r00)*(sj3)))+(((IkReal(-1.09431753188062))*(cj3)*(r01)))))+IKsqr(((((r01)*(sj3)*(x642)))+(((IkReal(1.09431753188062))*(cj4)*(r02)))+(((cj3)*(r00)*(x642)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(1.09431753188062))*(r00)*(sj3)))+(((IkReal(-1.09431753188062))*(cj3)*(r01)))), ((((r01)*(sj3)*(x642)))+(((IkReal(1.09431753188062))*(cj4)*(r02)))+(((cj3)*(r00)*(x642)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x643=IKsin(j6);
IkReal x644=IKcos(j6);
IkReal x645=((IkReal(1.00000000000000))*(cj4));
IkReal x646=((IkReal(1.00000000000000))*(sj4));
IkReal x647=((IkReal(1.00000000000000))*(sj3));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x647)))+(((cj3)*(r01)))+(((IkReal(0.913811550000000))*(x643))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(x647)))+(((IkReal(4.85237587652042e-11))*(x643)))+(((cj3)*(py))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj3)*(r00)*(x646)))+(((IkReal(-1.00000000000000))*(r02)*(x645)))+(((IkReal(0.913811550000000))*(x644)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x646))));
evalcond[3]=((IkReal(-0.220000000000000))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x646)))+(((IkReal(4.85237587652042e-11))*(x644)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x646)))+(((IkReal(-1.00000000000000))*(pz)*(x645))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x648=((IkReal(1.00000000000000))*(sj4));
IkReal x649=((cj4)*(sj3));
IkReal x650=((cj3)*(cj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.406138466127514))+(((IkReal(-1.00000000000000))*(r02)*(x648)))+(((r01)*(x649)))+(((r00)*(x650))));
evalcond[2]=((IkReal(-0.333488578145101))+(((py)*(x649)))+(((px)*(x650)))+(((IkReal(-1.00000000000000))*(pz)*(x648))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x651=((IkReal(1.09431753188062))*(sj4));
if( IKabs(((((IkReal(1.09431753188062))*(r00)*(sj3)))+(((IkReal(-1.09431753188062))*(cj3)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.09431753188062))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x651)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x651))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.09431753188062))*(r00)*(sj3)))+(((IkReal(-1.09431753188062))*(cj3)*(r01)))))+IKsqr(((((IkReal(-1.09431753188062))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x651)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x651)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(1.09431753188062))*(r00)*(sj3)))+(((IkReal(-1.09431753188062))*(cj3)*(r01)))), ((((IkReal(-1.09431753188062))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x651)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x651)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x652=IKsin(j6);
IkReal x653=IKcos(j6);
IkReal x654=((IkReal(1.00000000000000))*(cj4));
IkReal x655=((IkReal(1.00000000000000))*(sj4));
IkReal x656=((IkReal(1.00000000000000))*(sj3));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x656)))+(((IkReal(0.913811550000000))*(x652)))+(((cj3)*(r01))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(x656)))+(((IkReal(4.85237587652042e-11))*(x652)))+(((cj3)*(py))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj3)*(r00)*(x655)))+(((IkReal(-0.913811550000000))*(x653)))+(((IkReal(-1.00000000000000))*(r02)*(x654)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x655))));
evalcond[3]=((IkReal(-0.280000000000000))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x655)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x655)))+(((IkReal(-4.85237587652042e-11))*(x653)))+(((IkReal(-1.00000000000000))*(pz)*(x654))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x657=((IkReal(1.00000000000000))*(cj4));
IkReal x658=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.406138466127514))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x658)))+(((IkReal(-1.00000000000000))*(r02)*(x657)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x658))));
evalcond[2]=((IkReal(-0.583488578145101))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x658)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x658)))+(((IkReal(-1.00000000000000))*(pz)*(x657))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x659=((IkReal(1.09431753188062))*(cj3));
IkReal x660=((IkReal(1.09431753188062))*(sj3));
if( IKabs(((((r00)*(x660)))+(((IkReal(-1.00000000000000))*(r01)*(x659))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj4)*(r01)*(x660)))+(((IkReal(1.09431753188062))*(r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(x659))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r00)*(x660)))+(((IkReal(-1.00000000000000))*(r01)*(x659)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(r01)*(x660)))+(((IkReal(1.09431753188062))*(r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(x659)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((r00)*(x660)))+(((IkReal(-1.00000000000000))*(r01)*(x659)))), ((((IkReal(-1.00000000000000))*(cj4)*(r01)*(x660)))+(((IkReal(1.09431753188062))*(r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(x659)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x661=IKsin(j6);
IkReal x662=IKcos(j6);
IkReal x663=((IkReal(1.00000000000000))*(sj4));
IkReal x664=((cj4)*(sj3));
IkReal x665=((cj3)*(cj4));
IkReal x666=((IkReal(1.00000000000000))*(sj3));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x666)))+(((IkReal(0.913811550000000))*(x661)))+(((cj3)*(r01))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(4.85237587652042e-11))*(x661)))+(((IkReal(-1.00000000000000))*(px)*(x666)))+(((cj3)*(py))));
evalcond[2]=((((r01)*(x664)))+(((r00)*(x665)))+(((IkReal(0.913811550000000))*(x662)))+(((IkReal(-1.00000000000000))*(r02)*(x663))));
evalcond[3]=((IkReal(0.0300000000000000))+(((IkReal(4.85237587652042e-11))*(x662)))+(((px)*(x665)))+(((py)*(x664)))+(((IkReal(-1.00000000000000))*(pz)*(x663))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x667=((IkReal(1.00000000000000))*(cj4));
IkReal x668=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.406138466127514))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x668)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x668)))+(((IkReal(-1.00000000000000))*(r02)*(x667))));
evalcond[2]=((IkReal(0.0834885781451006))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x668)))+(((IkReal(-1.00000000000000))*(pz)*(x667)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x668))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x669=((IkReal(1.09431753188062))*(cj3));
IkReal x670=((IkReal(1.09431753188062))*(sj3));
if( IKabs(((((IkReal(-1.00000000000000))*(r01)*(x669)))+(((r00)*(x670))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(r00)*(x669)))+(((IkReal(-1.09431753188062))*(r02)*(sj4)))+(((cj4)*(r01)*(x670))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r01)*(x669)))+(((r00)*(x670)))))+IKsqr(((((cj4)*(r00)*(x669)))+(((IkReal(-1.09431753188062))*(r02)*(sj4)))+(((cj4)*(r01)*(x670)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r01)*(x669)))+(((r00)*(x670)))), ((((cj4)*(r00)*(x669)))+(((IkReal(-1.09431753188062))*(r02)*(sj4)))+(((cj4)*(r01)*(x670)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x671=IKsin(j6);
IkReal x672=IKcos(j6);
IkReal x673=((IkReal(1.00000000000000))*(sj4));
IkReal x674=((cj4)*(sj3));
IkReal x675=((cj3)*(cj4));
IkReal x676=((IkReal(1.00000000000000))*(sj3));
evalcond[0]=((((IkReal(0.913811550000000))*(x671)))+(((cj3)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x676))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(4.85237587652042e-11))*(x671)))+(((IkReal(-1.00000000000000))*(px)*(x676)))+(((cj3)*(py))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x673)))+(((r01)*(x674)))+(((r00)*(x675)))+(((IkReal(-0.913811550000000))*(x672))));
evalcond[3]=((IkReal(-0.0300000000000000))+(((py)*(x674)))+(((IkReal(-1.00000000000000))*(pz)*(x673)))+(((IkReal(-4.85237587652042e-11))*(x672)))+(((px)*(x675))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x677=((IkReal(20000000.0000000))*(cj4));
if( IKabs(((IkReal(-1957803814.40943))+(((IkReal(20608461204.3098))*(px)*(sj3)))+(((IkReal(-20608461204.3098))*(cj3)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.47158765940308e-8))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj5)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x677)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x677)))+(((IkReal(20000000.0000000))*(r02)*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1957803814.40943))+(((IkReal(20608461204.3098))*(px)*(sj3)))+(((IkReal(-20608461204.3098))*(cj3)*(py)))))+IKsqr(((IkReal(5.47158765940308e-8))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj5)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x677)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x677)))+(((IkReal(20000000.0000000))*(r02)*(sj4)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1957803814.40943))+(((IkReal(20608461204.3098))*(px)*(sj3)))+(((IkReal(-20608461204.3098))*(cj3)*(py)))), ((IkReal(5.47158765940308e-8))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-8122769.32255028))*(sj5)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x677)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x677)))+(((IkReal(20000000.0000000))*(r02)*(sj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x678=IKsin(j6);
IkReal x679=IKcos(j6);
IkReal x680=((IkReal(1.00000000000000))*(sj4));
IkReal x681=((cj4)*(sj3));
IkReal x682=((IkReal(1.00000000000000))*(cj4));
IkReal x683=((IkReal(1.00000000000000))*(sj3));
IkReal x684=((cj3)*(r00));
IkReal x685=((cj3)*(px));
IkReal x686=((cj5)*(x679));
IkReal x687=((sj5)*(x679));
evalcond[0]=((((IkReal(0.913811550000000))*(x678)))+(((IkReal(-1.00000000000000))*(r00)*(x683)))+(((cj3)*(r01))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(4.85237587652042e-11))*(x678)))+(((IkReal(-1.00000000000000))*(px)*(x683)))+(((cj3)*(py))));
evalcond[2]=((((cj4)*(x684)))+(((IkReal(-1.00000000000000))*(r02)*(x680)))+(((IkReal(0.406138466127514))*(sj5)))+(((r01)*(x681)))+(((IkReal(0.913811550000000))*(x686))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x680)*(x684)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x680)))+(((IkReal(-0.406138466127514))*(cj5)))+(((IkReal(-1.00000000000000))*(r02)*(x682)))+(((IkReal(0.913811550000000))*(x687))));
evalcond[4]=((((cj4)*(x685)))+(((IkReal(0.0300000000000000))*(cj5)))+(((IkReal(0.333488578145101))*(sj5)))+(((IkReal(-1.00000000000000))*(pz)*(x680)))+(((py)*(x681)))+(((IkReal(4.85237587652042e-11))*(x686))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(x680)*(x685)))+(((IkReal(-0.333488578145101))*(cj5)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x680)))+(((IkReal(-1.00000000000000))*(pz)*(x682)))+(((IkReal(4.85237587652042e-11))*(x687))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x688=((IkReal(20000000.0000000))*(sj4));
if( IKabs(((((IkReal(1.09431753188062))*(r00)*(sj3)))+(((IkReal(-1.09431753188062))*(cj3)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.47158765940308e-8))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((cj3)*(r00)*(x688)))+(((IkReal(8122769.32255028))*(cj5)))+(((r01)*(sj3)*(x688)))+(((IkReal(20000000.0000000))*(cj4)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.09431753188062))*(r00)*(sj3)))+(((IkReal(-1.09431753188062))*(cj3)*(r01)))))+IKsqr(((IkReal(5.47158765940308e-8))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((cj3)*(r00)*(x688)))+(((IkReal(8122769.32255028))*(cj5)))+(((r01)*(sj3)*(x688)))+(((IkReal(20000000.0000000))*(cj4)*(r02)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(1.09431753188062))*(r00)*(sj3)))+(((IkReal(-1.09431753188062))*(cj3)*(r01)))), ((IkReal(5.47158765940308e-8))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((cj3)*(r00)*(x688)))+(((IkReal(8122769.32255028))*(cj5)))+(((r01)*(sj3)*(x688)))+(((IkReal(20000000.0000000))*(cj4)*(r02)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x689=IKsin(j6);
IkReal x690=IKcos(j6);
IkReal x691=((IkReal(1.00000000000000))*(sj4));
IkReal x692=((cj4)*(sj3));
IkReal x693=((IkReal(1.00000000000000))*(cj4));
IkReal x694=((IkReal(1.00000000000000))*(sj3));
IkReal x695=((cj3)*(r00));
IkReal x696=((cj3)*(px));
IkReal x697=((cj5)*(x690));
IkReal x698=((sj5)*(x690));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x694)))+(((cj3)*(r01)))+(((IkReal(0.913811550000000))*(x689))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(x694)))+(((cj3)*(py)))+(((IkReal(4.85237587652042e-11))*(x689))));
evalcond[2]=((((cj4)*(x695)))+(((IkReal(0.406138466127514))*(sj5)))+(((IkReal(-1.00000000000000))*(r02)*(x691)))+(((IkReal(0.913811550000000))*(x697)))+(((r01)*(x692))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r01)*(sj3)*(x691)))+(((IkReal(-0.406138466127514))*(cj5)))+(((IkReal(-1.00000000000000))*(r02)*(x693)))+(((IkReal(-1.00000000000000))*(x691)*(x695)))+(((IkReal(0.913811550000000))*(x698))));
evalcond[4]=((((cj4)*(x696)))+(((IkReal(0.0300000000000000))*(cj5)))+(((py)*(x692)))+(((IkReal(-1.00000000000000))*(pz)*(x691)))+(((IkReal(4.85237587652042e-11))*(x697)))+(((IkReal(0.333488578145101))*(sj5))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(-0.333488578145101))*(cj5)))+(((IkReal(-1.00000000000000))*(pz)*(x693)))+(((IkReal(4.85237587652042e-11))*(x698)))+(((IkReal(-1.00000000000000))*(x691)*(x696)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x691))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x699=((IkReal(20000000.0000000))*(cj4));
if( IKabs(((((IkReal(1.09431753188062))*(r00)*(sj3)))+(((IkReal(-1.09431753188062))*(cj3)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.47158765940308e-8))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj3)*(x699)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x699)))+(((IkReal(-8122769.32255028))*(sj5)))+(((IkReal(20000000.0000000))*(r02)*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(1.09431753188062))*(r00)*(sj3)))+(((IkReal(-1.09431753188062))*(cj3)*(r01)))))+IKsqr(((IkReal(5.47158765940308e-8))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj3)*(x699)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x699)))+(((IkReal(-8122769.32255028))*(sj5)))+(((IkReal(20000000.0000000))*(r02)*(sj4)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(1.09431753188062))*(r00)*(sj3)))+(((IkReal(-1.09431753188062))*(cj3)*(r01)))), ((IkReal(5.47158765940308e-8))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(r01)*(sj3)*(x699)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x699)))+(((IkReal(-8122769.32255028))*(sj5)))+(((IkReal(20000000.0000000))*(r02)*(sj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x700=IKsin(j6);
IkReal x701=IKcos(j6);
IkReal x702=((IkReal(1.00000000000000))*(sj4));
IkReal x703=((cj4)*(sj3));
IkReal x704=((IkReal(1.00000000000000))*(cj4));
IkReal x705=((IkReal(1.00000000000000))*(sj3));
IkReal x706=((cj3)*(r00));
IkReal x707=((cj3)*(px));
IkReal x708=((cj5)*(x701));
IkReal x709=((sj5)*(x701));
evalcond[0]=((((IkReal(0.913811550000000))*(x700)))+(((cj3)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x705))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(x705)))+(((IkReal(4.85237587652042e-11))*(x700)))+(((cj3)*(py))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x702)))+(((cj4)*(x706)))+(((r01)*(x703)))+(((IkReal(0.913811550000000))*(x708)))+(((IkReal(0.406138466127514))*(sj5))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r02)*(x704)))+(((IkReal(-1.00000000000000))*(x702)*(x706)))+(((IkReal(-0.406138466127514))*(cj5)))+(((IkReal(0.913811550000000))*(x709)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x702))));
evalcond[4]=((((IkReal(-1.00000000000000))*(pz)*(x702)))+(((cj4)*(x707)))+(((IkReal(0.0300000000000000))*(cj5)))+(((IkReal(4.85237587652042e-11))*(x708)))+(((py)*(x703)))+(((IkReal(0.333488578145101))*(sj5))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x702)))+(((IkReal(-1.00000000000000))*(pz)*(x704)))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(x702)*(x707)))+(((IkReal(-0.333488578145101))*(cj5)))+(((IkReal(4.85237587652042e-11))*(x709))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(0.418224329579229))+(j7)), IkReal(6.28318530717959))));
if( IKabs(evalcond[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
IkReal x710=((IkReal(1.00000000000000))*(sj4));
IkReal x711=((cj4)*(sj3));
IkReal x712=((cj3)*(cj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.406138466127514))+(((IkReal(-1.00000000000000))*(r02)*(x710)))+(((r01)*(x711)))+(((r00)*(x712))));
evalcond[2]=((IkReal(0.136511421854899))+(((IkReal(-1.00000000000000))*(pz)*(x710)))+(((px)*(x712)))+(((py)*(x711))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x713=((IkReal(1.09431753188062))*(sj4));
if( IKabs(((((IkReal(-1.09431753188062))*(r00)*(sj3)))+(((IkReal(1.09431753188062))*(cj3)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.09431753188062))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x713)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x713))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.09431753188062))*(r00)*(sj3)))+(((IkReal(1.09431753188062))*(cj3)*(r01)))))+IKsqr(((((IkReal(-1.09431753188062))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x713)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x713)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.09431753188062))*(r00)*(sj3)))+(((IkReal(1.09431753188062))*(cj3)*(r01)))), ((((IkReal(-1.09431753188062))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x713)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x713)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x714=IKsin(j6);
IkReal x715=IKcos(j6);
IkReal x716=((IkReal(1.00000000000000))*(cj4));
IkReal x717=((IkReal(1.00000000000000))*(sj4));
IkReal x718=((IkReal(1.00000000000000))*(sj3));
evalcond[0]=((((IkReal(-0.913811550000000))*(x714)))+(((cj3)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x718))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(-4.85237587652042e-11))*(x714)))+(((IkReal(-1.00000000000000))*(px)*(x718)))+(((cj3)*(py))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x716)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x717)))+(((IkReal(-0.913811550000000))*(x715)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x717))));
evalcond[3]=((IkReal(-0.220000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x717)))+(((IkReal(-1.00000000000000))*(pz)*(x716)))+(((IkReal(-4.85237587652042e-11))*(x715)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x717))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x719=((IkReal(1.00000000000000))*(sj4));
IkReal x720=((cj4)*(sj3));
IkReal x721=((cj3)*(cj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.406138466127514))+(((IkReal(-1.00000000000000))*(r02)*(x719)))+(((r01)*(x720)))+(((r00)*(x721))));
evalcond[2]=((IkReal(-0.136511421854899))+(((IkReal(-1.00000000000000))*(pz)*(x719)))+(((py)*(x720)))+(((px)*(x721))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x722=((IkReal(1.09431753188062))*(sj4));
if( IKabs(((((IkReal(-1.09431753188062))*(r00)*(sj3)))+(((IkReal(1.09431753188062))*(cj3)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(1.09431753188062))*(cj4)*(r02)))+(((cj3)*(r00)*(x722)))+(((r01)*(sj3)*(x722))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.09431753188062))*(r00)*(sj3)))+(((IkReal(1.09431753188062))*(cj3)*(r01)))))+IKsqr(((((IkReal(1.09431753188062))*(cj4)*(r02)))+(((cj3)*(r00)*(x722)))+(((r01)*(sj3)*(x722)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.09431753188062))*(r00)*(sj3)))+(((IkReal(1.09431753188062))*(cj3)*(r01)))), ((((IkReal(1.09431753188062))*(cj4)*(r02)))+(((cj3)*(r00)*(x722)))+(((r01)*(sj3)*(x722)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x723=IKsin(j6);
IkReal x724=IKcos(j6);
IkReal x725=((IkReal(1.00000000000000))*(cj4));
IkReal x726=((IkReal(1.00000000000000))*(sj4));
IkReal x727=((IkReal(1.00000000000000))*(sj3));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x727)))+(((IkReal(-0.913811550000000))*(x723)))+(((cj3)*(r01))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(x727)))+(((IkReal(-4.85237587652042e-11))*(x723)))+(((cj3)*(py))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj3)*(r00)*(x726)))+(((IkReal(-1.00000000000000))*(r02)*(x725)))+(((IkReal(0.913811550000000))*(x724)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x726))));
evalcond[3]=((IkReal(-0.280000000000000))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x726)))+(((IkReal(4.85237587652042e-11))*(x724)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x726)))+(((IkReal(-1.00000000000000))*(pz)*(x725))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x728=((IkReal(1.00000000000000))*(cj4));
IkReal x729=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.406138466127514))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x729)))+(((IkReal(-1.00000000000000))*(r02)*(x728)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x729))));
evalcond[2]=((IkReal(-0.386511421854899))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x729)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x729)))+(((IkReal(-1.00000000000000))*(pz)*(x728))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x730=((IkReal(1.09431753188062))*(cj3));
IkReal x731=((IkReal(1.09431753188062))*(sj3));
if( IKabs(((((r01)*(x730)))+(((IkReal(-1.00000000000000))*(r00)*(x731))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.09431753188062))*(r02)*(sj4)))+(((cj4)*(r01)*(x731)))+(((cj4)*(r00)*(x730))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((r01)*(x730)))+(((IkReal(-1.00000000000000))*(r00)*(x731)))))+IKsqr(((((IkReal(-1.09431753188062))*(r02)*(sj4)))+(((cj4)*(r01)*(x731)))+(((cj4)*(r00)*(x730)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((r01)*(x730)))+(((IkReal(-1.00000000000000))*(r00)*(x731)))), ((((IkReal(-1.09431753188062))*(r02)*(sj4)))+(((cj4)*(r01)*(x731)))+(((cj4)*(r00)*(x730)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x732=IKsin(j6);
IkReal x733=IKcos(j6);
IkReal x734=((IkReal(1.00000000000000))*(sj4));
IkReal x735=((cj4)*(sj3));
IkReal x736=((cj3)*(cj4));
IkReal x737=((IkReal(1.00000000000000))*(sj3));
evalcond[0]=((((IkReal(-0.913811550000000))*(x732)))+(((cj3)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x737))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(x737)))+(((IkReal(-4.85237587652042e-11))*(x732)))+(((cj3)*(py))));
evalcond[2]=((((IkReal(-0.913811550000000))*(x733)))+(((IkReal(-1.00000000000000))*(r02)*(x734)))+(((r00)*(x736)))+(((r01)*(x735))));
evalcond[3]=((IkReal(0.0300000000000000))+(((px)*(x736)))+(((IkReal(-4.85237587652042e-11))*(x733)))+(((py)*(x735)))+(((IkReal(-1.00000000000000))*(pz)*(x734))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x738=((IkReal(1.00000000000000))*(cj4));
IkReal x739=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.406138466127514))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x739)))+(((IkReal(-1.00000000000000))*(r02)*(x738)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x739))));
evalcond[2]=((IkReal(-0.113488578145101))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x739)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x739)))+(((IkReal(-1.00000000000000))*(pz)*(x738))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x740=((IkReal(1.09431753188062))*(cj3));
IkReal x741=((IkReal(1.09431753188062))*(sj3));
if( IKabs(((((IkReal(-1.00000000000000))*(r00)*(x741)))+(((r01)*(x740))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj4)*(r01)*(x741)))+(((IkReal(1.09431753188062))*(r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(x740))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(r00)*(x741)))+(((r01)*(x740)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(r01)*(x741)))+(((IkReal(1.09431753188062))*(r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(x740)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(r00)*(x741)))+(((r01)*(x740)))), ((((IkReal(-1.00000000000000))*(cj4)*(r01)*(x741)))+(((IkReal(1.09431753188062))*(r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(x740)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x742=IKsin(j6);
IkReal x743=IKcos(j6);
IkReal x744=((IkReal(1.00000000000000))*(sj4));
IkReal x745=((cj4)*(sj3));
IkReal x746=((cj3)*(cj4));
IkReal x747=((IkReal(1.00000000000000))*(sj3));
evalcond[0]=((((IkReal(-0.913811550000000))*(x742)))+(((cj3)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x747))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(x747)))+(((cj3)*(py)))+(((IkReal(-4.85237587652042e-11))*(x742))));
evalcond[2]=((((IkReal(0.913811550000000))*(x743)))+(((IkReal(-1.00000000000000))*(r02)*(x744)))+(((r00)*(x746)))+(((r01)*(x745))));
evalcond[3]=((IkReal(-0.0300000000000000))+(((py)*(x745)))+(((IkReal(4.85237587652042e-11))*(x743)))+(((px)*(x746)))+(((IkReal(-1.00000000000000))*(pz)*(x744))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x748=((IkReal(20000000.0000000))*(cj4));
if( IKabs(((IkReal(1957803814.40943))+(((IkReal(-20608461204.3098))*(px)*(sj3)))+(((IkReal(20608461204.3098))*(cj3)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.47158765940308e-8))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((r01)*(sj3)*(x748)))+(((IkReal(-8122769.32255028))*(sj5)))+(((cj3)*(r00)*(x748)))+(((IkReal(-20000000.0000000))*(r02)*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1957803814.40943))+(((IkReal(-20608461204.3098))*(px)*(sj3)))+(((IkReal(20608461204.3098))*(cj3)*(py)))))+IKsqr(((IkReal(5.47158765940308e-8))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((r01)*(sj3)*(x748)))+(((IkReal(-8122769.32255028))*(sj5)))+(((cj3)*(r00)*(x748)))+(((IkReal(-20000000.0000000))*(r02)*(sj4)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(1957803814.40943))+(((IkReal(-20608461204.3098))*(px)*(sj3)))+(((IkReal(20608461204.3098))*(cj3)*(py)))), ((IkReal(5.47158765940308e-8))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((r01)*(sj3)*(x748)))+(((IkReal(-8122769.32255028))*(sj5)))+(((cj3)*(r00)*(x748)))+(((IkReal(-20000000.0000000))*(r02)*(sj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x749=IKsin(j6);
IkReal x750=IKcos(j6);
IkReal x751=((IkReal(1.00000000000000))*(sj4));
IkReal x752=((cj4)*(sj3));
IkReal x753=((IkReal(1.00000000000000))*(cj4));
IkReal x754=((IkReal(1.00000000000000))*(sj3));
IkReal x755=((cj3)*(r00));
IkReal x756=((cj3)*(px));
IkReal x757=((cj5)*(x750));
IkReal x758=((sj5)*(x750));
evalcond[0]=((((IkReal(-0.913811550000000))*(x749)))+(((cj3)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x754))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(x754)))+(((cj3)*(py)))+(((IkReal(-4.85237587652042e-11))*(x749))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x751)))+(((IkReal(-0.913811550000000))*(x757)))+(((r01)*(x752)))+(((cj4)*(x755)))+(((IkReal(-0.406138466127514))*(sj5))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r02)*(x753)))+(((IkReal(-0.913811550000000))*(x758)))+(((IkReal(-1.00000000000000))*(x751)*(x755)))+(((IkReal(0.406138466127514))*(cj5)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x751))));
evalcond[4]=((((py)*(x752)))+(((IkReal(0.0300000000000000))*(cj5)))+(((IkReal(0.136511421854899))*(sj5)))+(((IkReal(-4.85237587652042e-11))*(x757)))+(((IkReal(-1.00000000000000))*(pz)*(x751)))+(((cj4)*(x756))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x751)))+(((IkReal(-0.136511421854899))*(cj5)))+(((IkReal(-1.00000000000000))*(x751)*(x756)))+(((IkReal(-4.85237587652042e-11))*(x758)))+(((IkReal(-1.00000000000000))*(pz)*(x753))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x759=((IkReal(20000000.0000000))*(sj4));
if( IKabs(((((IkReal(-1.09431753188062))*(r00)*(sj3)))+(((IkReal(1.09431753188062))*(cj3)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.47158765940308e-8))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(8122769.32255028))*(cj5)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x759)))+(((IkReal(-20000000.0000000))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x759))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.09431753188062))*(r00)*(sj3)))+(((IkReal(1.09431753188062))*(cj3)*(r01)))))+IKsqr(((IkReal(5.47158765940308e-8))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(8122769.32255028))*(cj5)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x759)))+(((IkReal(-20000000.0000000))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x759)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.09431753188062))*(r00)*(sj3)))+(((IkReal(1.09431753188062))*(cj3)*(r01)))), ((IkReal(5.47158765940308e-8))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(8122769.32255028))*(cj5)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x759)))+(((IkReal(-20000000.0000000))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x759)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x760=IKsin(j6);
IkReal x761=IKcos(j6);
IkReal x762=((IkReal(1.00000000000000))*(sj4));
IkReal x763=((cj4)*(sj3));
IkReal x764=((IkReal(1.00000000000000))*(cj4));
IkReal x765=((IkReal(1.00000000000000))*(sj3));
IkReal x766=((cj3)*(r00));
IkReal x767=((cj3)*(px));
IkReal x768=((cj5)*(x761));
IkReal x769=((sj5)*(x761));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x765)))+(((cj3)*(r01)))+(((IkReal(-0.913811550000000))*(x760))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(-4.85237587652042e-11))*(x760)))+(((IkReal(-1.00000000000000))*(px)*(x765)))+(((cj3)*(py))));
evalcond[2]=((((cj4)*(x766)))+(((IkReal(-1.00000000000000))*(r02)*(x762)))+(((IkReal(-0.913811550000000))*(x768)))+(((IkReal(-0.406138466127514))*(sj5)))+(((r01)*(x763))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x762)*(x766)))+(((IkReal(0.406138466127514))*(cj5)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x762)))+(((IkReal(-1.00000000000000))*(r02)*(x764)))+(((IkReal(-0.913811550000000))*(x769))));
evalcond[4]=((((IkReal(-4.85237587652042e-11))*(x768)))+(((IkReal(0.0300000000000000))*(cj5)))+(((IkReal(0.136511421854899))*(sj5)))+(((cj4)*(x767)))+(((py)*(x763)))+(((IkReal(-1.00000000000000))*(pz)*(x762))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(-1.00000000000000))*(x762)*(x767)))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(-4.85237587652042e-11))*(x769)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x762)))+(((IkReal(-0.136511421854899))*(cj5)))+(((IkReal(-1.00000000000000))*(pz)*(x764))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x770=((IkReal(20000000.0000000))*(cj4));
if( IKabs(((((IkReal(-1.09431753188062))*(r00)*(sj3)))+(((IkReal(1.09431753188062))*(cj3)*(r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(5.47158765940308e-8))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((r01)*(sj3)*(x770)))+(((IkReal(-8122769.32255028))*(sj5)))+(((cj3)*(r00)*(x770)))+(((IkReal(-20000000.0000000))*(r02)*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.09431753188062))*(r00)*(sj3)))+(((IkReal(1.09431753188062))*(cj3)*(r01)))))+IKsqr(((IkReal(5.47158765940308e-8))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((r01)*(sj3)*(x770)))+(((IkReal(-8122769.32255028))*(sj5)))+(((cj3)*(r00)*(x770)))+(((IkReal(-20000000.0000000))*(r02)*(sj4)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.09431753188062))*(r00)*(sj3)))+(((IkReal(1.09431753188062))*(cj3)*(r01)))), ((IkReal(5.47158765940308e-8))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((r01)*(sj3)*(x770)))+(((IkReal(-8122769.32255028))*(sj5)))+(((cj3)*(r00)*(x770)))+(((IkReal(-20000000.0000000))*(r02)*(sj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x771=IKsin(j6);
IkReal x772=IKcos(j6);
IkReal x773=((IkReal(1.00000000000000))*(sj4));
IkReal x774=((cj4)*(sj3));
IkReal x775=((IkReal(1.00000000000000))*(cj4));
IkReal x776=((IkReal(1.00000000000000))*(sj3));
IkReal x777=((cj3)*(r00));
IkReal x778=((cj3)*(px));
IkReal x779=((cj5)*(x772));
IkReal x780=((sj5)*(x772));
evalcond[0]=((((cj3)*(r01)))+(((IkReal(-0.913811550000000))*(x771)))+(((IkReal(-1.00000000000000))*(r00)*(x776))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(x776)))+(((cj3)*(py)))+(((IkReal(-4.85237587652042e-11))*(x771))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x773)))+(((IkReal(-0.913811550000000))*(x779)))+(((r01)*(x774)))+(((cj4)*(x777)))+(((IkReal(-0.406138466127514))*(sj5))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r01)*(sj3)*(x773)))+(((IkReal(-1.00000000000000))*(r02)*(x775)))+(((IkReal(0.406138466127514))*(cj5)))+(((IkReal(-1.00000000000000))*(x773)*(x777)))+(((IkReal(-0.913811550000000))*(x780))));
evalcond[4]=((((IkReal(0.0300000000000000))*(cj5)))+(((IkReal(0.136511421854899))*(sj5)))+(((IkReal(-1.00000000000000))*(pz)*(x773)))+(((cj4)*(x778)))+(((IkReal(-4.85237587652042e-11))*(x779)))+(((py)*(x774))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x773)))+(((IkReal(-4.85237587652042e-11))*(x780)))+(((IkReal(-0.136511421854899))*(cj5)))+(((IkReal(-1.00000000000000))*(pz)*(x775)))+(((IkReal(-1.00000000000000))*(x773)*(x778))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x781=((r01)*(sj3));
IkReal x782=((IkReal(1.00000000000000))*(sj4));
IkReal x783=((cj3)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j7)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj3)))+(((cj3)*(r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj5)))+(((cj4)*(x783)))+(((cj4)*(x781)))+(((IkReal(-1.00000000000000))*(r02)*(x782))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj4)*(r02)))+(cj5)+(((IkReal(-1.00000000000000))*(x781)*(x782)))+(((IkReal(-1.00000000000000))*(x782)*(x783))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x784=((r01)*(sj3));
IkReal x785=((IkReal(1.00000000000000))*(sj4));
IkReal x786=((cj3)*(r00));
IkReal x787=((IkReal(1.00000000000000))*(cj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj3)))+(((cj3)*(r01))));
evalcond[2]=((((cj4)*(x784)))+(((cj4)*(x786)))+(((IkReal(-1.00000000000000))*(r02)*(x785))));
evalcond[3]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x784)*(x785)))+(((IkReal(-1.00000000000000))*(x785)*(x786)))+(((IkReal(-1.00000000000000))*(r02)*(x787))));
evalcond[4]=((IkReal(-0.445000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x785)))+(((IkReal(-1.00000000000000))*(pz)*(x787)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x785))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x788=((IkReal(11.1111111111111))*(py));
IkReal x789=((IkReal(11.1111111111111))*(px));
if( IKabs(((IkReal(-1.05555555555556))+(((IkReal(-1.00000000000000))*(cj3)*(x788)))+(((sj3)*(x789))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.333333333333333))+(((IkReal(11.1111111111111))*(pz)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(sj3)*(x788)))+(((IkReal(-1.00000000000000))*(cj3)*(cj4)*(x789))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.05555555555556))+(((IkReal(-1.00000000000000))*(cj3)*(x788)))+(((sj3)*(x789)))))+IKsqr(((IkReal(-0.333333333333333))+(((IkReal(11.1111111111111))*(pz)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(sj3)*(x788)))+(((IkReal(-1.00000000000000))*(cj3)*(cj4)*(x789)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.05555555555556))+(((IkReal(-1.00000000000000))*(cj3)*(x788)))+(((sj3)*(x789)))), ((IkReal(-0.333333333333333))+(((IkReal(11.1111111111111))*(pz)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(sj3)*(x788)))+(((IkReal(-1.00000000000000))*(cj3)*(cj4)*(x789)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0950000000000000))+(((IkReal(0.0900000000000000))*(IKsin(j6))))+(((IkReal(-1.00000000000000))*(px)*(sj3)))+(((cj3)*(py))));
evalcond[1]=((IkReal(0.0300000000000000))+(((cj4)*(py)*(sj3)))+(((cj3)*(cj4)*(px)))+(((IkReal(-1.00000000000000))*(pz)*(sj4)))+(((IkReal(0.0900000000000000))*(IKcos(j6)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x790=((r01)*(sj3));
IkReal x791=((IkReal(1.00000000000000))*(sj4));
IkReal x792=((cj3)*(r00));
IkReal x793=((IkReal(1.00000000000000))*(cj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj3)))+(((cj3)*(r01))));
evalcond[2]=((((cj4)*(x790)))+(((cj4)*(x792)))+(((IkReal(-1.00000000000000))*(r02)*(x791))));
evalcond[3]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(x791)*(x792)))+(((IkReal(-1.00000000000000))*(x790)*(x791)))+(((IkReal(-1.00000000000000))*(r02)*(x793))));
evalcond[4]=((IkReal(-0.0550000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x791)))+(((IkReal(-1.00000000000000))*(pz)*(x793)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x791))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x794=((IkReal(11.1111111111111))*(py));
IkReal x795=((IkReal(11.1111111111111))*(px));
if( IKabs(((IkReal(-1.05555555555556))+(((IkReal(-1.00000000000000))*(cj3)*(x794)))+(((sj3)*(x795))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.333333333333333))+(((cj4)*(sj3)*(x794)))+(((cj3)*(cj4)*(x795)))+(((IkReal(-11.1111111111111))*(pz)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.05555555555556))+(((IkReal(-1.00000000000000))*(cj3)*(x794)))+(((sj3)*(x795)))))+IKsqr(((IkReal(-0.333333333333333))+(((cj4)*(sj3)*(x794)))+(((cj3)*(cj4)*(x795)))+(((IkReal(-11.1111111111111))*(pz)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.05555555555556))+(((IkReal(-1.00000000000000))*(cj3)*(x794)))+(((sj3)*(x795)))), ((IkReal(-0.333333333333333))+(((cj4)*(sj3)*(x794)))+(((cj3)*(cj4)*(x795)))+(((IkReal(-11.1111111111111))*(pz)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0950000000000000))+(((IkReal(0.0900000000000000))*(IKsin(j6))))+(((IkReal(-1.00000000000000))*(px)*(sj3)))+(((cj3)*(py))));
evalcond[1]=((IkReal(-0.0300000000000000))+(((IkReal(-0.0900000000000000))*(IKcos(j6))))+(((cj4)*(py)*(sj3)))+(((cj3)*(cj4)*(px)))+(((IkReal(-1.00000000000000))*(pz)*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x796=((r01)*(sj3));
IkReal x797=((IkReal(1.00000000000000))*(sj4));
IkReal x798=((cj3)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj3)))+(((cj3)*(r01))));
evalcond[2]=((IkReal(-1.00000000000000))+(((cj4)*(x798)))+(((cj4)*(x796)))+(((IkReal(-1.00000000000000))*(r02)*(x797))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(x796)*(x797)))+(((IkReal(-1.00000000000000))*(x797)*(x798))));
evalcond[4]=((IkReal(0.195000000000000))+(((cj4)*(py)*(sj3)))+(((cj3)*(cj4)*(px)))+(((IkReal(-1.00000000000000))*(pz)*(x797))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x799=((IkReal(11.1111111111111))*(py));
IkReal x800=((IkReal(11.1111111111111))*(px));
if( IKabs(((IkReal(-1.05555555555556))+(((IkReal(-1.00000000000000))*(cj3)*(x799)))+(((sj3)*(x800))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(2.44444444444444))+(((sj3)*(sj4)*(x799)))+(((IkReal(11.1111111111111))*(cj4)*(pz)))+(((cj3)*(sj4)*(x800))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.05555555555556))+(((IkReal(-1.00000000000000))*(cj3)*(x799)))+(((sj3)*(x800)))))+IKsqr(((IkReal(2.44444444444444))+(((sj3)*(sj4)*(x799)))+(((IkReal(11.1111111111111))*(cj4)*(pz)))+(((cj3)*(sj4)*(x800)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.05555555555556))+(((IkReal(-1.00000000000000))*(cj3)*(x799)))+(((sj3)*(x800)))), ((IkReal(2.44444444444444))+(((sj3)*(sj4)*(x799)))+(((IkReal(11.1111111111111))*(cj4)*(pz)))+(((cj3)*(sj4)*(x800)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x801=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(0.0950000000000000))+(((IkReal(0.0900000000000000))*(IKsin(j6))))+(((IkReal(-1.00000000000000))*(px)*(sj3)))+(((cj3)*(py))));
evalcond[1]=((IkReal(-0.220000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x801)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x801)))+(((IkReal(-1.00000000000000))*(cj4)*(pz)))+(((IkReal(0.0900000000000000))*(IKcos(j6)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x802=((r01)*(sj3));
IkReal x803=((IkReal(1.00000000000000))*(sj4));
IkReal x804=((cj3)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj3)))+(((cj3)*(r01))));
evalcond[2]=((IkReal(1.00000000000000))+(((cj4)*(x802)))+(((cj4)*(x804)))+(((IkReal(-1.00000000000000))*(r02)*(x803))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(x803)*(x804)))+(((IkReal(-1.00000000000000))*(x802)*(x803))));
evalcond[4]=((IkReal(-0.195000000000000))+(((cj4)*(py)*(sj3)))+(((cj3)*(cj4)*(px)))+(((IkReal(-1.00000000000000))*(pz)*(x803))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x805=((IkReal(11.1111111111111))*(py));
IkReal x806=((IkReal(11.1111111111111))*(px));
if( IKabs(((IkReal(-1.05555555555556))+(((sj3)*(x806)))+(((IkReal(-1.00000000000000))*(cj3)*(x805))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-3.11111111111111))+(((IkReal(-11.1111111111111))*(cj4)*(pz)))+(((IkReal(-1.00000000000000))*(sj3)*(sj4)*(x805)))+(((IkReal(-1.00000000000000))*(cj3)*(sj4)*(x806))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.05555555555556))+(((sj3)*(x806)))+(((IkReal(-1.00000000000000))*(cj3)*(x805)))))+IKsqr(((IkReal(-3.11111111111111))+(((IkReal(-11.1111111111111))*(cj4)*(pz)))+(((IkReal(-1.00000000000000))*(sj3)*(sj4)*(x805)))+(((IkReal(-1.00000000000000))*(cj3)*(sj4)*(x806)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.05555555555556))+(((sj3)*(x806)))+(((IkReal(-1.00000000000000))*(cj3)*(x805)))), ((IkReal(-3.11111111111111))+(((IkReal(-11.1111111111111))*(cj4)*(pz)))+(((IkReal(-1.00000000000000))*(sj3)*(sj4)*(x805)))+(((IkReal(-1.00000000000000))*(cj3)*(sj4)*(x806)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x807=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(0.0950000000000000))+(((IkReal(0.0900000000000000))*(IKsin(j6))))+(((IkReal(-1.00000000000000))*(px)*(sj3)))+(((cj3)*(py))));
evalcond[1]=((IkReal(-0.280000000000000))+(((IkReal(-0.0900000000000000))*(IKcos(j6))))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x807)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x807)))+(((IkReal(-1.00000000000000))*(cj4)*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x808=((IkReal(100.000000000000))*(sj4));
if( IKabs(((IkReal(-1.05555555555556))+(((IkReal(-11.1111111111111))*(cj3)*(py)))+(((IkReal(11.1111111111111))*(px)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.111111111111111))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((IkReal(25.0000000000000))+(((IkReal(-3.00000000000000))*(sj5)))+(((IkReal(19.5000000000000))*(cj5)))+(((IkReal(100.000000000000))*(cj4)*(pz)))+(((py)*(sj3)*(x808)))+(((cj3)*(px)*(x808))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.05555555555556))+(((IkReal(-11.1111111111111))*(cj3)*(py)))+(((IkReal(11.1111111111111))*(px)*(sj3)))))+IKsqr(((IkReal(0.111111111111111))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((IkReal(25.0000000000000))+(((IkReal(-3.00000000000000))*(sj5)))+(((IkReal(19.5000000000000))*(cj5)))+(((IkReal(100.000000000000))*(cj4)*(pz)))+(((py)*(sj3)*(x808)))+(((cj3)*(px)*(x808)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.05555555555556))+(((IkReal(-11.1111111111111))*(cj3)*(py)))+(((IkReal(11.1111111111111))*(px)*(sj3)))), ((IkReal(0.111111111111111))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((IkReal(25.0000000000000))+(((IkReal(-3.00000000000000))*(sj5)))+(((IkReal(19.5000000000000))*(cj5)))+(((IkReal(100.000000000000))*(cj4)*(pz)))+(((py)*(sj3)*(x808)))+(((cj3)*(px)*(x808)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x809=IKcos(j6);
IkReal x810=((IkReal(1.00000000000000))*(pz));
IkReal x811=((py)*(sj3));
IkReal x812=((cj3)*(px));
IkReal x813=((IkReal(1.00000000000000))*(sj4));
IkReal x814=((IkReal(0.0900000000000000))*(x809));
evalcond[0]=((IkReal(0.0950000000000000))+(((IkReal(0.0900000000000000))*(IKsin(j6))))+(((IkReal(-1.00000000000000))*(px)*(sj3)))+(((cj3)*(py))));
evalcond[1]=((((IkReal(0.195000000000000))*(sj5)))+(((IkReal(0.0300000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(sj4)*(x810)))+(((cj4)*(x812)))+(((cj4)*(x811)))+(((cj5)*(x814))));
evalcond[2]=((IkReal(-0.250000000000000))+(((IkReal(-1.00000000000000))*(x812)*(x813)))+(((IkReal(0.0300000000000000))*(sj5)))+(((sj5)*(x814)))+(((IkReal(-0.195000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(x811)*(x813)))+(((IkReal(-1.00000000000000))*(cj4)*(x810))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x815=((IkReal(100.000000000000))*(cj4));
if( IKabs(((IkReal(-1.05555555555556))+(((IkReal(-11.1111111111111))*(cj3)*(py)))+(((IkReal(11.1111111111111))*(px)*(sj3))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.111111111111111))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-19.5000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x815)))+(((IkReal(100.000000000000))*(pz)*(sj4)))+(((IkReal(-3.00000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x815))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(-1.05555555555556))+(((IkReal(-11.1111111111111))*(cj3)*(py)))+(((IkReal(11.1111111111111))*(px)*(sj3)))))+IKsqr(((IkReal(0.111111111111111))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-19.5000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x815)))+(((IkReal(100.000000000000))*(pz)*(sj4)))+(((IkReal(-3.00000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x815)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(-1.05555555555556))+(((IkReal(-11.1111111111111))*(cj3)*(py)))+(((IkReal(11.1111111111111))*(px)*(sj3)))), ((IkReal(0.111111111111111))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-19.5000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x815)))+(((IkReal(100.000000000000))*(pz)*(sj4)))+(((IkReal(-3.00000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x815)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x816=IKcos(j6);
IkReal x817=((IkReal(1.00000000000000))*(pz));
IkReal x818=((py)*(sj3));
IkReal x819=((cj3)*(px));
IkReal x820=((IkReal(1.00000000000000))*(sj4));
IkReal x821=((IkReal(0.0900000000000000))*(x816));
evalcond[0]=((IkReal(0.0950000000000000))+(((IkReal(0.0900000000000000))*(IKsin(j6))))+(((IkReal(-1.00000000000000))*(px)*(sj3)))+(((cj3)*(py))));
evalcond[1]=((((IkReal(0.195000000000000))*(sj5)))+(((IkReal(0.0300000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(sj4)*(x817)))+(((cj5)*(x821)))+(((cj4)*(x819)))+(((cj4)*(x818))));
evalcond[2]=((IkReal(-0.250000000000000))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(x818)*(x820)))+(((IkReal(-1.00000000000000))*(x819)*(x820)))+(((IkReal(-0.195000000000000))*(cj5)))+(((sj5)*(x821)))+(((IkReal(-1.00000000000000))*(cj4)*(x817))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x822=((r01)*(sj3));
IkReal x823=((IkReal(1.00000000000000))*(sj4));
IkReal x824=((cj3)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j7)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj3)))+(((cj3)*(r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x823)))+(sj5)+(((cj4)*(x824)))+(((cj4)*(x822))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(x822)*(x823)))+(((IkReal(-1.00000000000000))*(x823)*(x824)))+(((IkReal(-1.00000000000000))*(cj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=cj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
IkReal x825=((r01)*(sj3));
IkReal x826=((IkReal(1.00000000000000))*(sj4));
IkReal x827=((cj3)*(r00));
IkReal x828=((IkReal(1.00000000000000))*(cj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj3)))+(((cj3)*(r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x826)))+(((cj4)*(x825)))+(((cj4)*(x827))));
evalcond[3]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r02)*(x828)))+(((IkReal(-1.00000000000000))*(x826)*(x827)))+(((IkReal(-1.00000000000000))*(x825)*(x826))));
evalcond[4]=((IkReal(-0.525000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x828)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x826)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x826))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x829=((IkReal(11.1111111111111))*(py));
IkReal x830=((IkReal(11.1111111111111))*(px));
if( IKabs(((IkReal(1.05555555555556))+(((cj3)*(x829)))+(((IkReal(-1.00000000000000))*(sj3)*(x830))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.333333333333333))+(((cj3)*(cj4)*(x830)))+(((IkReal(-11.1111111111111))*(pz)*(sj4)))+(((cj4)*(sj3)*(x829))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.05555555555556))+(((cj3)*(x829)))+(((IkReal(-1.00000000000000))*(sj3)*(x830)))))+IKsqr(((IkReal(0.333333333333333))+(((cj3)*(cj4)*(x830)))+(((IkReal(-11.1111111111111))*(pz)*(sj4)))+(((cj4)*(sj3)*(x829)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(1.05555555555556))+(((cj3)*(x829)))+(((IkReal(-1.00000000000000))*(sj3)*(x830)))), ((IkReal(0.333333333333333))+(((cj3)*(cj4)*(x830)))+(((IkReal(-11.1111111111111))*(pz)*(sj4)))+(((cj4)*(sj3)*(x829)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(sj3)))+(((cj3)*(py)))+(((IkReal(-0.0900000000000000))*(IKsin(j6)))));
evalcond[1]=((IkReal(0.0300000000000000))+(((IkReal(-0.0900000000000000))*(IKcos(j6))))+(((cj4)*(py)*(sj3)))+(((cj3)*(cj4)*(px)))+(((IkReal(-1.00000000000000))*(pz)*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x831=((r01)*(sj3));
IkReal x832=((IkReal(1.00000000000000))*(sj4));
IkReal x833=((cj3)*(r00));
IkReal x834=((IkReal(1.00000000000000))*(cj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj3)))+(((cj3)*(r01))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x832)))+(((cj4)*(x833)))+(((cj4)*(x831))));
evalcond[3]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x832)*(x833)))+(((IkReal(-1.00000000000000))*(r02)*(x834)))+(((IkReal(-1.00000000000000))*(x831)*(x832))));
evalcond[4]=((IkReal(0.0250000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x832)))+(((IkReal(-1.00000000000000))*(pz)*(x834)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x832))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x835=((IkReal(11.1111111111111))*(py));
IkReal x836=((IkReal(11.1111111111111))*(px));
if( IKabs(((IkReal(1.05555555555556))+(((cj3)*(x835)))+(((IkReal(-1.00000000000000))*(sj3)*(x836))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.333333333333333))+(((IkReal(11.1111111111111))*(pz)*(sj4)))+(((IkReal(-1.00000000000000))*(cj3)*(cj4)*(x836)))+(((IkReal(-1.00000000000000))*(cj4)*(sj3)*(x835))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.05555555555556))+(((cj3)*(x835)))+(((IkReal(-1.00000000000000))*(sj3)*(x836)))))+IKsqr(((IkReal(0.333333333333333))+(((IkReal(11.1111111111111))*(pz)*(sj4)))+(((IkReal(-1.00000000000000))*(cj3)*(cj4)*(x836)))+(((IkReal(-1.00000000000000))*(cj4)*(sj3)*(x835)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(1.05555555555556))+(((cj3)*(x835)))+(((IkReal(-1.00000000000000))*(sj3)*(x836)))), ((IkReal(0.333333333333333))+(((IkReal(11.1111111111111))*(pz)*(sj4)))+(((IkReal(-1.00000000000000))*(cj3)*(cj4)*(x836)))+(((IkReal(-1.00000000000000))*(cj4)*(sj3)*(x835)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(sj3)))+(((cj3)*(py)))+(((IkReal(-0.0900000000000000))*(IKsin(j6)))));
evalcond[1]=((IkReal(-0.0300000000000000))+(((cj4)*(py)*(sj3)))+(((cj3)*(cj4)*(px)))+(((IkReal(-1.00000000000000))*(pz)*(sj4)))+(((IkReal(0.0900000000000000))*(IKcos(j6)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x837=((r01)*(sj3));
IkReal x838=((IkReal(1.00000000000000))*(sj4));
IkReal x839=((cj3)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj3)))+(((cj3)*(r01))));
evalcond[2]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(r02)*(x838)))+(((cj4)*(x839)))+(((cj4)*(x837))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(x837)*(x838)))+(((IkReal(-1.00000000000000))*(x838)*(x839))));
evalcond[4]=((IkReal(0.275000000000000))+(((IkReal(-1.00000000000000))*(pz)*(x838)))+(((cj4)*(py)*(sj3)))+(((cj3)*(cj4)*(px))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x840=((IkReal(11.1111111111111))*(py));
IkReal x841=((IkReal(11.1111111111111))*(px));
if( IKabs(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(sj3)*(x841)))+(((cj3)*(x840))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-2.44444444444444))+(((IkReal(-1.00000000000000))*(sj3)*(sj4)*(x840)))+(((IkReal(-1.00000000000000))*(cj3)*(sj4)*(x841)))+(((IkReal(-11.1111111111111))*(cj4)*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(sj3)*(x841)))+(((cj3)*(x840)))))+IKsqr(((IkReal(-2.44444444444444))+(((IkReal(-1.00000000000000))*(sj3)*(sj4)*(x840)))+(((IkReal(-1.00000000000000))*(cj3)*(sj4)*(x841)))+(((IkReal(-11.1111111111111))*(cj4)*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(sj3)*(x841)))+(((cj3)*(x840)))), ((IkReal(-2.44444444444444))+(((IkReal(-1.00000000000000))*(sj3)*(sj4)*(x840)))+(((IkReal(-1.00000000000000))*(cj3)*(sj4)*(x841)))+(((IkReal(-11.1111111111111))*(cj4)*(pz)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x842=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(sj3)))+(((cj3)*(py)))+(((IkReal(-0.0900000000000000))*(IKsin(j6)))));
evalcond[1]=((IkReal(-0.220000000000000))+(((IkReal(-0.0900000000000000))*(IKcos(j6))))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x842)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x842)))+(((IkReal(-1.00000000000000))*(cj4)*(pz))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x843=((r01)*(sj3));
IkReal x844=((IkReal(1.00000000000000))*(sj4));
IkReal x845=((cj3)*(r00));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(r00)*(sj3)))+(((cj3)*(r01))));
evalcond[2]=((IkReal(-1.00000000000000))+(((IkReal(-1.00000000000000))*(r02)*(x844)))+(((cj4)*(x843)))+(((cj4)*(x845))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(x843)*(x844)))+(((IkReal(-1.00000000000000))*(x844)*(x845))));
evalcond[4]=((IkReal(-0.275000000000000))+(((cj4)*(py)*(sj3)))+(((IkReal(-1.00000000000000))*(pz)*(x844)))+(((cj3)*(cj4)*(px))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x846=((IkReal(11.1111111111111))*(py));
IkReal x847=((IkReal(11.1111111111111))*(px));
if( IKabs(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(sj3)*(x847)))+(((cj3)*(x846))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(3.11111111111111))+(((cj3)*(sj4)*(x847)))+(((sj3)*(sj4)*(x846)))+(((IkReal(11.1111111111111))*(cj4)*(pz))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(sj3)*(x847)))+(((cj3)*(x846)))))+IKsqr(((IkReal(3.11111111111111))+(((cj3)*(sj4)*(x847)))+(((sj3)*(sj4)*(x846)))+(((IkReal(11.1111111111111))*(cj4)*(pz)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(1.05555555555556))+(((IkReal(-1.00000000000000))*(sj3)*(x847)))+(((cj3)*(x846)))), ((IkReal(3.11111111111111))+(((cj3)*(sj4)*(x847)))+(((sj3)*(sj4)*(x846)))+(((IkReal(11.1111111111111))*(cj4)*(pz)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x848=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(sj3)))+(((cj3)*(py)))+(((IkReal(-0.0900000000000000))*(IKsin(j6)))));
evalcond[1]=((IkReal(-0.280000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x848)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x848)))+(((IkReal(-1.00000000000000))*(cj4)*(pz)))+(((IkReal(0.0900000000000000))*(IKcos(j6)))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x849=((IkReal(100.000000000000))*(sj4));
if( IKabs(((IkReal(1.05555555555556))+(((IkReal(-11.1111111111111))*(px)*(sj3)))+(((IkReal(11.1111111111111))*(cj3)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.111111111111111))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((IkReal(-25.0000000000000))+(((IkReal(-27.5000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x849)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x849)))+(((IkReal(-100.000000000000))*(cj4)*(pz)))+(((IkReal(3.00000000000000))*(sj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.05555555555556))+(((IkReal(-11.1111111111111))*(px)*(sj3)))+(((IkReal(11.1111111111111))*(cj3)*(py)))))+IKsqr(((IkReal(0.111111111111111))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((IkReal(-25.0000000000000))+(((IkReal(-27.5000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x849)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x849)))+(((IkReal(-100.000000000000))*(cj4)*(pz)))+(((IkReal(3.00000000000000))*(sj5)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(1.05555555555556))+(((IkReal(-11.1111111111111))*(px)*(sj3)))+(((IkReal(11.1111111111111))*(cj3)*(py)))), ((IkReal(0.111111111111111))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((IkReal(-25.0000000000000))+(((IkReal(-27.5000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x849)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x849)))+(((IkReal(-100.000000000000))*(cj4)*(pz)))+(((IkReal(3.00000000000000))*(sj5)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x850=IKcos(j6);
IkReal x851=((IkReal(1.00000000000000))*(pz));
IkReal x852=((py)*(sj3));
IkReal x853=((IkReal(1.00000000000000))*(sj4));
IkReal x854=((cj3)*(px));
IkReal x855=((IkReal(0.0900000000000000))*(x850));
evalcond[0]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(sj3)))+(((cj3)*(py)))+(((IkReal(-0.0900000000000000))*(IKsin(j6)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj4)*(x851)))+(((IkReal(0.275000000000000))*(sj5)))+(((IkReal(0.0300000000000000))*(cj5)))+(((cj4)*(x854)))+(((cj4)*(x852)))+(((IkReal(-1.00000000000000))*(cj5)*(x855))));
evalcond[2]=((IkReal(-0.250000000000000))+(((IkReal(-1.00000000000000))*(x853)*(x854)))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(x852)*(x853)))+(((IkReal(-1.00000000000000))*(sj5)*(x855)))+(((IkReal(-0.275000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(cj4)*(x851))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x856=((IkReal(100.000000000000))*(cj4));
if( IKabs(((IkReal(1.05555555555556))+(((IkReal(-11.1111111111111))*(px)*(sj3)))+(((IkReal(11.1111111111111))*(cj3)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(0.111111111111111))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((py)*(sj3)*(x856)))+(((IkReal(3.00000000000000))*(cj5)))+(((IkReal(27.5000000000000))*(sj5)))+(((cj3)*(px)*(x856)))+(((IkReal(-100.000000000000))*(pz)*(sj4))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(1.05555555555556))+(((IkReal(-11.1111111111111))*(px)*(sj3)))+(((IkReal(11.1111111111111))*(cj3)*(py)))))+IKsqr(((IkReal(0.111111111111111))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((py)*(sj3)*(x856)))+(((IkReal(3.00000000000000))*(cj5)))+(((IkReal(27.5000000000000))*(sj5)))+(((cj3)*(px)*(x856)))+(((IkReal(-100.000000000000))*(pz)*(sj4)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((IkReal(1.05555555555556))+(((IkReal(-11.1111111111111))*(px)*(sj3)))+(((IkReal(11.1111111111111))*(cj3)*(py)))), ((IkReal(0.111111111111111))*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((py)*(sj3)*(x856)))+(((IkReal(3.00000000000000))*(cj5)))+(((IkReal(27.5000000000000))*(sj5)))+(((cj3)*(px)*(x856)))+(((IkReal(-100.000000000000))*(pz)*(sj4)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x857=IKcos(j6);
IkReal x858=((IkReal(1.00000000000000))*(pz));
IkReal x859=((py)*(sj3));
IkReal x860=((IkReal(1.00000000000000))*(sj4));
IkReal x861=((cj3)*(px));
IkReal x862=((IkReal(0.0900000000000000))*(x857));
evalcond[0]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(sj3)))+(((cj3)*(py)))+(((IkReal(-0.0900000000000000))*(IKsin(j6)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj4)*(x858)))+(((IkReal(0.275000000000000))*(sj5)))+(((IkReal(0.0300000000000000))*(cj5)))+(((cj4)*(x861)))+(((IkReal(-1.00000000000000))*(cj5)*(x862)))+(((cj4)*(x859))));
evalcond[2]=((IkReal(-0.250000000000000))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(x860)*(x861)))+(((IkReal(-1.00000000000000))*(sj5)*(x862)))+(((IkReal(-0.275000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(x859)*(x860)))+(((IkReal(-1.00000000000000))*(cj4)*(x858))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x863=((IkReal(1.00000000000000))*(cj4));
IkReal x864=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((sj7)+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x864)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x864)))+(((IkReal(-1.00000000000000))*(r02)*(x863))));
evalcond[2]=((IkReal(-0.485000000000000))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x864)))+(((IkReal(-1.00000000000000))*(pz)*(x863)))+(((IkReal(0.0400000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x864)))+(((IkReal(-0.0900000000000000))*(cj7))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(cj7);
dummyeval[0]=cj7;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x865=((IkReal(1.00000000000000))*(cj3));
if( IKabs(((gconst0)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(r01)*(x865))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(x865)))+(((IkReal(-1.00000000000000))*(cj4)*(r01)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst0)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(r01)*(x865)))))), ((gconst0)*(((((r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(r00)*(x865)))+(((IkReal(-1.00000000000000))*(cj4)*(r01)*(sj3)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x866=IKsin(j6);
IkReal x867=IKcos(j6);
IkReal x868=((IkReal(0.0900000000000000))*(sj7));
IkReal x869=((cj4)*(sj3));
IkReal x870=((IkReal(1.00000000000000))*(sj4));
IkReal x871=((cj3)*(cj4));
IkReal x872=((IkReal(1.00000000000000))*(sj3));
IkReal x873=((cj7)*(x866));
IkReal x874=((cj7)*(x867));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x872)))+(((cj3)*(r01)))+(x873));
evalcond[1]=((IkReal(0.0950000000000000))+(((x866)*(x868)))+(((IkReal(0.0400000000000000))*(x873)))+(((IkReal(-1.00000000000000))*(px)*(x872)))+(((cj3)*(py))));
evalcond[2]=((((r01)*(x869)))+(((r00)*(x871)))+(((IkReal(-1.00000000000000))*(r02)*(x870)))+(x874));
evalcond[3]=((IkReal(0.0300000000000000))+(((x867)*(x868)))+(((IkReal(-1.00000000000000))*(pz)*(x870)))+(((IkReal(0.0400000000000000))*(x874)))+(((px)*(x871)))+(((py)*(x869))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x875=((IkReal(1.00000000000000))*(cj4));
IkReal x876=((IkReal(1.00000000000000))*(sj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x876)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x876)))+(((IkReal(-1.00000000000000))*(r02)*(x875))));
evalcond[2]=((IkReal(-0.0150000000000000))+(((IkReal(0.0900000000000000))*(cj7)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x876)))+(((IkReal(-1.00000000000000))*(pz)*(x875)))+(((IkReal(-0.0400000000000000))*(sj7)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x876))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(cj7);
dummyeval[0]=cj7;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst1)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(r02)*(sj4)))+(((cj4)*(r01)*(sj3)))+(((cj3)*(cj4)*(r00))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst1)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(r01)))))), ((gconst1)*(((((IkReal(-1.00000000000000))*(r02)*(sj4)))+(((cj4)*(r01)*(sj3)))+(((cj3)*(cj4)*(r00)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x877=IKsin(j6);
IkReal x878=IKcos(j6);
IkReal x879=((IkReal(1.00000000000000))*(sj4));
IkReal x880=((IkReal(0.0900000000000000))*(sj7));
IkReal x881=((cj4)*(sj3));
IkReal x882=((cj3)*(cj4));
IkReal x883=((IkReal(1.00000000000000))*(sj3));
IkReal x884=((cj7)*(x878));
IkReal x885=((cj7)*(x877));
evalcond[0]=((((cj3)*(r01)))+(x885)+(((IkReal(-1.00000000000000))*(r00)*(x883))));
evalcond[1]=((IkReal(0.0950000000000000))+(((x877)*(x880)))+(((IkReal(0.0400000000000000))*(x885)))+(((IkReal(-1.00000000000000))*(px)*(x883)))+(((cj3)*(py))));
evalcond[2]=((((r00)*(x882)))+(((r01)*(x881)))+(((IkReal(-1.00000000000000))*(x884)))+(((IkReal(-1.00000000000000))*(r02)*(x879))));
evalcond[3]=((IkReal(-0.0300000000000000))+(((IkReal(-0.0400000000000000))*(x884)))+(((px)*(x882)))+(((py)*(x881)))+(((IkReal(-1.00000000000000))*(pz)*(x879)))+(((IkReal(-1.00000000000000))*(x878)*(x880))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x886=((IkReal(1.00000000000000))*(sj4));
IkReal x887=((cj4)*(sj3));
IkReal x888=((cj3)*(cj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.57079632679490))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj7)))+(((r00)*(x888)))+(((r01)*(x887)))+(((IkReal(-1.00000000000000))*(r02)*(x886))));
evalcond[2]=((IkReal(0.235000000000000))+(((px)*(x888)))+(((IkReal(0.0900000000000000))*(cj7)))+(((py)*(x887)))+(((IkReal(-1.00000000000000))*(pz)*(x886)))+(((IkReal(-0.0400000000000000))*(sj7))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(cj7);
dummyeval[0]=cj7;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst2)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((cj3)*(r00)*(sj4)))+(((r01)*(sj3)*(sj4)))+(((cj4)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst2)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(r01)))))), ((gconst2)*(((((cj3)*(r00)*(sj4)))+(((r01)*(sj3)*(sj4)))+(((cj4)*(r02)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x889=IKsin(j6);
IkReal x890=IKcos(j6);
IkReal x891=((IkReal(0.0900000000000000))*(sj7));
IkReal x892=((IkReal(1.00000000000000))*(sj4));
IkReal x893=((IkReal(1.00000000000000))*(sj3));
IkReal x894=((IkReal(1.00000000000000))*(cj4));
IkReal x895=((cj7)*(x889));
IkReal x896=((cj7)*(x890));
evalcond[0]=((((cj3)*(r01)))+(x895)+(((IkReal(-1.00000000000000))*(r00)*(x893))));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(0.0400000000000000))*(x895)))+(((x889)*(x891)))+(((IkReal(-1.00000000000000))*(px)*(x893)))+(((cj3)*(py))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj3)*(r00)*(x892)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x892)))+(((IkReal(-1.00000000000000))*(r02)*(x894)))+(x896));
evalcond[3]=((IkReal(-0.220000000000000))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x892)))+(((IkReal(-1.00000000000000))*(pz)*(x894)))+(((IkReal(0.0400000000000000))*(x896)))+(((x890)*(x891)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x892))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
IkReal x897=((IkReal(1.00000000000000))*(sj4));
IkReal x898=((cj4)*(sj3));
IkReal x899=((cj3)*(cj4));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(4.71238898038469))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((sj7)+(((r01)*(x898)))+(((r00)*(x899)))+(((IkReal(-1.00000000000000))*(r02)*(x897))));
evalcond[2]=((IkReal(-0.235000000000000))+(((py)*(x898)))+(((px)*(x899)))+(((IkReal(-1.00000000000000))*(pz)*(x897)))+(((IkReal(0.0400000000000000))*(sj7)))+(((IkReal(-0.0900000000000000))*(cj7))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(cj7);
dummyeval[0]=cj7;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x900=((IkReal(1.00000000000000))*(sj4));
if( IKabs(((gconst3)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x900)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x900))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst3)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(r01)))))), ((gconst3)*(((((IkReal(-1.00000000000000))*(cj4)*(r02)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(x900)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x900)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x901=IKsin(j6);
IkReal x902=IKcos(j6);
IkReal x903=((IkReal(0.0900000000000000))*(sj7));
IkReal x904=((IkReal(1.00000000000000))*(sj4));
IkReal x905=((IkReal(1.00000000000000))*(sj3));
IkReal x906=((IkReal(1.00000000000000))*(cj4));
IkReal x907=((cj7)*(x902));
IkReal x908=((cj7)*(x901));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x905)))+(((cj3)*(r01)))+(x908));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(x905)))+(((IkReal(0.0400000000000000))*(x908)))+(((x901)*(x903)))+(((cj3)*(py))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj3)*(r00)*(x904)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x904)))+(((IkReal(-1.00000000000000))*(r02)*(x906)))+(((IkReal(-1.00000000000000))*(x907))));
evalcond[3]=((IkReal(-0.280000000000000))+(((IkReal(-1.00000000000000))*(x902)*(x903)))+(((IkReal(-1.00000000000000))*(pz)*(x906)))+(((IkReal(-1.00000000000000))*(cj3)*(px)*(x904)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x904)))+(((IkReal(-0.0400000000000000))*(x907))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IKabs(((((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(0.0400000000000000))*(cj7))))) != 0)?((IkReal)1/(((((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(0.0400000000000000))*(cj7)))))):(IkReal)1.0e30))*(((IkReal(-0.0950000000000000))+(((IkReal(-1.00000000000000))*(cj3)*(py)))+(((px)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(cj7) != 0)?((IkReal)1/(cj7)):(IkReal)1.0e30))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj5)*(sj7)))+(((cj3)*(r00)*(sj4)))+(((r01)*(sj3)*(sj4)))+(((cj4)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(0.0400000000000000))*(cj7))))) != 0)?((IkReal)1/(((((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(0.0400000000000000))*(cj7)))))):(IkReal)1.0e30))*(((IkReal(-0.0950000000000000))+(((IkReal(-1.00000000000000))*(cj3)*(py)))+(((px)*(sj3)))))))+IKsqr(((((IKabs(cj7) != 0)?((IkReal)1/(cj7)):(IkReal)1.0e30))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj5)*(sj7)))+(((cj3)*(r00)*(sj4)))+(((r01)*(sj3)*(sj4)))+(((cj4)*(r02)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IKabs(((((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(0.0400000000000000))*(cj7))))) != 0)?((IkReal)1/(((((IkReal(0.0900000000000000))*(sj7)))+(((IkReal(0.0400000000000000))*(cj7)))))):(IkReal)1.0e30))*(((IkReal(-0.0950000000000000))+(((IkReal(-1.00000000000000))*(cj3)*(py)))+(((px)*(sj3)))))), ((((IKabs(cj7) != 0)?((IkReal)1/(cj7)):(IkReal)1.0e30))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj5)*(sj7)))+(((cj3)*(r00)*(sj4)))+(((r01)*(sj3)*(sj4)))+(((cj4)*(r02)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x909=IKsin(j6);
IkReal x910=IKcos(j6);
IkReal x911=((IkReal(1.00000000000000))*(sj4));
IkReal x912=((IkReal(0.0900000000000000))*(sj7));
IkReal x913=((cj4)*(sj3));
IkReal x914=((cj7)*(sj5));
IkReal x915=((IkReal(1.00000000000000))*(cj4));
IkReal x916=((cj5)*(sj7));
IkReal x917=((cj5)*(cj7));
IkReal x918=((IkReal(1.00000000000000))*(sj3));
IkReal x919=((cj3)*(px));
IkReal x920=((cj3)*(r00));
IkReal x921=((sj5)*(sj7));
IkReal x922=((IkReal(0.0400000000000000))*(x910));
IkReal x923=((cj7)*(x909));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x918)))+(((cj3)*(r01)))+(x923));
evalcond[1]=((IkReal(0.0950000000000000))+(((x909)*(x912)))+(((IkReal(-1.00000000000000))*(px)*(x918)))+(((IkReal(0.0400000000000000))*(x923)))+(((cj3)*(py))));
evalcond[2]=((((x910)*(x917)))+(((IkReal(-1.00000000000000))*(r02)*(x911)))+(((IkReal(-1.00000000000000))*(x921)))+(((cj4)*(x920)))+(((r01)*(x913))));
evalcond[3]=((((x910)*(x914)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x911)))+(((IkReal(-1.00000000000000))*(r02)*(x915)))+(x916)+(((IkReal(-1.00000000000000))*(x911)*(x920))));
evalcond[4]=((((IkReal(0.235000000000000))*(sj5)))+(((IkReal(0.0300000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(pz)*(x911)))+(((IkReal(-0.0400000000000000))*(x921)))+(((x917)*(x922)))+(((cj4)*(x919)))+(((IkReal(0.0900000000000000))*(x914)))+(((cj5)*(x910)*(x912)))+(((py)*(x913))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(0.0400000000000000))*(x916)))+(((IkReal(-1.00000000000000))*(pz)*(x915)))+(((sj5)*(x910)*(x912)))+(((x914)*(x922)))+(((IkReal(-0.0900000000000000))*(x917)))+(((IkReal(-0.235000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x911)))+(((IkReal(-1.00000000000000))*(x911)*(x919))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x924=((IKabs(cj7) != 0)?((IkReal)1/(cj7)):(IkReal)1.0e30);
IkReal x925=((IkReal(1.00000000000000))*(cj3));
if( IKabs(((x924)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(r01)*(x925))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x924)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj4)*(r00)*(x925)))+(((sj5)*(sj7)))+(((r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(r01)*(sj3))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x924)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(r01)*(x925)))))))+IKsqr(((x924)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj4)*(r00)*(x925)))+(((sj5)*(sj7)))+(((r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(r01)*(sj3)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x924)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(r01)*(x925)))))), ((x924)*(((IKabs(cj5) != 0)?((IkReal)1/(cj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj4)*(r00)*(x925)))+(((sj5)*(sj7)))+(((r02)*(sj4)))+(((IkReal(-1.00000000000000))*(cj4)*(r01)*(sj3)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x926=IKsin(j6);
IkReal x927=IKcos(j6);
IkReal x928=((IkReal(1.00000000000000))*(sj4));
IkReal x929=((IkReal(0.0900000000000000))*(sj7));
IkReal x930=((cj4)*(sj3));
IkReal x931=((cj7)*(sj5));
IkReal x932=((IkReal(1.00000000000000))*(cj4));
IkReal x933=((cj5)*(sj7));
IkReal x934=((cj5)*(cj7));
IkReal x935=((IkReal(1.00000000000000))*(sj3));
IkReal x936=((cj3)*(px));
IkReal x937=((cj3)*(r00));
IkReal x938=((sj5)*(sj7));
IkReal x939=((IkReal(0.0400000000000000))*(x927));
IkReal x940=((cj7)*(x926));
evalcond[0]=((((cj3)*(r01)))+(((IkReal(-1.00000000000000))*(r00)*(x935)))+(x940));
evalcond[1]=((IkReal(0.0950000000000000))+(((IkReal(-1.00000000000000))*(px)*(x935)))+(((x926)*(x929)))+(((cj3)*(py)))+(((IkReal(0.0400000000000000))*(x940))));
evalcond[2]=((((x927)*(x934)))+(((IkReal(-1.00000000000000))*(r02)*(x928)))+(((IkReal(-1.00000000000000))*(x938)))+(((r01)*(x930)))+(((cj4)*(x937))));
evalcond[3]=((((x927)*(x931)))+(((IkReal(-1.00000000000000))*(x928)*(x937)))+(((IkReal(-1.00000000000000))*(r02)*(x932)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x928)))+(x933));
evalcond[4]=((((cj5)*(x927)*(x929)))+(((IkReal(0.235000000000000))*(sj5)))+(((IkReal(0.0300000000000000))*(cj5)))+(((py)*(x930)))+(((IkReal(-0.0400000000000000))*(x938)))+(((IkReal(-1.00000000000000))*(pz)*(x928)))+(((IkReal(0.0900000000000000))*(x931)))+(((cj4)*(x936)))+(((x934)*(x939))));
evalcond[5]=((IkReal(-0.250000000000000))+(((IkReal(-0.0900000000000000))*(x934)))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(x928)*(x936)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x928)))+(((IkReal(0.0400000000000000))*(x933)))+(((x931)*(x939)))+(((IkReal(-1.00000000000000))*(pz)*(x932)))+(((IkReal(-0.235000000000000))*(cj5)))+(((sj5)*(x927)*(x929))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x941=((IKabs(cj7) != 0)?((IkReal)1/(cj7)):(IkReal)1.0e30);
if( IKabs(((x941)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(r01))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x941)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj5)*(sj7)))+(((cj3)*(r00)*(sj4)))+(((r01)*(sj3)*(sj4)))+(((cj4)*(r02))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x941)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(r01)))))))+IKsqr(((x941)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj5)*(sj7)))+(((cj3)*(r00)*(sj4)))+(((r01)*(sj3)*(sj4)))+(((cj4)*(r02)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((x941)*(((((r00)*(sj3)))+(((IkReal(-1.00000000000000))*(cj3)*(r01)))))), ((x941)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(cj5)*(sj7)))+(((cj3)*(r00)*(sj4)))+(((r01)*(sj3)*(sj4)))+(((cj4)*(r02)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[6];
IkReal x942=IKsin(j6);
IkReal x943=IKcos(j6);
IkReal x944=((IkReal(1.00000000000000))*(sj4));
IkReal x945=((IkReal(0.0900000000000000))*(sj7));
IkReal x946=((cj4)*(sj3));
IkReal x947=((cj7)*(sj5));
IkReal x948=((IkReal(1.00000000000000))*(cj4));
IkReal x949=((cj5)*(sj7));
IkReal x950=((cj5)*(cj7));
IkReal x951=((IkReal(1.00000000000000))*(sj3));
IkReal x952=((cj3)*(px));
IkReal x953=((cj3)*(r00));
IkReal x954=((sj5)*(sj7));
IkReal x955=((IkReal(0.0400000000000000))*(x943));
IkReal x956=((cj7)*(x942));
evalcond[0]=((((IkReal(-1.00000000000000))*(r00)*(x951)))+(((cj3)*(r01)))+(x956));
evalcond[1]=((IkReal(0.0950000000000000))+(((x942)*(x945)))+(((IkReal(-1.00000000000000))*(px)*(x951)))+(((cj3)*(py)))+(((IkReal(0.0400000000000000))*(x956))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r02)*(x944)))+(((IkReal(-1.00000000000000))*(x954)))+(((x943)*(x950)))+(((r01)*(x946)))+(((cj4)*(x953))));
evalcond[3]=((((IkReal(-1.00000000000000))*(r02)*(x948)))+(((IkReal(-1.00000000000000))*(r01)*(sj3)*(x944)))+(((IkReal(-1.00000000000000))*(x944)*(x953)))+(((x943)*(x947)))+(x949));
evalcond[4]=((((IkReal(-1.00000000000000))*(pz)*(x944)))+(((IkReal(0.235000000000000))*(sj5)))+(((IkReal(-0.0400000000000000))*(x954)))+(((IkReal(0.0300000000000000))*(cj5)))+(((IkReal(0.0900000000000000))*(x947)))+(((cj5)*(x943)*(x945)))+(((cj4)*(x952)))+(((py)*(x946)))+(((x950)*(x955))));
evalcond[5]=((IkReal(-0.250000000000000))+(((sj5)*(x943)*(x945)))+(((IkReal(-1.00000000000000))*(pz)*(x948)))+(((IkReal(0.0300000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(x944)*(x952)))+(((IkReal(-0.0900000000000000))*(x950)))+(((x947)*(x955)))+(((IkReal(-0.235000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(py)*(sj3)*(x944)))+(((IkReal(0.0400000000000000))*(x949))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(6);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j3;
vinfos[0].indices[0] = _ij3[0];
vinfos[0].indices[1] = _ij3[1];
vinfos[0].maxsolutions = _nj3;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j4;
vinfos[1].indices[0] = _ij4[0];
vinfos[1].indices[1] = _ij4[1];
vinfos[1].maxsolutions = _nj4;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j5;
vinfos[2].indices[0] = _ij5[0];
vinfos[2].indices[1] = _ij5[1];
vinfos[2].maxsolutions = _nj5;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j6;
vinfos[3].indices[0] = _ij6[0];
vinfos[3].indices[1] = _ij6[1];
vinfos[3].maxsolutions = _nj6;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j7;
vinfos[4].indices[0] = _ij7[0];
vinfos[4].indices[1] = _ij7[1];
vinfos[4].maxsolutions = _nj7;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j8;
vinfos[5].indices[0] = _ij8[0];
vinfos[5].indices[1] = _ij8[1];
vinfos[5].maxsolutions = _nj8;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }
}
return solutions.GetNumSolutions()>0;
}

static inline bool checkconsistency8(const IkReal* Breal)
{
    IkReal norm = 0.1;
    for(int i = 0; i < 7; ++i) {
        norm += IKabs(Breal[i]);
    }
    IkReal tol = 1e-5*norm; // have to increase the threshold since many computations are involved
    return IKabs(Breal[0]*Breal[1]-Breal[2]) < tol && IKabs(Breal[1]*Breal[1]-Breal[3]) < tol && IKabs(Breal[0]*Breal[3]-Breal[4]) < tol && IKabs(Breal[1]*Breal[3]-Breal[5]) < tol && IKabs(Breal[0]*Breal[5]-Breal[6]) < tol;
}
/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
static inline void solvedialyticpoly8qep(const IkReal* matcoeffs, IkReal* rawroots, int& numroots)
{
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    IkReal IKFAST_ALIGNED16(M[16*16]) = {0};
    IkReal IKFAST_ALIGNED16(A[8*8]);
    IkReal IKFAST_ALIGNED16(work[16*16*15]);
    int ipiv[8];
    int info, coeffindex;
    const int worksize=16*16*15;
    const int matrixdim = 8;
    const int matrixdim2 = 16;
    numroots = 0;
    // first setup M = [0 I; -C -B] and A
    coeffindex = 0;
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -matcoeffs[coeffindex++];
        }
    }
    for(int j = 0; j < 4; ++j) {
        for(int k = 0; k < 6; ++k) {
            A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = matcoeffs[coeffindex++];
        }
        for(int k = 0; k < 2; ++k) {
            A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
        }
    }
    const IkReal lfpossibilities[4][4] = {{1,-1,1,1},{1,0,-2,1},{1,1,2,0},{1,-1,4,1}};
    int lfindex = -1;
    bool bsingular = true;
    do {
        dgetrf_(&matrixdim,&matrixdim,A,&matrixdim,&ipiv[0],&info);
        if( info == 0 ) {
            bsingular = false;
            for(int j = 0; j < matrixdim; ++j) {
                if( IKabs(A[j*matrixdim+j]) < 100*tol ) {
                    bsingular = true;
                    break;
                }
            }
            if( !bsingular ) {
                break;
            }
        }
        if( lfindex == 3 ) {
            break;
        }
        // transform by the linear functional
        lfindex++;
        const IkReal* lf = lfpossibilities[lfindex];
        // have to reinitialize A
        coeffindex = 0;
        for(int j = 0; j < 4; ++j) {
            for(int k = 0; k < 6; ++k) {
                IkReal a = matcoeffs[coeffindex+48], b = matcoeffs[coeffindex+24], c = matcoeffs[coeffindex];
                A[(j+4)+matrixdim*k] = A[j+matrixdim*(k+2)] = lf[0]*lf[0]*a+lf[0]*lf[2]*b+lf[2]*lf[2]*c;
                M[matrixdim+(j+4)+2*matrixdim*k] = M[matrixdim+j+2*matrixdim*(k+2)] = -(lf[1]*lf[1]*a + lf[1]*lf[3]*b + lf[3]*lf[3]*c);
                M[matrixdim+(j+4)+2*matrixdim*k+matrixdim*2*matrixdim] = M[matrixdim+j+2*matrixdim*(k+2)+matrixdim*2*matrixdim] = -(2*lf[0]*lf[1]*a + (lf[0]*lf[3]+lf[1]*lf[2])*b + 2*lf[2]*lf[3]*c);
                coeffindex++;
            }
            for(int k = 0; k < 2; ++k) {
                A[j+matrixdim*k] = A[(j+4)+matrixdim*(k+6)] = 0;
            }
        }
    } while(lfindex<4);

    if( bsingular ) {
        return;
    }
    dgetrs_("No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info);
    if( info != 0 ) {
        return;
    }

    // set identity in upper corner
    for(int j = 0; j < matrixdim; ++j) {
        M[matrixdim*2*matrixdim+j+matrixdim*2*j] = 1;
    }
    IkReal IKFAST_ALIGNED16(wr[16]);
    IkReal IKFAST_ALIGNED16(wi[16]);
    IkReal IKFAST_ALIGNED16(vr[16*16]);
    int one=1;
    dgeev_("N", "V", &matrixdim2, M, &matrixdim2, wr, wi,NULL, &one, vr, &matrixdim2, work, &worksize, &info);
    if( info != 0 ) {
        return;
    }
    IkReal Breal[matrixdim-1];
    for(int i = 0; i < matrixdim2; ++i) {
        if( IKabs(wi[i]) < tol*100 ) {
            IkReal* ev = vr+matrixdim2*i;
            if( IKabs(wr[i]) > 1 ) {
                ev += matrixdim;
            }
            // consistency has to be checked!!
            if( IKabs(ev[0]) < tol ) {
                continue;
            }
            IkReal iconst = 1/ev[0];
            for(int j = 1; j < matrixdim; ++j) {
                Breal[j-1] = ev[j]*iconst;
            }
            if( checkconsistency8(Breal) ) {
                if( lfindex >= 0 ) {
                    const IkReal* lf = lfpossibilities[lfindex];
                    rawroots[numroots++] = (wr[i]*lf[0]+lf[1])/(wr[i]*lf[2]+lf[3]);
                }
                else {
                    rawroots[numroots++] = wr[i];
                }
                bool bsmall0=IKabs(ev[0]) > IKabs(ev[2]);
                bool bsmall1=IKabs(ev[0]) > IKabs(ev[1]);
                if( bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[2]/ev[0];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[3]/ev[1];
                    rawroots[numroots++] = ev[1]/ev[0];
                }
                else if( !bsmall0 && bsmall1 ) {
                    rawroots[numroots++] = ev[6]/ev[4];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
                else if( !bsmall0 && !bsmall1 ) {
                    rawroots[numroots++] = ev[7]/ev[5];
                    rawroots[numroots++] = ev[7]/ev[6];
                }
            }
        }
    }
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "375ffd5a1bd2565b9d93634412dce778"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE

int ik_solve(IkReal eerot[9], IkReal eetrans[3], std::vector<std::vector<IkReal> >& sol_joint, std::vector<IkReal> free_joint)
{
    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
	for(std::size_t i = 0; i < vfree.size(); ++i)
		vfree[i] = free_joint[i];
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        return -1;
    }

	sol_joint.resize(solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
		sol_joint[i].resize(solvalues.size());
        for( std::size_t j = 0; j < solvalues.size(); ++j)
			sol_joint[i][j] = solvalues[j];
    }
    return 0;
}

} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_RIGHT5DF8;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
