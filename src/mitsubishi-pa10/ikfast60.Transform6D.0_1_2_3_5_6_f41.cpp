/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 60 generated on 2012-09-02 07:37:53.496826
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==60);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_6DF41 {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKcos(j[6]);
x14=((IkReal(0.500000000000000))*(x0));
x15=((IkReal(0.0850000000000000))*(x8));
x16=((IkReal(1.00000000000000))*(x5));
x17=((IkReal(1.00000000000000))*(x4));
x18=((IkReal(1.00000000000000))*(x3));
x19=((IkReal(0.0850000000000000))*(x9));
x20=((IkReal(1.00000000000000))*(x11));
x21=((IkReal(1.00000000000000))*(x12));
x22=((IkReal(0.500000000000000))*(x3));
x23=((IkReal(1.00000000000000))*(x0));
x24=((IkReal(0.0850000000000000))*(x5));
x25=((x1)*(x2));
x26=((x6)*(x7));
x27=((x2)*(x7));
x28=((x1)*(x6));
x29=((x0)*(x7));
x30=((x3)*(x7));
x31=((x17)*(x3));
x32=((IkReal(1.00000000000000))*(x28));
x33=((x4)*(x7)*(x9));
x34=((x16)*(x29));
x35=((x23)*(x26));
x36=((x16)*(x30));
x37=((x18)*(x26));
x38=((((IkReal(-1.00000000000000))*(x31)))+(((x0)*(x25))));
x39=((((x0)*(x4)))+(((x25)*(x3))));
x40=((((IkReal(-1.00000000000000))*(x1)*(x31)))+(((x0)*(x2))));
x41=((((IkReal(-1.00000000000000))*(x32)))+(((x27)*(x5))));
x42=((x31)+(((IkReal(-1.00000000000000))*(x23)*(x25))));
x43=((((IkReal(-1.00000000000000))*(x0)*(x1)*(x17)))+(((IkReal(-1.00000000000000))*(x18)*(x2))));
x44=((((IkReal(-1.00000000000000))*(x0)*(x17)))+(((IkReal(-1.00000000000000))*(x18)*(x25))));
x45=((((x1)*(x16)))+(((IkReal(1.00000000000000))*(x2)*(x26))));
x46=((IkReal(-1.00000000000000))*(x45));
x47=((x39)*(x6));
x48=((x11)*(x41));
x49=((x38)*(x6));
x50=((x42)*(x5));
x51=((x44)*(x5));
x52=((((IkReal(-1.00000000000000))*(x34)))+(x49));
x53=((((IkReal(-1.00000000000000))*(x36)))+(x47));
x54=((((IkReal(-1.00000000000000))*(x35)))+(x50));
x55=((((IkReal(-1.00000000000000))*(x37)))+(x51));
x56=((((x4)*(x7)*(x8)))+(((x45)*(x9))));
x57=((((x46)*(x8)))+(x33));
x58=((x11)*(x55));
x59=((((x53)*(x8)))+(((x40)*(x9))));
x60=((((x9)*(((((IkReal(-1.00000000000000))*(x47)))+(x36)))))+(((x40)*(x8))));
x61=((((x43)*(x9)))+(((x52)*(x8))));
x62=((x12)*(x59));
x63=((((x9)*(((((IkReal(-1.00000000000000))*(x49)))+(x34)))))+(((x43)*(x8))));
eerot[0]=((((x10)*(x63)))+(((x13)*(((((x12)*(x61)))+(((x11)*(x54))))))));
eerot[1]=((((x13)*(x63)))+(((x10)*(((((IkReal(-1.00000000000000))*(x20)*(x54)))+(((IkReal(-1.00000000000000))*(x21)*(x61))))))));
eerot[2]=((((x11)*(x61)))+(((x12)*(((((IkReal(-1.00000000000000))*(x16)*(x42)))+(x35))))));
eetrans[0]=((((x5)*(((((x14)*(x25)))+(((IkReal(-1.00000000000000))*(x22)*(x4)))))))+(((x11)*(((((x19)*(x43)))+(((x15)*(x52)))))))+(((x14)*(x26)))+(((x12)*(((((IkReal(-1.00000000000000))*(x24)*(x42)))+(((IkReal(0.0850000000000000))*(x0)*(x26)))))))+(((IkReal(0.450000000000000))*(x29))));
eerot[3]=((((x13)*(((x58)+(x62)))))+(((x10)*(x60))));
eerot[4]=((((x13)*(x60)))+(((x10)*(((((IkReal(-1.00000000000000))*(x20)*(x55)))+(((IkReal(-1.00000000000000))*(x21)*(x59))))))));
eerot[5]=((((x12)*(((((IkReal(-1.00000000000000))*(x16)*(x44)))+(x37)))))+(((x11)*(x59))));
eetrans[1]=((((IkReal(0.450000000000000))*(x30)))+(((x22)*(x26)))+(((x11)*(((((x19)*(x40)))+(((x15)*(x53)))))))+(((x5)*(((((x22)*(x25)))+(((x14)*(x4)))))))+(((x12)*(((((IkReal(-1.00000000000000))*(x24)*(x44)))+(((IkReal(0.0850000000000000))*(x26)*(x3))))))));
eerot[6]=((((x13)*(((((x12)*(x57)))+(x48)))))+(((x10)*(x56))));
eerot[7]=((((x13)*(x56)))+(((x10)*(((((IkReal(-1.00000000000000))*(x20)*(x41)))+(((IkReal(-1.00000000000000))*(x21)*(x57))))))));
eerot[8]=((((x11)*(x57)))+(((x12)*(((((IkReal(-1.00000000000000))*(x16)*(x27)))+(x32))))));
eetrans[2]=((IkReal(0.315000000000000))+(((x12)*(((((IkReal(0.0850000000000000))*(x28)))+(((IkReal(-1.00000000000000))*(x24)*(x27)))))))+(((IkReal(-0.500000000000000))*(x27)*(x5)))+(((IkReal(0.500000000000000))*(x28)))+(((IkReal(0.450000000000000))*(x1)))+(((x11)*(((((x15)*(x46)))+(((x19)*(x4)*(x7))))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {4}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j4,cj4,sj4,htj4,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij5[2], _nj5,_ij6[2], _nj6,_ij4[2], _nj4;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij4[0] = -1; _ij4[1] = -1; _nj4 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j4=pfree[0]; cj4=cos(pfree[0]); sj4=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((px)+(((IkReal(-0.0850000000000000))*(r02))));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((IkReal(-0.0850000000000000))*(r12)))+(py));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((IkReal(-0.315000000000000))+(((IkReal(-0.0850000000000000))*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((IkReal(-1.00555555555556))+(((IkReal(2.22222222222222))*(pp))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((IkReal(1.23456790123457))+((cj3)*(cj3))+(((IkReal(2.22222222222222))*(cj3)))+((((cj4)*(cj4))*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
IkReal x64=((IkReal(0.500000000000000))+(((IkReal(0.450000000000000))*(cj3))));
if( IKabs(x64) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-0.450000000000000))*(cj4)*(sj3))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x65=((IkReal(1.00000000000000))*(IKatan2(x64, ((IkReal(-0.450000000000000))*(cj4)*(sj3)))));
if( ((((x64)*(x64))+(((IkReal(0.202500000000000))*((cj4)*(cj4))*((sj3)*(sj3)))))) < (IkReal)-0.00001 )
    continue;
if( (((npz)*(((IKabs(IKabs(IKsqrt((((x64)*(x64))+(((IkReal(0.202500000000000))*((cj4)*(cj4))*((sj3)*(sj3)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x64)*(x64))+(((IkReal(0.202500000000000))*((cj4)*(cj4))*((sj3)*(sj3))))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((npz)*(((IKabs(IKabs(IKsqrt((((x64)*(x64))+(((IkReal(0.202500000000000))*((cj4)*(cj4))*((sj3)*(sj3)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x64)*(x64))+(((IkReal(0.202500000000000))*((cj4)*(cj4))*((sj3)*(sj3))))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x66=IKasin(((npz)*(((IKabs(IKabs(IKsqrt((((x64)*(x64))+(((IkReal(0.202500000000000))*((cj4)*(cj4))*((sj3)*(sj3)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((x64)*(x64))+(((IkReal(0.202500000000000))*((cj4)*(cj4))*((sj3)*(sj3))))))))):(IkReal)1.0e30))));
j5array[0]=((x66)+(((IkReal(-1.00000000000000))*(x65))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
j5array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x65)))+(((IkReal(-1.00000000000000))*(x66))));
sj5array[1]=IKsin(j5array[1]);
cj5array[1]=IKcos(j5array[1]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
if( j5array[1] > IKPI )
{
    j5array[1]-=IK2PI;
}
else if( j5array[1] < -IKPI )
{    j5array[1]+=IK2PI;
}
j5valid[1] = true;
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x67=((IkReal(20.0000000000000))*(sj5));
gconst0=IKsign(((((x67)*((npx)*(npx))))+(((x67)*((npy)*(npy))))));
dummyeval[0]=((((sj5)*((npy)*(npy))))+(((sj5)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x68=((IkReal(0.450000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.452500000000000))+(pp)+(((IkReal(-1.00000000000000))*(x68))));
evalcond[2]=((IkReal(0.500000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x68));
evalcond[3]=((IkReal(-0.500000000000000))+(npz)+(((IkReal(-1.00000000000000))*(x68))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((IkReal(20.0000000000000))*((npy)*(npy))))+(((IkReal(20.0000000000000))*((npx)*(npx))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x69=((IkReal(9.00000000000000))*(npx)*(sj3));
IkReal x70=((IkReal(9.00000000000000))*(npy)*(sj3));
if( IKabs(((gconst1)*(((((cj4)*(x70)))+(((sj4)*(x69))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(cj4)*(x69)))+(((sj4)*(x70))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst1)*(((((cj4)*(x70)))+(((sj4)*(x69)))))), ((gconst1)*(((((IkReal(-1.00000000000000))*(cj4)*(x69)))+(((sj4)*(x70)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x71=IKsin(j6);
IkReal x72=IKcos(j6);
IkReal x73=((IkReal(0.450000000000000))*(sj3));
IkReal x74=((IkReal(1.00000000000000))*(x72));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x74)))+(((IkReal(-1.00000000000000))*(npx)*(x71)))+(((sj4)*(x73))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npx)*(x74)))+(((IkReal(-1.00000000000000))*(cj4)*(x73)))+(((npy)*(x71))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x148=((IkReal(0.450000000000000))*(cj3));
IkReal x149=((IkReal(-0.500000000000000))+(((IkReal(-1.00000000000000))*(x148)))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.452500000000000))+(((IkReal(-1.00000000000000))*(x148)))+(pp));
evalcond[2]=x149;
evalcond[3]=x149;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((IkReal(20.0000000000000))*((npy)*(npy))))+(((IkReal(20.0000000000000))*((npx)*(npx))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x150=((IkReal(9.00000000000000))*(npx)*(sj3));
IkReal x151=((IkReal(9.00000000000000))*(npy)*(sj3));
if( IKabs(((gconst2)*(((((sj4)*(x150)))+(((IkReal(-1.00000000000000))*(cj4)*(x151))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((cj4)*(x150)))+(((sj4)*(x151))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst2)*(((((sj4)*(x150)))+(((IkReal(-1.00000000000000))*(cj4)*(x151)))))), ((gconst2)*(((((cj4)*(x150)))+(((sj4)*(x151)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
IkReal x152=IKcos(j6);
IkReal x153=IKsin(j6);
IkReal x154=((IkReal(0.450000000000000))*(sj3));
IkReal x155=((IkReal(1.00000000000000))*(npy));
evalcond[0]=((((sj4)*(x154)))+(((IkReal(-1.00000000000000))*(npx)*(x153)))+(((IkReal(-1.00000000000000))*(x152)*(x155))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x153)*(x155)))+(((npx)*(x152)))+(((IkReal(-1.00000000000000))*(cj4)*(x154))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x156=((IkReal(9.00000000000000))*(npx));
IkReal x157=((IkReal(9.00000000000000))*(npy));
IkReal x158=((sj3)*(sj4)*(sj5));
IkReal x159=((IkReal(20.0000000000000))*(cj5)*(npz));
if( IKabs(((gconst0)*(((((cj3)*(x157)))+(((IkReal(10.0000000000000))*(npy)))+(((x156)*(x158)))+(((IkReal(-1.00000000000000))*(npy)*(x159))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-10.0000000000000))*(npx)))+(((x157)*(x158)))+(((IkReal(-1.00000000000000))*(cj3)*(x156)))+(((npx)*(x159))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst0)*(((((cj3)*(x157)))+(((IkReal(10.0000000000000))*(npy)))+(((x156)*(x158)))+(((IkReal(-1.00000000000000))*(npy)*(x159)))))), ((gconst0)*(((((IkReal(-10.0000000000000))*(npx)))+(((x157)*(x158)))+(((IkReal(-1.00000000000000))*(cj3)*(x156)))+(((npx)*(x159)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x160=IKsin(j6);
IkReal x161=IKcos(j6);
IkReal x162=((IkReal(1.00000000000000))*(sj5));
IkReal x163=((IkReal(0.450000000000000))*(sj3));
IkReal x164=((IkReal(0.450000000000000))*(cj3));
IkReal x165=((npy)*(x160));
IkReal x166=((npx)*(x161));
evalcond[0]=((((IkReal(-1.00000000000000))*(npx)*(x160)))+(((sj4)*(x163)))+(((IkReal(-1.00000000000000))*(npy)*(x161))));
evalcond[1]=((IkReal(-0.500000000000000))+(((IkReal(-1.00000000000000))*(x164)))+(((cj5)*(npz)))+(((IkReal(-1.00000000000000))*(x162)*(x166)))+(((sj5)*(x165))));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj4)*(x163)))+(((cj5)*(x165)))+(((IkReal(-1.00000000000000))*(cj5)*(x166)))+(((IkReal(-1.00000000000000))*(npz)*(x162))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj4)*(cj5)*(x163)))+(x165)+(((IkReal(-1.00000000000000))*(x166)))+(((IkReal(-1.00000000000000))*(sj5)*(x164)))+(((IkReal(-0.500000000000000))*(sj5))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(npy))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npx))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x167=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(npy)), ((IkReal(-1.00000000000000))*(npx)))));
if( ((((npx)*(npx))+((npy)*(npy)))) < (IkReal)-0.00001 )
    continue;
if( (((IkReal(0.450000000000000))*(sj3)*(sj4)*(((IKabs(IKabs(IKsqrt((((npx)*(npx))+((npy)*(npy)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npx)*(npx))+((npy)*(npy))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(0.450000000000000))*(sj3)*(sj4)*(((IKabs(IKabs(IKsqrt((((npx)*(npx))+((npy)*(npy)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npx)*(npx))+((npy)*(npy))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x168=IKasin(((IkReal(0.450000000000000))*(sj3)*(sj4)*(((IKabs(IKabs(IKsqrt((((npx)*(npx))+((npy)*(npy)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npx)*(npx))+((npy)*(npy))))))):(IkReal)1.0e30))));
j6array[0]=((((IkReal(-1.00000000000000))*(x167)))+(((IkReal(-1.00000000000000))*(x168))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x167)))+(x168));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal dummyeval[1];
IkReal gconst3;
IkReal x169=((npy)*(sj6));
IkReal x170=((IkReal(9.00000000000000))*(cj3));
IkReal x171=((cj6)*(npx));
gconst3=IKsign(((((IkReal(-9.00000000000000))*(cj4)*(npz)*(sj3)))+(((x170)*(x171)))+(((IkReal(-1.00000000000000))*(x169)*(x170)))+(((IkReal(10.0000000000000))*(x171)))+(((IkReal(-10.0000000000000))*(x169)))));
IkReal x172=((npy)*(sj6));
IkReal x173=((cj6)*(npx));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj4)*(npz)*(sj3)))+(((cj3)*(x173)))+(((IkReal(-1.11111111111111))*(x172)))+(((IkReal(1.11111111111111))*(x173)))+(((IkReal(-1.00000000000000))*(cj3)*(x172))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x174=((cj4)*(sj3));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj6)*(npx)*(x174)))+(((IkReal(-1.11111111111111))*(npz)))+(((IkReal(-1.00000000000000))*(cj3)*(npz)))+(((npy)*(sj6)*(x174))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x175=((cj4)*(sj3));
IkReal x176=((npy)*(sj6));
IkReal x177=((cj6)*(npx));
IkReal x178=((cj3)*(npz));
IkReal x179=((IkReal(20.0000000000000))*(npz));
if( IKabs(((((IKabs(((((IkReal(-10.0000000000000))*(npz)))+(((IkReal(-9.00000000000000))*(x178)))+(((IkReal(9.00000000000000))*(x175)*(x176)))+(((IkReal(-9.00000000000000))*(x175)*(x177))))) != 0)?((IkReal)1/(((((IkReal(-10.0000000000000))*(npz)))+(((IkReal(-9.00000000000000))*(x178)))+(((IkReal(9.00000000000000))*(x175)*(x176)))+(((IkReal(-9.00000000000000))*(x175)*(x177)))))):(IkReal)1.0e30))*(((((IkReal(4.05000000000000))*(cj3)*(x175)))+(((IkReal(4.50000000000000))*(x175)))+(((IkReal(-1.00000000000000))*(x176)*(x179)))+(((x177)*(x179))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-180.000000000000))*(x178)))+(((IkReal(-180.000000000000))*(x175)*(x177)))+(((IkReal(180.000000000000))*(x175)*(x176)))+(((IkReal(-200.000000000000))*(npz))))) != 0)?((IkReal)1/(((((IkReal(-180.000000000000))*(x178)))+(((IkReal(-180.000000000000))*(x175)*(x177)))+(((IkReal(180.000000000000))*(x175)*(x176)))+(((IkReal(-200.000000000000))*(npz)))))):(IkReal)1.0e30))*(((((IkReal(81.0000000000000))*((x175)*(x175))))+(((IkReal(-400.000000000000))*((npz)*(npz)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-10.0000000000000))*(npz)))+(((IkReal(-9.00000000000000))*(x178)))+(((IkReal(9.00000000000000))*(x175)*(x176)))+(((IkReal(-9.00000000000000))*(x175)*(x177))))) != 0)?((IkReal)1/(((((IkReal(-10.0000000000000))*(npz)))+(((IkReal(-9.00000000000000))*(x178)))+(((IkReal(9.00000000000000))*(x175)*(x176)))+(((IkReal(-9.00000000000000))*(x175)*(x177)))))):(IkReal)1.0e30))*(((((IkReal(4.05000000000000))*(cj3)*(x175)))+(((IkReal(4.50000000000000))*(x175)))+(((IkReal(-1.00000000000000))*(x176)*(x179)))+(((x177)*(x179)))))))+IKsqr(((((IKabs(((((IkReal(-180.000000000000))*(x178)))+(((IkReal(-180.000000000000))*(x175)*(x177)))+(((IkReal(180.000000000000))*(x175)*(x176)))+(((IkReal(-200.000000000000))*(npz))))) != 0)?((IkReal)1/(((((IkReal(-180.000000000000))*(x178)))+(((IkReal(-180.000000000000))*(x175)*(x177)))+(((IkReal(180.000000000000))*(x175)*(x176)))+(((IkReal(-200.000000000000))*(npz)))))):(IkReal)1.0e30))*(((((IkReal(81.0000000000000))*((x175)*(x175))))+(((IkReal(-400.000000000000))*((npz)*(npz))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(((((IkReal(-10.0000000000000))*(npz)))+(((IkReal(-9.00000000000000))*(x178)))+(((IkReal(9.00000000000000))*(x175)*(x176)))+(((IkReal(-9.00000000000000))*(x175)*(x177))))) != 0)?((IkReal)1/(((((IkReal(-10.0000000000000))*(npz)))+(((IkReal(-9.00000000000000))*(x178)))+(((IkReal(9.00000000000000))*(x175)*(x176)))+(((IkReal(-9.00000000000000))*(x175)*(x177)))))):(IkReal)1.0e30))*(((((IkReal(4.05000000000000))*(cj3)*(x175)))+(((IkReal(4.50000000000000))*(x175)))+(((IkReal(-1.00000000000000))*(x176)*(x179)))+(((x177)*(x179)))))), ((((IKabs(((((IkReal(-180.000000000000))*(x178)))+(((IkReal(-180.000000000000))*(x175)*(x177)))+(((IkReal(180.000000000000))*(x175)*(x176)))+(((IkReal(-200.000000000000))*(npz))))) != 0)?((IkReal)1/(((((IkReal(-180.000000000000))*(x178)))+(((IkReal(-180.000000000000))*(x175)*(x177)))+(((IkReal(180.000000000000))*(x175)*(x176)))+(((IkReal(-200.000000000000))*(npz)))))):(IkReal)1.0e30))*(((((IkReal(81.0000000000000))*((x175)*(x175))))+(((IkReal(-400.000000000000))*((npz)*(npz))))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x180=IKcos(j5);
IkReal x181=IKsin(j5);
IkReal x182=((npy)*(sj6));
IkReal x183=((IkReal(0.450000000000000))*(cj3));
IkReal x184=((IkReal(1.00000000000000))*(npz));
IkReal x185=((IkReal(0.450000000000000))*(cj4)*(sj3));
IkReal x186=((IkReal(1.00000000000000))*(cj6)*(npx));
evalcond[0]=((((IkReal(0.500000000000000))*(x180)))+(((x180)*(x183)))+(((IkReal(-1.00000000000000))*(x184)))+(((IkReal(-1.00000000000000))*(x181)*(x185))));
evalcond[1]=((IkReal(-0.500000000000000))+(((npz)*(x180)))+(((IkReal(-1.00000000000000))*(x183)))+(((x181)*(x182)))+(((IkReal(-1.00000000000000))*(x181)*(x186))));
evalcond[2]=((((x180)*(x182)))+(((IkReal(-1.00000000000000))*(x185)))+(((IkReal(-1.00000000000000))*(x180)*(x186)))+(((IkReal(-1.00000000000000))*(x181)*(x184))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x186)))+(((IkReal(-1.00000000000000))*(x180)*(x185)))+(x182)+(((IkReal(-0.500000000000000))*(x181)))+(((IkReal(-1.00000000000000))*(x181)*(x183))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x187=((cj4)*(sj3));
IkReal x188=((IkReal(20.0000000000000))*(npz));
if( IKabs(((gconst3)*(((IkReal(-5.00000000000000))+(((npz)*(x188)))+(((IkReal(-9.00000000000000))*(cj3)))+(((IkReal(-4.05000000000000))*((cj3)*(cj3)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(-4.50000000000000))*(x187)))+(((IkReal(-4.05000000000000))*(cj3)*(x187)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x188)))+(((cj6)*(npx)*(x188))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst3)*(((IkReal(-5.00000000000000))+(((npz)*(x188)))+(((IkReal(-9.00000000000000))*(cj3)))+(((IkReal(-4.05000000000000))*((cj3)*(cj3))))))), ((gconst3)*(((((IkReal(-4.50000000000000))*(x187)))+(((IkReal(-4.05000000000000))*(cj3)*(x187)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x188)))+(((cj6)*(npx)*(x188)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x189=IKcos(j5);
IkReal x190=IKsin(j5);
IkReal x191=((npy)*(sj6));
IkReal x192=((IkReal(0.450000000000000))*(cj3));
IkReal x193=((IkReal(1.00000000000000))*(npz));
IkReal x194=((IkReal(0.450000000000000))*(cj4)*(sj3));
IkReal x195=((IkReal(1.00000000000000))*(cj6)*(npx));
evalcond[0]=((((IkReal(0.500000000000000))*(x189)))+(((IkReal(-1.00000000000000))*(x190)*(x194)))+(((IkReal(-1.00000000000000))*(x193)))+(((x189)*(x192))));
evalcond[1]=((IkReal(-0.500000000000000))+(((npz)*(x189)))+(((IkReal(-1.00000000000000))*(x190)*(x195)))+(((IkReal(-1.00000000000000))*(x192)))+(((x190)*(x191))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x189)*(x195)))+(((IkReal(-1.00000000000000))*(x190)*(x193)))+(((IkReal(-1.00000000000000))*(x194)))+(((x189)*(x191))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x189)*(x194)))+(((IkReal(-1.00000000000000))*(x190)*(x192)))+(((IkReal(-1.00000000000000))*(x195)))+(x191)+(((IkReal(-0.500000000000000))*(x190))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
if( IKabs(((IkReal(-1.00000000000000))*(npy))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npx))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x196=((IkReal(1.00000000000000))*(IKatan2(((IkReal(-1.00000000000000))*(npy)), ((IkReal(-1.00000000000000))*(npx)))));
if( ((((npx)*(npx))+((npy)*(npy)))) < (IkReal)-0.00001 )
    continue;
if( (((IkReal(0.450000000000000))*(sj3)*(sj4)*(((IKabs(IKabs(IKsqrt((((npx)*(npx))+((npy)*(npy)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npx)*(npx))+((npy)*(npy))))))):(IkReal)1.0e30)))) < -1-IKFAST_SINCOS_THRESH || (((IkReal(0.450000000000000))*(sj3)*(sj4)*(((IKabs(IKabs(IKsqrt((((npx)*(npx))+((npy)*(npy)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npx)*(npx))+((npy)*(npy))))))):(IkReal)1.0e30)))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x197=IKasin(((IkReal(0.450000000000000))*(sj3)*(sj4)*(((IKabs(IKabs(IKsqrt((((npx)*(npx))+((npy)*(npy)))))) != 0)?((IkReal)1/(IKabs(IKsqrt((((npx)*(npx))+((npy)*(npy))))))):(IkReal)1.0e30))));
j6array[0]=((((IkReal(-1.00000000000000))*(x197)))+(((IkReal(-1.00000000000000))*(x196))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x196)))+(x197));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal dummyeval[1];
IkReal gconst3;
IkReal x198=((npy)*(sj6));
IkReal x199=((IkReal(9.00000000000000))*(cj3));
IkReal x200=((cj6)*(npx));
gconst3=IKsign(((((IkReal(-9.00000000000000))*(cj4)*(npz)*(sj3)))+(((IkReal(10.0000000000000))*(x200)))+(((IkReal(-1.00000000000000))*(x198)*(x199)))+(((IkReal(-10.0000000000000))*(x198)))+(((x199)*(x200)))));
IkReal x201=((npy)*(sj6));
IkReal x202=((cj6)*(npx));
dummyeval[0]=((((IkReal(-1.00000000000000))*(cj4)*(npz)*(sj3)))+(((cj3)*(x202)))+(((IkReal(1.11111111111111))*(x202)))+(((IkReal(-1.11111111111111))*(x201)))+(((IkReal(-1.00000000000000))*(cj3)*(x201))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x203=((cj4)*(sj3));
dummyeval[0]=((((npy)*(sj6)*(x203)))+(((IkReal(-1.11111111111111))*(npz)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(x203)))+(((IkReal(-1.00000000000000))*(cj3)*(npz))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x204=((cj4)*(sj3));
IkReal x205=((npy)*(sj6));
IkReal x206=((cj6)*(npx));
IkReal x207=((cj3)*(npz));
IkReal x208=((IkReal(20.0000000000000))*(npz));
if( IKabs(((((IKabs(((((IkReal(-10.0000000000000))*(npz)))+(((IkReal(-9.00000000000000))*(x207)))+(((IkReal(-9.00000000000000))*(x204)*(x206)))+(((IkReal(9.00000000000000))*(x204)*(x205))))) != 0)?((IkReal)1/(((((IkReal(-10.0000000000000))*(npz)))+(((IkReal(-9.00000000000000))*(x207)))+(((IkReal(-9.00000000000000))*(x204)*(x206)))+(((IkReal(9.00000000000000))*(x204)*(x205)))))):(IkReal)1.0e30))*(((((IkReal(4.50000000000000))*(x204)))+(((IkReal(4.05000000000000))*(cj3)*(x204)))+(((IkReal(-1.00000000000000))*(x205)*(x208)))+(((x206)*(x208))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-180.000000000000))*(x207)))+(((IkReal(-200.000000000000))*(npz)))+(((IkReal(-180.000000000000))*(x204)*(x206)))+(((IkReal(180.000000000000))*(x204)*(x205))))) != 0)?((IkReal)1/(((((IkReal(-180.000000000000))*(x207)))+(((IkReal(-200.000000000000))*(npz)))+(((IkReal(-180.000000000000))*(x204)*(x206)))+(((IkReal(180.000000000000))*(x204)*(x205)))))):(IkReal)1.0e30))*(((((IkReal(-400.000000000000))*((npz)*(npz))))+(((IkReal(81.0000000000000))*((x204)*(x204)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IKabs(((((IkReal(-10.0000000000000))*(npz)))+(((IkReal(-9.00000000000000))*(x207)))+(((IkReal(-9.00000000000000))*(x204)*(x206)))+(((IkReal(9.00000000000000))*(x204)*(x205))))) != 0)?((IkReal)1/(((((IkReal(-10.0000000000000))*(npz)))+(((IkReal(-9.00000000000000))*(x207)))+(((IkReal(-9.00000000000000))*(x204)*(x206)))+(((IkReal(9.00000000000000))*(x204)*(x205)))))):(IkReal)1.0e30))*(((((IkReal(4.50000000000000))*(x204)))+(((IkReal(4.05000000000000))*(cj3)*(x204)))+(((IkReal(-1.00000000000000))*(x205)*(x208)))+(((x206)*(x208)))))))+IKsqr(((((IKabs(((((IkReal(-180.000000000000))*(x207)))+(((IkReal(-200.000000000000))*(npz)))+(((IkReal(-180.000000000000))*(x204)*(x206)))+(((IkReal(180.000000000000))*(x204)*(x205))))) != 0)?((IkReal)1/(((((IkReal(-180.000000000000))*(x207)))+(((IkReal(-200.000000000000))*(npz)))+(((IkReal(-180.000000000000))*(x204)*(x206)))+(((IkReal(180.000000000000))*(x204)*(x205)))))):(IkReal)1.0e30))*(((((IkReal(-400.000000000000))*((npz)*(npz))))+(((IkReal(81.0000000000000))*((x204)*(x204))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j5array[0]=IKatan2(((((IKabs(((((IkReal(-10.0000000000000))*(npz)))+(((IkReal(-9.00000000000000))*(x207)))+(((IkReal(-9.00000000000000))*(x204)*(x206)))+(((IkReal(9.00000000000000))*(x204)*(x205))))) != 0)?((IkReal)1/(((((IkReal(-10.0000000000000))*(npz)))+(((IkReal(-9.00000000000000))*(x207)))+(((IkReal(-9.00000000000000))*(x204)*(x206)))+(((IkReal(9.00000000000000))*(x204)*(x205)))))):(IkReal)1.0e30))*(((((IkReal(4.50000000000000))*(x204)))+(((IkReal(4.05000000000000))*(cj3)*(x204)))+(((IkReal(-1.00000000000000))*(x205)*(x208)))+(((x206)*(x208)))))), ((((IKabs(((((IkReal(-180.000000000000))*(x207)))+(((IkReal(-200.000000000000))*(npz)))+(((IkReal(-180.000000000000))*(x204)*(x206)))+(((IkReal(180.000000000000))*(x204)*(x205))))) != 0)?((IkReal)1/(((((IkReal(-180.000000000000))*(x207)))+(((IkReal(-200.000000000000))*(npz)))+(((IkReal(-180.000000000000))*(x204)*(x206)))+(((IkReal(180.000000000000))*(x204)*(x205)))))):(IkReal)1.0e30))*(((((IkReal(-400.000000000000))*((npz)*(npz))))+(((IkReal(81.0000000000000))*((x204)*(x204))))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x209=IKcos(j5);
IkReal x210=IKsin(j5);
IkReal x211=((npy)*(sj6));
IkReal x212=((IkReal(0.450000000000000))*(cj3));
IkReal x213=((IkReal(1.00000000000000))*(npz));
IkReal x214=((IkReal(0.450000000000000))*(cj4)*(sj3));
IkReal x215=((IkReal(1.00000000000000))*(cj6)*(npx));
evalcond[0]=((((IkReal(0.500000000000000))*(x209)))+(((x209)*(x212)))+(((IkReal(-1.00000000000000))*(x210)*(x214)))+(((IkReal(-1.00000000000000))*(x213))));
evalcond[1]=((IkReal(-0.500000000000000))+(((npz)*(x209)))+(((x210)*(x211)))+(((IkReal(-1.00000000000000))*(x210)*(x215)))+(((IkReal(-1.00000000000000))*(x212))));
evalcond[2]=((((x209)*(x211)))+(((IkReal(-1.00000000000000))*(x210)*(x213)))+(((IkReal(-1.00000000000000))*(x214)))+(((IkReal(-1.00000000000000))*(x209)*(x215))));
evalcond[3]=((x211)+(((IkReal(-1.00000000000000))*(x210)*(x212)))+(((IkReal(-1.00000000000000))*(x215)))+(((IkReal(-0.500000000000000))*(x210)))+(((IkReal(-1.00000000000000))*(x209)*(x214))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x216=((cj4)*(sj3));
IkReal x217=((IkReal(20.0000000000000))*(npz));
if( IKabs(((gconst3)*(((IkReal(-5.00000000000000))+(((IkReal(-9.00000000000000))*(cj3)))+(((IkReal(-4.05000000000000))*((cj3)*(cj3))))+(((npz)*(x217))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(-4.05000000000000))*(cj3)*(x216)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x217)))+(((IkReal(-4.50000000000000))*(x216)))+(((cj6)*(npx)*(x217))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst3)*(((IkReal(-5.00000000000000))+(((IkReal(-9.00000000000000))*(cj3)))+(((IkReal(-4.05000000000000))*((cj3)*(cj3))))+(((npz)*(x217)))))), ((gconst3)*(((((IkReal(-4.05000000000000))*(cj3)*(x216)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x217)))+(((IkReal(-4.50000000000000))*(x216)))+(((cj6)*(npx)*(x217)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[4];
IkReal x218=IKcos(j5);
IkReal x219=IKsin(j5);
IkReal x220=((npy)*(sj6));
IkReal x221=((IkReal(0.450000000000000))*(cj3));
IkReal x222=((IkReal(1.00000000000000))*(npz));
IkReal x223=((IkReal(0.450000000000000))*(cj4)*(sj3));
IkReal x224=((IkReal(1.00000000000000))*(cj6)*(npx));
evalcond[0]=((((IkReal(-1.00000000000000))*(x219)*(x223)))+(((x218)*(x221)))+(((IkReal(0.500000000000000))*(x218)))+(((IkReal(-1.00000000000000))*(x222))));
evalcond[1]=((IkReal(-0.500000000000000))+(((IkReal(-1.00000000000000))*(x219)*(x224)))+(((x219)*(x220)))+(((npz)*(x218)))+(((IkReal(-1.00000000000000))*(x221))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x219)*(x222)))+(((IkReal(-1.00000000000000))*(x218)*(x224)))+(((x218)*(x220)))+(((IkReal(-1.00000000000000))*(x223))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x219)*(x221)))+(x220)+(((IkReal(-1.00000000000000))*(x218)*(x223)))+(((IkReal(-0.500000000000000))*(x219)))+(((IkReal(-1.00000000000000))*(x224))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x75=((IkReal(1.00000000000000))*(cj3));
IkReal x76=((IkReal(1.00000000000000))*(sj6));
IkReal x77=((IkReal(1.00000000000000))*(sj3));
IkReal x78=((IkReal(1.00000000000000))*(cj5));
IkReal x79=((IkReal(-1.00000000000000))*(sj4));
IkReal x80=((IkReal(-1.00000000000000))*(cj5));
IkReal x81=((((IkReal(-1.00000000000000))*(r01)*(x76)))+(((cj6)*(r00))));
IkReal x82=((((r00)*(sj6)))+(((cj6)*(r01))));
IkReal x83=((((cj6)*(r10)))+(((IkReal(-1.00000000000000))*(r11)*(x76))));
IkReal x84=((((r10)*(sj6)))+(((cj6)*(r11))));
IkReal x85=((((IkReal(-1.00000000000000))*(r21)*(x76)))+(((cj6)*(r20))));
IkReal x86=((((cj6)*(r21)))+(((r20)*(sj6))));
IkReal x87=((sj5)*(x83));
IkReal x88=((sj5)*(x85));
IkReal x89=((sj4)*(x86));
IkReal x90=((((r02)*(sj5)))+(((cj5)*(x81))));
IkReal x91=((((IkReal(-1.00000000000000))*(r02)*(x78)))+(((sj5)*(x81))));
IkReal x92=((((cj5)*(x83)))+(((r12)*(sj5))));
IkReal x93=((((r22)*(sj5)))+(((cj5)*(x85))));
IkReal x94=((cj4)*(x92));
IkReal x95=((cj4)*(x93));
IkReal x96=((IkReal(1.00000000000000))*(x91));
IkReal x97=((((x79)*(x82)))+(((cj4)*(x90))));
new_r00=((((IkReal(-1.00000000000000))*(x77)*(x91)))+(((cj3)*(x97))));
new_r01=((((sj4)*(x90)))+(((cj4)*(x82))));
new_r02=((((IkReal(-1.00000000000000))*(x77)*(x97)))+(((IkReal(-1.00000000000000))*(x75)*(x91))));
new_r10=((((cj3)*(((((IkReal(-1.00000000000000))*(sj4)*(x84)))+(x94)))))+(((IkReal(-1.00000000000000))*(x77)*(((((r12)*(x80)))+(x87))))));
new_r11=((((sj4)*(x92)))+(((cj4)*(x84))));
new_r12=((((IkReal(-1.00000000000000))*(x75)*(((x87)+(((IkReal(-1.00000000000000))*(r12)*(x78)))))))+(((IkReal(-1.00000000000000))*(x77)*(((((x79)*(x84)))+(x94))))));
new_r20=((((cj3)*(((x95)+(((IkReal(-1.00000000000000))*(x89)))))))+(((IkReal(-1.00000000000000))*(x77)*(((x88)+(((r22)*(x80))))))));
new_r21=((((sj4)*(x93)))+(((cj4)*(x86))));
new_r22=((((IkReal(-1.00000000000000))*(x75)*(((((IkReal(-1.00000000000000))*(r22)*(x78)))+(x88)))))+(((IkReal(-1.00000000000000))*(x77)*(((((x79)*(x86)))+(x95))))));
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=new_r22;
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x98=IKatan2(new_r02, new_r12);
j0array[0]=((IkReal(-1.00000000000000))*(x98));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x98))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j0))))+(((new_r12)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj0)))+(((cj0)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))))+IKsqr(((((new_r10)*(sj0)))+(((cj0)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))), ((((new_r10)*(sj0)))+(((cj0)*(new_r00)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x99=IKsin(j2);
IkReal x100=((IkReal(1.00000000000000))*(sj0));
IkReal x101=((IkReal(1.00000000000000))*(IKcos(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x100)))+(((IkReal(-1.00000000000000))*(x99)))+(((cj0)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x100)))+(((IkReal(-1.00000000000000))*(x101)))+(((cj0)*(new_r11))));
evalcond[2]=((((new_r11)*(sj0)))+(x99)+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(((IkReal(-1.00000000000000))*(x101)))+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x102=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x102;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x102;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x103=IKatan2(new_r02, new_r12);
j0array[0]=((IkReal(-1.00000000000000))*(x103));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x103))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j0))))+(((new_r12)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((new_r11)*(sj0)))+(((cj0)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x104=IKcos(j2);
IkReal x105=((IkReal(1.00000000000000))*(sj0));
IkReal x106=((IkReal(1.00000000000000))*(IKsin(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x105)))+(((IkReal(-1.00000000000000))*(x106)))+(((cj0)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x105)))+(((cj0)*(new_r11)))+(((IkReal(-1.00000000000000))*(x104))));
evalcond[2]=((((new_r11)*(sj0)))+(((IkReal(-1.00000000000000))*(x106)))+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(x104)+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x107=((gconst4)*(sj1));
if( IKabs(((new_r12)*(x107))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x107))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r12)*(x107)), ((new_r02)*(x107)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x108=IKcos(j0);
IkReal x109=IKsin(j0);
IkReal x110=((IkReal(1.00000000000000))*(cj1));
IkReal x111=((IkReal(1.00000000000000))*(sj1));
IkReal x112=((new_r12)*(x109));
IkReal x113=((new_r02)*(x108));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x109)))+(((new_r12)*(x108))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x111)))+(x113)+(x112));
evalcond[2]=((((cj1)*(x113)))+(((cj1)*(x112)))+(((IkReal(-1.00000000000000))*(new_r22)*(x111))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r10)*(x109)*(x111)))+(((IkReal(-1.00000000000000))*(new_r00)*(x108)*(x111)))+(((IkReal(-1.00000000000000))*(new_r20)*(x110))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x108)*(x111)))+(((IkReal(-1.00000000000000))*(new_r11)*(x109)*(x111)))+(((IkReal(-1.00000000000000))*(new_r21)*(x110))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x111)*(x113)))+(((IkReal(-1.00000000000000))*(x111)*(x112)))+(((IkReal(-1.00000000000000))*(new_r22)*(x110))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x114=((((IkReal(-1.00000000000000))*(new_r02)*(sj0)))+(((cj0)*(new_r12))));
IkReal x115=((((new_r12)*(sj0)))+(((cj0)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x114;
evalcond[5]=x114;
evalcond[6]=x115;
evalcond[7]=x115;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj0)))+(((cj0)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))))+IKsqr(((((new_r10)*(sj0)))+(((cj0)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))), ((((new_r10)*(sj0)))+(((cj0)*(new_r00)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x116=IKsin(j2);
IkReal x117=((IkReal(1.00000000000000))*(sj0));
IkReal x118=((IkReal(1.00000000000000))*(IKcos(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x117)))+(((IkReal(-1.00000000000000))*(x116)))+(((cj0)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x117)))+(((IkReal(-1.00000000000000))*(x118)))+(((cj0)*(new_r11))));
evalcond[2]=((((new_r11)*(sj0)))+(x116)+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(((IkReal(-1.00000000000000))*(x118)))+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x119=((IkReal(1.00000000000000))+(new_r22));
IkReal x120=((new_r12)*(sj0));
IkReal x121=((cj0)*(new_r02));
IkReal x122=((((IkReal(-1.00000000000000))*(new_r02)*(sj0)))+(((cj0)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x119;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x122;
evalcond[5]=x122;
evalcond[6]=((x120)+(x121));
evalcond[7]=((((IkReal(-1.00000000000000))*(x120)))+(((IkReal(-1.00000000000000))*(x121))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x119;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((new_r11)*(sj0)))+(((cj0)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x123=IKcos(j2);
IkReal x124=((IkReal(1.00000000000000))*(sj0));
IkReal x125=((IkReal(1.00000000000000))*(IKsin(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x124)))+(((IkReal(-1.00000000000000))*(x125)))+(((cj0)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x124)))+(((IkReal(-1.00000000000000))*(x123)))+(((cj0)*(new_r11))));
evalcond[2]=((((new_r11)*(sj0)))+(((IkReal(-1.00000000000000))*(x125)))+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(x123)+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst6)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst6)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst6)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst6)*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x126=IKsin(j2);
IkReal x127=IKcos(j2);
IkReal x128=((IkReal(1.00000000000000))*(sj0));
IkReal x129=((IkReal(1.00000000000000))*(sj1));
IkReal x130=((cj0)*(new_r01));
IkReal x131=((cj0)*(new_r00));
IkReal x132=((new_r11)*(sj0));
IkReal x133=((new_r10)*(sj0));
IkReal x134=((IkReal(1.00000000000000))*(x127));
evalcond[0]=((new_r20)+(((sj1)*(x127))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x126)*(x129)))+(new_r21));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x128)))+(((IkReal(-1.00000000000000))*(x126)))+(((cj0)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x128)))+(((IkReal(-1.00000000000000))*(x134)))+(((cj0)*(new_r11))));
evalcond[4]=((((cj1)*(x126)))+(x130)+(x132));
evalcond[5]=((x131)+(x133)+(((IkReal(-1.00000000000000))*(cj1)*(x134))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r21)*(x129)))+(x126)+(((cj1)*(x130)))+(((cj1)*(x132))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x134)))+(((IkReal(-1.00000000000000))*(new_r20)*(x129)))+(((cj1)*(x131)))+(((cj1)*(x133))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst5)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst5)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst5)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst5)*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
evalcond[0]=((((sj1)*(IKcos(j2))))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj1)*(IKsin(j2))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x135=((gconst7)*(sj1));
if( IKabs(((new_r12)*(x135))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x135))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r12)*(x135)), ((new_r02)*(x135)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[12];
IkReal x136=IKcos(j0);
IkReal x137=IKsin(j0);
IkReal x138=((IkReal(1.00000000000000))*(cj2));
IkReal x139=((IkReal(1.00000000000000))*(sj1));
IkReal x140=((IkReal(1.00000000000000))*(cj1));
IkReal x141=((new_r10)*(x137));
IkReal x142=((new_r01)*(x136));
IkReal x143=((new_r00)*(x136));
IkReal x144=((IkReal(1.00000000000000))*(x137));
IkReal x145=((new_r11)*(x137));
IkReal x146=((new_r12)*(x137));
IkReal x147=((new_r02)*(x136));
evalcond[0]=((((new_r12)*(x136)))+(((IkReal(-1.00000000000000))*(new_r02)*(x144))));
evalcond[1]=((x146)+(x147)+(((IkReal(-1.00000000000000))*(x139))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj2)))+(((new_r10)*(x136)))+(((IkReal(-1.00000000000000))*(new_r00)*(x144))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x144)))+(((IkReal(-1.00000000000000))*(x138)))+(((new_r11)*(x136))));
evalcond[4]=((((cj1)*(sj2)))+(x142)+(x145));
evalcond[5]=((x141)+(x143)+(((IkReal(-1.00000000000000))*(cj1)*(x138))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r22)*(x139)))+(((cj1)*(x146)))+(((cj1)*(x147))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x140)))+(((IkReal(-1.00000000000000))*(x139)*(x141)))+(((IkReal(-1.00000000000000))*(x139)*(x143))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r21)*(x140)))+(((IkReal(-1.00000000000000))*(x139)*(x142)))+(((IkReal(-1.00000000000000))*(x139)*(x145))));
evalcond[9]=((sj2)+(((IkReal(-1.00000000000000))*(new_r21)*(x139)))+(((cj1)*(x145)))+(((cj1)*(x142))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x140)))+(((IkReal(-1.00000000000000))*(x139)*(x147)))+(((IkReal(-1.00000000000000))*(x139)*(x146))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r20)*(x139)))+(((IkReal(-1.00000000000000))*(x138)))+(((cj1)*(x143)))+(((cj1)*(x141))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "a3fc2a58c084beca1a6f29736b224a40"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE

int ik_solve(IkReal eerot[9], IkReal eetrans[3], std::vector<std::vector<IkReal> >& sol_joint, std::vector<IkReal> free_joint)
{
    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
	for(std::size_t i = 0; i < vfree.size(); ++i)
		vfree[i] = free_joint[i];
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        return -1;
    }

	sol_joint.resize(solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
		sol_joint[i].resize(solvalues.size());
        for( std::size_t j = 0; j < solvalues.size(); ++j)
			sol_joint[i][j] = solvalues[j];
    }
    return 0;
}

} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
