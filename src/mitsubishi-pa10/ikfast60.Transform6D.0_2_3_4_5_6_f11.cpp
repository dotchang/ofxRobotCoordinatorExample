/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 60 generated on 2012-09-02 07:34:46.438491
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==60);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_6DF11 {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKcos(j[6]);
x14=((IkReal(0.500000000000000))*(x0));
x15=((IkReal(0.0850000000000000))*(x8));
x16=((IkReal(1.00000000000000))*(x5));
x17=((IkReal(1.00000000000000))*(x4));
x18=((IkReal(1.00000000000000))*(x3));
x19=((IkReal(0.0850000000000000))*(x9));
x20=((IkReal(1.00000000000000))*(x11));
x21=((IkReal(1.00000000000000))*(x12));
x22=((IkReal(0.500000000000000))*(x3));
x23=((IkReal(1.00000000000000))*(x0));
x24=((IkReal(0.0850000000000000))*(x5));
x25=((x1)*(x2));
x26=((x6)*(x7));
x27=((x2)*(x7));
x28=((x1)*(x6));
x29=((x0)*(x7));
x30=((x3)*(x7));
x31=((x17)*(x3));
x32=((IkReal(1.00000000000000))*(x28));
x33=((x4)*(x7)*(x9));
x34=((x16)*(x29));
x35=((x23)*(x26));
x36=((x16)*(x30));
x37=((x18)*(x26));
x38=((((IkReal(-1.00000000000000))*(x31)))+(((x0)*(x25))));
x39=((((x0)*(x4)))+(((x25)*(x3))));
x40=((((IkReal(-1.00000000000000))*(x1)*(x31)))+(((x0)*(x2))));
x41=((((IkReal(-1.00000000000000))*(x32)))+(((x27)*(x5))));
x42=((x31)+(((IkReal(-1.00000000000000))*(x23)*(x25))));
x43=((((IkReal(-1.00000000000000))*(x0)*(x1)*(x17)))+(((IkReal(-1.00000000000000))*(x18)*(x2))));
x44=((((IkReal(-1.00000000000000))*(x0)*(x17)))+(((IkReal(-1.00000000000000))*(x18)*(x25))));
x45=((((x1)*(x16)))+(((IkReal(1.00000000000000))*(x2)*(x26))));
x46=((IkReal(-1.00000000000000))*(x45));
x47=((x39)*(x6));
x48=((x11)*(x41));
x49=((x38)*(x6));
x50=((x42)*(x5));
x51=((x44)*(x5));
x52=((((IkReal(-1.00000000000000))*(x34)))+(x49));
x53=((((IkReal(-1.00000000000000))*(x36)))+(x47));
x54=((((IkReal(-1.00000000000000))*(x35)))+(x50));
x55=((((IkReal(-1.00000000000000))*(x37)))+(x51));
x56=((((x4)*(x7)*(x8)))+(((x45)*(x9))));
x57=((((x46)*(x8)))+(x33));
x58=((x11)*(x55));
x59=((((x53)*(x8)))+(((x40)*(x9))));
x60=((((x9)*(((((IkReal(-1.00000000000000))*(x47)))+(x36)))))+(((x40)*(x8))));
x61=((((x43)*(x9)))+(((x52)*(x8))));
x62=((x12)*(x59));
x63=((((x9)*(((((IkReal(-1.00000000000000))*(x49)))+(x34)))))+(((x43)*(x8))));
eerot[0]=((((x10)*(x63)))+(((x13)*(((((x12)*(x61)))+(((x11)*(x54))))))));
eerot[1]=((((x13)*(x63)))+(((x10)*(((((IkReal(-1.00000000000000))*(x20)*(x54)))+(((IkReal(-1.00000000000000))*(x21)*(x61))))))));
eerot[2]=((((x11)*(x61)))+(((x12)*(((((IkReal(-1.00000000000000))*(x16)*(x42)))+(x35))))));
eetrans[0]=((((x5)*(((((x14)*(x25)))+(((IkReal(-1.00000000000000))*(x22)*(x4)))))))+(((x11)*(((((x19)*(x43)))+(((x15)*(x52)))))))+(((x14)*(x26)))+(((x12)*(((((IkReal(-1.00000000000000))*(x24)*(x42)))+(((IkReal(0.0850000000000000))*(x0)*(x26)))))))+(((IkReal(0.450000000000000))*(x29))));
eerot[3]=((((x13)*(((x58)+(x62)))))+(((x10)*(x60))));
eerot[4]=((((x13)*(x60)))+(((x10)*(((((IkReal(-1.00000000000000))*(x20)*(x55)))+(((IkReal(-1.00000000000000))*(x21)*(x59))))))));
eerot[5]=((((x12)*(((((IkReal(-1.00000000000000))*(x16)*(x44)))+(x37)))))+(((x11)*(x59))));
eetrans[1]=((((IkReal(0.450000000000000))*(x30)))+(((x22)*(x26)))+(((x11)*(((((x19)*(x40)))+(((x15)*(x53)))))))+(((x5)*(((((x22)*(x25)))+(((x14)*(x4)))))))+(((x12)*(((((IkReal(-1.00000000000000))*(x24)*(x44)))+(((IkReal(0.0850000000000000))*(x26)*(x3))))))));
eerot[6]=((((x13)*(((((x12)*(x57)))+(x48)))))+(((x10)*(x56))));
eerot[7]=((((x13)*(x56)))+(((x10)*(((((IkReal(-1.00000000000000))*(x20)*(x41)))+(((IkReal(-1.00000000000000))*(x21)*(x57))))))));
eerot[8]=((((x11)*(x57)))+(((x12)*(((((IkReal(-1.00000000000000))*(x16)*(x27)))+(x32))))));
eetrans[2]=((IkReal(0.315000000000000))+(((x12)*(((((IkReal(0.0850000000000000))*(x28)))+(((IkReal(-1.00000000000000))*(x24)*(x27)))))))+(((IkReal(-0.500000000000000))*(x27)*(x5)))+(((IkReal(0.500000000000000))*(x28)))+(((IkReal(0.450000000000000))*(x1)))+(((x11)*(((((x15)*(x46)))+(((x19)*(x4)*(x7))))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {1}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j1,cj1,sj1,htj1,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij1[2], _nj1;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij1[0] = -1; _ij1[1] = -1; _nj1 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j1=pfree[0]; cj1=cos(pfree[0]); sj1=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((px)+(((IkReal(-0.0850000000000000))*(r02))));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((IkReal(-0.0850000000000000))*(r12)))+(py));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((IkReal(-0.315000000000000))+(((IkReal(-0.0850000000000000))*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((IkReal(-1.00555555555556))+(((IkReal(2.22222222222222))*(pp))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
IkReal x64=(sj1)*(sj1);
dummyeval[0]=((((x64)*((py)*(py))))+(((x64)*((px)*(px)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x65=(sj1)*(sj1);
dummyeval[0]=((((x65)*((px)*(px))))+(((x65)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x66=(sj1)*(sj1);
dummyeval[0]=((((x66)*((px)*(px))))+(((x66)*((py)*(py)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x67=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.452500000000000))+(((IkReal(0.450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x67))));
evalcond[2]=((IkReal(-0.450000000000000))+(pz)+(((IkReal(-0.500000000000000))*(cj3))));
evalcond[3]=((IkReal(0.0475000000000000))+(((IkReal(0.900000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x67))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=((IkReal(-1.00000000000000))*(py));
IkReal gconst2;
gconst2=sj3;
IkReal gconst3;
gconst3=((IkReal(-1.00000000000000))*(py));
IkReal gconst4;
gconst4=((((IkReal(0.500000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(px))));
IkReal gconst5;
gconst5=((((IkReal(-1.00000000000000))*(px)))+(((IkReal(-0.500000000000000))*(sj3))));
IkReal gconst6;
gconst6=((IkReal(-1.00000000000000))*(py));
IkReal gconst7;
gconst7=sj3;
IkReal gconst8;
gconst8=((IkReal(-1.00000000000000))*(py));
IkReal gconst9;
gconst9=((((IkReal(0.500000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(px))));
IkReal gconst10;
gconst10=((((IkReal(-1.00000000000000))*(px)))+(((IkReal(-0.500000000000000))*(sj3))));
IkReal gconst11;
gconst11=((IkReal(2.00000000000000))*(px));
IkReal gconst12;
gconst12=((IkReal(2.00000000000000))*(px));
IkReal gconst13;
gconst13=((IkReal(-2.00000000000000))*(py));
IkReal gconst14;
gconst14=((IkReal(-2.00000000000000))*(py));
IkReal gconst15;
gconst15=((IkReal(2.00000000000000))*(px));
IkReal gconst16;
gconst16=((IkReal(2.00000000000000))*(px));
IkReal gconst17;
gconst17=((IkReal(-2.00000000000000))*(py));
IkReal gconst18;
gconst18=((IkReal(-2.00000000000000))*(py));
IkReal gconst19;
gconst19=py;
IkReal gconst20;
gconst20=sj3;
IkReal gconst21;
gconst21=py;
IkReal gconst22;
gconst22=((((IkReal(0.500000000000000))*(sj3)))+(px));
IkReal gconst23;
gconst23=((px)+(((IkReal(-0.500000000000000))*(sj3))));
IkReal gconst24;
gconst24=py;
IkReal gconst25;
gconst25=sj3;
IkReal gconst26;
gconst26=py;
IkReal gconst27;
gconst27=((((IkReal(0.500000000000000))*(sj3)))+(px));
IkReal gconst28;
gconst28=((px)+(((IkReal(-0.500000000000000))*(sj3))));
IkReal x68=((gconst24)*(gconst28));
IkReal x69=((gconst21)*(gconst22));
IkReal x70=((gconst19)*(gconst23));
IkReal x71=((gconst26)*(gconst27));
dummyeval[0]=((((IkReal(-1.00000000000000))*(x69)*(x71)))+(((IkReal(-1.00000000000000))*(x68)*(x70)))+(((x68)*(x69)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst23)*(gconst25)*(gconst27)))+(((x70)*(x71))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x72=((gconst21)*(gconst4));
IkReal x73=((gconst21)*(gconst22));
IkReal x74=((gconst28)*(gconst6));
IkReal x75=((IkReal(1.00000000000000))*(gconst15));
IkReal x76=((gconst19)*(gconst23));
IkReal x77=((gconst10)*(gconst6));
IkReal x78=((gconst22)*(gconst3));
IkReal x79=((IkReal(1.00000000000000))*(gconst27));
IkReal x80=((gconst13)*(gconst16));
IkReal x81=((gconst1)*(gconst5));
IkReal x82=((IkReal(1.00000000000000))*(gconst17));
IkReal x83=((gconst2)*(gconst7));
IkReal x84=((gconst20)*(gconst25));
IkReal x85=((gconst3)*(gconst4));
IkReal x86=((gconst10)*(gconst15));
IkReal x87=((gconst12)*(gconst4));
IkReal x88=((IkReal(1.00000000000000))*(gconst14));
IkReal x89=((gconst17)*(gconst26));
IkReal x90=((gconst27)*(gconst8));
IkReal x91=((IkReal(1.00000000000000))*(gconst5));
IkReal x92=((gconst19)*(gconst24));
IkReal x93=((gconst8)*(gconst9));
IkReal x94=((gconst17)*(gconst8));
IkReal x95=((gconst11)*(gconst23));
IkReal x96=((gconst26)*(gconst27));
IkReal x97=((gconst11)*(gconst14));
IkReal x98=((gconst11)*(gconst5));
IkReal x99=((gconst10)*(gconst24));
IkReal x100=((IkReal(1.00000000000000))*(gconst9));
IkReal x101=((gconst12)*(gconst22));
IkReal x102=((gconst1)*(gconst14));
IkReal x103=((gconst13)*(gconst3));
IkReal x104=((gconst18)*(gconst6));
IkReal x105=((gconst16)*(gconst9));
IkReal x106=((gconst15)*(gconst18));
IkReal x107=((gconst16)*(gconst27));
IkReal x108=((gconst14)*(gconst19));
IkReal x109=((gconst1)*(gconst23));
IkReal x110=((gconst24)*(gconst28));
IkReal x111=((gconst26)*(gconst9));
IkReal x112=((gconst13)*(gconst21));
IkReal x113=((gconst15)*(gconst28));
IkReal x114=((gconst16)*(gconst17));
IkReal x115=((gconst2)*(gconst25));
IkReal x116=((gconst19)*(gconst5));
IkReal x117=((gconst12)*(gconst13));
IkReal x118=((gconst18)*(gconst24));
IkReal x119=((gconst20)*(gconst7));
IkReal x120=((IkReal(1.00000000000000))*(x93));
op[0]=((((IkReal(-1.00000000000000))*(gconst23)*(x79)*(x84)))+(((x110)*(x73)))+(((x76)*(x96)))+(((IkReal(-1.00000000000000))*(x110)*(x76)))+(((IkReal(-1.00000000000000))*(gconst26)*(x73)*(x79))));
op[1]=((((x110)*(x112)))+(((IkReal(-1.00000000000000))*(gconst28)*(x88)*(x92)))+(((x107)*(x76)))+(((IkReal(-1.00000000000000))*(gconst28)*(x75)*(x76)))+(((IkReal(-1.00000000000000))*(gconst14)*(x79)*(x84)))+(((IkReal(-1.00000000000000))*(gconst26)*(x73)*(x82)))+(((IkReal(-1.00000000000000))*(gconst23)*(x82)*(x84)))+(((IkReal(-1.00000000000000))*(x118)*(x76)))+(((x118)*(x73)))+(((x108)*(x96)))+(((IkReal(-1.00000000000000))*(gconst26)*(x101)*(x79)))+(((x76)*(x89)))+(((IkReal(-1.00000000000000))*(gconst16)*(x73)*(x79)))+(((x95)*(x96)))+(((IkReal(-1.00000000000000))*(gconst26)*(x112)*(x79)))+(((IkReal(-1.00000000000000))*(x110)*(x95)))+(((x101)*(x110)))+(((x113)*(x73))));
op[2]=((((IkReal(-1.00000000000000))*(x109)*(x110)))+(((IkReal(-1.00000000000000))*(gconst23)*(x100)*(x84)))+(((IkReal(-1.00000000000000))*(gconst28)*(x75)*(x95)))+(((IkReal(-1.00000000000000))*(gconst11)*(x110)*(x88)))+(((x107)*(x108)))+(((IkReal(-1.00000000000000))*(x118)*(x95)))+(((x110)*(x117)))+(((x96)*(x97)))+(((x111)*(x76)))+(((IkReal(-1.00000000000000))*(gconst28)*(x91)*(x92)))+(((x110)*(x72)))+(((x110)*(x78)))+(((x106)*(x73)))+(((x112)*(x113)))+(((x112)*(x118)))+(((x89)*(x95)))+(((x107)*(x95)))+(((IkReal(-1.00000000000000))*(gconst14)*(x82)*(x84)))+(((IkReal(-1.00000000000000))*(gconst26)*(x101)*(x82)))+(((IkReal(-1.00000000000000))*(gconst18)*(x88)*(x92)))+(((IkReal(-1.00000000000000))*(gconst23)*(x119)*(x79)))+(((x73)*(x99)))+(((IkReal(-1.00000000000000))*(gconst26)*(x78)*(x79)))+(((IkReal(-1.00000000000000))*(gconst8)*(x73)*(x79)))+(((IkReal(-1.00000000000000))*(gconst26)*(x100)*(x73)))+(((IkReal(-1.00000000000000))*(gconst23)*(x115)*(x79)))+(((IkReal(-1.00000000000000))*(gconst28)*(x108)*(x75)))+(((IkReal(-1.00000000000000))*(gconst21)*(x79)*(x80)))+(((x108)*(x89)))+(((IkReal(-1.00000000000000))*(x76)*(x99)))+(((x76)*(x90)))+(((IkReal(-1.00000000000000))*(gconst26)*(x112)*(x82)))+(((IkReal(-1.00000000000000))*(gconst5)*(x79)*(x84)))+(((x109)*(x96)))+(((IkReal(-1.00000000000000))*(gconst16)*(x101)*(x79)))+(((IkReal(-1.00000000000000))*(gconst16)*(x73)*(x82)))+(((IkReal(-1.00000000000000))*(gconst26)*(x117)*(x79)))+(((x73)*(x74)))+(((x101)*(x118)))+(((x101)*(x113)))+(((x116)*(x96)))+(((IkReal(-1.00000000000000))*(x74)*(x76)))+(((IkReal(-1.00000000000000))*(gconst18)*(x75)*(x76)))+(((IkReal(-1.00000000000000))*(gconst26)*(x72)*(x79)))+(((x114)*(x76))));
op[3]=((((IkReal(-1.00000000000000))*(gconst11)*(gconst14)*(gconst15)*(gconst28)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst15)*(gconst23)*(gconst28)))+(((gconst10)*(gconst12)*(gconst22)*(gconst24)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst13)*(gconst17)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst24)*(gconst28)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst13)*(gconst16)*(gconst27)))+(((gconst1)*(gconst14)*(gconst26)*(gconst27)))+(((gconst14)*(gconst16)*(gconst17)*(gconst19)))+(((gconst12)*(gconst13)*(gconst15)*(gconst28)))+(((gconst15)*(gconst21)*(gconst28)*(gconst4)))+(((gconst17)*(gconst19)*(gconst26)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst19)*(gconst28)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst21)*(gconst26)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst19)*(gconst24)*(gconst5)))+(((gconst18)*(gconst21)*(gconst22)*(gconst6)))+(((gconst12)*(gconst24)*(gconst28)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst22)*(gconst27)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst14)*(gconst24)*(gconst28)))+(((gconst11)*(gconst23)*(gconst27)*(gconst8)))+(((gconst1)*(gconst17)*(gconst23)*(gconst26)))+(((gconst12)*(gconst13)*(gconst18)*(gconst24)))+(((gconst11)*(gconst16)*(gconst17)*(gconst23)))+(((gconst18)*(gconst22)*(gconst24)*(gconst3)))+(((gconst14)*(gconst19)*(gconst27)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst2)*(gconst23)*(gconst25)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst20)*(gconst25)*(gconst9)))+(((gconst11)*(gconst14)*(gconst17)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst22)*(gconst27)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst16)*(gconst17)*(gconst22)))+(((gconst10)*(gconst13)*(gconst21)*(gconst24)))+(((gconst16)*(gconst19)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst18)*(gconst23)))+(((gconst14)*(gconst19)*(gconst26)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst21)*(gconst27)*(gconst8)))+(((gconst10)*(gconst15)*(gconst21)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst26)*(gconst27)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst16)*(gconst17)*(gconst21)))+(((gconst18)*(gconst21)*(gconst24)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst19)*(gconst28)*(gconst5)))+(((gconst11)*(gconst14)*(gconst16)*(gconst27)))+(((gconst13)*(gconst21)*(gconst28)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst22)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst15)*(gconst18)*(gconst19)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst15)*(gconst19)*(gconst23)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst21)*(gconst27)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst18)*(gconst23)*(gconst24)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst20)*(gconst23)*(gconst7)))+(((gconst12)*(gconst22)*(gconst28)*(gconst6)))+(((gconst12)*(gconst15)*(gconst18)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst20)*(gconst27)*(gconst7)))+(((gconst15)*(gconst22)*(gconst28)*(gconst3)))+(((gconst17)*(gconst19)*(gconst23)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst23)*(gconst28)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst21)*(gconst22)*(gconst8)))+(((gconst11)*(gconst23)*(gconst26)*(gconst9)))+(((gconst13)*(gconst15)*(gconst18)*(gconst21)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst19)*(gconst23)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst21)*(gconst26)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst2)*(gconst25)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst20)*(gconst25)*(gconst5)))+(((gconst13)*(gconst24)*(gconst28)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst22)*(gconst26)*(gconst9)))+(((gconst11)*(gconst26)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst19)*(gconst24)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst26)*(gconst27)*(gconst3)))+(((gconst16)*(gconst19)*(gconst23)*(gconst9)))+(((gconst1)*(gconst16)*(gconst23)*(gconst27)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst21)*(gconst22)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst14)*(gconst18)*(gconst24)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst11)*(gconst23)*(gconst24))));
op[4]=((((gconst21)*(gconst28)*(gconst4)*(gconst6)))+(((gconst22)*(gconst28)*(gconst3)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst19)*(gconst23)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst23)*(gconst25)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst11)*(gconst15)*(gconst23)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst13)*(gconst16)*(gconst17)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst15)*(gconst18)*(gconst23)))+(((gconst15)*(gconst18)*(gconst22)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst17)*(gconst20)*(gconst7)))+(((gconst1)*(gconst26)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst16)*(gconst27)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst21)*(gconst27)*(gconst4)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst22)*(gconst27)*(gconst3)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst14)*(gconst28)*(gconst6)))+(((gconst1)*(gconst14)*(gconst16)*(gconst27)))+(((gconst10)*(gconst12)*(gconst15)*(gconst22)))+(((IkReal(-1.00000000000000))*(gconst21)*(gconst26)*(gconst4)*(gconst9)))+(((gconst15)*(gconst18)*(gconst21)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst18)*(gconst24)*(gconst5)))+(((gconst12)*(gconst13)*(gconst15)*(gconst18)))+(((gconst10)*(gconst13)*(gconst15)*(gconst21)))+(((gconst16)*(gconst17)*(gconst19)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst15)*(gconst19)))+(((gconst11)*(gconst14)*(gconst27)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst25)*(gconst5)*(gconst9)))+(((gconst1)*(gconst23)*(gconst27)*(gconst8)))+(((gconst10)*(gconst12)*(gconst13)*(gconst24)))+(((IkReal(-1.00000000000000))*(gconst22)*(gconst26)*(gconst3)*(gconst9)))+(((gconst12)*(gconst18)*(gconst24)*(gconst4)))+(((gconst13)*(gconst15)*(gconst28)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst16)*(gconst27)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst23)*(gconst28)*(gconst6)))+(((gconst11)*(gconst14)*(gconst26)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst14)*(gconst15)*(gconst28)))+(((gconst19)*(gconst26)*(gconst5)*(gconst9)))+(((gconst1)*(gconst23)*(gconst26)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst25)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst15)*(gconst18)*(gconst19)*(gconst5)))+(((gconst11)*(gconst16)*(gconst27)*(gconst5)))+(((gconst14)*(gconst17)*(gconst19)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst16)*(gconst22)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst16)*(gconst21)*(gconst9)))+(((gconst11)*(gconst16)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst18)*(gconst23)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst11)*(gconst14)*(gconst24)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst27)*(gconst5)*(gconst7)))+(((gconst11)*(gconst14)*(gconst16)*(gconst17)))+(((gconst12)*(gconst18)*(gconst22)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst28)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst17)*(gconst2)*(gconst25)))+(((gconst1)*(gconst14)*(gconst17)*(gconst26)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst17)*(gconst21)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst19)*(gconst24)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst10)*(gconst23)*(gconst24)))+(((gconst19)*(gconst23)*(gconst8)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst17)*(gconst22)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst21)*(gconst8)))+(((gconst24)*(gconst28)*(gconst3)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst14)*(gconst18)*(gconst24)))+(((gconst1)*(gconst16)*(gconst17)*(gconst23)))+(((gconst11)*(gconst17)*(gconst23)*(gconst8)))+(((gconst10)*(gconst21)*(gconst22)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst2)*(gconst23)*(gconst27)*(gconst7)))+(((gconst19)*(gconst27)*(gconst5)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst17)*(gconst26)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst26)*(gconst27)*(gconst3)*(gconst4)))+(((gconst12)*(gconst13)*(gconst28)*(gconst6)))+(((gconst13)*(gconst18)*(gconst21)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst17)*(gconst22)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst20)*(gconst23)*(gconst7)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst13)*(gconst27)*(gconst8)))+(((gconst14)*(gconst16)*(gconst19)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst13)*(gconst26)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst21)*(gconst22)*(gconst8)*(gconst9)))+(((gconst10)*(gconst22)*(gconst24)*(gconst3)))+(((gconst11)*(gconst17)*(gconst26)*(gconst5)))+(((gconst12)*(gconst15)*(gconst28)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst19)*(gconst28)*(gconst5)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst24)*(gconst28)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst14)*(gconst15)*(gconst18)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst18)*(gconst19)*(gconst6)))+(((gconst10)*(gconst21)*(gconst24)*(gconst4)))+(((gconst13)*(gconst18)*(gconst24)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst17)*(gconst26)*(gconst4))));
op[5]=((((IkReal(-1.00000000000000))*(gconst12)*(gconst16)*(gconst17)*(gconst4)))+(((gconst10)*(gconst15)*(gconst22)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst27)*(gconst3)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst2)*(gconst23)*(gconst7)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst18)*(gconst23)*(gconst6)))+(((gconst1)*(gconst14)*(gconst16)*(gconst17)))+(((gconst10)*(gconst13)*(gconst21)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst11)*(gconst23)*(gconst6)))+(((gconst15)*(gconst28)*(gconst3)*(gconst4)))+(((gconst14)*(gconst19)*(gconst8)*(gconst9)))+(((gconst11)*(gconst14)*(gconst17)*(gconst8)))+(((gconst13)*(gconst15)*(gconst18)*(gconst3)))+(((gconst17)*(gconst19)*(gconst5)*(gconst8)))+(((gconst10)*(gconst13)*(gconst24)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst2)*(gconst25)*(gconst5)))+(((gconst13)*(gconst28)*(gconst3)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst14)*(gconst15)*(gconst18)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst10)*(gconst14)*(gconst24)))+(((gconst10)*(gconst12)*(gconst13)*(gconst15)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst22)*(gconst3)*(gconst9)))+(((gconst10)*(gconst15)*(gconst21)*(gconst4)))+(((gconst16)*(gconst19)*(gconst5)*(gconst9)))+(((gconst1)*(gconst14)*(gconst26)*(gconst9)))+(((gconst11)*(gconst14)*(gconst16)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst21)*(gconst4)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst20)*(gconst5)*(gconst7)))+(((gconst1)*(gconst14)*(gconst27)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst22)*(gconst3)*(gconst8)))+(((gconst18)*(gconst24)*(gconst3)*(gconst4)))+(((gconst10)*(gconst12)*(gconst22)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst11)*(gconst24)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst27)*(gconst3)*(gconst4)))+(((gconst1)*(gconst16)*(gconst27)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst16)*(gconst17)*(gconst3)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst11)*(gconst14)*(gconst15)))+(((IkReal(-1.00000000000000))*(gconst17)*(gconst26)*(gconst3)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst20)*(gconst7)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst26)*(gconst3)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst13)*(gconst16)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst2)*(gconst25)*(gconst9)))+(((gconst12)*(gconst15)*(gconst18)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst14)*(gconst2)*(gconst27)*(gconst7)))+(((gconst1)*(gconst16)*(gconst23)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst18)*(gconst19)*(gconst5)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst26)*(gconst4)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst13)*(gconst17)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst27)*(gconst4)*(gconst8)))+(((gconst11)*(gconst27)*(gconst5)*(gconst8)))+(((IkReal(-1.00000000000000))*(gconst16)*(gconst21)*(gconst4)*(gconst9)))+(((gconst10)*(gconst12)*(gconst24)*(gconst4)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst15)*(gconst19)*(gconst5)))+(((gconst18)*(gconst21)*(gconst4)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst10)*(gconst14)*(gconst19)*(gconst6)))+(((gconst18)*(gconst22)*(gconst3)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst28)*(gconst5)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst13)*(gconst21)*(gconst8)*(gconst9)))+(((gconst1)*(gconst17)*(gconst23)*(gconst8)))+(((gconst12)*(gconst13)*(gconst18)*(gconst6)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst15)*(gconst18)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst10)*(gconst15)*(gconst23)))+(((gconst11)*(gconst16)*(gconst17)*(gconst5)))+(((gconst11)*(gconst23)*(gconst8)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst18)*(gconst24)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst12)*(gconst22)*(gconst8)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst15)*(gconst28)*(gconst5)))+(((IkReal(-1.00000000000000))*(gconst1)*(gconst14)*(gconst28)*(gconst6)))+(((gconst1)*(gconst17)*(gconst26)*(gconst5)))+(((gconst12)*(gconst28)*(gconst4)*(gconst6)))+(((gconst11)*(gconst26)*(gconst5)*(gconst9)))+(((IkReal(-1.00000000000000))*(gconst11)*(gconst14)*(gconst18)*(gconst6))));
op[6]=((((IkReal(-1.00000000000000))*(gconst1)*(x104)*(x88)))+(((IkReal(-1.00000000000000))*(gconst23)*(x100)*(x83)))+(((IkReal(-1.00000000000000))*(gconst16)*(x82)*(x85)))+(((IkReal(-1.00000000000000))*(gconst11)*(x104)*(x91)))+(((IkReal(-1.00000000000000))*(gconst3)*(x100)*(x80)))+(((IkReal(-1.00000000000000))*(gconst18)*(x75)*(x81)))+(((IkReal(-1.00000000000000))*(gconst14)*(x82)*(x83)))+(((x81)*(x90)))+(((IkReal(-1.00000000000000))*(x120)*(x72)))+(((IkReal(-1.00000000000000))*(x120)*(x78)))+(((x103)*(x86)))+(((IkReal(-1.00000000000000))*(gconst11)*(x77)*(x88)))+(((IkReal(-1.00000000000000))*(gconst26)*(x100)*(x85)))+(((x102)*(x94)))+(((x117)*(x77)))+(((x86)*(x87)))+(((x74)*(x85)))+(((IkReal(-1.00000000000000))*(x81)*(x99)))+(((x85)*(x99)))+(((x114)*(x81)))+(((IkReal(-1.00000000000000))*(gconst19)*(x77)*(x91)))+(((IkReal(-1.00000000000000))*(x117)*(x120)))+(((x102)*(x105)))+(((x103)*(x104)))+(((IkReal(-1.00000000000000))*(gconst8)*(x79)*(x85)))+(((IkReal(-1.00000000000000))*(gconst8)*(x103)*(x82)))+(((x106)*(x85)))+(((IkReal(-1.00000000000000))*(x74)*(x81)))+(((x111)*(x81)))+(((x93)*(x97)))+(((IkReal(-1.00000000000000))*(gconst16)*(x100)*(x87)))+(((IkReal(-1.00000000000000))*(gconst10)*(x75)*(x98)))+(((IkReal(-1.00000000000000))*(gconst5)*(x79)*(x83)))+(((x109)*(x93)))+(((x72)*(x77)))+(((IkReal(-1.00000000000000))*(gconst9)*(x119)*(x91)))+(((x116)*(x93)))+(((x104)*(x87)))+(((x105)*(x98)))+(((x77)*(x78)))+(((IkReal(-1.00000000000000))*(gconst8)*(x82)*(x87)))+(((x94)*(x98)))+(((IkReal(-1.00000000000000))*(gconst9)*(x115)*(x91)))+(((IkReal(-1.00000000000000))*(x109)*(x77)))+(((IkReal(-1.00000000000000))*(gconst10)*(x102)*(x75))));
op[7]=((((x77)*(x87)))+(((IkReal(-1.00000000000000))*(gconst1)*(x77)*(x88)))+(((IkReal(-1.00000000000000))*(x120)*(x87)))+(((IkReal(-1.00000000000000))*(gconst11)*(x77)*(x91)))+(((x81)*(x94)))+(((x102)*(x93)))+(((x85)*(x86)))+(((IkReal(-1.00000000000000))*(gconst5)*(x82)*(x83)))+(((IkReal(-1.00000000000000))*(x104)*(x81)))+(((x93)*(x98)))+(((IkReal(-1.00000000000000))*(gconst16)*(x100)*(x85)))+(((IkReal(-1.00000000000000))*(gconst9)*(x83)*(x88)))+(((IkReal(-1.00000000000000))*(gconst10)*(x75)*(x81)))+(((x104)*(x85)))+(((IkReal(-1.00000000000000))*(x103)*(x120)))+(((IkReal(-1.00000000000000))*(gconst8)*(x82)*(x85)))+(((x103)*(x77)))+(((x105)*(x81))));
op[8]=((((x77)*(x85)))+(((IkReal(-1.00000000000000))*(x120)*(x85)))+(((x81)*(x93)))+(((IkReal(-1.00000000000000))*(x77)*(x81)))+(((IkReal(-1.00000000000000))*(gconst9)*(x83)*(x91))));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((IkReal(2.00000000000000))*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal dummyeval[1];
IkReal gconst45;
gconst45=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x121=((IkReal(1.00000000000000))*(pp));
IkReal x122=((IkReal(1.00000000000000))*(cj0));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.902500000000000))+(((IkReal(-1.00000000000000))*(x121))));
evalcond[2]=((((IkReal(-1.00000000000000))*(py)*(x122)))+(((px)*(sj0))));
evalcond[3]=((IkReal(-0.950000000000000))+(pz));
evalcond[4]=((IkReal(0.0475000000000000))+(((IkReal(0.900000000000000))*(pz)))+(((IkReal(-1.00000000000000))*(x121))));
evalcond[5]=((((IkReal(-1.00000000000000))*(px)*(x122)))+(((IkReal(-1.00000000000000))*(py)*(sj0))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( IKabs(((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj0)*(px)))+(((py)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x123=IKatan2(((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py)))), ((((cj0)*(px)))+(((py)*(sj0)))));
j2array[0]=((IkReal(-1.00000000000000))*(x123));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x123))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
IkReal x124=IKsin(j2);
IkReal x125=IKcos(j2);
IkReal x126=((IkReal(1.00000000000000))*(x125));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(sj0)*(x126)))+(((px)*(sj0)*(x124)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(x124)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x126))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x198=((IkReal(1.00000000000000))*(pp));
IkReal x199=((IkReal(1.00000000000000))*(cj0));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.00250000000000000))+(((IkReal(-1.00000000000000))*(x198))));
evalcond[2]=((((IkReal(-1.00000000000000))*(py)*(x199)))+(((px)*(sj0))));
evalcond[3]=((IkReal(0.0500000000000000))+(pz));
evalcond[4]=((IkReal(0.0475000000000000))+(((IkReal(-1.00000000000000))*(x198)))+(((IkReal(0.900000000000000))*(pz))));
evalcond[5]=((((IkReal(-1.00000000000000))*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(px)*(x199))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( IKabs(((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj0)*(px)))+(((py)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x200=IKatan2(((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py)))), ((((cj0)*(px)))+(((py)*(sj0)))));
j2array[0]=((IkReal(-1.00000000000000))*(x200));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x200))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
IkReal x201=IKsin(j2);
IkReal x202=IKcos(j2);
IkReal x203=((IkReal(1.00000000000000))*(x202));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj0)*(py)*(x201)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x203)))+(((px)*(sj0)*(x201)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x203))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x204=((IkReal(2.00000000000000))*(cj0));
IkReal x205=((IkReal(2.00000000000000))*(sj0));
if( IKabs(((gconst45)*(((((IkReal(-1.00000000000000))*(px)*(x205)))+(((py)*(x204))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst45)*(((((px)*(x204)))+(((py)*(x205))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst45)*(((((IkReal(-1.00000000000000))*(px)*(x205)))+(((py)*(x204)))))), ((gconst45)*(((((px)*(x204)))+(((py)*(x205)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x206=IKsin(j2);
IkReal x207=IKcos(j2);
IkReal x208=((IkReal(1.00000000000000))*(py));
IkReal x209=((IkReal(0.500000000000000))*(sj3));
IkReal x210=((px)*(sj0));
IkReal x211=((sj0)*(x207));
IkReal x212=((IkReal(1.00000000000000))*(cj0)*(px));
IkReal x213=((cj0)*(x206));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj0)*(x208)))+(x210)+(((x206)*(x209))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x212)))+(((IkReal(-1.00000000000000))*(sj0)*(x208)))+(((x207)*(x209))));
evalcond[2]=((((py)*(sj0)*(x206)))+(((x207)*(x210)))+(((IkReal(-1.00000000000000))*(cj0)*(x207)*(x208)))+(((px)*(x213))));
evalcond[3]=((((x206)*(x210)))+(((IkReal(-1.00000000000000))*(x207)*(x212)))+(x209)+(((IkReal(-1.00000000000000))*(x208)*(x213)))+(((IkReal(-1.00000000000000))*(x208)*(x211))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}

} else
{
IkReal x214=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.452500000000000))+(((IkReal(0.450000000000000))*(cj3)))+(((IkReal(-1.00000000000000))*(x214))));
evalcond[2]=((IkReal(-0.450000000000000))+(((IkReal(-1.00000000000000))*(pz)))+(((IkReal(-0.500000000000000))*(cj3))));
evalcond[3]=((IkReal(0.0475000000000000))+(((IkReal(-1.00000000000000))*(x214)))+(((IkReal(-0.900000000000000))*(pz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst46;
gconst46=((IkReal(-1.00000000000000))*(py));
IkReal gconst47;
gconst47=sj3;
IkReal gconst48;
gconst48=((IkReal(-1.00000000000000))*(py));
IkReal gconst49;
gconst49=((((IkReal(0.500000000000000))*(sj3)))+(px));
IkReal gconst50;
gconst50=((px)+(((IkReal(-0.500000000000000))*(sj3))));
IkReal gconst51;
gconst51=((IkReal(-1.00000000000000))*(py));
IkReal gconst52;
gconst52=sj3;
IkReal gconst53;
gconst53=((IkReal(-1.00000000000000))*(py));
IkReal gconst54;
gconst54=((((IkReal(0.500000000000000))*(sj3)))+(px));
IkReal gconst55;
gconst55=((px)+(((IkReal(-0.500000000000000))*(sj3))));
IkReal gconst56;
gconst56=((IkReal(2.00000000000000))*(px));
IkReal gconst57;
gconst57=((IkReal(2.00000000000000))*(px));
IkReal gconst58;
gconst58=((IkReal(2.00000000000000))*(py));
IkReal gconst59;
gconst59=((IkReal(2.00000000000000))*(py));
IkReal gconst60;
gconst60=((IkReal(2.00000000000000))*(px));
IkReal gconst61;
gconst61=((IkReal(2.00000000000000))*(px));
IkReal gconst62;
gconst62=((IkReal(2.00000000000000))*(py));
IkReal gconst63;
gconst63=((IkReal(2.00000000000000))*(py));
IkReal gconst64;
gconst64=py;
IkReal gconst65;
gconst65=sj3;
IkReal gconst66;
gconst66=py;
IkReal gconst67;
gconst67=((((IkReal(0.500000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(px))));
IkReal gconst68;
gconst68=((((IkReal(-1.00000000000000))*(px)))+(((IkReal(-0.500000000000000))*(sj3))));
IkReal gconst69;
gconst69=py;
IkReal gconst70;
gconst70=sj3;
IkReal gconst71;
gconst71=py;
IkReal gconst72;
gconst72=((((IkReal(0.500000000000000))*(sj3)))+(((IkReal(-1.00000000000000))*(px))));
IkReal gconst73;
gconst73=((((IkReal(-1.00000000000000))*(px)))+(((IkReal(-0.500000000000000))*(sj3))));
IkReal x215=((IkReal(1.00000000000000))*(gconst72));
IkReal x216=((gconst66)*(gconst67));
IkReal x217=((gconst64)*(gconst68));
IkReal x218=((gconst69)*(gconst73));
dummyeval[0]=((((x216)*(x218)))+(((IkReal(-1.00000000000000))*(x217)*(x218)))+(((gconst71)*(gconst72)*(x217)))+(((IkReal(-1.00000000000000))*(gconst71)*(x215)*(x216)))+(((IkReal(-1.00000000000000))*(gconst65)*(gconst68)*(gconst70)*(x215))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[8+1], zeror[8];
int numroots;
IkReal x219=((gconst66)*(gconst67));
IkReal x220=((gconst60)*(gconst73));
IkReal x221=((gconst64)*(gconst71));
IkReal x222=((gconst50)*(gconst72));
IkReal x223=((IkReal(1.00000000000000))*(gconst61));
IkReal x224=((gconst51)*(gconst55));
IkReal x225=((gconst48)*(gconst58));
IkReal x226=((gconst51)*(gconst73));
IkReal x227=((gconst46)*(gconst50));
IkReal x228=((gconst53)*(gconst62));
IkReal x229=((gconst50)*(gconst56));
IkReal x230=((gconst58)*(gconst66));
IkReal x231=((IkReal(1.00000000000000))*(gconst53));
IkReal x232=((gconst48)*(gconst67));
IkReal x233=((gconst54)*(gconst61));
IkReal x234=((gconst46)*(gconst59));
IkReal x235=((IkReal(1.00000000000000))*(gconst68));
IkReal x236=((gconst47)*(gconst70));
IkReal x237=((IkReal(1.00000000000000))*(gconst59));
IkReal x238=((IkReal(1.00000000000000))*(gconst71));
IkReal x239=((gconst60)*(gconst63));
IkReal x240=((gconst51)*(gconst63));
IkReal x241=((gconst53)*(gconst54));
IkReal x242=((gconst56)*(gconst59));
IkReal x243=((gconst62)*(gconst68));
IkReal x244=((gconst69)*(gconst73));
IkReal x245=((gconst57)*(gconst67));
IkReal x246=((gconst47)*(gconst52));
IkReal x247=((gconst48)*(gconst49));
IkReal x248=((gconst63)*(gconst69));
IkReal x249=((gconst55)*(gconst69));
IkReal x250=((gconst52)*(gconst65));
IkReal x251=((gconst55)*(gconst60));
IkReal x252=((gconst49)*(gconst66));
IkReal x253=((gconst59)*(gconst72));
IkReal x254=((gconst68)*(gconst72));
IkReal x255=((IkReal(1.00000000000000))*(gconst50));
IkReal x256=((gconst49)*(gconst57));
IkReal x257=((gconst61)*(gconst64));
IkReal x258=((gconst56)*(gconst71));
IkReal x259=((gconst57)*(gconst58));
IkReal x260=((gconst54)*(x256));
IkReal x261=((IkReal(1.00000000000000))*(x227));
IkReal x262=((gconst62)*(gconst65)*(gconst70));
IkReal x263=((IkReal(1.00000000000000))*(gconst65)*(gconst70)*(gconst72));
op[0]=((((IkReal(-1.00000000000000))*(gconst65)*(gconst70)*(gconst72)*(x235)))+(((IkReal(-1.00000000000000))*(gconst64)*(x235)*(x244)))+(((x221)*(x254)))+(((x219)*(x244)))+(((IkReal(-1.00000000000000))*(gconst72)*(x219)*(x238))));
op[1]=((((x221)*(x243)))+(((IkReal(-1.00000000000000))*(gconst56)*(x235)*(x244)))+(((x230)*(x244)))+(((IkReal(-1.00000000000000))*(gconst65)*(gconst70)*(gconst72)*(x237)))+(((IkReal(-1.00000000000000))*(gconst64)*(x237)*(x244)))+(((IkReal(-1.00000000000000))*(gconst72)*(x238)*(x245)))+(((IkReal(-1.00000000000000))*(gconst64)*(x220)*(x235)))+(((x244)*(x245)))+(((IkReal(-1.00000000000000))*(gconst72)*(x230)*(x238)))+(((x219)*(x220)))+(((IkReal(-1.00000000000000))*(x235)*(x262)))+(((IkReal(-1.00000000000000))*(gconst64)*(x235)*(x248)))+(((IkReal(-1.00000000000000))*(gconst72)*(x219)*(x223)))+(((x221)*(x253)))+(((x254)*(x258)))+(((x254)*(x257)))+(((x219)*(x248)))+(((IkReal(-1.00000000000000))*(gconst62)*(x219)*(x238))));
op[2]=((((IkReal(-1.00000000000000))*(gconst72)*(x235)*(x236)))+(((IkReal(-1.00000000000000))*(gconst56)*(x235)*(x248)))+(((IkReal(-1.00000000000000))*(gconst72)*(x235)*(x250)))+(((x230)*(x248)))+(((x220)*(x245)))+(((IkReal(-1.00000000000000))*(gconst64)*(x244)*(x255)))+(((IkReal(-1.00000000000000))*(gconst64)*(x235)*(x239)))+(((IkReal(-1.00000000000000))*(gconst72)*(x223)*(x245)))+(((IkReal(-1.00000000000000))*(gconst64)*(x237)*(x248)))+(((IkReal(-1.00000000000000))*(gconst56)*(x237)*(x244)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst65)*(gconst70)*(x235)))+(((IkReal(-1.00000000000000))*(gconst46)*(x235)*(x244)))+(((IkReal(-1.00000000000000))*(gconst64)*(x220)*(x237)))+(((IkReal(-1.00000000000000))*(gconst54)*(x219)*(x238)))+(((IkReal(-1.00000000000000))*(gconst72)*(x223)*(x230)))+(((x219)*(x239)))+(((x243)*(x257)))+(((x243)*(x258)))+(((IkReal(-1.00000000000000))*(gconst62)*(x219)*(x223)))+(((x219)*(x226)))+(((IkReal(-1.00000000000000))*(x237)*(x262)))+(((IkReal(-1.00000000000000))*(gconst64)*(x226)*(x235)))+(((gconst59)*(gconst62)*(x221)))+(((gconst54)*(gconst68)*(x221)))+(((gconst56)*(gconst61)*(x254)))+(((IkReal(-1.00000000000000))*(gconst64)*(x235)*(x249)))+(((x253)*(x257)))+(((x232)*(x244)))+(((IkReal(-1.00000000000000))*(gconst62)*(x230)*(x238)))+(((x221)*(x222)))+(((IkReal(-1.00000000000000))*(gconst72)*(x232)*(x238)))+(((x245)*(x248)))+(((IkReal(-1.00000000000000))*(gconst56)*(x220)*(x235)))+(((IkReal(-1.00000000000000))*(gconst65)*(gconst70)*(x222)))+(((x219)*(x249)))+(((IkReal(-1.00000000000000))*(gconst72)*(x238)*(x259)))+(((IkReal(-1.00000000000000))*(gconst72)*(x238)*(x252)))+(((IkReal(-1.00000000000000))*(gconst72)*(x219)*(x231)))+(((IkReal(-1.00000000000000))*(gconst62)*(x238)*(x245)))+(((gconst53)*(gconst64)*(x254)))+(((gconst71)*(gconst72)*(x242)))+(((x220)*(x230)))+(((x244)*(x259)))+(((x244)*(x252)))+(((gconst46)*(gconst71)*(x254))));
op[3]=((((IkReal(-1.00000000000000))*(gconst55)*(gconst56)*(gconst68)*(gconst69)))+(((IkReal(-1.00000000000000))*(gconst50)*(gconst62)*(gconst65)*(gconst70)))+(((gconst54)*(gconst56)*(gconst68)*(gconst71)))+(((gconst48)*(gconst63)*(gconst67)*(gconst69)))+(((IkReal(-1.00000000000000))*(gconst47)*(gconst59)*(gconst70)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst56)*(gconst59)*(gconst60)*(gconst73)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst61)*(gconst62)*(gconst67)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst59)*(gconst65)*(gconst72)))+(((gconst57)*(gconst60)*(gconst63)*(gconst67)))+(((IkReal(-1.00000000000000))*(gconst48)*(gconst61)*(gconst67)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst58)*(gconst61)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst51)*(gconst59)*(gconst64)*(gconst73)))+(((gconst56)*(gconst59)*(gconst61)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst46)*(gconst60)*(gconst68)*(gconst73)))+(((IkReal(-1.00000000000000))*(gconst49)*(gconst62)*(gconst66)*(gconst71)))+(((IkReal(-1.00000000000000))*(gconst58)*(gconst61)*(gconst62)*(gconst66)))+(((gconst49)*(gconst60)*(gconst66)*(gconst73)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst58)*(gconst62)*(gconst71)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst59)*(gconst65)*(gconst70)))+(((gconst54)*(gconst59)*(gconst64)*(gconst71)))+(((IkReal(-1.00000000000000))*(gconst49)*(gconst57)*(gconst71)*(gconst72)))+(((gconst56)*(gconst59)*(gconst62)*(gconst71)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst59)*(gconst64)*(gconst69)))+(((gconst56)*(gconst61)*(gconst62)*(gconst68)))+(((IkReal(-1.00000000000000))*(gconst46)*(gconst63)*(gconst68)*(gconst69)))+(((gconst50)*(gconst62)*(gconst64)*(gconst71)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst61)*(gconst66)*(gconst67)))+(((gconst58)*(gconst60)*(gconst63)*(gconst66)))+(((gconst55)*(gconst60)*(gconst66)*(gconst67)))+(((gconst54)*(gconst61)*(gconst64)*(gconst68)))+(((IkReal(-1.00000000000000))*(gconst56)*(gconst59)*(gconst63)*(gconst69)))+(((gconst53)*(gconst59)*(gconst64)*(gconst72)))+(((gconst51)*(gconst63)*(gconst66)*(gconst67)))+(((gconst51)*(gconst57)*(gconst67)*(gconst73)))+(((IkReal(-1.00000000000000))*(gconst46)*(gconst59)*(gconst69)*(gconst73)))+(((gconst46)*(gconst61)*(gconst68)*(gconst72)))+(((gconst48)*(gconst60)*(gconst67)*(gconst73)))+(((gconst48)*(gconst58)*(gconst69)*(gconst73)))+(((gconst50)*(gconst56)*(gconst71)*(gconst72)))+(((gconst55)*(gconst58)*(gconst66)*(gconst69)))+(((gconst57)*(gconst58)*(gconst60)*(gconst73)))+(((gconst53)*(gconst56)*(gconst68)*(gconst72)))+(((gconst53)*(gconst62)*(gconst64)*(gconst68)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst57)*(gconst67)*(gconst71)))+(((gconst59)*(gconst61)*(gconst62)*(gconst64)))+(((IkReal(-1.00000000000000))*(gconst48)*(gconst58)*(gconst71)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst49)*(gconst61)*(gconst66)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst58)*(gconst66)*(gconst71)))+(((gconst50)*(gconst61)*(gconst64)*(gconst72)))+(((gconst46)*(gconst59)*(gconst71)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst60)*(gconst64)*(gconst68)))+(((IkReal(-1.00000000000000))*(gconst51)*(gconst63)*(gconst64)*(gconst68)))+(((IkReal(-1.00000000000000))*(gconst48)*(gconst62)*(gconst67)*(gconst71)))+(((gconst49)*(gconst57)*(gconst69)*(gconst73)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst62)*(gconst65)*(gconst68)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst58)*(gconst66)*(gconst72)))+(((gconst51)*(gconst58)*(gconst66)*(gconst73)))+(((gconst49)*(gconst63)*(gconst66)*(gconst69)))+(((IkReal(-1.00000000000000))*(gconst50)*(gconst60)*(gconst64)*(gconst73)))+(((gconst46)*(gconst62)*(gconst68)*(gconst71)))+(((IkReal(-1.00000000000000))*(gconst50)*(gconst63)*(gconst64)*(gconst69)))+(((gconst55)*(gconst57)*(gconst67)*(gconst69)))+(((IkReal(-1.00000000000000))*(gconst56)*(gconst60)*(gconst63)*(gconst68)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst57)*(gconst67)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst62)*(gconst66)*(gconst67)))+(((IkReal(-1.00000000000000))*(gconst47)*(gconst62)*(gconst68)*(gconst70)))+(((IkReal(-1.00000000000000))*(gconst59)*(gconst60)*(gconst63)*(gconst64)))+(((IkReal(-1.00000000000000))*(gconst50)*(gconst56)*(gconst69)*(gconst73)))+(((gconst57)*(gconst58)*(gconst63)*(gconst69)))+(((IkReal(-1.00000000000000))*(gconst51)*(gconst56)*(gconst68)*(gconst73))));
op[4]=((((IkReal(-1.00000000000000))*(gconst50)*(gconst56)*(gconst60)*(gconst73)))+(((gconst51)*(gconst58)*(gconst63)*(gconst66)))+(((IkReal(-1.00000000000000))*(gconst49)*(gconst53)*(gconst66)*(gconst72)))+(((gconst50)*(gconst53)*(gconst64)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst49)*(gconst61)*(gconst62)*(gconst66)))+(((gconst49)*(gconst57)*(gconst60)*(gconst73)))+(((IkReal(-1.00000000000000))*(gconst48)*(gconst53)*(gconst67)*(gconst72)))+(((gconst55)*(gconst57)*(gconst60)*(gconst67)))+(((gconst49)*(gconst60)*(gconst63)*(gconst66)))+(((IkReal(-1.00000000000000))*(gconst47)*(gconst52)*(gconst68)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst51)*(gconst59)*(gconst63)*(gconst64)))+(((gconst49)*(gconst57)*(gconst63)*(gconst69)))+(((gconst51)*(gconst55)*(gconst66)*(gconst67)))+(((IkReal(-1.00000000000000))*(gconst51)*(gconst55)*(gconst64)*(gconst68)))+(((gconst48)*(gconst55)*(gconst67)*(gconst69)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst57)*(gconst62)*(gconst67)))+(((IkReal(-1.00000000000000))*(gconst49)*(gconst57)*(gconst61)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst56)*(gconst59)*(gconst60)*(gconst63)))+(((gconst46)*(gconst61)*(gconst62)*(gconst68)))+(((gconst53)*(gconst59)*(gconst62)*(gconst64)))+(((gconst49)*(gconst51)*(gconst66)*(gconst73)))+(((gconst48)*(gconst58)*(gconst63)*(gconst69)))+(((gconst46)*(gconst54)*(gconst68)*(gconst71)))+(((IkReal(-1.00000000000000))*(gconst50)*(gconst52)*(gconst65)*(gconst72)))+(((gconst48)*(gconst60)*(gconst63)*(gconst67)))+(((gconst50)*(gconst61)*(gconst62)*(gconst64)))+(((gconst56)*(gconst59)*(gconst61)*(gconst62)))+(((IkReal(-1.00000000000000))*(gconst57)*(gconst58)*(gconst61)*(gconst62)))+(((IkReal(-1.00000000000000))*(gconst49)*(gconst57)*(gconst62)*(gconst71)))+(((gconst51)*(gconst57)*(gconst58)*(gconst73)))+(((gconst49)*(gconst55)*(gconst66)*(gconst69)))+(((gconst50)*(gconst56)*(gconst62)*(gconst71)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst58)*(gconst61)*(gconst66)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst59)*(gconst62)*(gconst65)))+(((IkReal(-1.00000000000000))*(gconst46)*(gconst59)*(gconst60)*(gconst73)))+(((gconst46)*(gconst53)*(gconst68)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst57)*(gconst58)*(gconst71)))+(((gconst54)*(gconst56)*(gconst59)*(gconst71)))+(((gconst50)*(gconst56)*(gconst61)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst47)*(gconst50)*(gconst70)*(gconst72)))+(((gconst48)*(gconst51)*(gconst67)*(gconst73)))+(((gconst48)*(gconst58)*(gconst60)*(gconst73)))+(((IkReal(-1.00000000000000))*(gconst51)*(gconst56)*(gconst63)*(gconst68)))+(((IkReal(-1.00000000000000))*(gconst48)*(gconst61)*(gconst62)*(gconst67)))+(((gconst54)*(gconst59)*(gconst61)*(gconst64)))+(((gconst50)*(gconst54)*(gconst64)*(gconst71)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst58)*(gconst62)*(gconst66)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst56)*(gconst60)*(gconst68)))+(((IkReal(-1.00000000000000))*(gconst50)*(gconst54)*(gconst65)*(gconst70)))+(((IkReal(-1.00000000000000))*(gconst47)*(gconst54)*(gconst68)*(gconst70)))+(((gconst57)*(gconst58)*(gconst60)*(gconst63)))+(((gconst53)*(gconst56)*(gconst62)*(gconst68)))+(((IkReal(-1.00000000000000))*(gconst50)*(gconst56)*(gconst63)*(gconst69)))+(((IkReal(-1.00000000000000))*(gconst50)*(gconst55)*(gconst64)*(gconst69)))+(((gconst55)*(gconst58)*(gconst60)*(gconst66)))+(((gconst53)*(gconst54)*(gconst64)*(gconst68)))+(((gconst55)*(gconst57)*(gconst58)*(gconst69)))+(((IkReal(-1.00000000000000))*(gconst51)*(gconst56)*(gconst59)*(gconst73)))+(((gconst54)*(gconst56)*(gconst61)*(gconst68)))+(((IkReal(-1.00000000000000))*(gconst47)*(gconst59)*(gconst62)*(gconst70)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst56)*(gconst59)*(gconst69)))+(((gconst46)*(gconst59)*(gconst61)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst48)*(gconst54)*(gconst67)*(gconst71)))+(((IkReal(-1.00000000000000))*(gconst46)*(gconst51)*(gconst68)*(gconst73)))+(((gconst48)*(gconst49)*(gconst69)*(gconst73)))+(((IkReal(-1.00000000000000))*(gconst46)*(gconst50)*(gconst69)*(gconst73)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst54)*(gconst66)*(gconst67)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst59)*(gconst60)*(gconst64)))+(((gconst46)*(gconst59)*(gconst62)*(gconst71)))+(((IkReal(-1.00000000000000))*(gconst48)*(gconst49)*(gconst71)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst54)*(gconst65)*(gconst68)))+(((IkReal(-1.00000000000000))*(gconst50)*(gconst51)*(gconst64)*(gconst73)))+(((IkReal(-1.00000000000000))*(gconst48)*(gconst58)*(gconst61)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst49)*(gconst54)*(gconst66)*(gconst71)))+(((gconst53)*(gconst56)*(gconst59)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst57)*(gconst61)*(gconst67)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst57)*(gconst58)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst46)*(gconst60)*(gconst63)*(gconst68)))+(((IkReal(-1.00000000000000))*(gconst46)*(gconst59)*(gconst63)*(gconst69)))+(((IkReal(-1.00000000000000))*(gconst48)*(gconst58)*(gconst62)*(gconst71)))+(((gconst51)*(gconst57)*(gconst63)*(gconst67)))+(((IkReal(-1.00000000000000))*(gconst46)*(gconst55)*(gconst68)*(gconst69)))+(((IkReal(-1.00000000000000))*(gconst50)*(gconst60)*(gconst63)*(gconst64)))+(((gconst46)*(gconst50)*(gconst71)*(gconst72))));
op[5]=((((IkReal(-1.00000000000000))*(gconst50)*(gconst56)*(gconst60)*(gconst63)))+(((IkReal(-1.00000000000000))*(gconst49)*(gconst53)*(gconst57)*(gconst72)))+(((gconst50)*(gconst54)*(gconst56)*(gconst71)))+(((gconst46)*(gconst54)*(gconst61)*(gconst68)))+(((gconst49)*(gconst57)*(gconst60)*(gconst63)))+(((gconst48)*(gconst51)*(gconst58)*(gconst73)))+(((IkReal(-1.00000000000000))*(gconst46)*(gconst51)*(gconst63)*(gconst68)))+(((IkReal(-1.00000000000000))*(gconst46)*(gconst55)*(gconst59)*(gconst69)))+(((IkReal(-1.00000000000000))*(gconst49)*(gconst57)*(gconst61)*(gconst62)))+(((gconst48)*(gconst51)*(gconst63)*(gconst67)))+(((gconst49)*(gconst51)*(gconst63)*(gconst66)))+(((gconst53)*(gconst54)*(gconst56)*(gconst68)))+(((gconst49)*(gconst51)*(gconst57)*(gconst73)))+(((IkReal(-1.00000000000000))*(gconst50)*(gconst51)*(gconst56)*(gconst73)))+(((gconst50)*(gconst53)*(gconst56)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst49)*(gconst54)*(gconst61)*(gconst66)))+(((IkReal(-1.00000000000000))*(gconst51)*(gconst55)*(gconst56)*(gconst68)))+(((IkReal(-1.00000000000000))*(gconst48)*(gconst49)*(gconst62)*(gconst71)))+(((IkReal(-1.00000000000000))*(gconst52)*(gconst54)*(gconst59)*(gconst65)))+(((gconst51)*(gconst57)*(gconst58)*(gconst63)))+(((IkReal(-1.00000000000000))*(gconst47)*(gconst54)*(gconst59)*(gconst70)))+(((IkReal(-1.00000000000000))*(gconst49)*(gconst53)*(gconst62)*(gconst66)))+(((gconst49)*(gconst55)*(gconst57)*(gconst69)))+(((IkReal(-1.00000000000000))*(gconst46)*(gconst59)*(gconst60)*(gconst63)))+(((gconst53)*(gconst54)*(gconst59)*(gconst64)))+(((IkReal(-1.00000000000000))*(gconst46)*(gconst50)*(gconst60)*(gconst73)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst54)*(gconst57)*(gconst67)))+(((gconst48)*(gconst58)*(gconst60)*(gconst63)))+(((IkReal(-1.00000000000000))*(gconst54)*(gconst57)*(gconst58)*(gconst61)))+(((IkReal(-1.00000000000000))*(gconst48)*(gconst49)*(gconst61)*(gconst72)))+(((gconst46)*(gconst50)*(gconst62)*(gconst71)))+(((gconst50)*(gconst56)*(gconst61)*(gconst62)))+(((IkReal(-1.00000000000000))*(gconst48)*(gconst54)*(gconst58)*(gconst71)))+(((gconst54)*(gconst56)*(gconst59)*(gconst61)))+(((gconst46)*(gconst50)*(gconst61)*(gconst72)))+(((gconst51)*(gconst55)*(gconst58)*(gconst66)))+(((gconst48)*(gconst49)*(gconst63)*(gconst69)))+(((IkReal(-1.00000000000000))*(gconst48)*(gconst53)*(gconst58)*(gconst72)))+(((gconst55)*(gconst57)*(gconst58)*(gconst60)))+(((gconst51)*(gconst55)*(gconst57)*(gconst67)))+(((gconst48)*(gconst55)*(gconst58)*(gconst69)))+(((IkReal(-1.00000000000000))*(gconst51)*(gconst56)*(gconst59)*(gconst63)))+(((IkReal(-1.00000000000000))*(gconst47)*(gconst52)*(gconst62)*(gconst68)))+(((gconst50)*(gconst53)*(gconst62)*(gconst64)))+(((IkReal(-1.00000000000000))*(gconst55)*(gconst56)*(gconst59)*(gconst60)))+(((gconst46)*(gconst59)*(gconst61)*(gconst62)))+(((IkReal(-1.00000000000000))*(gconst50)*(gconst55)*(gconst56)*(gconst69)))+(((IkReal(-1.00000000000000))*(gconst48)*(gconst54)*(gconst61)*(gconst67)))+(((gconst50)*(gconst54)*(gconst61)*(gconst64)))+(((IkReal(-1.00000000000000))*(gconst47)*(gconst50)*(gconst62)*(gconst70)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst54)*(gconst58)*(gconst66)))+(((gconst46)*(gconst53)*(gconst59)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst46)*(gconst51)*(gconst59)*(gconst73)))+(((gconst46)*(gconst54)*(gconst59)*(gconst71)))+(((IkReal(-1.00000000000000))*(gconst50)*(gconst55)*(gconst60)*(gconst64)))+(((gconst48)*(gconst55)*(gconst60)*(gconst67)))+(((IkReal(-1.00000000000000))*(gconst50)*(gconst51)*(gconst63)*(gconst64)))+(((IkReal(-1.00000000000000))*(gconst53)*(gconst57)*(gconst58)*(gconst62)))+(((IkReal(-1.00000000000000))*(gconst50)*(gconst52)*(gconst62)*(gconst65)))+(((IkReal(-1.00000000000000))*(gconst48)*(gconst53)*(gconst62)*(gconst67)))+(((IkReal(-1.00000000000000))*(gconst47)*(gconst52)*(gconst59)*(gconst72)))+(((IkReal(-1.00000000000000))*(gconst51)*(gconst55)*(gconst59)*(gconst64)))+(((IkReal(-1.00000000000000))*(gconst49)*(gconst54)*(gconst57)*(gconst71)))+(((IkReal(-1.00000000000000))*(gconst48)*(gconst58)*(gconst61)*(gconst62)))+(((gconst46)*(gconst53)*(gconst62)*(gconst68)))+(((gconst53)*(gconst56)*(gconst59)*(gconst62)))+(((gconst48)*(gconst49)*(gconst60)*(gconst73)))+(((gconst49)*(gconst55)*(gconst60)*(gconst66)))+(((IkReal(-1.00000000000000))*(gconst46)*(gconst50)*(gconst63)*(gconst69)))+(((IkReal(-1.00000000000000))*(gconst46)*(gconst55)*(gconst60)*(gconst68))));
op[6]=((((x226)*(x247)))+(((gconst54)*(gconst71)*(x227)))+(((IkReal(-1.00000000000000))*(gconst54)*(x235)*(x246)))+(((gconst50)*(gconst64)*(x241)))+(((x229)*(x233)))+(((IkReal(-1.00000000000000))*(x234)*(x240)))+(((IkReal(-1.00000000000000))*(gconst72)*(x231)*(x247)))+(((x225)*(x251)))+(((IkReal(-1.00000000000000))*(x222)*(x246)))+(((IkReal(-1.00000000000000))*(x229)*(x240)))+(((IkReal(-1.00000000000000))*(gconst62)*(x237)*(x246)))+(((x228)*(x234)))+(((x228)*(x229)))+(((IkReal(-1.00000000000000))*(x249)*(x261)))+(((IkReal(-1.00000000000000))*(x228)*(x256)))+(((x251)*(x256)))+(((gconst46)*(gconst68)*(x241)))+(((IkReal(-1.00000000000000))*(x226)*(x261)))+(((x233)*(x234)))+(((IkReal(-1.00000000000000))*(gconst54)*(x223)*(x225)))+(((IkReal(-1.00000000000000))*(gconst54)*(x231)*(x232)))+(((IkReal(-1.00000000000000))*(x223)*(x260)))+(((IkReal(-1.00000000000000))*(gconst54)*(x238)*(x247)))+(((IkReal(-1.00000000000000))*(x229)*(x251)))+(((IkReal(-1.00000000000000))*(x225)*(x228)))+(((x239)*(x247)))+(((IkReal(-1.00000000000000))*(gconst54)*(x231)*(x252)))+(((IkReal(-1.00000000000000))*(gconst54)*(x231)*(x259)))+(((x241)*(x242)))+(((IkReal(-1.00000000000000))*(gconst64)*(x224)*(x255)))+(((IkReal(-1.00000000000000))*(gconst54)*(x250)*(x255)))+(((x224)*(x232)))+(((x240)*(x256)))+(((x225)*(x240)))+(((IkReal(-1.00000000000000))*(x239)*(x261)))+(((IkReal(-1.00000000000000))*(gconst46)*(x224)*(x235)))+(((IkReal(-1.00000000000000))*(gconst54)*(x236)*(x255)))+(((x247)*(x249)))+(((IkReal(-1.00000000000000))*(gconst62)*(x223)*(x247)))+(((gconst61)*(gconst62)*(x227)))+(((IkReal(-1.00000000000000))*(x234)*(x251)))+(((IkReal(-1.00000000000000))*(gconst56)*(x224)*(x237)))+(((x224)*(x252)))+(((x224)*(x259)))+(((gconst46)*(gconst53)*(x222))));
op[7]=((((x224)*(x225)))+(((IkReal(-1.00000000000000))*(x228)*(x247)))+(((x227)*(x228)))+(((x240)*(x247)))+(((x234)*(x241)))+(((IkReal(-1.00000000000000))*(gconst54)*(x225)*(x231)))+(((IkReal(-1.00000000000000))*(x231)*(x260)))+(((x229)*(x241)))+(((IkReal(-1.00000000000000))*(x251)*(x261)))+(((IkReal(-1.00000000000000))*(gconst54)*(x223)*(x247)))+(((IkReal(-1.00000000000000))*(x240)*(x261)))+(((x227)*(x233)))+(((IkReal(-1.00000000000000))*(x224)*(x234)))+(((IkReal(-1.00000000000000))*(gconst62)*(x246)*(x255)))+(((IkReal(-1.00000000000000))*(x224)*(x229)))+(((IkReal(-1.00000000000000))*(gconst54)*(x237)*(x246)))+(((x224)*(x256)))+(((x247)*(x251))));
op[8]=((((IkReal(-1.00000000000000))*(gconst54)*(x231)*(x247)))+(((IkReal(-1.00000000000000))*(gconst54)*(x246)*(x255)))+(((x227)*(x241)))+(((x224)*(x247)))+(((IkReal(-1.00000000000000))*(x224)*(x261))));
polyroots8(op,zeror,numroots);
IkReal j0array[8], cj0array[8], sj0array[8], tempj0array[1];
int numsolutions = 0;
for(int ij0 = 0; ij0 < numroots; ++ij0)
{
IkReal htj0 = zeror[ij0];
tempj0array[0]=((IkReal(2.00000000000000))*(atan(htj0)));
for(int kj0 = 0; kj0 < 1; ++kj0)
{
j0array[numsolutions] = tempj0array[kj0];
if( j0array[numsolutions] > IKPI )
{
    j0array[numsolutions]-=IK2PI;
}
else if( j0array[numsolutions] < -IKPI )
{
    j0array[numsolutions]+=IK2PI;
}
sj0array[numsolutions] = IKsin(j0array[numsolutions]);
cj0array[numsolutions] = IKcos(j0array[numsolutions]);
numsolutions++;
}
}
bool j0valid[8]={true,true,true,true,true,true,true,true};
_nj0 = 8;
for(int ij0 = 0; ij0 < numsolutions; ++ij0)
    {
if( !j0valid[ij0] )
{
    continue;
}
    j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
htj0 = IKtan(j0/2);

_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < numsolutions; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
{
IkReal dummyeval[1];
IkReal gconst90;
gconst90=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x264=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.902500000000000))+(((IkReal(-1.00000000000000))*(x264))));
evalcond[2]=((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))));
evalcond[3]=((IkReal(-0.950000000000000))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[4]=((IkReal(0.0475000000000000))+(((IkReal(-1.00000000000000))*(x264)))+(((IkReal(-0.900000000000000))*(pz))));
evalcond[5]=((((cj0)*(px)))+(((py)*(sj0))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( IKabs(((((cj0)*(px)))+(((py)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x265=IKatan2(((((cj0)*(px)))+(((py)*(sj0)))), ((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py)))));
j2array[0]=((IkReal(-1.00000000000000))*(x265));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x265))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
IkReal x266=IKcos(j2);
IkReal x267=IKsin(j2);
IkReal x268=((IkReal(1.00000000000000))*(cj0));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(x266)*(x268)))+(((IkReal(-1.00000000000000))*(px)*(x267)*(x268)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x267)))+(((px)*(sj0)*(x266))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x269=((IkReal(1.00000000000000))*(pp));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.00250000000000000))+(((IkReal(-1.00000000000000))*(x269))));
evalcond[2]=((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))));
evalcond[3]=((IkReal(0.0500000000000000))+(((IkReal(-1.00000000000000))*(pz))));
evalcond[4]=((IkReal(0.0475000000000000))+(((IkReal(-1.00000000000000))*(x269)))+(((IkReal(-0.900000000000000))*(pz))));
evalcond[5]=((((cj0)*(px)))+(((py)*(sj0))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( IKabs(((((cj0)*(px)))+(((py)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x270=IKatan2(((((cj0)*(px)))+(((py)*(sj0)))), ((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py)))));
j2array[0]=((IkReal(-1.00000000000000))*(x270));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x270))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
IkReal x271=IKcos(j2);
IkReal x272=IKsin(j2);
IkReal x273=((IkReal(1.00000000000000))*(cj0));
evalcond[0]=((((px)*(sj0)*(x271)))+(((IkReal(-1.00000000000000))*(py)*(x271)*(x273)))+(((IkReal(-1.00000000000000))*(px)*(x272)*(x273)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x272))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x274=((IkReal(2.00000000000000))*(cj0));
IkReal x275=((IkReal(2.00000000000000))*(sj0));
if( IKabs(((gconst90)*(((((IkReal(-1.00000000000000))*(px)*(x275)))+(((py)*(x274))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst90)*(((((IkReal(-1.00000000000000))*(px)*(x274)))+(((IkReal(-1.00000000000000))*(py)*(x275))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst90)*(((((IkReal(-1.00000000000000))*(px)*(x275)))+(((py)*(x274)))))), ((gconst90)*(((((IkReal(-1.00000000000000))*(px)*(x274)))+(((IkReal(-1.00000000000000))*(py)*(x275)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x276=IKcos(j2);
IkReal x277=IKsin(j2);
IkReal x278=((cj0)*(px));
IkReal x279=((px)*(sj0));
IkReal x280=((IkReal(0.500000000000000))*(sj3));
IkReal x281=((py)*(sj0));
IkReal x282=((cj0)*(py));
IkReal x283=((IkReal(1.00000000000000))*(x277));
evalcond[0]=((x279)+(((IkReal(-1.00000000000000))*(x282)))+(((x277)*(x280))));
evalcond[1]=((x278)+(x281)+(((x276)*(x280))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x281)*(x283)))+(((IkReal(-1.00000000000000))*(x276)*(x282)))+(((x276)*(x279)))+(((IkReal(-1.00000000000000))*(x278)*(x283))));
evalcond[3]=((x280)+(((IkReal(-1.00000000000000))*(x282)*(x283)))+(((x277)*(x279)))+(((x276)*(x278)))+(((x276)*(x281))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x284=(sj1)*(sj1);
IkReal x285=((IkReal(0.900000000000000))*(sj1));
IkReal x286=((IkReal(0.810000000000000))*(x284));
if( IKabs(((px)*(x285))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((py)*(x285))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x287=((IkReal(1.00000000000000))*(IKatan2(((px)*(x285)), ((py)*(x285)))));
if( (((((x286)*((py)*(py))))+(((x286)*((px)*(px)))))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt(((((x286)*((py)*(py))))+(((x286)*((px)*(px)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x286)*((py)*(py))))+(((x286)*((px)*(px))))))))):(IkReal)1.0e30))*(((IkReal(0.0475000000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.900000000000000))*(cj1)*(pz))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt(((((x286)*((py)*(py))))+(((x286)*((px)*(px)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x286)*((py)*(py))))+(((x286)*((px)*(px))))))))):(IkReal)1.0e30))*(((IkReal(0.0475000000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.900000000000000))*(cj1)*(pz))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x288=IKasin(((((IKabs(IKabs(IKsqrt(((((x286)*((py)*(py))))+(((x286)*((px)*(px)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x286)*((py)*(py))))+(((x286)*((px)*(px))))))))):(IkReal)1.0e30))*(((IkReal(0.0475000000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.900000000000000))*(cj1)*(pz)))))));
j0array[0]=((((IkReal(-1.00000000000000))*(x288)))+(((IkReal(-1.00000000000000))*(x287))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(x288)+(((IkReal(-1.00000000000000))*(x287))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((IkReal(-0.450000000000000))+(((cj1)*(pz)))+(((px)*(sj1)*(IKcos(j0))))+(((IkReal(-0.500000000000000))*(cj3)))+(((py)*(sj1)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x289=((IkReal(1.00000000000000))*(pp));
IkReal x290=((cj1)*(pz));
IkReal x291=((py)*(sj0));
IkReal x292=((IkReal(1.00000000000000))*(cj1));
IkReal x293=((cj0)*(px)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.902500000000000))+(((IkReal(-1.00000000000000))*(x289))));
evalcond[2]=((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))));
evalcond[3]=((IkReal(-0.950000000000000))+(((sj1)*(x291)))+(x290)+(x293));
evalcond[4]=((IkReal(0.0475000000000000))+(((IkReal(0.900000000000000))*(sj1)*(x291)))+(((IkReal(0.900000000000000))*(x293)))+(((IkReal(0.900000000000000))*(x290)))+(((IkReal(-1.00000000000000))*(x289))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj0)*(px)*(x292)))+(((IkReal(-1.00000000000000))*(x291)*(x292)))+(((pz)*(sj1))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( IKabs(((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((cj0)*(cj1)*(px))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x294=IKatan2(((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py)))), ((((cj1)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((cj0)*(cj1)*(px)))));
j2array[0]=((IkReal(-1.00000000000000))*(x294));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x294))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
IkReal x295=IKcos(j2);
IkReal x296=IKsin(j2);
IkReal x297=((IkReal(1.00000000000000))*(cj1)*(x295));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj0)*(py)*(x296)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x297)))+(((pz)*(sj1)*(x295)))+(((px)*(sj0)*(x296)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x297))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x298=((IkReal(1.00000000000000))*(pp));
IkReal x299=((cj1)*(pz));
IkReal x300=((py)*(sj0));
IkReal x301=((IkReal(1.00000000000000))*(cj1));
IkReal x302=((cj0)*(px)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.00250000000000000))+(((IkReal(-1.00000000000000))*(x298))));
evalcond[2]=((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))));
evalcond[3]=((IkReal(0.0500000000000000))+(x302)+(x299)+(((sj1)*(x300))));
evalcond[4]=((IkReal(0.0475000000000000))+(((IkReal(-1.00000000000000))*(x298)))+(((IkReal(0.900000000000000))*(sj1)*(x300)))+(((IkReal(0.900000000000000))*(x299)))+(((IkReal(0.900000000000000))*(x302))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj0)*(px)*(x301)))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x300)*(x301))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( IKabs(((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((cj0)*(cj1)*(px))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x303=IKatan2(((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py)))), ((((cj1)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((cj0)*(cj1)*(px)))));
j2array[0]=((IkReal(-1.00000000000000))*(x303));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x303))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
IkReal x304=IKcos(j2);
IkReal x305=IKsin(j2);
IkReal x306=((IkReal(1.00000000000000))*(cj1)*(x304));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(sj0)*(x306)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x306)))+(((pz)*(sj1)*(x304)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(x305)))+(((px)*(sj0)*(x305))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x307=((IkReal(2.00000000000000))*(py));
IkReal x308=((IkReal(2.00000000000000))*(px));
if( IKabs(((gconst0)*(((((cj0)*(x307)))+(((IkReal(-1.00000000000000))*(sj0)*(x308))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((cj0)*(cj1)*(x308)))+(((IkReal(-2.00000000000000))*(pz)*(sj1)))+(((cj1)*(sj0)*(x307))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst0)*(((((cj0)*(x307)))+(((IkReal(-1.00000000000000))*(sj0)*(x308)))))), ((gconst0)*(((((cj0)*(cj1)*(x308)))+(((IkReal(-2.00000000000000))*(pz)*(sj1)))+(((cj1)*(sj0)*(x307)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x309=IKcos(j2);
IkReal x310=IKsin(j2);
IkReal x311=((IkReal(1.00000000000000))*(cj1));
IkReal x312=((IkReal(0.500000000000000))*(sj3));
IkReal x313=((px)*(sj0));
IkReal x314=((cj0)*(px));
IkReal x315=((IkReal(1.00000000000000))*(cj0));
IkReal x316=((pz)*(sj1));
IkReal x317=((sj0)*(x309));
IkReal x318=((py)*(x310));
evalcond[0]=((((x310)*(x312)))+(x313)+(((IkReal(-1.00000000000000))*(py)*(x315))));
evalcond[1]=((x316)+(((x309)*(x312)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x311)))+(((IkReal(-1.00000000000000))*(x311)*(x314))));
evalcond[2]=((((IkReal(-1.00000000000000))*(py)*(x309)*(x315)))+(((IkReal(-1.00000000000000))*(x310)*(x316)))+(((x309)*(x313)))+(((cj1)*(sj0)*(x318)))+(((cj1)*(x310)*(x314))));
evalcond[3]=((((x310)*(x313)))+(((IkReal(-1.00000000000000))*(x309)*(x311)*(x314)))+(x312)+(((x309)*(x316)))+(((IkReal(-1.00000000000000))*(py)*(x311)*(x317)))+(((IkReal(-1.00000000000000))*(x315)*(x318))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x319=(sj1)*(sj1);
if( IKabs(((px)*(sj1))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((py)*(sj1))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x320=((IkReal(1.00000000000000))*(IKatan2(((px)*(sj1)), ((py)*(sj1)))));
if( (((((x319)*((px)*(px))))+(((x319)*((py)*(py)))))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt(((((x319)*((px)*(px))))+(((x319)*((py)*(py)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x319)*((px)*(px))))+(((x319)*((py)*(py))))))))):(IkReal)1.0e30))*(((IkReal(-0.450000000000000))+(((cj1)*(pz)))+(((IkReal(-0.500000000000000))*(cj3))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt(((((x319)*((px)*(px))))+(((x319)*((py)*(py)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x319)*((px)*(px))))+(((x319)*((py)*(py))))))))):(IkReal)1.0e30))*(((IkReal(-0.450000000000000))+(((cj1)*(pz)))+(((IkReal(-0.500000000000000))*(cj3))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x321=IKasin(((((IKabs(IKabs(IKsqrt(((((x319)*((px)*(px))))+(((x319)*((py)*(py)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x319)*((px)*(px))))+(((x319)*((py)*(py))))))))):(IkReal)1.0e30))*(((IkReal(-0.450000000000000))+(((cj1)*(pz)))+(((IkReal(-0.500000000000000))*(cj3)))))));
j0array[0]=((((IkReal(-1.00000000000000))*(x320)))+(((IkReal(-1.00000000000000))*(x321))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x320)))+(x321));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x322=((IkReal(0.900000000000000))*(sj1));
evalcond[0]=((IkReal(0.0475000000000000))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.900000000000000))*(cj1)*(pz)))+(((px)*(x322)*(IKcos(j0))))+(((py)*(x322)*(IKsin(j0)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x323=((IkReal(1.00000000000000))*(pp));
IkReal x324=((cj1)*(pz));
IkReal x325=((py)*(sj0));
IkReal x326=((IkReal(1.00000000000000))*(cj1));
IkReal x327=((cj0)*(px)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.902500000000000))+(((IkReal(-1.00000000000000))*(x323))));
evalcond[2]=((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))));
evalcond[3]=((IkReal(-0.950000000000000))+(x324)+(x327)+(((sj1)*(x325))));
evalcond[4]=((IkReal(0.0475000000000000))+(((IkReal(-1.00000000000000))*(x323)))+(((IkReal(0.900000000000000))*(sj1)*(x325)))+(((IkReal(0.900000000000000))*(x327)))+(((IkReal(0.900000000000000))*(x324))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x325)*(x326)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x326)))+(((pz)*(sj1))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( IKabs(((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((cj0)*(cj1)*(px))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x328=IKatan2(((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py)))), ((((cj1)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((cj0)*(cj1)*(px)))));
j2array[0]=((IkReal(-1.00000000000000))*(x328));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x328))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
IkReal x329=IKcos(j2);
IkReal x330=IKsin(j2);
IkReal x331=((IkReal(1.00000000000000))*(cj1)*(x329));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(sj0)*(x331)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x331)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(x330)))+(((px)*(sj0)*(x330)))+(((pz)*(sj1)*(x329))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x332=((IkReal(1.00000000000000))*(pp));
IkReal x333=((cj1)*(pz));
IkReal x334=((py)*(sj0));
IkReal x335=((IkReal(1.00000000000000))*(cj1));
IkReal x336=((cj0)*(px)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.00250000000000000))+(((IkReal(-1.00000000000000))*(x332))));
evalcond[2]=((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))));
evalcond[3]=((IkReal(0.0500000000000000))+(x333)+(x336)+(((sj1)*(x334))));
evalcond[4]=((IkReal(0.0475000000000000))+(((IkReal(0.900000000000000))*(sj1)*(x334)))+(((IkReal(0.900000000000000))*(x333)))+(((IkReal(0.900000000000000))*(x336)))+(((IkReal(-1.00000000000000))*(x332))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj0)*(px)*(x335)))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x334)*(x335))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( IKabs(((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((cj0)*(cj1)*(px))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x337=IKatan2(((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py)))), ((((cj1)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((cj0)*(cj1)*(px)))));
j2array[0]=((IkReal(-1.00000000000000))*(x337));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x337))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
IkReal x338=IKcos(j2);
IkReal x339=IKsin(j2);
IkReal x340=((IkReal(1.00000000000000))*(cj1)*(x338));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj0)*(px)*(x340)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x340)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(x339)))+(((pz)*(sj1)*(x338)))+(((px)*(sj0)*(x339))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x341=((IkReal(2.00000000000000))*(py));
IkReal x342=((IkReal(2.00000000000000))*(px));
if( IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(sj0)*(x342)))+(((cj0)*(x341))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((cj0)*(cj1)*(x342)))+(((IkReal(-2.00000000000000))*(pz)*(sj1)))+(((cj1)*(sj0)*(x341))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst0)*(((((IkReal(-1.00000000000000))*(sj0)*(x342)))+(((cj0)*(x341)))))), ((gconst0)*(((((cj0)*(cj1)*(x342)))+(((IkReal(-2.00000000000000))*(pz)*(sj1)))+(((cj1)*(sj0)*(x341)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x343=IKcos(j2);
IkReal x344=IKsin(j2);
IkReal x345=((IkReal(1.00000000000000))*(cj1));
IkReal x346=((IkReal(0.500000000000000))*(sj3));
IkReal x347=((px)*(sj0));
IkReal x348=((cj0)*(px));
IkReal x349=((IkReal(1.00000000000000))*(cj0));
IkReal x350=((pz)*(sj1));
IkReal x351=((sj0)*(x343));
IkReal x352=((py)*(x344));
evalcond[0]=((x347)+(((x344)*(x346)))+(((IkReal(-1.00000000000000))*(py)*(x349))));
evalcond[1]=((x350)+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x345)))+(((IkReal(-1.00000000000000))*(x345)*(x348)))+(((x343)*(x346))));
evalcond[2]=((((IkReal(-1.00000000000000))*(py)*(x343)*(x349)))+(((cj1)*(x344)*(x348)))+(((x343)*(x347)))+(((cj1)*(sj0)*(x352)))+(((IkReal(-1.00000000000000))*(x344)*(x350))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x349)*(x352)))+(x346)+(((x344)*(x347)))+(((IkReal(-1.00000000000000))*(x343)*(x345)*(x348)))+(((IkReal(-1.00000000000000))*(py)*(x345)*(x351)))+(((x343)*(x350))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
IkReal x353=(sj1)*(sj1);
if( IKabs(((px)*(sj1))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((py)*(sj1))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x354=((IkReal(1.00000000000000))*(IKatan2(((px)*(sj1)), ((py)*(sj1)))));
if( (((((x353)*((px)*(px))))+(((x353)*((py)*(py)))))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt(((((x353)*((px)*(px))))+(((x353)*((py)*(py)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x353)*((px)*(px))))+(((x353)*((py)*(py))))))))):(IkReal)1.0e30))*(((IkReal(-0.450000000000000))+(((cj1)*(pz)))+(((IkReal(-0.500000000000000))*(cj3))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt(((((x353)*((px)*(px))))+(((x353)*((py)*(py)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x353)*((px)*(px))))+(((x353)*((py)*(py))))))))):(IkReal)1.0e30))*(((IkReal(-0.450000000000000))+(((cj1)*(pz)))+(((IkReal(-0.500000000000000))*(cj3))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x355=IKasin(((((IKabs(IKabs(IKsqrt(((((x353)*((px)*(px))))+(((x353)*((py)*(py)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x353)*((px)*(px))))+(((x353)*((py)*(py))))))))):(IkReal)1.0e30))*(((IkReal(-0.450000000000000))+(((cj1)*(pz)))+(((IkReal(-0.500000000000000))*(cj3)))))));
j0array[0]=((((IkReal(-1.00000000000000))*(x354)))+(((IkReal(-1.00000000000000))*(x355))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x354)))+(x355));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
IkReal x356=((IkReal(0.900000000000000))*(sj1));
evalcond[0]=((IkReal(0.0475000000000000))+(((px)*(x356)*(IKcos(j0))))+(((py)*(x356)*(IKsin(j0))))+(((IkReal(-1.00000000000000))*(pp)))+(((IkReal(0.900000000000000))*(cj1)*(pz))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x357=((IkReal(1.00000000000000))*(pp));
IkReal x358=((cj1)*(pz));
IkReal x359=((py)*(sj0));
IkReal x360=((IkReal(1.00000000000000))*(cj1));
IkReal x361=((cj0)*(px)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.902500000000000))+(((IkReal(-1.00000000000000))*(x357))));
evalcond[2]=((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))));
evalcond[3]=((IkReal(-0.950000000000000))+(x358)+(x361)+(((sj1)*(x359))));
evalcond[4]=((IkReal(0.0475000000000000))+(((IkReal(-1.00000000000000))*(x357)))+(((IkReal(0.900000000000000))*(sj1)*(x359)))+(((IkReal(0.900000000000000))*(x358)))+(((IkReal(0.900000000000000))*(x361))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj0)*(px)*(x360)))+(((IkReal(-1.00000000000000))*(x359)*(x360)))+(((pz)*(sj1))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( IKabs(((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((cj0)*(cj1)*(px))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x362=IKatan2(((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py)))), ((((cj1)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((cj0)*(cj1)*(px)))));
j2array[0]=((IkReal(-1.00000000000000))*(x362));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x362))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
IkReal x363=IKcos(j2);
IkReal x364=IKsin(j2);
IkReal x365=((IkReal(1.00000000000000))*(cj1)*(x363));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj0)*(py)*(x364)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x365)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x365)))+(((pz)*(sj1)*(x363)))+(((px)*(sj0)*(x364))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x366=((IkReal(1.00000000000000))*(pp));
IkReal x367=((cj1)*(pz));
IkReal x368=((py)*(sj0));
IkReal x369=((IkReal(1.00000000000000))*(cj1));
IkReal x370=((cj0)*(px)*(sj1));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(0.00250000000000000))+(((IkReal(-1.00000000000000))*(x366))));
evalcond[2]=((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))));
evalcond[3]=((IkReal(0.0500000000000000))+(((sj1)*(x368)))+(x370)+(x367));
evalcond[4]=((IkReal(0.0475000000000000))+(((IkReal(-1.00000000000000))*(x366)))+(((IkReal(0.900000000000000))*(sj1)*(x368)))+(((IkReal(0.900000000000000))*(x370)))+(((IkReal(0.900000000000000))*(x367))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj0)*(px)*(x369)))+(((pz)*(sj1)))+(((IkReal(-1.00000000000000))*(x368)*(x369))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
if( IKabs(((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj1)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((cj0)*(cj1)*(px))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x371=IKatan2(((((px)*(sj0)))+(((IkReal(-1.00000000000000))*(cj0)*(py)))), ((((cj1)*(py)*(sj0)))+(((IkReal(-1.00000000000000))*(pz)*(sj1)))+(((cj0)*(cj1)*(px)))));
j2array[0]=((IkReal(-1.00000000000000))*(x371));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
j2array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x371))));
sj2array[1]=IKsin(j2array[1]);
cj2array[1]=IKcos(j2array[1]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
if( j2array[1] > IKPI )
{
    j2array[1]-=IK2PI;
}
else if( j2array[1] < -IKPI )
{    j2array[1]+=IK2PI;
}
j2valid[1] = true;
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
IkReal x372=IKcos(j2);
IkReal x373=IKsin(j2);
IkReal x374=((IkReal(1.00000000000000))*(cj1)*(x372));
evalcond[0]=((((IkReal(-1.00000000000000))*(py)*(sj0)*(x374)))+(((IkReal(-1.00000000000000))*(cj0)*(py)*(x373)))+(((IkReal(-1.00000000000000))*(cj0)*(px)*(x374)))+(((pz)*(sj1)*(x372)))+(((px)*(sj0)*(x373))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
IkReal x375=((IkReal(2.00000000000000))*(py));
IkReal x376=((IkReal(2.00000000000000))*(px));
if( IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(sj0)*(x376)))+(((cj0)*(x375))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-2.00000000000000))*(pz)*(sj1)))+(((cj0)*(cj1)*(x376)))+(((cj1)*(sj0)*(x375))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst0)*(((((IkReal(-1.00000000000000))*(sj0)*(x376)))+(((cj0)*(x375)))))), ((gconst0)*(((((IkReal(-2.00000000000000))*(pz)*(sj1)))+(((cj0)*(cj1)*(x376)))+(((cj1)*(sj0)*(x375)))))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x377=IKcos(j2);
IkReal x378=IKsin(j2);
IkReal x379=((IkReal(1.00000000000000))*(cj1));
IkReal x380=((IkReal(0.500000000000000))*(sj3));
IkReal x381=((px)*(sj0));
IkReal x382=((cj0)*(px));
IkReal x383=((IkReal(1.00000000000000))*(cj0));
IkReal x384=((pz)*(sj1));
IkReal x385=((sj0)*(x377));
IkReal x386=((py)*(x378));
evalcond[0]=((((x378)*(x380)))+(((IkReal(-1.00000000000000))*(py)*(x383)))+(x381));
evalcond[1]=((((x377)*(x380)))+(((IkReal(-1.00000000000000))*(py)*(sj0)*(x379)))+(((IkReal(-1.00000000000000))*(x379)*(x382)))+(x384));
evalcond[2]=((((x377)*(x381)))+(((cj1)*(sj0)*(x386)))+(((IkReal(-1.00000000000000))*(x378)*(x384)))+(((cj1)*(x378)*(x382)))+(((IkReal(-1.00000000000000))*(py)*(x377)*(x383))));
evalcond[3]=((((x378)*(x381)))+(((x377)*(x384)))+(((IkReal(-1.00000000000000))*(py)*(x379)*(x385)))+(x380)+(((IkReal(-1.00000000000000))*(x377)*(x379)*(x382)))+(((IkReal(-1.00000000000000))*(x383)*(x386))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x127=((IkReal(1.00000000000000))*(cj3));
IkReal x128=((sj0)*(sj2));
IkReal x129=((cj2)*(sj1));
IkReal x130=((IkReal(1.00000000000000))*(sj3));
IkReal x131=((cj1)*(cj2));
IkReal x132=((sj1)*(sj2));
IkReal x133=((cj0)*(sj2));
IkReal x134=((IkReal(1.00000000000000))*(cj1));
IkReal x135=((((cj3)*(x131)))+(((IkReal(-1.00000000000000))*(sj1)*(x130))));
IkReal x136=((((cj0)*(cj2)))+(((IkReal(-1.00000000000000))*(x128)*(x134))));
IkReal x137=((((sj3)*(x131)))+(((cj3)*(sj1))));
IkReal x138=((((cj1)*(cj3)))+(((IkReal(-1.00000000000000))*(x129)*(x130))));
IkReal x139=((cj0)*(x135));
IkReal x140=((((IkReal(-1.00000000000000))*(x127)*(x129)))+(((IkReal(-1.00000000000000))*(cj1)*(x130))));
IkReal x141=((((IkReal(-1.00000000000000))*(cj2)*(sj0)))+(((IkReal(-1.00000000000000))*(x133)*(x134))));
IkReal x142=((((cj3)*(x133)))+(((sj0)*(x135))));
IkReal x143=((((cj0)*(x137)))+(((IkReal(-1.00000000000000))*(x128)*(x130))));
IkReal x144=((((sj3)*(x133)))+(((sj0)*(x137))));
IkReal x145=((x139)+(((IkReal(-1.00000000000000))*(cj3)*(x128))));
new_r00=((((r20)*(x140)))+(((r00)*(((x139)+(((IkReal(-1.00000000000000))*(x127)*(x128)))))))+(((r10)*(x142))));
new_r01=((((r01)*(x145)))+(((r21)*(x140)))+(((r11)*(x142))));
new_r02=((((r02)*(x145)))+(((r22)*(x140)))+(((r12)*(x142))));
new_r10=((((r00)*(x141)))+(((r20)*(x132)))+(((r10)*(x136))));
new_r11=((((r01)*(x141)))+(((r21)*(x132)))+(((r11)*(x136))));
new_r12=((((r22)*(x132)))+(((r12)*(x136)))+(((r02)*(x141))));
new_r20=((((r00)*(x143)))+(((r20)*(x138)))+(((r10)*(x144))));
new_r21=((((r01)*(x143)))+(((r21)*(x138)))+(((r11)*(x144))));
new_r22=((((r22)*(x138)))+(((r02)*(x143)))+(((r12)*(x144))));
{
IkReal j5array[2], cj5array[2], sj5array[2];
bool j5valid[2]={false};
_nj5 = 2;
cj5array[0]=new_r22;
if( cj5array[0] >= -1-IKFAST_SINCOS_THRESH && cj5array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j5valid[0] = j5valid[1] = true;
    j5array[0] = IKacos(cj5array[0]);
    sj5array[0] = IKsin(j5array[0]);
    cj5array[1] = cj5array[0];
    j5array[1] = -j5array[0];
    sj5array[1] = -sj5array[0];
}
else if( isnan(cj5array[0]) )
{
    // probably any value will work
    j5valid[0] = true;
    cj5array[0] = 1; sj5array[0] = 0; j5array[0] = 0;
}
for(int ij5 = 0; ij5 < 2; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 2; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];

{
IkReal dummyeval[1];
IkReal gconst92;
gconst92=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst91;
gconst91=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x146=IKatan2(new_r02, new_r12);
j4array[0]=((IkReal(-1.00000000000000))*(x146));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x146))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x147=IKsin(j6);
IkReal x148=((IkReal(1.00000000000000))*(sj4));
IkReal x149=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x147)))+(((IkReal(-1.00000000000000))*(new_r00)*(x148))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x148)))+(((IkReal(-1.00000000000000))*(x149)))+(((cj4)*(new_r11))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x147));
evalcond[3]=((((IkReal(-1.00000000000000))*(x149)))+(((cj4)*(new_r00)))+(((new_r10)*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x150=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x150;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x150;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x151=IKatan2(new_r02, new_r12);
j4array[0]=((IkReal(-1.00000000000000))*(x151));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x151))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
evalcond[0]=((((new_r12)*(IKcos(j4))))+(((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j4)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r01)))+(((new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x152=IKcos(j6);
IkReal x153=((IkReal(1.00000000000000))*(sj4));
IkReal x154=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x154)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x153))));
evalcond[1]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x152)))+(((IkReal(-1.00000000000000))*(new_r01)*(x153))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x154)))+(((cj4)*(new_r01)))+(((new_r11)*(sj4))));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(x152));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x155=((gconst91)*(sj5));
if( IKabs(((new_r12)*(x155))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x155))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r12)*(x155)), ((new_r02)*(x155)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x156=IKcos(j4);
IkReal x157=IKsin(j4);
IkReal x158=((IkReal(1.00000000000000))*(sj5));
IkReal x159=((IkReal(1.00000000000000))*(cj5));
IkReal x160=((new_r12)*(x157));
IkReal x161=((new_r02)*(x156));
evalcond[0]=((((new_r12)*(x156)))+(((IkReal(-1.00000000000000))*(new_r02)*(x157))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x158)))+(x160)+(x161));
evalcond[2]=((((cj5)*(x161)))+(((cj5)*(x160)))+(((IkReal(-1.00000000000000))*(new_r22)*(x158))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r20)*(x159)))+(((IkReal(-1.00000000000000))*(new_r10)*(x157)*(x158)))+(((IkReal(-1.00000000000000))*(new_r00)*(x156)*(x158))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x156)*(x158)))+(((IkReal(-1.00000000000000))*(new_r21)*(x159)))+(((IkReal(-1.00000000000000))*(new_r11)*(x157)*(x158))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x158)*(x161)))+(((IkReal(-1.00000000000000))*(x158)*(x160)))+(((IkReal(-1.00000000000000))*(new_r22)*(x159))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst93;
gconst93=IKsign(sj5);
dummyeval[0]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x162=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
IkReal x163=((((new_r12)*(sj4)))+(((cj4)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x162;
evalcond[5]=x162;
evalcond[6]=x163;
evalcond[7]=x163;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj4)*(new_r00)))+(((new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))))+IKsqr(((((cj4)*(new_r00)))+(((new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj4)))), ((((cj4)*(new_r00)))+(((new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x164=IKsin(j6);
IkReal x165=((IkReal(1.00000000000000))*(sj4));
IkReal x166=((IkReal(1.00000000000000))*(IKcos(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x165)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x164))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x166)))+(((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(new_r01)*(x165))));
evalcond[2]=((((cj4)*(new_r01)))+(((new_r11)*(sj4)))+(x164));
evalcond[3]=((((IkReal(-1.00000000000000))*(x166)))+(((cj4)*(new_r00)))+(((new_r10)*(sj4))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x167=((IkReal(1.00000000000000))+(new_r22));
IkReal x168=((cj4)*(new_r02));
IkReal x169=((new_r12)*(sj4));
IkReal x170=((((IkReal(-1.00000000000000))*(new_r02)*(sj4)))+(((cj4)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=x167;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x170;
evalcond[5]=x170;
evalcond[6]=((x168)+(x169));
evalcond[7]=((((IkReal(-1.00000000000000))*(x168)))+(((IkReal(-1.00000000000000))*(x169))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x167;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((((cj4)*(new_r01)))+(((new_r11)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j6array[0]=IKatan2(((((cj4)*(new_r01)))+(((new_r11)*(sj4)))), ((((IkReal(-1.00000000000000))*(cj4)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj4)))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x171=IKcos(j6);
IkReal x172=((IkReal(1.00000000000000))*(sj4));
IkReal x173=((IkReal(1.00000000000000))*(IKsin(j6)));
evalcond[0]=((((IkReal(-1.00000000000000))*(x173)))+(((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(new_r00)*(x172))));
evalcond[1]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x171)))+(((IkReal(-1.00000000000000))*(new_r01)*(x172))));
evalcond[2]=((((cj4)*(new_r01)))+(((IkReal(-1.00000000000000))*(x173)))+(((new_r11)*(sj4))));
evalcond[3]=((((cj4)*(new_r00)))+(((new_r10)*(sj4)))+(x171));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst93)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst93)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst93)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst93)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[8];
IkReal x174=IKsin(j6);
IkReal x175=IKcos(j6);
IkReal x176=((cj4)*(new_r01));
IkReal x177=((IkReal(1.00000000000000))*(sj5));
IkReal x178=((new_r10)*(sj4));
IkReal x179=((new_r11)*(sj4));
IkReal x180=((cj4)*(new_r00));
IkReal x181=((IkReal(1.00000000000000))*(sj4));
IkReal x182=((IkReal(1.00000000000000))*(x175));
evalcond[0]=((new_r20)+(((sj5)*(x175))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x174)*(x177)))+(new_r21));
evalcond[2]=((((cj4)*(new_r10)))+(((IkReal(-1.00000000000000))*(x174)))+(((IkReal(-1.00000000000000))*(new_r00)*(x181))));
evalcond[3]=((((cj4)*(new_r11)))+(((IkReal(-1.00000000000000))*(x182)))+(((IkReal(-1.00000000000000))*(new_r01)*(x181))));
evalcond[4]=((((cj5)*(x174)))+(x179)+(x176));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x182)))+(x178)+(x180));
evalcond[6]=((((cj5)*(x179)))+(((cj5)*(x176)))+(((IkReal(-1.00000000000000))*(new_r21)*(x177)))+(x174));
evalcond[7]=((((cj5)*(x178)))+(((cj5)*(x180)))+(((IkReal(-1.00000000000000))*(new_r20)*(x177)))+(((IkReal(-1.00000000000000))*(x182))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
if( IKabs(((gconst92)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst92)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst92)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst92)*(new_r20)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[2];
evalcond[0]=((new_r20)+(((sj5)*(IKcos(j6)))));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj5)*(IKsin(j6))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst94;
gconst94=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x183=((gconst94)*(sj5));
if( IKabs(((new_r12)*(x183))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x183))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((new_r12)*(x183)), ((new_r02)*(x183)));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[12];
IkReal x184=IKcos(j4);
IkReal x185=IKsin(j4);
IkReal x186=((IkReal(1.00000000000000))*(cj6));
IkReal x187=((IkReal(1.00000000000000))*(sj5));
IkReal x188=((IkReal(1.00000000000000))*(cj5));
IkReal x189=((new_r00)*(x184));
IkReal x190=((cj5)*(x185));
IkReal x191=((new_r11)*(x185));
IkReal x192=((cj5)*(x184));
IkReal x193=((new_r02)*(x184));
IkReal x194=((new_r12)*(x185));
IkReal x195=((new_r10)*(x185));
IkReal x196=((IkReal(1.00000000000000))*(x185));
IkReal x197=((new_r01)*(x184));
evalcond[0]=((((new_r12)*(x184)))+(((IkReal(-1.00000000000000))*(new_r02)*(x196))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x187)))+(x193)+(x194));
evalcond[2]=((((new_r10)*(x184)))+(((IkReal(-1.00000000000000))*(sj6)))+(((IkReal(-1.00000000000000))*(new_r00)*(x196))));
evalcond[3]=((((new_r11)*(x184)))+(((IkReal(-1.00000000000000))*(x186)))+(((IkReal(-1.00000000000000))*(new_r01)*(x196))));
evalcond[4]=((((cj5)*(sj6)))+(x191)+(x197));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj5)*(x186)))+(x195)+(x189));
evalcond[6]=((((new_r02)*(x192)))+(((new_r12)*(x190)))+(((IkReal(-1.00000000000000))*(new_r22)*(x187))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x187)*(x189)))+(((IkReal(-1.00000000000000))*(x187)*(x195)))+(((IkReal(-1.00000000000000))*(new_r20)*(x188))));
evalcond[8]=((((IkReal(-1.00000000000000))*(new_r21)*(x188)))+(((IkReal(-1.00000000000000))*(x187)*(x197)))+(((IkReal(-1.00000000000000))*(x187)*(x191))));
evalcond[9]=((((new_r11)*(x190)))+(((new_r01)*(x192)))+(sj6)+(((IkReal(-1.00000000000000))*(new_r21)*(x187))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22)*(x188)))+(((IkReal(-1.00000000000000))*(x187)*(x193)))+(((IkReal(-1.00000000000000))*(x187)*(x194))));
evalcond[11]=((((new_r10)*(x190)))+(((cj5)*(x189)))+(((IkReal(-1.00000000000000))*(x186)))+(((IkReal(-1.00000000000000))*(new_r20)*(x187))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots8(IkReal rawcoeffs[8+1], IkReal rawroots[8], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[8];
    const int maxsteps = 110;
    for(int i = 0; i < 8; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[8];
    IkReal err[8];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 8; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 8; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 8; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 8; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[8] = {false};
    for(int i = 0; i < 8; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 8; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "a3fc2a58c084beca1a6f29736b224a40"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE

int ik_solve(IkReal eerot[9], IkReal eetrans[3], std::vector<std::vector<IkReal> >& sol_joint, std::vector<IkReal> free_joint)
{
    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
	for(std::size_t i = 0; i < vfree.size(); ++i)
		vfree[i] = free_joint[i];
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        return -1;
    }

	sol_joint.resize(solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
		sol_joint[i].resize(solvalues.size());
        for( std::size_t j = 0; j < solvalues.size(); ++j)
			sol_joint[i][j] = solvalues[j];
    }
    return 0;
}

} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
