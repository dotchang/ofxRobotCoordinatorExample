/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 60 generated on 2012-09-02 07:43:56.274007
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==60);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_6DF3 {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKcos(j[6]);
x14=((IkReal(0.500000000000000))*(x0));
x15=((IkReal(0.0850000000000000))*(x8));
x16=((IkReal(1.00000000000000))*(x5));
x17=((IkReal(1.00000000000000))*(x4));
x18=((IkReal(1.00000000000000))*(x3));
x19=((IkReal(0.0850000000000000))*(x9));
x20=((IkReal(1.00000000000000))*(x11));
x21=((IkReal(1.00000000000000))*(x12));
x22=((IkReal(0.500000000000000))*(x3));
x23=((IkReal(1.00000000000000))*(x0));
x24=((IkReal(0.0850000000000000))*(x5));
x25=((x1)*(x2));
x26=((x6)*(x7));
x27=((x2)*(x7));
x28=((x1)*(x6));
x29=((x0)*(x7));
x30=((x3)*(x7));
x31=((x17)*(x3));
x32=((IkReal(1.00000000000000))*(x28));
x33=((x4)*(x7)*(x9));
x34=((x16)*(x29));
x35=((x23)*(x26));
x36=((x16)*(x30));
x37=((x18)*(x26));
x38=((((IkReal(-1.00000000000000))*(x31)))+(((x0)*(x25))));
x39=((((x0)*(x4)))+(((x25)*(x3))));
x40=((((IkReal(-1.00000000000000))*(x1)*(x31)))+(((x0)*(x2))));
x41=((((IkReal(-1.00000000000000))*(x32)))+(((x27)*(x5))));
x42=((x31)+(((IkReal(-1.00000000000000))*(x23)*(x25))));
x43=((((IkReal(-1.00000000000000))*(x0)*(x1)*(x17)))+(((IkReal(-1.00000000000000))*(x18)*(x2))));
x44=((((IkReal(-1.00000000000000))*(x0)*(x17)))+(((IkReal(-1.00000000000000))*(x18)*(x25))));
x45=((((x1)*(x16)))+(((IkReal(1.00000000000000))*(x2)*(x26))));
x46=((IkReal(-1.00000000000000))*(x45));
x47=((x39)*(x6));
x48=((x11)*(x41));
x49=((x38)*(x6));
x50=((x42)*(x5));
x51=((x44)*(x5));
x52=((((IkReal(-1.00000000000000))*(x34)))+(x49));
x53=((((IkReal(-1.00000000000000))*(x36)))+(x47));
x54=((((IkReal(-1.00000000000000))*(x35)))+(x50));
x55=((((IkReal(-1.00000000000000))*(x37)))+(x51));
x56=((((x4)*(x7)*(x8)))+(((x45)*(x9))));
x57=((((x46)*(x8)))+(x33));
x58=((x11)*(x55));
x59=((((x53)*(x8)))+(((x40)*(x9))));
x60=((((x9)*(((((IkReal(-1.00000000000000))*(x47)))+(x36)))))+(((x40)*(x8))));
x61=((((x43)*(x9)))+(((x52)*(x8))));
x62=((x12)*(x59));
x63=((((x9)*(((((IkReal(-1.00000000000000))*(x49)))+(x34)))))+(((x43)*(x8))));
eerot[0]=((((x10)*(x63)))+(((x13)*(((((x12)*(x61)))+(((x11)*(x54))))))));
eerot[1]=((((x13)*(x63)))+(((x10)*(((((IkReal(-1.00000000000000))*(x20)*(x54)))+(((IkReal(-1.00000000000000))*(x21)*(x61))))))));
eerot[2]=((((x11)*(x61)))+(((x12)*(((((IkReal(-1.00000000000000))*(x16)*(x42)))+(x35))))));
eetrans[0]=((((x5)*(((((x14)*(x25)))+(((IkReal(-1.00000000000000))*(x22)*(x4)))))))+(((x11)*(((((x19)*(x43)))+(((x15)*(x52)))))))+(((x14)*(x26)))+(((x12)*(((((IkReal(-1.00000000000000))*(x24)*(x42)))+(((IkReal(0.0850000000000000))*(x0)*(x26)))))))+(((IkReal(0.450000000000000))*(x29))));
eerot[3]=((((x13)*(((x58)+(x62)))))+(((x10)*(x60))));
eerot[4]=((((x13)*(x60)))+(((x10)*(((((IkReal(-1.00000000000000))*(x20)*(x55)))+(((IkReal(-1.00000000000000))*(x21)*(x59))))))));
eerot[5]=((((x12)*(((((IkReal(-1.00000000000000))*(x16)*(x44)))+(x37)))))+(((x11)*(x59))));
eetrans[1]=((((IkReal(0.450000000000000))*(x30)))+(((x22)*(x26)))+(((x11)*(((((x19)*(x40)))+(((x15)*(x53)))))))+(((x5)*(((((x22)*(x25)))+(((x14)*(x4)))))))+(((x12)*(((((IkReal(-1.00000000000000))*(x24)*(x44)))+(((IkReal(0.0850000000000000))*(x26)*(x3))))))));
eerot[6]=((((x13)*(((((x12)*(x57)))+(x48)))))+(((x10)*(x56))));
eerot[7]=((((x13)*(x56)))+(((x10)*(((((IkReal(-1.00000000000000))*(x20)*(x41)))+(((IkReal(-1.00000000000000))*(x21)*(x57))))))));
eerot[8]=((((x11)*(x57)))+(((x12)*(((((IkReal(-1.00000000000000))*(x16)*(x27)))+(x32))))));
eetrans[2]=((IkReal(0.315000000000000))+(((x12)*(((((IkReal(0.0850000000000000))*(x28)))+(((IkReal(-1.00000000000000))*(x24)*(x27)))))))+(((IkReal(-0.500000000000000))*(x27)*(x5)))+(((IkReal(0.500000000000000))*(x28)))+(((IkReal(0.450000000000000))*(x1)))+(((x11)*(((((x15)*(x46)))+(((x19)*(x4)*(x7))))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {3}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j4,cj4,sj4,htj4,j5,cj5,sj5,htj5,j6,cj6,sj6,htj6,j3,cj3,sj3,htj3,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij4[2], _nj4,_ij5[2], _nj5,_ij6[2], _nj6,_ij3[2], _nj3;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j5=numeric_limits<IkReal>::quiet_NaN(); _ij5[0] = -1; _ij5[1] = -1; _nj5 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij3[0] = -1; _ij3[1] = -1; _nj3 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j3=pfree[0]; cj3=cos(pfree[0]); sj3=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((px)+(((IkReal(-0.0850000000000000))*(r02))));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((IkReal(-0.0850000000000000))*(r12)))+(py));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((IkReal(-0.315000000000000))+(((IkReal(-0.0850000000000000))*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(1.00555555555556))*(sj3)))+(((IkReal(-2.22222222222222))*(pp)*(sj3)))+(((cj3)*(sj3))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
IkReal x64=((pp)*(sj3));
IkReal x65=((pz)*(sj3));
cj1array[0]=((((IKabs(((((IkReal(0.203625000000000))*(sj3)))+(((IkReal(-0.450000000000000))*(x64)))+(((IkReal(0.202500000000000))*(cj3)*(sj3))))) != 0)?((IkReal)1/(((((IkReal(0.203625000000000))*(sj3)))+(((IkReal(-0.450000000000000))*(x64)))+(((IkReal(0.202500000000000))*(cj3)*(sj3)))))):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(pz)*(x64)))+(((IkReal(0.452500000000000))*(x65)))+(((IkReal(0.450000000000000))*(cj3)*(x65))))));
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal x66=((sj1)*(sj3));
dummyeval[0]=((((IkReal(21.0526315789474))*(pp)*(x66)))+(x66));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj1;
dummyeval[1]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x67=((IKabs(sj1) != 0)?((IkReal)1/(sj1)):(IkReal)1.0e30);
IkReal x68=((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30);
IkReal x69=((cj1)*(x67)*(x68));
cj2array[0]=((((IkReal(0.900000000000000))*(x69)))+(((IkReal(-2.00000000000000))*(pz)*(x67)*(x68)))+(((cj3)*(x69))));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
IkReal x70=IKcos(j2);
IkReal x71=((cj1)*(cj3));
IkReal x72=((sj1)*(sj3)*(x70));
evalcond[0]=((((IkReal(0.900000000000000))*(cj3)*(pz)))+(pz)+(((IkReal(-0.450000000000000))*(cj1)))+(((IkReal(0.0475000000000000))*(x72)))+(((pp)*(x72)))+(((IkReal(-1.00000000000000))*(pp)*(x71)))+(((IkReal(-0.452500000000000))*(x71))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((IkReal(2.00000000000000))*((py)*(py))))+(((IkReal(2.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x73=((px)*(sj3));
IkReal x74=((cj1)*(cj2));
IkReal x75=((py)*(sj1));
IkReal x76=((px)*(sj1));
IkReal x77=((py)*(sj3));
if( IKabs(((gconst0)*(((((IkReal(0.900000000000000))*(x75)))+(((cj3)*(x75)))+(((IkReal(-1.00000000000000))*(sj2)*(x73)))+(((x74)*(x77))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((sj2)*(x77)))+(((IkReal(0.900000000000000))*(x76)))+(((cj3)*(x76)))+(((x73)*(x74))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst0)*(((((IkReal(0.900000000000000))*(x75)))+(((cj3)*(x75)))+(((IkReal(-1.00000000000000))*(sj2)*(x73)))+(((x74)*(x77)))))), ((gconst0)*(((((sj2)*(x77)))+(((IkReal(0.900000000000000))*(x76)))+(((cj3)*(x76)))+(((x73)*(x74)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x78=IKcos(j0);
IkReal x79=IKsin(j0);
IkReal x80=((IkReal(0.500000000000000))*(sj3));
IkReal x81=((IkReal(1.00000000000000))*(x78));
evalcond[0]=((((sj2)*(x80)))+(((IkReal(-1.00000000000000))*(py)*(x81)))+(((px)*(x79))));
evalcond[1]=((((IkReal(0.450000000000000))*(sj1)))+(((IkReal(0.500000000000000))*(cj3)*(sj1)))+(((cj1)*(cj2)*(x80)))+(((IkReal(-1.00000000000000))*(px)*(x81)))+(((IkReal(-1.00000000000000))*(py)*(x79))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal x82=(sj2)*(sj2);
IkReal x83=(cj2)*(cj2);
IkReal x84=(sj1)*(sj1);
IkReal x85=(cj1)*(cj1);
IkReal x86=((cj0)*(sj3));
IkReal x87=((cj1)*(cj2));
IkReal x88=((IkReal(1.00000000000000))*(sj3));
IkReal x89=((cj1)*(r21));
IkReal x90=((r01)*(sj0));
IkReal x91=((sj2)*(x84));
IkReal x92=((cj3)*(x82));
IkReal x93=((cj0)*(r01)*(sj1));
IkReal x94=((r11)*(sj0)*(sj1));
IkReal x95=((sj2)*(x85));
IkReal x96=((cj3)*(x83));
dummyeval[0]=((((x89)*(x96)))+(((x89)*(x92)))+(((x92)*(x93)))+(((x92)*(x94)))+(((IkReal(-1.00000000000000))*(cj2)*(r21)*(sj1)*(x88)))+(((r01)*(x86)*(x87)))+(((x93)*(x96)))+(((r11)*(x86)*(x91)))+(((r11)*(x86)*(x95)))+(((r11)*(sj0)*(sj3)*(x87)))+(((IkReal(-1.00000000000000))*(x88)*(x90)*(x91)))+(((IkReal(-1.00000000000000))*(x88)*(x90)*(x95)))+(((x94)*(x96))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x97=(sj2)*(sj2);
IkReal x98=(cj2)*(cj2);
IkReal x99=(sj1)*(sj1);
IkReal x100=(cj1)*(cj1);
IkReal x101=((cj1)*(cj3));
IkReal x102=((r00)*(sj3));
IkReal x103=((IkReal(16.0000000000000))*(sj0));
IkReal x104=((IkReal(8.00000000000000))*(cj0));
IkReal x105=((cj1)*(cj2));
IkReal x106=((r10)*(sj3));
IkReal x107=((IkReal(4.00000000000000))*(sj3));
IkReal x108=((r01)*(sj0));
IkReal x109=((IkReal(16.0000000000000))*(cj0));
IkReal x110=((cj0)*(r11));
IkReal x111=((cj2)*(sj1));
IkReal x112=((IkReal(8.00000000000000))*(sj0));
IkReal x113=((r20)*(sj3));
IkReal x114=((IkReal(16.0000000000000))*(x97));
IkReal x115=((IkReal(4.00000000000000))*(x98));
IkReal x116=((cj0)*(cj3)*(sj1));
IkReal x117=((sj2)*(x100));
IkReal x118=((r00)*(x98));
IkReal x119=((IkReal(8.00000000000000))*(x97));
IkReal x120=((sj2)*(x99));
IkReal x121=((cj3)*(sj0)*(sj1));
IkReal x122=((IkReal(4.00000000000000))*(x97));
IkReal x123=((r10)*(x98));
IkReal x124=((r20)*(x98));
IkReal x125=((((x107)*(x108)*(x120)))+(((x107)*(x108)*(x117)))+(((r21)*(x107)*(x111))));
IkReal x126=((((r21)*(x101)*(x115)))+(((r01)*(x115)*(x116)))+(((r21)*(x101)*(x122)))+(((r11)*(x121)*(x122)))+(((cj0)*(r01)*(x105)*(x107)))+(((x107)*(x110)*(x120)))+(((r01)*(x116)*(x122)))+(((x107)*(x110)*(x117)))+(((r11)*(sj0)*(x105)*(x107)))+(((r11)*(x115)*(x121))));
IkReal x127=((((IkReal(-1.00000000000000))*(x125)))+(x126));
IkReal x128=((((IkReal(-8.00000000000000))*(x101)*(x124)))+(((x102)*(x112)*(x120)))+(((x102)*(x112)*(x117)))+(((IkReal(-1.00000000000000))*(x104)*(x106)*(x117)))+(((IkReal(-1.00000000000000))*(x104)*(x106)*(x120)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(sj1)*(x104)*(x97)))+(((IkReal(-1.00000000000000))*(x102)*(x104)*(x105)))+(((IkReal(-1.00000000000000))*(r20)*(x101)*(x119)))+(((IkReal(-1.00000000000000))*(cj3)*(sj1)*(x104)*(x118)))+(((IkReal(8.00000000000000))*(x111)*(x113)))+(((IkReal(-1.00000000000000))*(cj3)*(r10)*(sj1)*(x112)*(x97)))+(((IkReal(-1.00000000000000))*(cj3)*(sj1)*(x112)*(x123)))+(((IkReal(-1.00000000000000))*(x105)*(x106)*(x112))));
IkReal x129=((((IkReal(-1.00000000000000))*(x126)))+(x125));
op[0]=x127;
op[1]=x128;
op[2]=x127;
op[3]=((((IkReal(16.0000000000000))*(x111)*(x113)))+(((x102)*(x103)*(x117)))+(((IkReal(-1.00000000000000))*(cj3)*(sj1)*(x103)*(x123)))+(((IkReal(-1.00000000000000))*(x103)*(x105)*(x106)))+(((IkReal(-16.0000000000000))*(x101)*(x124)))+(((IkReal(-1.00000000000000))*(cj3)*(sj1)*(x109)*(x118)))+(((IkReal(-1.00000000000000))*(r20)*(x101)*(x114)))+(((IkReal(-1.00000000000000))*(x102)*(x105)*(x109)))+(((IkReal(-1.00000000000000))*(x106)*(x109)*(x117)))+(((IkReal(-1.00000000000000))*(x106)*(x109)*(x120)))+(((x102)*(x103)*(x120)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(sj1)*(x109)*(x97)))+(((IkReal(-1.00000000000000))*(cj3)*(r10)*(sj1)*(x103)*(x97))));
op[4]=x129;
op[5]=x128;
op[6]=x129;
polyroots6(op,zeror,numroots);
IkReal j6array[6], cj6array[6], sj6array[6], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((IkReal(2.00000000000000))*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[6]={true,true,true,true,true,true};
_nj6 = 6;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x130=((cj3)*(sj1));
gconst1=IKsign(((((cj1)*(cj2)*(sj3)))+(((x130)*((sj2)*(sj2))))+(((x130)*((cj2)*(cj2))))));
IkReal x131=((cj3)*(sj1));
dummyeval[0]=((((cj1)*(cj2)*(sj3)))+(((x131)*((sj2)*(sj2))))+(((x131)*((cj2)*(cj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
IkReal x132=((r21)*(sj6));
IkReal x133=((cj0)*(r12));
IkReal x134=((cj6)*(r22));
IkReal x135=((IkReal(1.00000000000000))*(sj0));
IkReal x136=((r22)*(sj6));
IkReal x137=((cj6)*(r20));
gconst2=IKsign(((((r01)*(sj0)*(x136)))+(((IkReal(-1.00000000000000))*(r02)*(x132)*(x135)))+(((IkReal(-1.00000000000000))*(cj0)*(r11)*(x136)))+(((cj0)*(r10)*(x134)))+(((IkReal(-1.00000000000000))*(r00)*(x134)*(x135)))+(((r02)*(sj0)*(x137)))+(((IkReal(-1.00000000000000))*(x133)*(x137)))+(((x132)*(x133)))));
IkReal x138=((r21)*(sj6));
IkReal x139=((cj0)*(r12));
IkReal x140=((cj6)*(r22));
IkReal x141=((IkReal(1.00000000000000))*(sj0));
IkReal x142=((r22)*(sj6));
IkReal x143=((cj6)*(r20));
dummyeval[0]=((((x138)*(x139)))+(((IkReal(-1.00000000000000))*(cj0)*(r11)*(x142)))+(((r02)*(sj0)*(x143)))+(((cj0)*(r10)*(x140)))+(((IkReal(-1.00000000000000))*(r00)*(x140)*(x141)))+(((IkReal(-1.00000000000000))*(x139)*(x143)))+(((IkReal(-1.00000000000000))*(r02)*(x138)*(x141)))+(((r01)*(sj0)*(x142))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x144=((IkReal(1.00000000000000))*(sj3));
IkReal x145=((cj2)*(sj1));
IkReal x146=((cj0)*(r12));
IkReal x147=((r01)*(sj6));
IkReal x148=((sj0)*(sj3));
IkReal x149=((sj3)*(sj6));
IkReal x150=((cj0)*(r11));
IkReal x151=((cj1)*(cj3));
IkReal x152=((cj6)*(r00));
IkReal x153=((sj0)*(x151));
IkReal x154=((cj0)*(cj6)*(r10));
if( IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(r02)*(x153)))+(((IkReal(-1.00000000000000))*(x144)*(x145)*(x146)))+(((x146)*(x151)))+(((IkReal(-1.00000000000000))*(r22)*(sj2)*(x144)))+(((r02)*(x145)*(x148))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(x152)*(x153)))+(((x151)*(x154)))+(((IkReal(-1.00000000000000))*(x144)*(x145)*(x154)))+(((IkReal(-1.00000000000000))*(cj6)*(r20)*(sj2)*(x144)))+(((x147)*(x153)))+(((x145)*(x148)*(x152)))+(((x145)*(x149)*(x150)))+(((r21)*(sj2)*(x149)))+(((IkReal(-1.00000000000000))*(sj6)*(x150)*(x151)))+(((IkReal(-1.00000000000000))*(sj0)*(x144)*(x145)*(x147))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst2)*(((((IkReal(-1.00000000000000))*(r02)*(x153)))+(((IkReal(-1.00000000000000))*(x144)*(x145)*(x146)))+(((x146)*(x151)))+(((IkReal(-1.00000000000000))*(r22)*(sj2)*(x144)))+(((r02)*(x145)*(x148)))))), ((gconst2)*(((((IkReal(-1.00000000000000))*(x152)*(x153)))+(((x151)*(x154)))+(((IkReal(-1.00000000000000))*(x144)*(x145)*(x154)))+(((IkReal(-1.00000000000000))*(cj6)*(r20)*(sj2)*(x144)))+(((x147)*(x153)))+(((x145)*(x148)*(x152)))+(((x145)*(x149)*(x150)))+(((r21)*(sj2)*(x149)))+(((IkReal(-1.00000000000000))*(sj6)*(x150)*(x151)))+(((IkReal(-1.00000000000000))*(sj0)*(x144)*(x145)*(x147)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x155=IKsin(j5);
IkReal x156=IKcos(j5);
IkReal x157=((cj2)*(sj3));
IkReal x158=((IkReal(1.00000000000000))*(sj6));
IkReal x159=((cj6)*(r00));
IkReal x160=((cj6)*(r10));
IkReal x161=((cj0)*(x155));
IkReal x162=((sj6)*(x155));
IkReal x163=((sj0)*(x155));
IkReal x164=((r02)*(x156));
IkReal x165=((IkReal(1.00000000000000))*(r12)*(x156));
evalcond[0]=((((sj1)*(x157)))+(((IkReal(-1.00000000000000))*(cj1)*(cj3)))+(((IkReal(-1.00000000000000))*(cj6)*(r20)*(x155)))+(((r21)*(x162)))+(((r22)*(x156))));
evalcond[1]=((((sj2)*(sj3)))+(((sj0)*(x164)))+(((IkReal(-1.00000000000000))*(r11)*(x158)*(x161)))+(((IkReal(-1.00000000000000))*(cj0)*(x165)))+(((IkReal(-1.00000000000000))*(x159)*(x163)))+(((r01)*(sj0)*(x162)))+(((x160)*(x161))));
evalcond[2]=((((IkReal(-1.00000000000000))*(r11)*(x158)*(x163)))+(((IkReal(-1.00000000000000))*(r01)*(x158)*(x161)))+(((cj1)*(x157)))+(((x159)*(x161)))+(((IkReal(-1.00000000000000))*(cj0)*(x164)))+(((x160)*(x163)))+(((cj3)*(sj1)))+(((IkReal(-1.00000000000000))*(sj0)*(x165))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst3;
IkReal x166=((cj3)*(sj1));
gconst3=IKsign(((((x166)*((cj2)*(cj2))))+(((cj1)*(cj2)*(sj3)))+(((x166)*((sj2)*(sj2))))));
IkReal x167=((cj3)*(sj1));
dummyeval[0]=((((x167)*((cj2)*(cj2))))+(((cj1)*(cj2)*(sj3)))+(((x167)*((sj2)*(sj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x168=((sj1)*(sj2));
IkReal x169=((cj1)*(sj3));
IkReal x170=((cj6)*(r21));
IkReal x171=((r20)*(sj6));
IkReal x172=((cj3)*(sj2));
IkReal x173=((cj6)*(r01)*(sj0));
IkReal x174=((cj0)*(r10)*(sj6));
IkReal x175=((cj2)*(cj3)*(sj1));
IkReal x176=((r00)*(sj0)*(sj6));
IkReal x177=((cj0)*(cj6)*(r11));
if( IKabs(((gconst3)*(((((x168)*(x173)))+(((x168)*(x176)))+(((IkReal(-1.00000000000000))*(x168)*(x177)))+(((IkReal(-1.00000000000000))*(x168)*(x174)))+(((cj2)*(x171)))+(((cj2)*(x170))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(x169)*(x176)))+(((IkReal(-1.00000000000000))*(x169)*(x173)))+(((x169)*(x174)))+(((x169)*(x177)))+(((x175)*(x177)))+(((x174)*(x175)))+(((x171)*(x172)))+(((x170)*(x172)))+(((IkReal(-1.00000000000000))*(x173)*(x175)))+(((IkReal(-1.00000000000000))*(x175)*(x176))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst3)*(((((x168)*(x173)))+(((x168)*(x176)))+(((IkReal(-1.00000000000000))*(x168)*(x177)))+(((IkReal(-1.00000000000000))*(x168)*(x174)))+(((cj2)*(x171)))+(((cj2)*(x170)))))), ((gconst3)*(((((IkReal(-1.00000000000000))*(x169)*(x176)))+(((IkReal(-1.00000000000000))*(x169)*(x173)))+(((x169)*(x174)))+(((x169)*(x177)))+(((x175)*(x177)))+(((x174)*(x175)))+(((x171)*(x172)))+(((x170)*(x172)))+(((IkReal(-1.00000000000000))*(x173)*(x175)))+(((IkReal(-1.00000000000000))*(x175)*(x176)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x178=IKsin(j4);
IkReal x179=IKcos(j4);
IkReal x180=((IkReal(1.00000000000000))*(cj6));
IkReal x181=((cj0)*(r01));
IkReal x182=((IkReal(1.00000000000000))*(sj1));
IkReal x183=((sj0)*(sj5));
IkReal x184=((cj5)*(sj0));
IkReal x185=((IkReal(1.00000000000000))*(cj1));
IkReal x186=((cj5)*(sj6));
IkReal x187=((cj0)*(cj5));
IkReal x188=((r00)*(sj6));
IkReal x189=((IkReal(1.00000000000000))*(cj0));
IkReal x190=((r10)*(sj6));
IkReal x191=((sj3)*(x179));
IkReal x192=((sj2)*(x178));
IkReal x193=((cj2)*(x178));
IkReal x194=((r11)*(x186));
IkReal x195=((sj3)*(x178));
IkReal x196=((sj2)*(x179));
IkReal x197=((cj2)*(cj3)*(x179));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x182)*(x193)))+(((IkReal(-1.00000000000000))*(x185)*(x195)))+(((cj6)*(r21)))+(((IkReal(-1.00000000000000))*(x182)*(x196)))+(((r20)*(sj6))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj0)*(r11)*(x180)))+(((IkReal(-1.00000000000000))*(cj3)*(x192)))+(((IkReal(-1.00000000000000))*(x189)*(x190)))+(((cj6)*(r01)*(sj0)))+(((sj0)*(x188)))+(((cj2)*(x179))));
evalcond[2]=((((sj1)*(x197)))+(((r22)*(sj5)))+(((cj5)*(cj6)*(r20)))+(((cj1)*(x191)))+(((IkReal(-1.00000000000000))*(r21)*(x186)))+(((IkReal(-1.00000000000000))*(x182)*(x192))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x188)*(x189)))+(((sj1)*(x195)))+(((IkReal(-1.00000000000000))*(x180)*(x181)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x180)))+(((IkReal(-1.00000000000000))*(x185)*(x196)))+(((IkReal(-1.00000000000000))*(cj3)*(x185)*(x193)))+(((IkReal(-1.00000000000000))*(sj0)*(x190))));
evalcond[4]=((((cj6)*(r00)*(x184)))+(((cj0)*(x194)))+(((IkReal(-1.00000000000000))*(r12)*(sj5)*(x189)))+(x193)+(((IkReal(-1.00000000000000))*(r01)*(sj6)*(x184)))+(((cj3)*(x196)))+(((r02)*(x183)))+(((IkReal(-1.00000000000000))*(r10)*(x180)*(x187))));
evalcond[5]=((((cj1)*(x197)))+(((IkReal(-1.00000000000000))*(x185)*(x192)))+(((r11)*(sj6)*(x184)))+(((IkReal(-1.00000000000000))*(r02)*(sj5)*(x189)))+(((IkReal(-1.00000000000000))*(r00)*(x180)*(x187)))+(((IkReal(-1.00000000000000))*(r10)*(x180)*(x184)))+(((IkReal(-1.00000000000000))*(x182)*(x191)))+(((x181)*(x186)))+(((IkReal(-1.00000000000000))*(r12)*(x183))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x198=((sj1)*(sj2));
IkReal x199=((cj1)*(sj3));
IkReal x200=((cj6)*(r21));
IkReal x201=((r20)*(sj6));
IkReal x202=((cj3)*(sj2));
IkReal x203=((cj6)*(r01)*(sj0));
IkReal x204=((cj0)*(r10)*(sj6));
IkReal x205=((cj2)*(cj3)*(sj1));
IkReal x206=((r00)*(sj0)*(sj6));
IkReal x207=((cj0)*(cj6)*(r11));
if( IKabs(((gconst1)*(((((x198)*(x203)))+(((x198)*(x206)))+(((cj2)*(x201)))+(((cj2)*(x200)))+(((IkReal(-1.00000000000000))*(x198)*(x207)))+(((IkReal(-1.00000000000000))*(x198)*(x204))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((x205)*(x207)))+(((x200)*(x202)))+(((x201)*(x202)))+(((IkReal(-1.00000000000000))*(x205)*(x206)))+(((x204)*(x205)))+(((IkReal(-1.00000000000000))*(x203)*(x205)))+(((IkReal(-1.00000000000000))*(x199)*(x203)))+(((IkReal(-1.00000000000000))*(x199)*(x206)))+(((x199)*(x204)))+(((x199)*(x207))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst1)*(((((x198)*(x203)))+(((x198)*(x206)))+(((cj2)*(x201)))+(((cj2)*(x200)))+(((IkReal(-1.00000000000000))*(x198)*(x207)))+(((IkReal(-1.00000000000000))*(x198)*(x204)))))), ((gconst1)*(((((x205)*(x207)))+(((x200)*(x202)))+(((x201)*(x202)))+(((IkReal(-1.00000000000000))*(x205)*(x206)))+(((x204)*(x205)))+(((IkReal(-1.00000000000000))*(x203)*(x205)))+(((IkReal(-1.00000000000000))*(x199)*(x203)))+(((IkReal(-1.00000000000000))*(x199)*(x206)))+(((x199)*(x204)))+(((x199)*(x207)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x208=IKsin(j4);
IkReal x209=IKcos(j4);
IkReal x210=((cj2)*(cj3));
IkReal x211=((IkReal(1.00000000000000))*(cj0));
IkReal x212=((cj6)*(r01));
IkReal x213=((r10)*(sj6));
IkReal x214=((IkReal(1.00000000000000))*(sj2));
IkReal x215=((cj6)*(r11));
IkReal x216=((r00)*(sj6));
IkReal x217=((IkReal(1.00000000000000))*(sj0));
IkReal x218=((sj1)*(x208));
IkReal x219=((IkReal(1.00000000000000))*(cj1)*(x208));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj3)*(x219)))+(((cj6)*(r21)))+(((r20)*(sj6)))+(((IkReal(-1.00000000000000))*(x210)*(x218)))+(((IkReal(-1.00000000000000))*(sj1)*(x209)*(x214))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj3)*(x208)*(x214)))+(((cj2)*(x209)))+(((sj0)*(x216)))+(((sj0)*(x212)))+(((IkReal(-1.00000000000000))*(x211)*(x215)))+(((IkReal(-1.00000000000000))*(x211)*(x213))));
evalcond[2]=((((sj3)*(x218)))+(((IkReal(-1.00000000000000))*(x210)*(x219)))+(((IkReal(-1.00000000000000))*(cj1)*(x209)*(x214)))+(((IkReal(-1.00000000000000))*(x211)*(x212)))+(((IkReal(-1.00000000000000))*(x211)*(x216)))+(((IkReal(-1.00000000000000))*(x213)*(x217)))+(((IkReal(-1.00000000000000))*(x215)*(x217))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((IkReal(-2.00000000000000))*(cj6)*(r20)*(r21)*(sj6)))+((r22)*(r22))+((((cj6)*(cj6))*((r20)*(r20))))+((((r21)*(r21))*((sj6)*(sj6))))));
dummyeval[0]=((((IkReal(-2.00000000000000))*(cj6)*(r20)*(r21)*(sj6)))+((r22)*(r22))+((((cj6)*(cj6))*((r20)*(r20))))+((((r21)*(r21))*((sj6)*(sj6)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x220=((cj6)*(r20));
IkReal x221=((IkReal(1.00000000000000))*(cj1));
IkReal x222=((IkReal(1.00000000000000))*(sj3));
IkReal x223=((cj4)*(r22));
IkReal x224=((cj3)*(cj4));
IkReal x225=((cj4)*(sj3));
IkReal x226=((cj2)*(sj1));
IkReal x227=((sj1)*(sj2)*(sj4));
IkReal x228=((IkReal(1.00000000000000))*(x226));
IkReal x229=((cj1)*(r21)*(sj6));
IkReal x230=((r21)*(sj6)*(x226));
if( IKabs(((gconst4)*(((((sj3)*(x220)*(x226)))+(((cj3)*(x229)))+(((IkReal(-1.00000000000000))*(cj3)*(x220)*(x221)))+(((IkReal(-1.00000000000000))*(sj3)*(x221)*(x223)))+(((IkReal(-1.00000000000000))*(cj3)*(x223)*(x228)))+(((r22)*(x227)))+(((IkReal(-1.00000000000000))*(x222)*(x230))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((x225)*(x229)))+(((IkReal(-1.00000000000000))*(r22)*(x222)*(x226)))+(((IkReal(-1.00000000000000))*(x220)*(x224)*(x228)))+(((x220)*(x227)))+(((IkReal(-1.00000000000000))*(x220)*(x221)*(x225)))+(((x224)*(x230)))+(((cj1)*(cj3)*(r22)))+(((IkReal(-1.00000000000000))*(r21)*(sj6)*(x227))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst4)*(((((sj3)*(x220)*(x226)))+(((cj3)*(x229)))+(((IkReal(-1.00000000000000))*(cj3)*(x220)*(x221)))+(((IkReal(-1.00000000000000))*(sj3)*(x221)*(x223)))+(((IkReal(-1.00000000000000))*(cj3)*(x223)*(x228)))+(((r22)*(x227)))+(((IkReal(-1.00000000000000))*(x222)*(x230)))))), ((gconst4)*(((((x225)*(x229)))+(((IkReal(-1.00000000000000))*(r22)*(x222)*(x226)))+(((IkReal(-1.00000000000000))*(x220)*(x224)*(x228)))+(((x220)*(x227)))+(((IkReal(-1.00000000000000))*(x220)*(x221)*(x225)))+(((x224)*(x230)))+(((cj1)*(cj3)*(r22)))+(((IkReal(-1.00000000000000))*(r21)*(sj6)*(x227)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x231=IKsin(j5);
IkReal x232=IKcos(j5);
IkReal x233=((cj3)*(sj1));
IkReal x234=((r21)*(sj6));
IkReal x235=((cj0)*(r12));
IkReal x236=((r11)*(sj6));
IkReal x237=((cj6)*(r00));
IkReal x238=((cj0)*(r02));
IkReal x239=((cj2)*(sj3));
IkReal x240=((cj6)*(r10));
IkReal x241=((r01)*(sj6));
IkReal x242=((IkReal(1.00000000000000))*(cj1));
IkReal x243=((r12)*(sj0));
IkReal x244=((sj2)*(sj4));
IkReal x245=((cj6)*(r20));
IkReal x246=((IkReal(1.00000000000000))*(sj1));
IkReal x247=((cj3)*(cj4));
IkReal x248=((cj4)*(sj3));
IkReal x249=((IkReal(1.00000000000000))*(x232));
IkReal x250=((sj0)*(x232));
IkReal x251=((IkReal(1.00000000000000))*(x231));
IkReal x252=((cj0)*(x232));
IkReal x253=((cj0)*(x231));
IkReal x254=((sj0)*(x231));
evalcond[0]=((((sj1)*(x239)))+(((IkReal(-1.00000000000000))*(cj3)*(x242)))+(((IkReal(-1.00000000000000))*(x245)*(x251)))+(((x231)*(x234)))+(((r22)*(x232))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x234)*(x249)))+(((cj1)*(x248)))+(((x232)*(x245)))+(((cj2)*(cj4)*(x233)))+(((IkReal(-1.00000000000000))*(x244)*(x246)))+(((r22)*(x231))));
evalcond[2]=((((sj2)*(sj3)))+(((x241)*(x254)))+(((IkReal(-1.00000000000000))*(sj0)*(x237)*(x251)))+(((IkReal(-1.00000000000000))*(cj0)*(x236)*(x251)))+(((IkReal(-1.00000000000000))*(x235)*(x249)))+(((x240)*(x253)))+(((r02)*(x250))));
evalcond[3]=((((cj2)*(sj4)))+(((IkReal(-1.00000000000000))*(x235)*(x251)))+(((IkReal(-1.00000000000000))*(sj0)*(x241)*(x249)))+(((sj2)*(x247)))+(((IkReal(-1.00000000000000))*(cj0)*(x240)*(x249)))+(((x236)*(x252)))+(((x237)*(x250)))+(((r02)*(x254))));
evalcond[4]=((((cj1)*(x239)))+(((IkReal(-1.00000000000000))*(cj0)*(x241)*(x251)))+(((IkReal(-1.00000000000000))*(x243)*(x249)))+(x233)+(((IkReal(-1.00000000000000))*(x238)*(x249)))+(((IkReal(-1.00000000000000))*(sj0)*(x236)*(x251)))+(((x240)*(x254)))+(((x237)*(x253))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x242)*(x244)))+(((x241)*(x252)))+(((cj1)*(cj2)*(x247)))+(((IkReal(-1.00000000000000))*(x238)*(x251)))+(((IkReal(-1.00000000000000))*(sj0)*(x240)*(x249)))+(((x236)*(x250)))+(((IkReal(-1.00000000000000))*(x246)*(x248)))+(((IkReal(-1.00000000000000))*(cj0)*(x237)*(x249)))+(((IkReal(-1.00000000000000))*(x243)*(x251))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }

}

}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[2], cj2array[2], sj2array[2];
bool j2valid[2]={false};
_nj2 = 2;
IkReal x255=((sj1)*(sj3));
IkReal x256=((IKabs(((((pp)*(x255)))+(((IkReal(0.0475000000000000))*(x255))))) != 0)?((IkReal)1/(((((pp)*(x255)))+(((IkReal(0.0475000000000000))*(x255)))))):(IkReal)1.0e30);
IkReal x257=((cj3)*(x256));
cj2array[0]=((((IkReal(0.450000000000000))*(cj1)*(x256)))+(((IkReal(0.452500000000000))*(cj1)*(x257)))+(((IkReal(-0.900000000000000))*(pz)*(x257)))+(((cj1)*(pp)*(x257)))+(((IkReal(-1.00000000000000))*(pz)*(x256))));
if( cj2array[0] >= -1-IKFAST_SINCOS_THRESH && cj2array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j2valid[0] = j2valid[1] = true;
    j2array[0] = IKacos(cj2array[0]);
    sj2array[0] = IKsin(j2array[0]);
    cj2array[1] = cj2array[0];
    j2array[1] = -j2array[0];
    sj2array[1] = -sj2array[0];
}
else if( isnan(cj2array[0]) )
{
    // probably any value will work
    j2valid[0] = true;
    cj2array[0] = 1; sj2array[0] = 0; j2array[0] = 0;
}
for(int ij2 = 0; ij2 < 2; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 2; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[1];
evalcond[0]=((pz)+(((IkReal(0.500000000000000))*(sj1)*(sj3)*(IKcos(j2))))+(((IkReal(-0.450000000000000))*(cj1)))+(((IkReal(-0.500000000000000))*(cj1)*(cj3))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst0;
gconst0=IKsign(((((IkReal(2.00000000000000))*((py)*(py))))+(((IkReal(2.00000000000000))*((px)*(px))))));
dummyeval[0]=(((px)*(px))+((py)*(py)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x258=((px)*(sj3));
IkReal x259=((cj1)*(cj2));
IkReal x260=((py)*(sj1));
IkReal x261=((px)*(sj1));
IkReal x262=((py)*(sj3));
if( IKabs(((gconst0)*(((((x259)*(x262)))+(((IkReal(0.900000000000000))*(x260)))+(((cj3)*(x260)))+(((IkReal(-1.00000000000000))*(sj2)*(x258))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((sj2)*(x262)))+(((IkReal(0.900000000000000))*(x261)))+(((cj3)*(x261)))+(((x258)*(x259))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((gconst0)*(((((x259)*(x262)))+(((IkReal(0.900000000000000))*(x260)))+(((cj3)*(x260)))+(((IkReal(-1.00000000000000))*(sj2)*(x258)))))), ((gconst0)*(((((sj2)*(x262)))+(((IkReal(0.900000000000000))*(x261)))+(((cj3)*(x261)))+(((x258)*(x259)))))));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[2];
IkReal x263=IKcos(j0);
IkReal x264=IKsin(j0);
IkReal x265=((IkReal(0.500000000000000))*(sj3));
IkReal x266=((IkReal(1.00000000000000))*(x263));
evalcond[0]=((((sj2)*(x265)))+(((px)*(x264)))+(((IkReal(-1.00000000000000))*(py)*(x266))));
evalcond[1]=((((IkReal(-1.00000000000000))*(py)*(x264)))+(((cj1)*(cj2)*(x265)))+(((IkReal(0.450000000000000))*(sj1)))+(((IkReal(0.500000000000000))*(cj3)*(sj1)))+(((IkReal(-1.00000000000000))*(px)*(x266))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal x267=(sj2)*(sj2);
IkReal x268=(cj2)*(cj2);
IkReal x269=(sj1)*(sj1);
IkReal x270=(cj1)*(cj1);
IkReal x271=((cj0)*(sj3));
IkReal x272=((cj1)*(cj2));
IkReal x273=((IkReal(1.00000000000000))*(sj3));
IkReal x274=((cj1)*(r21));
IkReal x275=((r01)*(sj0));
IkReal x276=((sj2)*(x269));
IkReal x277=((cj3)*(x267));
IkReal x278=((cj0)*(r01)*(sj1));
IkReal x279=((r11)*(sj0)*(sj1));
IkReal x280=((sj2)*(x270));
IkReal x281=((cj3)*(x268));
dummyeval[0]=((((x279)*(x281)))+(((x278)*(x281)))+(((x274)*(x281)))+(((x274)*(x277)))+(((r11)*(x271)*(x276)))+(((r01)*(x271)*(x272)))+(((r11)*(x271)*(x280)))+(((IkReal(-1.00000000000000))*(cj2)*(r21)*(sj1)*(x273)))+(((IkReal(-1.00000000000000))*(x273)*(x275)*(x276)))+(((r11)*(sj0)*(sj3)*(x272)))+(((x277)*(x279)))+(((x277)*(x278)))+(((IkReal(-1.00000000000000))*(x273)*(x275)*(x280))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x282=(sj2)*(sj2);
IkReal x283=(cj2)*(cj2);
IkReal x284=(sj1)*(sj1);
IkReal x285=(cj1)*(cj1);
IkReal x286=((cj1)*(cj3));
IkReal x287=((r00)*(sj3));
IkReal x288=((IkReal(16.0000000000000))*(sj0));
IkReal x289=((IkReal(8.00000000000000))*(cj0));
IkReal x290=((cj1)*(cj2));
IkReal x291=((r10)*(sj3));
IkReal x292=((IkReal(4.00000000000000))*(sj3));
IkReal x293=((r01)*(sj0));
IkReal x294=((IkReal(16.0000000000000))*(cj0));
IkReal x295=((cj0)*(r11));
IkReal x296=((cj2)*(sj1));
IkReal x297=((IkReal(8.00000000000000))*(sj0));
IkReal x298=((r20)*(sj3));
IkReal x299=((IkReal(16.0000000000000))*(x282));
IkReal x300=((IkReal(4.00000000000000))*(x283));
IkReal x301=((cj0)*(cj3)*(sj1));
IkReal x302=((sj2)*(x285));
IkReal x303=((r00)*(x283));
IkReal x304=((IkReal(8.00000000000000))*(x282));
IkReal x305=((sj2)*(x284));
IkReal x306=((cj3)*(sj0)*(sj1));
IkReal x307=((IkReal(4.00000000000000))*(x282));
IkReal x308=((r10)*(x283));
IkReal x309=((r20)*(x283));
IkReal x310=((((x292)*(x293)*(x305)))+(((x292)*(x293)*(x302)))+(((r21)*(x292)*(x296))));
IkReal x311=((((r11)*(x300)*(x306)))+(((x292)*(x295)*(x302)))+(((x292)*(x295)*(x305)))+(((r11)*(x306)*(x307)))+(((r01)*(x300)*(x301)))+(((r21)*(x286)*(x307)))+(((r21)*(x286)*(x300)))+(((r11)*(sj0)*(x290)*(x292)))+(((cj0)*(r01)*(x290)*(x292)))+(((r01)*(x301)*(x307))));
IkReal x312=((x311)+(((IkReal(-1.00000000000000))*(x310))));
IkReal x313=((((x287)*(x297)*(x302)))+(((x287)*(x297)*(x305)))+(((IkReal(-1.00000000000000))*(x290)*(x291)*(x297)))+(((IkReal(-1.00000000000000))*(cj3)*(sj1)*(x297)*(x308)))+(((IkReal(-1.00000000000000))*(cj3)*(r10)*(sj1)*(x282)*(x297)))+(((IkReal(-1.00000000000000))*(cj3)*(sj1)*(x289)*(x303)))+(((IkReal(-1.00000000000000))*(x289)*(x291)*(x305)))+(((IkReal(-1.00000000000000))*(x289)*(x291)*(x302)))+(((IkReal(-1.00000000000000))*(x287)*(x289)*(x290)))+(((IkReal(-8.00000000000000))*(x286)*(x309)))+(((IkReal(-1.00000000000000))*(r20)*(x286)*(x304)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(sj1)*(x282)*(x289)))+(((IkReal(8.00000000000000))*(x296)*(x298))));
IkReal x314=((x310)+(((IkReal(-1.00000000000000))*(x311))));
op[0]=x312;
op[1]=x313;
op[2]=x312;
op[3]=((((IkReal(-1.00000000000000))*(cj3)*(r10)*(sj1)*(x282)*(x288)))+(((IkReal(-1.00000000000000))*(cj3)*(sj1)*(x288)*(x308)))+(((IkReal(-1.00000000000000))*(cj3)*(sj1)*(x294)*(x303)))+(((IkReal(-1.00000000000000))*(x291)*(x294)*(x302)))+(((IkReal(-1.00000000000000))*(x291)*(x294)*(x305)))+(((IkReal(-1.00000000000000))*(x287)*(x290)*(x294)))+(((x287)*(x288)*(x305)))+(((x287)*(x288)*(x302)))+(((IkReal(-1.00000000000000))*(r20)*(x286)*(x299)))+(((IkReal(-1.00000000000000))*(x288)*(x290)*(x291)))+(((IkReal(16.0000000000000))*(x296)*(x298)))+(((IkReal(-1.00000000000000))*(cj3)*(r00)*(sj1)*(x282)*(x294)))+(((IkReal(-16.0000000000000))*(x286)*(x309))));
op[4]=x314;
op[5]=x313;
op[6]=x314;
polyroots6(op,zeror,numroots);
IkReal j6array[6], cj6array[6], sj6array[6], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((IkReal(2.00000000000000))*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[6]={true,true,true,true,true,true};
_nj6 = 6;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal dummyeval[1];
IkReal gconst1;
IkReal x315=((cj3)*(sj1));
gconst1=IKsign(((((cj1)*(cj2)*(sj3)))+(((x315)*((sj2)*(sj2))))+(((x315)*((cj2)*(cj2))))));
IkReal x316=((cj3)*(sj1));
dummyeval[0]=((((cj1)*(cj2)*(sj3)))+(((x316)*((cj2)*(cj2))))+(((x316)*((sj2)*(sj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
IkReal x317=((r21)*(sj6));
IkReal x318=((cj0)*(r12));
IkReal x319=((cj6)*(r22));
IkReal x320=((IkReal(1.00000000000000))*(sj0));
IkReal x321=((r22)*(sj6));
IkReal x322=((cj6)*(r20));
gconst2=IKsign(((((IkReal(-1.00000000000000))*(r00)*(x319)*(x320)))+(((x317)*(x318)))+(((r02)*(sj0)*(x322)))+(((r01)*(sj0)*(x321)))+(((cj0)*(r10)*(x319)))+(((IkReal(-1.00000000000000))*(cj0)*(r11)*(x321)))+(((IkReal(-1.00000000000000))*(r02)*(x317)*(x320)))+(((IkReal(-1.00000000000000))*(x318)*(x322)))));
IkReal x323=((r21)*(sj6));
IkReal x324=((cj0)*(r12));
IkReal x325=((cj6)*(r22));
IkReal x326=((IkReal(1.00000000000000))*(sj0));
IkReal x327=((r22)*(sj6));
IkReal x328=((cj6)*(r20));
dummyeval[0]=((((IkReal(-1.00000000000000))*(r00)*(x325)*(x326)))+(((x323)*(x324)))+(((r02)*(sj0)*(x328)))+(((r01)*(sj0)*(x327)))+(((IkReal(-1.00000000000000))*(x324)*(x328)))+(((IkReal(-1.00000000000000))*(cj0)*(r11)*(x327)))+(((IkReal(-1.00000000000000))*(r02)*(x323)*(x326)))+(((cj0)*(r10)*(x325))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x329=((IkReal(1.00000000000000))*(sj3));
IkReal x330=((cj2)*(sj1));
IkReal x331=((cj0)*(r12));
IkReal x332=((r01)*(sj6));
IkReal x333=((sj0)*(sj3));
IkReal x334=((sj3)*(sj6));
IkReal x335=((cj0)*(r11));
IkReal x336=((cj1)*(cj3));
IkReal x337=((cj6)*(r00));
IkReal x338=((sj0)*(x336));
IkReal x339=((cj0)*(cj6)*(r10));
if( IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(x329)*(x330)*(x331)))+(((IkReal(-1.00000000000000))*(r22)*(sj2)*(x329)))+(((x331)*(x336)))+(((r02)*(x330)*(x333)))+(((IkReal(-1.00000000000000))*(r02)*(x338))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(x329)*(x330)*(x339)))+(((x336)*(x339)))+(((x330)*(x334)*(x335)))+(((IkReal(-1.00000000000000))*(sj0)*(x329)*(x330)*(x332)))+(((IkReal(-1.00000000000000))*(cj6)*(r20)*(sj2)*(x329)))+(((x332)*(x338)))+(((IkReal(-1.00000000000000))*(sj6)*(x335)*(x336)))+(((IkReal(-1.00000000000000))*(x337)*(x338)))+(((x330)*(x333)*(x337)))+(((r21)*(sj2)*(x334))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst2)*(((((IkReal(-1.00000000000000))*(x329)*(x330)*(x331)))+(((IkReal(-1.00000000000000))*(r22)*(sj2)*(x329)))+(((x331)*(x336)))+(((r02)*(x330)*(x333)))+(((IkReal(-1.00000000000000))*(r02)*(x338)))))), ((gconst2)*(((((IkReal(-1.00000000000000))*(x329)*(x330)*(x339)))+(((x336)*(x339)))+(((x330)*(x334)*(x335)))+(((IkReal(-1.00000000000000))*(sj0)*(x329)*(x330)*(x332)))+(((IkReal(-1.00000000000000))*(cj6)*(r20)*(sj2)*(x329)))+(((x332)*(x338)))+(((IkReal(-1.00000000000000))*(sj6)*(x335)*(x336)))+(((IkReal(-1.00000000000000))*(x337)*(x338)))+(((x330)*(x333)*(x337)))+(((r21)*(sj2)*(x334)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[3];
IkReal x340=IKsin(j5);
IkReal x341=IKcos(j5);
IkReal x342=((cj2)*(sj3));
IkReal x343=((IkReal(1.00000000000000))*(sj6));
IkReal x344=((cj6)*(r00));
IkReal x345=((cj6)*(r10));
IkReal x346=((cj0)*(x340));
IkReal x347=((sj6)*(x340));
IkReal x348=((sj0)*(x340));
IkReal x349=((r02)*(x341));
IkReal x350=((IkReal(1.00000000000000))*(r12)*(x341));
evalcond[0]=((((r21)*(x347)))+(((r22)*(x341)))+(((IkReal(-1.00000000000000))*(cj1)*(cj3)))+(((sj1)*(x342)))+(((IkReal(-1.00000000000000))*(cj6)*(r20)*(x340))));
evalcond[1]=((((sj2)*(sj3)))+(((x345)*(x346)))+(((r01)*(sj0)*(x347)))+(((sj0)*(x349)))+(((IkReal(-1.00000000000000))*(cj0)*(x350)))+(((IkReal(-1.00000000000000))*(x344)*(x348)))+(((IkReal(-1.00000000000000))*(r11)*(x343)*(x346))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj0)*(x350)))+(((IkReal(-1.00000000000000))*(r01)*(x343)*(x346)))+(((cj1)*(x342)))+(((x345)*(x348)))+(((x344)*(x346)))+(((IkReal(-1.00000000000000))*(cj0)*(x349)))+(((IkReal(-1.00000000000000))*(r11)*(x343)*(x348)))+(((cj3)*(sj1))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst3;
IkReal x351=((cj3)*(sj1));
gconst3=IKsign(((((cj1)*(cj2)*(sj3)))+(((x351)*((sj2)*(sj2))))+(((x351)*((cj2)*(cj2))))));
IkReal x352=((cj3)*(sj1));
dummyeval[0]=((((cj1)*(cj2)*(sj3)))+(((x352)*((cj2)*(cj2))))+(((x352)*((sj2)*(sj2)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x353=((sj1)*(sj2));
IkReal x354=((cj1)*(sj3));
IkReal x355=((cj6)*(r21));
IkReal x356=((r20)*(sj6));
IkReal x357=((cj3)*(sj2));
IkReal x358=((cj6)*(r01)*(sj0));
IkReal x359=((cj0)*(r10)*(sj6));
IkReal x360=((cj2)*(cj3)*(sj1));
IkReal x361=((r00)*(sj0)*(sj6));
IkReal x362=((cj0)*(cj6)*(r11));
if( IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(x353)*(x359)))+(((IkReal(-1.00000000000000))*(x353)*(x362)))+(((x353)*(x358)))+(((x353)*(x361)))+(((cj2)*(x356)))+(((cj2)*(x355))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((x356)*(x357)))+(((IkReal(-1.00000000000000))*(x358)*(x360)))+(((x355)*(x357)))+(((x359)*(x360)))+(((x354)*(x359)))+(((x354)*(x362)))+(((IkReal(-1.00000000000000))*(x360)*(x361)))+(((IkReal(-1.00000000000000))*(x354)*(x361)))+(((x360)*(x362)))+(((IkReal(-1.00000000000000))*(x354)*(x358))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst3)*(((((IkReal(-1.00000000000000))*(x353)*(x359)))+(((IkReal(-1.00000000000000))*(x353)*(x362)))+(((x353)*(x358)))+(((x353)*(x361)))+(((cj2)*(x356)))+(((cj2)*(x355)))))), ((gconst3)*(((((x356)*(x357)))+(((IkReal(-1.00000000000000))*(x358)*(x360)))+(((x355)*(x357)))+(((x359)*(x360)))+(((x354)*(x359)))+(((x354)*(x362)))+(((IkReal(-1.00000000000000))*(x360)*(x361)))+(((IkReal(-1.00000000000000))*(x354)*(x361)))+(((x360)*(x362)))+(((IkReal(-1.00000000000000))*(x354)*(x358)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[6];
IkReal x363=IKsin(j4);
IkReal x364=IKcos(j4);
IkReal x365=((IkReal(1.00000000000000))*(cj6));
IkReal x366=((cj0)*(r01));
IkReal x367=((IkReal(1.00000000000000))*(sj1));
IkReal x368=((sj0)*(sj5));
IkReal x369=((cj5)*(sj0));
IkReal x370=((IkReal(1.00000000000000))*(cj1));
IkReal x371=((cj5)*(sj6));
IkReal x372=((cj0)*(cj5));
IkReal x373=((r00)*(sj6));
IkReal x374=((IkReal(1.00000000000000))*(cj0));
IkReal x375=((r10)*(sj6));
IkReal x376=((sj3)*(x364));
IkReal x377=((sj2)*(x363));
IkReal x378=((cj2)*(x363));
IkReal x379=((r11)*(x371));
IkReal x380=((sj3)*(x363));
IkReal x381=((sj2)*(x364));
IkReal x382=((cj2)*(cj3)*(x364));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj3)*(x367)*(x378)))+(((IkReal(-1.00000000000000))*(x367)*(x381)))+(((cj6)*(r21)))+(((IkReal(-1.00000000000000))*(x370)*(x380)))+(((r20)*(sj6))));
evalcond[1]=((((cj6)*(r01)*(sj0)))+(((IkReal(-1.00000000000000))*(cj3)*(x377)))+(((sj0)*(x373)))+(((IkReal(-1.00000000000000))*(x374)*(x375)))+(((IkReal(-1.00000000000000))*(cj0)*(r11)*(x365)))+(((cj2)*(x364))));
evalcond[2]=((((r22)*(sj5)))+(((cj5)*(cj6)*(r20)))+(((IkReal(-1.00000000000000))*(x367)*(x377)))+(((cj1)*(x376)))+(((IkReal(-1.00000000000000))*(r21)*(x371)))+(((sj1)*(x382))));
evalcond[3]=((((IkReal(-1.00000000000000))*(sj0)*(x375)))+(((IkReal(-1.00000000000000))*(r11)*(sj0)*(x365)))+(((IkReal(-1.00000000000000))*(x373)*(x374)))+(((IkReal(-1.00000000000000))*(cj3)*(x370)*(x378)))+(((sj1)*(x380)))+(((IkReal(-1.00000000000000))*(x370)*(x381)))+(((IkReal(-1.00000000000000))*(x365)*(x366))));
evalcond[4]=((((IkReal(-1.00000000000000))*(r01)*(sj6)*(x369)))+(((cj3)*(x381)))+(x378)+(((IkReal(-1.00000000000000))*(r12)*(sj5)*(x374)))+(((cj6)*(r00)*(x369)))+(((IkReal(-1.00000000000000))*(r10)*(x365)*(x372)))+(((cj0)*(x379)))+(((r02)*(x368))));
evalcond[5]=((((IkReal(-1.00000000000000))*(x370)*(x377)))+(((cj1)*(x382)))+(((r11)*(sj6)*(x369)))+(((IkReal(-1.00000000000000))*(r00)*(x365)*(x372)))+(((IkReal(-1.00000000000000))*(r02)*(sj5)*(x374)))+(((x366)*(x371)))+(((IkReal(-1.00000000000000))*(x367)*(x376)))+(((IkReal(-1.00000000000000))*(r10)*(x365)*(x369)))+(((IkReal(-1.00000000000000))*(r12)*(x368))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x383=((sj1)*(sj2));
IkReal x384=((cj1)*(sj3));
IkReal x385=((cj6)*(r21));
IkReal x386=((r20)*(sj6));
IkReal x387=((cj3)*(sj2));
IkReal x388=((cj6)*(r01)*(sj0));
IkReal x389=((cj0)*(r10)*(sj6));
IkReal x390=((cj2)*(cj3)*(sj1));
IkReal x391=((r00)*(sj0)*(sj6));
IkReal x392=((cj0)*(cj6)*(r11));
if( IKabs(((gconst1)*(((((IkReal(-1.00000000000000))*(x383)*(x389)))+(((cj2)*(x385)))+(((cj2)*(x386)))+(((x383)*(x388)))+(((IkReal(-1.00000000000000))*(x383)*(x392)))+(((x383)*(x391))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((x384)*(x389)))+(((x386)*(x387)))+(((IkReal(-1.00000000000000))*(x384)*(x388)))+(((IkReal(-1.00000000000000))*(x388)*(x390)))+(((x385)*(x387)))+(((x384)*(x392)))+(((IkReal(-1.00000000000000))*(x384)*(x391)))+(((x389)*(x390)))+(((x390)*(x392)))+(((IkReal(-1.00000000000000))*(x390)*(x391))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst1)*(((((IkReal(-1.00000000000000))*(x383)*(x389)))+(((cj2)*(x385)))+(((cj2)*(x386)))+(((x383)*(x388)))+(((IkReal(-1.00000000000000))*(x383)*(x392)))+(((x383)*(x391)))))), ((gconst1)*(((((x384)*(x389)))+(((x386)*(x387)))+(((IkReal(-1.00000000000000))*(x384)*(x388)))+(((IkReal(-1.00000000000000))*(x388)*(x390)))+(((x385)*(x387)))+(((x384)*(x392)))+(((IkReal(-1.00000000000000))*(x384)*(x391)))+(((x389)*(x390)))+(((x390)*(x392)))+(((IkReal(-1.00000000000000))*(x390)*(x391)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[3];
IkReal x393=IKsin(j4);
IkReal x394=IKcos(j4);
IkReal x395=((cj2)*(cj3));
IkReal x396=((IkReal(1.00000000000000))*(cj0));
IkReal x397=((cj6)*(r01));
IkReal x398=((r10)*(sj6));
IkReal x399=((IkReal(1.00000000000000))*(sj2));
IkReal x400=((cj6)*(r11));
IkReal x401=((r00)*(sj6));
IkReal x402=((IkReal(1.00000000000000))*(sj0));
IkReal x403=((sj1)*(x393));
IkReal x404=((IkReal(1.00000000000000))*(cj1)*(x393));
evalcond[0]=((((IkReal(-1.00000000000000))*(sj1)*(x394)*(x399)))+(((IkReal(-1.00000000000000))*(x395)*(x403)))+(((cj6)*(r21)))+(((IkReal(-1.00000000000000))*(sj3)*(x404)))+(((r20)*(sj6))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj3)*(x393)*(x399)))+(((sj0)*(x401)))+(((sj0)*(x397)))+(((cj2)*(x394)))+(((IkReal(-1.00000000000000))*(x396)*(x398)))+(((IkReal(-1.00000000000000))*(x396)*(x400))));
evalcond[2]=((((sj3)*(x403)))+(((IkReal(-1.00000000000000))*(cj1)*(x394)*(x399)))+(((IkReal(-1.00000000000000))*(x395)*(x404)))+(((IkReal(-1.00000000000000))*(x400)*(x402)))+(((IkReal(-1.00000000000000))*(x398)*(x402)))+(((IkReal(-1.00000000000000))*(x396)*(x397)))+(((IkReal(-1.00000000000000))*(x396)*(x401))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(((((IkReal(-2.00000000000000))*(cj6)*(r20)*(r21)*(sj6)))+((r22)*(r22))+((((cj6)*(cj6))*((r20)*(r20))))+((((r21)*(r21))*((sj6)*(sj6))))));
dummyeval[0]=((((IkReal(-2.00000000000000))*(cj6)*(r20)*(r21)*(sj6)))+((r22)*(r22))+((((cj6)*(cj6))*((r20)*(r20))))+((((r21)*(r21))*((sj6)*(sj6)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j5array[1], cj5array[1], sj5array[1];
bool j5valid[1]={false};
_nj5 = 1;
IkReal x405=((cj6)*(r20));
IkReal x406=((IkReal(1.00000000000000))*(cj1));
IkReal x407=((IkReal(1.00000000000000))*(sj3));
IkReal x408=((cj4)*(r22));
IkReal x409=((cj3)*(cj4));
IkReal x410=((cj4)*(sj3));
IkReal x411=((cj2)*(sj1));
IkReal x412=((sj1)*(sj2)*(sj4));
IkReal x413=((IkReal(1.00000000000000))*(x411));
IkReal x414=((cj1)*(r21)*(sj6));
IkReal x415=((r21)*(sj6)*(x411));
if( IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(cj3)*(x408)*(x413)))+(((r22)*(x412)))+(((IkReal(-1.00000000000000))*(sj3)*(x406)*(x408)))+(((IkReal(-1.00000000000000))*(cj3)*(x405)*(x406)))+(((IkReal(-1.00000000000000))*(x407)*(x415)))+(((sj3)*(x405)*(x411)))+(((cj3)*(x414))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(r22)*(x407)*(x411)))+(((IkReal(-1.00000000000000))*(x405)*(x409)*(x413)))+(((IkReal(-1.00000000000000))*(x405)*(x406)*(x410)))+(((x405)*(x412)))+(((x410)*(x414)))+(((x409)*(x415)))+(((IkReal(-1.00000000000000))*(r21)*(sj6)*(x412)))+(((cj1)*(cj3)*(r22))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j5array[0]=IKatan2(((gconst4)*(((((IkReal(-1.00000000000000))*(cj3)*(x408)*(x413)))+(((r22)*(x412)))+(((IkReal(-1.00000000000000))*(sj3)*(x406)*(x408)))+(((IkReal(-1.00000000000000))*(cj3)*(x405)*(x406)))+(((IkReal(-1.00000000000000))*(x407)*(x415)))+(((sj3)*(x405)*(x411)))+(((cj3)*(x414)))))), ((gconst4)*(((((IkReal(-1.00000000000000))*(r22)*(x407)*(x411)))+(((IkReal(-1.00000000000000))*(x405)*(x409)*(x413)))+(((IkReal(-1.00000000000000))*(x405)*(x406)*(x410)))+(((x405)*(x412)))+(((x410)*(x414)))+(((x409)*(x415)))+(((IkReal(-1.00000000000000))*(r21)*(sj6)*(x412)))+(((cj1)*(cj3)*(r22)))))));
sj5array[0]=IKsin(j5array[0]);
cj5array[0]=IKcos(j5array[0]);
if( j5array[0] > IKPI )
{
    j5array[0]-=IK2PI;
}
else if( j5array[0] < -IKPI )
{    j5array[0]+=IK2PI;
}
j5valid[0] = true;
for(int ij5 = 0; ij5 < 1; ++ij5)
{
if( !j5valid[ij5] )
{
    continue;
}
_ij5[0] = ij5; _ij5[1] = -1;
for(int iij5 = ij5+1; iij5 < 1; ++iij5)
{
if( j5valid[iij5] && IKabs(cj5array[ij5]-cj5array[iij5]) < IKFAST_SOLUTION_THRESH && IKabs(sj5array[ij5]-sj5array[iij5]) < IKFAST_SOLUTION_THRESH )
{
    j5valid[iij5]=false; _ij5[1] = iij5; break; 
}
}
j5 = j5array[ij5]; cj5 = cj5array[ij5]; sj5 = sj5array[ij5];
{
IkReal evalcond[6];
IkReal x416=IKsin(j5);
IkReal x417=IKcos(j5);
IkReal x418=((cj3)*(sj1));
IkReal x419=((r21)*(sj6));
IkReal x420=((cj0)*(r12));
IkReal x421=((r11)*(sj6));
IkReal x422=((cj6)*(r00));
IkReal x423=((cj0)*(r02));
IkReal x424=((cj2)*(sj3));
IkReal x425=((cj6)*(r10));
IkReal x426=((r01)*(sj6));
IkReal x427=((IkReal(1.00000000000000))*(cj1));
IkReal x428=((r12)*(sj0));
IkReal x429=((sj2)*(sj4));
IkReal x430=((cj6)*(r20));
IkReal x431=((IkReal(1.00000000000000))*(sj1));
IkReal x432=((cj3)*(cj4));
IkReal x433=((cj4)*(sj3));
IkReal x434=((IkReal(1.00000000000000))*(x417));
IkReal x435=((sj0)*(x417));
IkReal x436=((IkReal(1.00000000000000))*(x416));
IkReal x437=((cj0)*(x417));
IkReal x438=((cj0)*(x416));
IkReal x439=((sj0)*(x416));
evalcond[0]=((((IkReal(-1.00000000000000))*(x430)*(x436)))+(((x416)*(x419)))+(((IkReal(-1.00000000000000))*(cj3)*(x427)))+(((r22)*(x417)))+(((sj1)*(x424))));
evalcond[1]=((((cj1)*(x433)))+(((cj2)*(cj4)*(x418)))+(((r22)*(x416)))+(((IkReal(-1.00000000000000))*(x429)*(x431)))+(((IkReal(-1.00000000000000))*(x419)*(x434)))+(((x417)*(x430))));
evalcond[2]=((((sj2)*(sj3)))+(((x426)*(x439)))+(((x425)*(x438)))+(((r02)*(x435)))+(((IkReal(-1.00000000000000))*(x420)*(x434)))+(((IkReal(-1.00000000000000))*(cj0)*(x421)*(x436)))+(((IkReal(-1.00000000000000))*(sj0)*(x422)*(x436))));
evalcond[3]=((((cj2)*(sj4)))+(((IkReal(-1.00000000000000))*(sj0)*(x426)*(x434)))+(((x421)*(x437)))+(((r02)*(x439)))+(((IkReal(-1.00000000000000))*(x420)*(x436)))+(((IkReal(-1.00000000000000))*(cj0)*(x425)*(x434)))+(((sj2)*(x432)))+(((x422)*(x435))));
evalcond[4]=((((x425)*(x439)))+(((IkReal(-1.00000000000000))*(sj0)*(x421)*(x436)))+(x418)+(((IkReal(-1.00000000000000))*(cj0)*(x426)*(x436)))+(((IkReal(-1.00000000000000))*(x428)*(x434)))+(((cj1)*(x424)))+(((IkReal(-1.00000000000000))*(x423)*(x434)))+(((x422)*(x438))));
evalcond[5]=((((x421)*(x435)))+(((IkReal(-1.00000000000000))*(cj0)*(x422)*(x434)))+(((IkReal(-1.00000000000000))*(x431)*(x433)))+(((x426)*(x437)))+(((IkReal(-1.00000000000000))*(x427)*(x429)))+(((IkReal(-1.00000000000000))*(sj0)*(x425)*(x434)))+(((IkReal(-1.00000000000000))*(x428)*(x436)))+(((cj1)*(cj2)*(x432)))+(((IkReal(-1.00000000000000))*(x423)*(x436))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
    }

}

}
}
}

}

}
}
}

}

}
}
}

}

}
}
return solutions.GetNumSolutions()>0;
}
static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "a3fc2a58c084beca1a6f29736b224a40"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE

int ik_solve(IkReal eerot[9], IkReal eetrans[3], std::vector<std::vector<IkReal> >& sol_joint, std::vector<IkReal> free_joint)
{
    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
	for(std::size_t i = 0; i < vfree.size(); ++i)
		vfree[i] = free_joint[i];
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);
	cout << vfree.size() << "/" << GetNumFreeParameters() << endl;
	cout << solutions.GetNumSolutions() << endl;

    if( !bSuccess ) {
        return -1;
    }

	sol_joint.resize(solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
		sol_joint[i].resize(solvalues.size());
        for( std::size_t j = 0; j < solvalues.size(); ++j)
			sol_joint[i][j] = solvalues[j];
    }
    return 0;
}

} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
