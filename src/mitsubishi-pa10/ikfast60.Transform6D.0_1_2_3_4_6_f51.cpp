/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 60 generated on 2012-09-02 07:39:00.685405
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==60);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#define IKFAST_STRINGIZE2(s) #s
#define IKFAST_STRINGIZE(s) IKFAST_STRINGIZE2(s)

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_6DF51 {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)0.000001)
#endif

// used to check input to atan2 for degenerate cases
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)2e-6)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62,x63;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKsin(j[3]);
x6=IKcos(j[3]);
x7=IKsin(j[1]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKsin(j[6]);
x11=IKsin(j[5]);
x12=IKcos(j[5]);
x13=IKcos(j[6]);
x14=((IkReal(0.500000000000000))*(x0));
x15=((IkReal(0.0850000000000000))*(x8));
x16=((IkReal(1.00000000000000))*(x5));
x17=((IkReal(1.00000000000000))*(x4));
x18=((IkReal(1.00000000000000))*(x3));
x19=((IkReal(0.0850000000000000))*(x9));
x20=((IkReal(1.00000000000000))*(x11));
x21=((IkReal(1.00000000000000))*(x12));
x22=((IkReal(0.500000000000000))*(x3));
x23=((IkReal(1.00000000000000))*(x0));
x24=((IkReal(0.0850000000000000))*(x5));
x25=((x1)*(x2));
x26=((x6)*(x7));
x27=((x2)*(x7));
x28=((x1)*(x6));
x29=((x0)*(x7));
x30=((x3)*(x7));
x31=((x17)*(x3));
x32=((IkReal(1.00000000000000))*(x28));
x33=((x4)*(x7)*(x9));
x34=((x16)*(x29));
x35=((x23)*(x26));
x36=((x16)*(x30));
x37=((x18)*(x26));
x38=((((IkReal(-1.00000000000000))*(x31)))+(((x0)*(x25))));
x39=((((x0)*(x4)))+(((x25)*(x3))));
x40=((((IkReal(-1.00000000000000))*(x1)*(x31)))+(((x0)*(x2))));
x41=((((IkReal(-1.00000000000000))*(x32)))+(((x27)*(x5))));
x42=((x31)+(((IkReal(-1.00000000000000))*(x23)*(x25))));
x43=((((IkReal(-1.00000000000000))*(x0)*(x1)*(x17)))+(((IkReal(-1.00000000000000))*(x18)*(x2))));
x44=((((IkReal(-1.00000000000000))*(x0)*(x17)))+(((IkReal(-1.00000000000000))*(x18)*(x25))));
x45=((((x1)*(x16)))+(((IkReal(1.00000000000000))*(x2)*(x26))));
x46=((IkReal(-1.00000000000000))*(x45));
x47=((x39)*(x6));
x48=((x11)*(x41));
x49=((x38)*(x6));
x50=((x42)*(x5));
x51=((x44)*(x5));
x52=((((IkReal(-1.00000000000000))*(x34)))+(x49));
x53=((((IkReal(-1.00000000000000))*(x36)))+(x47));
x54=((((IkReal(-1.00000000000000))*(x35)))+(x50));
x55=((((IkReal(-1.00000000000000))*(x37)))+(x51));
x56=((((x4)*(x7)*(x8)))+(((x45)*(x9))));
x57=((((x46)*(x8)))+(x33));
x58=((x11)*(x55));
x59=((((x53)*(x8)))+(((x40)*(x9))));
x60=((((x9)*(((((IkReal(-1.00000000000000))*(x47)))+(x36)))))+(((x40)*(x8))));
x61=((((x43)*(x9)))+(((x52)*(x8))));
x62=((x12)*(x59));
x63=((((x9)*(((((IkReal(-1.00000000000000))*(x49)))+(x34)))))+(((x43)*(x8))));
eerot[0]=((((x10)*(x63)))+(((x13)*(((((x12)*(x61)))+(((x11)*(x54))))))));
eerot[1]=((((x13)*(x63)))+(((x10)*(((((IkReal(-1.00000000000000))*(x20)*(x54)))+(((IkReal(-1.00000000000000))*(x21)*(x61))))))));
eerot[2]=((((x11)*(x61)))+(((x12)*(((((IkReal(-1.00000000000000))*(x16)*(x42)))+(x35))))));
eetrans[0]=((((x5)*(((((x14)*(x25)))+(((IkReal(-1.00000000000000))*(x22)*(x4)))))))+(((x11)*(((((x19)*(x43)))+(((x15)*(x52)))))))+(((x14)*(x26)))+(((x12)*(((((IkReal(-1.00000000000000))*(x24)*(x42)))+(((IkReal(0.0850000000000000))*(x0)*(x26)))))))+(((IkReal(0.450000000000000))*(x29))));
eerot[3]=((((x13)*(((x58)+(x62)))))+(((x10)*(x60))));
eerot[4]=((((x13)*(x60)))+(((x10)*(((((IkReal(-1.00000000000000))*(x20)*(x55)))+(((IkReal(-1.00000000000000))*(x21)*(x59))))))));
eerot[5]=((((x12)*(((((IkReal(-1.00000000000000))*(x16)*(x44)))+(x37)))))+(((x11)*(x59))));
eetrans[1]=((((IkReal(0.450000000000000))*(x30)))+(((x22)*(x26)))+(((x11)*(((((x19)*(x40)))+(((x15)*(x53)))))))+(((x5)*(((((x22)*(x25)))+(((x14)*(x4)))))))+(((x12)*(((((IkReal(-1.00000000000000))*(x24)*(x44)))+(((IkReal(0.0850000000000000))*(x26)*(x3))))))));
eerot[6]=((((x13)*(((((x12)*(x57)))+(x48)))))+(((x10)*(x56))));
eerot[7]=((((x13)*(x56)))+(((x10)*(((((IkReal(-1.00000000000000))*(x20)*(x41)))+(((IkReal(-1.00000000000000))*(x21)*(x57))))))));
eerot[8]=((((x11)*(x57)))+(((x12)*(((((IkReal(-1.00000000000000))*(x16)*(x27)))+(x32))))));
eetrans[2]=((IkReal(0.315000000000000))+(((x12)*(((((IkReal(0.0850000000000000))*(x28)))+(((IkReal(-1.00000000000000))*(x24)*(x27)))))))+(((IkReal(-0.500000000000000))*(x27)*(x5)))+(((IkReal(0.500000000000000))*(x28)))+(((IkReal(0.450000000000000))*(x1)))+(((x11)*(((((x15)*(x46)))+(((x19)*(x4)*(x7))))))));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {5}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j0,cj0,sj0,htj0,j1,cj1,sj1,htj1,j2,cj2,sj2,htj2,j3,cj3,sj3,htj3,j4,cj4,sj4,htj4,j6,cj6,sj6,htj6,j5,cj5,sj5,htj5,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij0[2], _nj0,_ij1[2], _nj1,_ij2[2], _nj2,_ij3[2], _nj3,_ij4[2], _nj4,_ij6[2], _nj6,_ij5[2], _nj5;

bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j0=numeric_limits<IkReal>::quiet_NaN(); _ij0[0] = -1; _ij0[1] = -1; _nj0 = -1; j1=numeric_limits<IkReal>::quiet_NaN(); _ij1[0] = -1; _ij1[1] = -1; _nj1 = -1; j2=numeric_limits<IkReal>::quiet_NaN(); _ij2[0] = -1; _ij2[1] = -1; _nj2 = -1; j3=numeric_limits<IkReal>::quiet_NaN(); _ij3[0] = -1; _ij3[1] = -1; _nj3 = -1; j4=numeric_limits<IkReal>::quiet_NaN(); _ij4[0] = -1; _ij4[1] = -1; _nj4 = -1; j6=numeric_limits<IkReal>::quiet_NaN(); _ij6[0] = -1; _ij6[1] = -1; _nj6 = -1;  _ij5[0] = -1; _ij5[1] = -1; _nj5 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j5=pfree[0]; cj5=cos(pfree[0]); sj5=sin(pfree[0]);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=r00;
new_r01=r01;
new_r02=r02;
new_px=((px)+(((IkReal(-0.0850000000000000))*(r02))));
new_r10=r10;
new_r11=r11;
new_r12=r12;
new_py=((((IkReal(-0.0850000000000000))*(r12)))+(py));
new_r20=r20;
new_r21=r21;
new_r22=r22;
new_pz=((IkReal(-0.315000000000000))+(((IkReal(-0.0850000000000000))*(r22)))+(pz));
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
pp=(((px)*(px))+((py)*(py))+((pz)*(pz)));
npx=((((px)*(r00)))+(((py)*(r10)))+(((pz)*(r20))));
npy=((((px)*(r01)))+(((py)*(r11)))+(((pz)*(r21))));
npz=((((px)*(r02)))+(((py)*(r12)))+(((pz)*(r22))));
rxp0_0=((((IkReal(-1.00000000000000))*(py)*(r20)))+(((pz)*(r10))));
rxp0_1=((((px)*(r20)))+(((IkReal(-1.00000000000000))*(pz)*(r00))));
rxp0_2=((((IkReal(-1.00000000000000))*(px)*(r10)))+(((py)*(r00))));
rxp1_0=((((IkReal(-1.00000000000000))*(py)*(r21)))+(((pz)*(r11))));
rxp1_1=((((px)*(r21)))+(((IkReal(-1.00000000000000))*(pz)*(r01))));
rxp1_2=((((IkReal(-1.00000000000000))*(px)*(r11)))+(((py)*(r01))));
rxp2_0=((((IkReal(-1.00000000000000))*(py)*(r22)))+(((pz)*(r12))));
rxp2_1=((((px)*(r22)))+(((IkReal(-1.00000000000000))*(pz)*(r02))));
rxp2_2=((((IkReal(-1.00000000000000))*(px)*(r12)))+(((py)*(r02))));
{
IkReal j3array[2], cj3array[2], sj3array[2];
bool j3valid[2]={false};
_nj3 = 2;
cj3array[0]=((IkReal(-1.00555555555556))+(((IkReal(2.22222222222222))*(pp))));
if( cj3array[0] >= -1-IKFAST_SINCOS_THRESH && cj3array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j3valid[0] = j3valid[1] = true;
    j3array[0] = IKacos(cj3array[0]);
    sj3array[0] = IKsin(j3array[0]);
    cj3array[1] = cj3array[0];
    j3array[1] = -j3array[0];
    sj3array[1] = -sj3array[0];
}
else if( isnan(cj3array[0]) )
{
    // probably any value will work
    j3valid[0] = true;
    cj3array[0] = 1; sj3array[0] = 0; j3array[0] = 0;
}
for(int ij3 = 0; ij3 < 2; ++ij3)
{
if( !j3valid[ij3] )
{
    continue;
}
_ij3[0] = ij3; _ij3[1] = -1;
for(int iij3 = ij3+1; iij3 < 2; ++iij3)
{
if( j3valid[iij3] && IKabs(cj3array[ij3]-cj3array[iij3]) < IKFAST_SOLUTION_THRESH && IKabs(sj3array[ij3]-sj3array[iij3]) < IKFAST_SOLUTION_THRESH )
{
    j3valid[iij3]=false; _ij3[1] = iij3; break; 
}
}
j3 = j3array[ij3]; cj3 = cj3array[ij3]; sj3 = sj3array[ij3];

{
IkReal dummyeval[1];
IkReal x64=(sj5)*(sj5);
dummyeval[0]=((((x64)*((npy)*(npy))))+(((x64)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal x65=(sj5)*(sj5);
dummyeval[0]=((((x65)*((npy)*(npy))))+(((x65)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.902500000000000))+(pp));
evalcond[2]=((((IkReal(0.950000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(npz))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst5;
gconst5=IKsign(((((IkReal(20.0000000000000))*((npy)*(npy))))+(((IkReal(20.0000000000000))*((npx)*(npx))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x66=((gconst5)*(sj5));
if( IKabs(((IkReal(19.0000000000000))*(npy)*(x66))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-19.0000000000000))*(npx)*(x66))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((IkReal(19.0000000000000))*(npy)*(x66)), ((IkReal(-19.0000000000000))*(npx)*(x66)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x67=IKcos(j6);
IkReal x68=IKsin(j6);
IkReal x69=((IkReal(1.00000000000000))*(npx));
IkReal x70=((npy)*(x68));
evalcond[0]=((((IkReal(-1.00000000000000))*(x68)*(x69)))+(((IkReal(-1.00000000000000))*(npy)*(x67))));
evalcond[1]=((IkReal(0.950000000000000))+(((IkReal(-1.00000000000000))*(cj5)*(npz)))+(((IkReal(-1.00000000000000))*(sj5)*(x70)))+(((npx)*(sj5)*(x67))));
evalcond[2]=((((IkReal(-0.950000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(x67)*(x69)))+(x70));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x71=IKatan2(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))), ((((cj6)*(npy)))+(((npx)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x71));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x71))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x72=IKsin(j4);
IkReal x73=IKcos(j4);
IkReal x74=((IkReal(1.00000000000000))*(x73));
IkReal x75=((IkReal(1.00000000000000))*(x72));
evalcond[0]=((((IkReal(-1.00000000000000))*(npz)*(sj5)*(x75)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)*(x75)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x74)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x74)))+(((cj5)*(npy)*(sj6)*(x72))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.00250000000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.0500000000000000))*(cj5))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst6;
gconst6=IKsign(((((IkReal(20.0000000000000))*((npy)*(npy))))+(((IkReal(20.0000000000000))*((npx)*(npx))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x149=((gconst6)*(sj5));
if( IKabs(((npy)*(x149))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npx)*(x149))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((npy)*(x149)), ((IkReal(-1.00000000000000))*(npx)*(x149)));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[3];
IkReal x150=IKcos(j6);
IkReal x151=IKsin(j6);
IkReal x152=((IkReal(1.00000000000000))*(npx));
IkReal x153=((npy)*(x151));
evalcond[0]=((((IkReal(-1.00000000000000))*(x151)*(x152)))+(((IkReal(-1.00000000000000))*(npy)*(x150))));
evalcond[1]=((IkReal(0.0500000000000000))+(((npx)*(sj5)*(x150)))+(((IkReal(-1.00000000000000))*(cj5)*(npz)))+(((IkReal(-1.00000000000000))*(sj5)*(x153))));
evalcond[2]=((((IkReal(-0.0500000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(x150)*(x152)))+(x153));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  )
{
continue;
}
}

{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x154=IKatan2(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))), ((((cj6)*(npy)))+(((npx)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x154));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x154))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x155=IKsin(j4);
IkReal x156=IKcos(j4);
IkReal x157=((IkReal(1.00000000000000))*(x156));
IkReal x158=((IkReal(1.00000000000000))*(x155));
evalcond[0]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x157)))+(((IkReal(-1.00000000000000))*(npz)*(sj5)*(x158)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x157)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)*(x158)))+(((cj5)*(npy)*(sj6)*(x155))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}
}
}

}

}

} else
{
IkReal x159=((IkReal(0.450000000000000))*(cj3));
IkReal x160=((IkReal(0.500000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x159));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.452500000000000))+(((IkReal(-1.00000000000000))*(x159)))+(pp));
evalcond[2]=x160;
evalcond[3]=x160;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-4.93827160493827))*((npy)*(npy)*(npy))))+(((IkReal(-4.93827160493827))*(npy)*((npx)*(npx))))+(((npy)*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x161=(sj3)*(sj3);
IkReal x162=(npy)*(npy);
IkReal x163=(npx)*(npx)*(npx);
IkReal x164=((npx)*(x162));
IkReal x165=((npx)*(x161));
IkReal x166=((IkReal(0.810000000000000))*(npy)*(x161));
IkReal x167=((((IkReal(4.00000000000000))*(npy)*((npx)*(npx))))+(((IkReal(4.00000000000000))*((npy)*(npy)*(npy)))));
IkReal x168=((((IkReal(-1.00000000000000))*(x167)))+(x166));
IkReal x169=((((IkReal(-1.62000000000000))*(x165)))+(((IkReal(8.00000000000000))*(x163)))+(((IkReal(8.00000000000000))*(x164))));
IkReal x170=((((IkReal(-1.00000000000000))*(x166)))+(x167));
op[0]=x168;
op[1]=x169;
op[2]=x168;
op[3]=((((IkReal(-3.24000000000000))*(x165)))+(((IkReal(16.0000000000000))*(x163)))+(((IkReal(16.0000000000000))*(x164))));
op[4]=x170;
op[5]=x169;
op[6]=x170;
polyroots6(op,zeror,numroots);
IkReal j6array[6], cj6array[6], sj6array[6], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((IkReal(2.00000000000000))*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[6]={true,true,true,true,true,true};
_nj6 = 6;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal dummyeval[1];
IkReal gconst7;
gconst7=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x171=((IkReal(0.950000000000000))+(((IkReal(-1.00000000000000))*(npz))));
IkReal x172=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.902500000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x172))));
evalcond[3]=x171;
evalcond[4]=x171;
evalcond[5]=((((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(x172))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x173=IKatan2(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))), ((((cj6)*(npy)))+(((npx)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x173));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x173))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x174=IKcos(j4);
IkReal x175=IKsin(j4);
IkReal x176=((IkReal(1.00000000000000))*(x174));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x176)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(x175)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x176)))+(((npy)*(sj6)*(x175))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x177=((IkReal(0.0500000000000000))+(((IkReal(-1.00000000000000))*(npz))));
IkReal x178=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.00250000000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x178))));
evalcond[3]=x177;
evalcond[4]=x177;
evalcond[5]=((((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(x178))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x179=IKatan2(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))), ((((cj6)*(npy)))+(((npx)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x179));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x179))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x180=IKcos(j4);
IkReal x181=IKsin(j4);
IkReal x182=((IkReal(1.00000000000000))*(x180));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npx)*(x181)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x182)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x182)))+(((npy)*(sj6)*(x181))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x183=((IkReal(20.0000000000000))*(npy));
IkReal x184=((IkReal(20.0000000000000))*(npx));
if( IKabs(((gconst7)*(((((cj6)*(x183)))+(((sj6)*(x184))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst7)*(((((sj6)*(x183)))+(((IkReal(-1.00000000000000))*(cj6)*(x184))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst7)*(((((cj6)*(x183)))+(((sj6)*(x184)))))), ((gconst7)*(((((sj6)*(x183)))+(((IkReal(-1.00000000000000))*(cj6)*(x184)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x185=IKsin(j4);
IkReal x186=IKcos(j4);
IkReal x187=((IkReal(1.00000000000000))*(cj6));
IkReal x188=((IkReal(0.450000000000000))*(sj3));
IkReal x189=((npy)*(sj6));
IkReal x190=((IkReal(1.00000000000000))*(npx)*(sj6));
IkReal x191=((npx)*(x185));
evalcond[0]=((((IkReal(-1.00000000000000))*(x190)))+(((x185)*(x188)))+(((IkReal(-1.00000000000000))*(npy)*(x187))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x186)*(x188)))+(x189)+(((IkReal(-1.00000000000000))*(npx)*(x187))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x186)*(x190)))+(((x185)*(x189)))+(((IkReal(-1.00000000000000))*(x187)*(x191)))+(((IkReal(-1.00000000000000))*(npy)*(x186)*(x187))));
evalcond[3]=((((x186)*(x189)))+(((IkReal(-1.00000000000000))*(x188)))+(((IkReal(-1.00000000000000))*(npx)*(x186)*(x187)))+(((sj6)*(x191)))+(((cj6)*(npy)*(x185))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}

} else
{
IkReal x192=((IkReal(0.450000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.452500000000000))+(((IkReal(-1.00000000000000))*(x192)))+(pp));
evalcond[2]=((IkReal(-0.500000000000000))+(((IkReal(-1.00000000000000))*(x192)))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[3]=((IkReal(0.500000000000000))+(npz)+(x192));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
dummyeval[0]=((((IkReal(-4.93827160493827))*((npy)*(npy)*(npy))))+(((IkReal(-4.93827160493827))*(npy)*((npx)*(npx))))+(((npy)*((sj3)*(sj3)))));
if( IKabs(dummyeval[0]) < 0.0000001000000000  )
{
continue;

} else
{
IkReal op[6+1], zeror[6];
int numroots;
IkReal x193=(sj3)*(sj3);
IkReal x194=(npy)*(npy);
IkReal x195=(npx)*(npx)*(npx);
IkReal x196=((npx)*(x194));
IkReal x197=((npx)*(x193));
IkReal x198=((IkReal(0.810000000000000))*(npy)*(x193));
IkReal x199=((((IkReal(4.00000000000000))*(npy)*((npx)*(npx))))+(((IkReal(4.00000000000000))*((npy)*(npy)*(npy)))));
IkReal x200=((((IkReal(-1.00000000000000))*(x199)))+(x198));
IkReal x201=((((IkReal(-1.62000000000000))*(x197)))+(((IkReal(8.00000000000000))*(x196)))+(((IkReal(8.00000000000000))*(x195))));
IkReal x202=((((IkReal(-1.00000000000000))*(x198)))+(x199));
op[0]=x200;
op[1]=x201;
op[2]=x200;
op[3]=((((IkReal(-3.24000000000000))*(x197)))+(((IkReal(16.0000000000000))*(x195)))+(((IkReal(16.0000000000000))*(x196))));
op[4]=x202;
op[5]=x201;
op[6]=x202;
polyroots6(op,zeror,numroots);
IkReal j6array[6], cj6array[6], sj6array[6], tempj6array[1];
int numsolutions = 0;
for(int ij6 = 0; ij6 < numroots; ++ij6)
{
IkReal htj6 = zeror[ij6];
tempj6array[0]=((IkReal(2.00000000000000))*(atan(htj6)));
for(int kj6 = 0; kj6 < 1; ++kj6)
{
j6array[numsolutions] = tempj6array[kj6];
if( j6array[numsolutions] > IKPI )
{
    j6array[numsolutions]-=IK2PI;
}
else if( j6array[numsolutions] < -IKPI )
{
    j6array[numsolutions]+=IK2PI;
}
sj6array[numsolutions] = IKsin(j6array[numsolutions]);
cj6array[numsolutions] = IKcos(j6array[numsolutions]);
numsolutions++;
}
}
bool j6valid[6]={true,true,true,true,true,true};
_nj6 = 6;
for(int ij6 = 0; ij6 < numsolutions; ++ij6)
    {
if( !j6valid[ij6] )
{
    continue;
}
    j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
htj6 = IKtan(j6/2);

_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < numsolutions; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
{
IkReal dummyeval[1];
IkReal gconst8;
gconst8=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x203=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.902500000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x203))));
evalcond[3]=((IkReal(-0.950000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[4]=((IkReal(0.950000000000000))+(npz));
evalcond[5]=((((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(x203))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x204=IKatan2(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))), ((((cj6)*(npy)))+(((npx)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x204));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x204))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x205=IKsin(j4);
IkReal x206=IKcos(j4);
IkReal x207=((IkReal(1.00000000000000))*(x206));
evalcond[0]=((((cj6)*(npx)*(x205)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x205)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x207)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x207))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x208=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.00250000000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x208))));
evalcond[3]=((IkReal(-0.0500000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[4]=((IkReal(0.0500000000000000))+(npz));
evalcond[5]=((((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(x208))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x209=IKatan2(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))), ((((cj6)*(npy)))+(((npx)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x209));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x209))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x210=IKsin(j4);
IkReal x211=IKcos(j4);
IkReal x212=((IkReal(1.00000000000000))*(x211));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x212)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x210)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x212)))+(((cj6)*(npx)*(x210))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x213=((IkReal(20.0000000000000))*(npy));
IkReal x214=((IkReal(20.0000000000000))*(npx));
if( IKabs(((gconst8)*(((((cj6)*(x213)))+(((sj6)*(x214))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst8)*(((((IkReal(-1.00000000000000))*(sj6)*(x213)))+(((cj6)*(x214))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst8)*(((((cj6)*(x213)))+(((sj6)*(x214)))))), ((gconst8)*(((((IkReal(-1.00000000000000))*(sj6)*(x213)))+(((cj6)*(x214)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x215=IKsin(j4);
IkReal x216=IKcos(j4);
IkReal x217=((IkReal(1.00000000000000))*(cj6));
IkReal x218=((npy)*(sj6));
IkReal x219=((IkReal(0.450000000000000))*(sj3));
IkReal x220=((cj6)*(npx));
IkReal x221=((npx)*(sj6));
IkReal x222=((IkReal(1.00000000000000))*(x216));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x217)))+(((x215)*(x219)))+(((IkReal(-1.00000000000000))*(x221))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npx)*(x217)))+(((x216)*(x219)))+(x218));
evalcond[2]=((((IkReal(-1.00000000000000))*(x215)*(x218)))+(((IkReal(-1.00000000000000))*(npy)*(x216)*(x217)))+(((x215)*(x220)))+(((IkReal(-1.00000000000000))*(x221)*(x222))));
evalcond[3]=((((x216)*(x220)))+(((x215)*(x221)))+(((IkReal(-1.00000000000000))*(x218)*(x222)))+(((cj6)*(npy)*(x215)))+(((IkReal(-1.00000000000000))*(x219))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
    }

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
cj4array[0]=((IkReal(2.22222222222222))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(-1.00000000000000))*(npz)))+(((IkReal(0.500000000000000))*(cj5)))+(((IkReal(0.450000000000000))*(cj3)*(cj5))))));
if( cj4array[0] >= -1-IKFAST_SINCOS_THRESH && cj4array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j4valid[0] = j4valid[1] = true;
    j4array[0] = IKacos(cj4array[0]);
    sj4array[0] = IKsin(j4array[0]);
    cj4array[1] = cj4array[0];
    j4array[1] = -j4array[0];
    sj4array[1] = -sj4array[0];
}
else if( isnan(cj4array[0]) )
{
    // probably any value will work
    j4valid[0] = true;
    cj4array[0] = 1; sj4array[0] = 0; j4array[0] = 0;
}
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];

{
IkReal dummyeval[1];
IkReal gconst0;
IkReal x223=((IkReal(20.0000000000000))*(sj5));
gconst0=IKsign(((((x223)*((npy)*(npy))))+(((x223)*((npx)*(npx))))));
dummyeval[0]=((((sj5)*((npy)*(npy))))+(((sj5)*((npx)*(npx)))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[4];
IkReal x224=((IkReal(0.450000000000000))*(cj3));
IkReal x225=((IkReal(0.500000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x224));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.452500000000000))+(pp)+(((IkReal(-1.00000000000000))*(x224))));
evalcond[2]=x225;
evalcond[3]=x225;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst1;
gconst1=IKsign(((((IkReal(20.0000000000000))*((npy)*(npy))))+(((IkReal(20.0000000000000))*((npx)*(npx))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x226=((IkReal(9.00000000000000))*(npx)*(sj3));
IkReal x227=((IkReal(9.00000000000000))*(npy)*(sj3));
if( IKabs(((gconst1)*(((((sj4)*(x226)))+(((cj4)*(x227))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst1)*(((((sj4)*(x227)))+(((IkReal(-1.00000000000000))*(cj4)*(x226))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst1)*(((((sj4)*(x226)))+(((cj4)*(x227)))))), ((gconst1)*(((((sj4)*(x227)))+(((IkReal(-1.00000000000000))*(cj4)*(x226)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x228=IKsin(j6);
IkReal x229=IKcos(j6);
IkReal x230=((IkReal(0.450000000000000))*(sj3));
IkReal x231=((IkReal(1.00000000000000))*(npx));
IkReal x232=((IkReal(1.00000000000000))*(cj4));
IkReal x233=((npy)*(x228));
IkReal x234=((sj4)*(x229));
IkReal x235=((npx)*(x228));
IkReal x236=((npy)*(x229));
evalcond[0]=((((sj4)*(x230)))+(((IkReal(-1.00000000000000))*(x236)))+(((IkReal(-1.00000000000000))*(x228)*(x231))));
evalcond[1]=((((IkReal(-1.00000000000000))*(cj4)*(x230)))+(x233)+(((IkReal(-1.00000000000000))*(x229)*(x231))));
evalcond[2]=((((sj4)*(x233)))+(((IkReal(-1.00000000000000))*(x231)*(x234)))+(((IkReal(-1.00000000000000))*(x232)*(x236)))+(((IkReal(-1.00000000000000))*(cj4)*(x228)*(x231))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj4)*(x229)*(x231)))+(((IkReal(-1.00000000000000))*(x230)))+(((sj4)*(x235)))+(((cj4)*(x233)))+(((npy)*(x234))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x237=((IkReal(0.450000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.452500000000000))+(((IkReal(-1.00000000000000))*(x237)))+(pp));
evalcond[2]=((IkReal(-0.500000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x237))));
evalcond[3]=((IkReal(0.500000000000000))+(npz)+(x237));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst2;
gconst2=IKsign(((((IkReal(20.0000000000000))*((npy)*(npy))))+(((IkReal(20.0000000000000))*((npx)*(npx))))));
dummyeval[0]=(((npx)*(npx))+((npy)*(npy)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x238=((IkReal(9.00000000000000))*(npx)*(sj3));
IkReal x239=((IkReal(9.00000000000000))*(npy)*(sj3));
if( IKabs(((gconst2)*(((((IkReal(-1.00000000000000))*(cj4)*(x239)))+(((sj4)*(x238))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst2)*(((((sj4)*(x239)))+(((cj4)*(x238))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst2)*(((((IkReal(-1.00000000000000))*(cj4)*(x239)))+(((sj4)*(x238)))))), ((gconst2)*(((((sj4)*(x239)))+(((cj4)*(x238)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[4];
IkReal x240=IKsin(j6);
IkReal x241=IKcos(j6);
IkReal x242=((IkReal(0.450000000000000))*(sj3));
IkReal x243=((IkReal(1.00000000000000))*(cj4));
IkReal x244=((npy)*(x240));
IkReal x245=((sj4)*(x241));
IkReal x246=((npx)*(x240));
IkReal x247=((IkReal(1.00000000000000))*(x241));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x247)))+(((IkReal(-1.00000000000000))*(x246)))+(((sj4)*(x242))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npx)*(x247)))+(((cj4)*(x242)))+(x244));
evalcond[2]=((((IkReal(-1.00000000000000))*(x243)*(x246)))+(((IkReal(-1.00000000000000))*(npy)*(x241)*(x243)))+(((npx)*(x245)))+(((IkReal(-1.00000000000000))*(sj4)*(x244))));
evalcond[3]=((((cj4)*(npx)*(x241)))+(((IkReal(-1.00000000000000))*(x243)*(x244)))+(((npy)*(x245)))+(((IkReal(-1.00000000000000))*(x242)))+(((sj4)*(x246))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j6array[1], cj6array[1], sj6array[1];
bool j6valid[1]={false};
_nj6 = 1;
IkReal x248=((IkReal(9.00000000000000))*(npx));
IkReal x249=((IkReal(9.00000000000000))*(npy));
IkReal x250=((sj3)*(sj4)*(sj5));
IkReal x251=((IkReal(20.0000000000000))*(cj5)*(npz));
if( IKabs(((gconst0)*(((((IkReal(-1.00000000000000))*(npy)*(x251)))+(((x248)*(x250)))+(((IkReal(10.0000000000000))*(npy)))+(((cj3)*(x249))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst0)*(((((IkReal(-10.0000000000000))*(npx)))+(((x249)*(x250)))+(((IkReal(-1.00000000000000))*(cj3)*(x248)))+(((npx)*(x251))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j6array[0]=IKatan2(((gconst0)*(((((IkReal(-1.00000000000000))*(npy)*(x251)))+(((x248)*(x250)))+(((IkReal(10.0000000000000))*(npy)))+(((cj3)*(x249)))))), ((gconst0)*(((((IkReal(-10.0000000000000))*(npx)))+(((x249)*(x250)))+(((IkReal(-1.00000000000000))*(cj3)*(x248)))+(((npx)*(x251)))))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
for(int ij6 = 0; ij6 < 1; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 1; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];
{
IkReal evalcond[5];
IkReal x252=IKcos(j6);
IkReal x253=IKsin(j6);
IkReal x254=((IkReal(1.00000000000000))*(npz));
IkReal x255=((IkReal(0.450000000000000))*(sj3));
IkReal x256=((cj5)*(sj4));
IkReal x257=((cj4)*(cj5));
IkReal x258=((IkReal(0.450000000000000))*(cj3));
IkReal x259=((npy)*(x253));
IkReal x260=((npx)*(x253));
IkReal x261=((IkReal(1.00000000000000))*(x252));
evalcond[0]=((((sj4)*(x255)))+(((IkReal(-1.00000000000000))*(npy)*(x261)))+(((IkReal(-1.00000000000000))*(x260))));
evalcond[1]=((IkReal(0.500000000000000))+(((IkReal(-1.00000000000000))*(cj5)*(x254)))+(((npx)*(sj5)*(x252)))+(x258)+(((IkReal(-1.00000000000000))*(sj5)*(x259))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x255)*(x257)))+(x259)+(((IkReal(-1.00000000000000))*(sj5)*(x258)))+(((IkReal(-0.500000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(npx)*(x261))));
evalcond[3]=((((IkReal(-1.00000000000000))*(cj4)*(x260)))+(((IkReal(-1.00000000000000))*(npx)*(x256)*(x261)))+(((x256)*(x259)))+(((IkReal(-1.00000000000000))*(sj4)*(sj5)*(x254)))+(((IkReal(-1.00000000000000))*(cj4)*(npy)*(x261))));
evalcond[4]=((((npy)*(sj4)*(x252)))+(((IkReal(-1.00000000000000))*(npx)*(x257)*(x261)))+(((x257)*(x259)))+(((sj4)*(x260)))+(((IkReal(-1.00000000000000))*(cj4)*(sj5)*(x254)))+(((IkReal(-1.00000000000000))*(x255))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x262=(sj5)*(sj5);
if( IKabs(((npx)*(sj5))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npy)*(sj5))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x263=((IkReal(1.00000000000000))*(IKatan2(((npx)*(sj5)), ((IkReal(-1.00000000000000))*(npy)*(sj5)))));
if( (((((x262)*((npy)*(npy))))+(((x262)*((npx)*(npx)))))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt(((((x262)*((npy)*(npy))))+(((x262)*((npx)*(npx)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x262)*((npy)*(npy))))+(((x262)*((npx)*(npx))))))))):(IkReal)1.0e30))*(((IkReal(0.500000000000000))+(((IkReal(-1.00000000000000))*(cj5)*(npz)))+(((IkReal(0.450000000000000))*(cj3))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt(((((x262)*((npy)*(npy))))+(((x262)*((npx)*(npx)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x262)*((npy)*(npy))))+(((x262)*((npx)*(npx))))))))):(IkReal)1.0e30))*(((IkReal(0.500000000000000))+(((IkReal(-1.00000000000000))*(cj5)*(npz)))+(((IkReal(0.450000000000000))*(cj3))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x264=IKasin(((((IKabs(IKabs(IKsqrt(((((x262)*((npy)*(npy))))+(((x262)*((npx)*(npx)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x262)*((npy)*(npy))))+(((x262)*((npx)*(npx))))))))):(IkReal)1.0e30))*(((IkReal(0.500000000000000))+(((IkReal(-1.00000000000000))*(cj5)*(npz)))+(((IkReal(0.450000000000000))*(cj3)))))));
j6array[0]=((((IkReal(-1.00000000000000))*(x264)))+(((IkReal(-1.00000000000000))*(x263))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(x264)+(((IkReal(-1.00000000000000))*(x263))));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal dummyeval[2];
IkReal x265=((cj5)*(sj3));
dummyeval[0]=sj3;
dummyeval[1]=((((IkReal(-1.00000000000000))*(cj6)*(npx)*(x265)))+(((npy)*(sj6)*(x265)))+(((IkReal(-1.00000000000000))*(npz)*(sj3)*(sj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x266=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=sj3;
dummyeval[1]=((((IkReal(-1.00000000000000))*(cj6)*(npy)*(x266)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x266))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x267=((IkReal(1.00000000000000))*(npy));
IkReal x268=((IkReal(1.00000000000000))*(npx));
IkReal x269=((IkReal(1.00000000000000))*(npz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.902500000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x268)))+(((IkReal(-1.00000000000000))*(cj6)*(x267))));
evalcond[3]=((((IkReal(0.950000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(x269))));
evalcond[4]=((IkReal(0.950000000000000))+(((IkReal(-1.00000000000000))*(cj5)*(x269)))+(((IkReal(-1.00000000000000))*(sj5)*(sj6)*(x267)))+(((cj6)*(npx)*(sj5))));
evalcond[5]=((((IkReal(-0.950000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj6)*(x268)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x270=IKatan2(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))), ((((cj6)*(npy)))+(((npx)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x270));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x270))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x271=IKsin(j4);
IkReal x272=IKcos(j4);
IkReal x273=((IkReal(1.00000000000000))*(x272));
IkReal x274=((IkReal(1.00000000000000))*(x271));
evalcond[0]=((((IkReal(-1.00000000000000))*(npz)*(sj5)*(x274)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x273)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)*(x274)))+(((cj5)*(npy)*(sj6)*(x271)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x273))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x275=((IkReal(1.00000000000000))*(npy));
IkReal x276=((IkReal(1.00000000000000))*(npx));
IkReal x277=((IkReal(1.00000000000000))*(npz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.00250000000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x276)))+(((IkReal(-1.00000000000000))*(cj6)*(x275))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x277)))+(((IkReal(0.0500000000000000))*(cj5))));
evalcond[4]=((IkReal(0.0500000000000000))+(((IkReal(-1.00000000000000))*(cj5)*(x277)))+(((IkReal(-1.00000000000000))*(sj5)*(sj6)*(x275)))+(((cj6)*(npx)*(sj5))));
evalcond[5]=((((IkReal(-0.0500000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(cj6)*(x276)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x278=IKatan2(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))), ((((cj6)*(npy)))+(((npx)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x278));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x278))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x279=IKsin(j4);
IkReal x280=IKcos(j4);
IkReal x281=((IkReal(1.00000000000000))*(x280));
IkReal x282=((IkReal(1.00000000000000))*(x279));
evalcond[0]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x281)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)*(x282)))+(((cj5)*(npy)*(sj6)*(x279)))+(((IkReal(-1.00000000000000))*(npz)*(sj5)*(x282)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x281))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x283=((IkReal(0.450000000000000))*(cj3));
IkReal x284=((IkReal(0.500000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x283));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.452500000000000))+(pp)+(((IkReal(-1.00000000000000))*(x283))));
evalcond[2]=x284;
evalcond[3]=x284;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x285=((IkReal(0.950000000000000))+(((IkReal(-1.00000000000000))*(npz))));
IkReal x286=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.902500000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x286)))+(((IkReal(-1.00000000000000))*(cj6)*(npy))));
evalcond[3]=x285;
evalcond[4]=x285;
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x286)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x287=IKatan2(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))), ((((cj6)*(npy)))+(((npx)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x287));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x287))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x288=IKcos(j4);
IkReal x289=IKsin(j4);
IkReal x290=((IkReal(1.00000000000000))*(x288));
evalcond[0]=((((npy)*(sj6)*(x289)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(x289)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x290)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x290))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x291=((IkReal(0.0500000000000000))+(((IkReal(-1.00000000000000))*(npz))));
IkReal x292=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.00250000000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x292))));
evalcond[3]=x291;
evalcond[4]=x291;
evalcond[5]=((((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(x292))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x293=IKatan2(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))), ((((cj6)*(npy)))+(((npx)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x293));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x293))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x294=IKcos(j4);
IkReal x295=IKsin(j4);
IkReal x296=((IkReal(1.00000000000000))*(x294));
evalcond[0]=((((npy)*(sj6)*(x295)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x296)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x296)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(x295))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x297=((IkReal(20.0000000000000))*(npy));
IkReal x298=((IkReal(20.0000000000000))*(npx));
if( IKabs(((gconst3)*(((((cj6)*(x297)))+(((sj6)*(x298))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((sj6)*(x297)))+(((IkReal(-1.00000000000000))*(cj6)*(x298))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst3)*(((((cj6)*(x297)))+(((sj6)*(x298)))))), ((gconst3)*(((((sj6)*(x297)))+(((IkReal(-1.00000000000000))*(cj6)*(x298)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x299=IKsin(j4);
IkReal x300=IKcos(j4);
IkReal x301=((IkReal(1.00000000000000))*(cj6));
IkReal x302=((IkReal(0.450000000000000))*(sj3));
IkReal x303=((npy)*(sj6));
IkReal x304=((IkReal(1.00000000000000))*(npx)*(sj6));
IkReal x305=((npx)*(x299));
evalcond[0]=((((x299)*(x302)))+(((IkReal(-1.00000000000000))*(npy)*(x301)))+(((IkReal(-1.00000000000000))*(x304))));
evalcond[1]=((x303)+(((IkReal(-1.00000000000000))*(npx)*(x301)))+(((IkReal(-1.00000000000000))*(x300)*(x302))));
evalcond[2]=((((IkReal(-1.00000000000000))*(x301)*(x305)))+(((x299)*(x303)))+(((IkReal(-1.00000000000000))*(npy)*(x300)*(x301)))+(((IkReal(-1.00000000000000))*(x300)*(x304))));
evalcond[3]=((((cj6)*(npy)*(x299)))+(((IkReal(-1.00000000000000))*(npx)*(x300)*(x301)))+(((x300)*(x303)))+(((IkReal(-1.00000000000000))*(x302)))+(((sj6)*(x305))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x306=((IkReal(0.450000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.452500000000000))+(pp)+(((IkReal(-1.00000000000000))*(x306))));
evalcond[2]=((IkReal(-0.500000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x306))));
evalcond[3]=((IkReal(0.500000000000000))+(npz)+(x306));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x307=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.902500000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x307))));
evalcond[3]=((IkReal(-0.950000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[4]=((IkReal(0.950000000000000))+(npz));
evalcond[5]=((((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(x307))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x308=IKatan2(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))), ((((cj6)*(npy)))+(((npx)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x308));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x308))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x309=IKsin(j4);
IkReal x310=IKcos(j4);
IkReal x311=((IkReal(1.00000000000000))*(x310));
evalcond[0]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x311)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x311)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x309)))+(((cj6)*(npx)*(x309))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x312=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.00250000000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x312))));
evalcond[3]=((IkReal(-0.0500000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[4]=((IkReal(0.0500000000000000))+(npz));
evalcond[5]=((((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(x312))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x313=IKatan2(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))), ((((cj6)*(npy)))+(((npx)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x313));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x313))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x314=IKsin(j4);
IkReal x315=IKcos(j4);
IkReal x316=((IkReal(1.00000000000000))*(x315));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(sj6)*(x314)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x316)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x316)))+(((cj6)*(npx)*(x314))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x317=((IkReal(20.0000000000000))*(npy));
IkReal x318=((IkReal(20.0000000000000))*(npx));
if( IKabs(((gconst4)*(((((sj6)*(x318)))+(((cj6)*(x317))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((IkReal(-1.00000000000000))*(sj6)*(x317)))+(((cj6)*(x318))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst4)*(((((sj6)*(x318)))+(((cj6)*(x317)))))), ((gconst4)*(((((IkReal(-1.00000000000000))*(sj6)*(x317)))+(((cj6)*(x318)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x319=IKsin(j4);
IkReal x320=IKcos(j4);
IkReal x321=((IkReal(1.00000000000000))*(cj6));
IkReal x322=((npy)*(sj6));
IkReal x323=((IkReal(0.450000000000000))*(sj3));
IkReal x324=((cj6)*(npx));
IkReal x325=((npx)*(sj6));
IkReal x326=((IkReal(1.00000000000000))*(x320));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x321)))+(((IkReal(-1.00000000000000))*(x325)))+(((x319)*(x323))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npx)*(x321)))+(((x320)*(x323)))+(x322));
evalcond[2]=((((IkReal(-1.00000000000000))*(x325)*(x326)))+(((IkReal(-1.00000000000000))*(npy)*(x320)*(x321)))+(((IkReal(-1.00000000000000))*(x319)*(x322)))+(((x319)*(x324))));
evalcond[3]=((((cj6)*(npy)*(x319)))+(((x320)*(x324)))+(((IkReal(-1.00000000000000))*(x323)))+(((IkReal(-1.00000000000000))*(x322)*(x326)))+(((x319)*(x325))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x327=((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30);
IkReal x328=((IkReal(0.111111111111111))*(x327));
if( IKabs(((x328)*(((((IkReal(20.0000000000000))*(npx)*(sj6)))+(((IkReal(20.0000000000000))*(cj6)*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x328)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(10.0000000000000))*(cj5)))+(((IkReal(-20.0000000000000))*(npz)))+(((IkReal(9.00000000000000))*(cj3)*(cj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x328)*(((((IkReal(20.0000000000000))*(npx)*(sj6)))+(((IkReal(20.0000000000000))*(cj6)*(npy)))))))+IKsqr(((x328)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(10.0000000000000))*(cj5)))+(((IkReal(-20.0000000000000))*(npz)))+(((IkReal(9.00000000000000))*(cj3)*(cj5)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x328)*(((((IkReal(20.0000000000000))*(npx)*(sj6)))+(((IkReal(20.0000000000000))*(cj6)*(npy)))))), ((x328)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(10.0000000000000))*(cj5)))+(((IkReal(-20.0000000000000))*(npz)))+(((IkReal(9.00000000000000))*(cj3)*(cj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x329=IKcos(j4);
IkReal x330=IKsin(j4);
IkReal x331=((npy)*(sj6));
IkReal x332=((IkReal(0.450000000000000))*(sj3));
IkReal x333=((IkReal(1.00000000000000))*(cj6));
IkReal x334=((IkReal(1.00000000000000))*(npz));
IkReal x335=((IkReal(0.450000000000000))*(cj3));
IkReal x336=((IkReal(1.00000000000000))*(npx)*(sj6));
IkReal x337=((cj5)*(x329));
IkReal x338=((cj5)*(x330));
IkReal x339=((sj5)*(x329));
evalcond[0]=((((x330)*(x332)))+(((IkReal(-1.00000000000000))*(x336)))+(((IkReal(-1.00000000000000))*(npy)*(x333))));
evalcond[1]=((((IkReal(0.500000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(x334)))+(((IkReal(-1.00000000000000))*(x332)*(x339)))+(((cj5)*(x335))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj5)*(x335)))+(x331)+(((IkReal(-1.00000000000000))*(x332)*(x337)))+(((IkReal(-0.500000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(npx)*(x333))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npy)*(x329)*(x333)))+(((x331)*(x338)))+(((IkReal(-1.00000000000000))*(x329)*(x336)))+(((IkReal(-1.00000000000000))*(npx)*(x333)*(x338)))+(((IkReal(-1.00000000000000))*(sj5)*(x330)*(x334))));
evalcond[4]=((((cj6)*(npy)*(x330)))+(((x331)*(x337)))+(((npx)*(sj6)*(x330)))+(((IkReal(-1.00000000000000))*(x332)))+(((IkReal(-1.00000000000000))*(npx)*(x333)*(x337)))+(((IkReal(-1.00000000000000))*(x334)*(x339))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x340=((cj6)*(npy));
IkReal x341=((IkReal(9.00000000000000))*(sj3));
IkReal x342=((IkReal(20.0000000000000))*(npx));
IkReal x343=((cj5)*(npy));
IkReal x344=((npx)*(sj6));
IkReal x345=((IkReal(20.0000000000000))*(npz)*(sj5));
IkReal x346=((IkReal(20.0000000000000))*(cj5)*(cj6)*(sj6));
if( IKabs(((IkReal(0.111111111111111))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(20.0000000000000))*(x340)))+(((sj6)*(x342))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x340)*(x341)))+(((IkReal(-1.00000000000000))*(x341)*(x344))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x340)*(x341)))+(((IkReal(-1.00000000000000))*(x341)*(x344)))))):(IkReal)1.0e30))*(((((cj5)*(cj6)*(x340)*(x342)))+(((IkReal(-1.00000000000000))*(x342)*(x343)*((sj6)*(sj6))))+(((cj5)*(cj6)*(x342)*(x344)))+(((x340)*(x345)))+(((IkReal(-20.0000000000000))*(sj6)*(x340)*(x343)))+(((npz)*(sj5)*(sj6)*(x342))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.111111111111111))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(20.0000000000000))*(x340)))+(((sj6)*(x342)))))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x340)*(x341)))+(((IkReal(-1.00000000000000))*(x341)*(x344))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x340)*(x341)))+(((IkReal(-1.00000000000000))*(x341)*(x344)))))):(IkReal)1.0e30))*(((((cj5)*(cj6)*(x340)*(x342)))+(((IkReal(-1.00000000000000))*(x342)*(x343)*((sj6)*(sj6))))+(((cj5)*(cj6)*(x342)*(x344)))+(((x340)*(x345)))+(((IkReal(-20.0000000000000))*(sj6)*(x340)*(x343)))+(((npz)*(sj5)*(sj6)*(x342)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(0.111111111111111))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(20.0000000000000))*(x340)))+(((sj6)*(x342)))))), ((((IKabs(((((IkReal(-1.00000000000000))*(x340)*(x341)))+(((IkReal(-1.00000000000000))*(x341)*(x344))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x340)*(x341)))+(((IkReal(-1.00000000000000))*(x341)*(x344)))))):(IkReal)1.0e30))*(((((cj5)*(cj6)*(x340)*(x342)))+(((IkReal(-1.00000000000000))*(x342)*(x343)*((sj6)*(sj6))))+(((cj5)*(cj6)*(x342)*(x344)))+(((x340)*(x345)))+(((IkReal(-20.0000000000000))*(sj6)*(x340)*(x343)))+(((npz)*(sj5)*(sj6)*(x342)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x347=IKcos(j4);
IkReal x348=IKsin(j4);
IkReal x349=((npy)*(sj6));
IkReal x350=((IkReal(0.450000000000000))*(sj3));
IkReal x351=((IkReal(1.00000000000000))*(cj6));
IkReal x352=((IkReal(1.00000000000000))*(npz));
IkReal x353=((IkReal(0.450000000000000))*(cj3));
IkReal x354=((IkReal(1.00000000000000))*(npx)*(sj6));
IkReal x355=((cj5)*(x347));
IkReal x356=((cj5)*(x348));
IkReal x357=((sj5)*(x347));
evalcond[0]=((((IkReal(-1.00000000000000))*(npy)*(x351)))+(((IkReal(-1.00000000000000))*(x354)))+(((x348)*(x350))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x352)))+(((IkReal(0.500000000000000))*(cj5)))+(((cj5)*(x353)))+(((IkReal(-1.00000000000000))*(x350)*(x357))));
evalcond[2]=((((IkReal(-1.00000000000000))*(npx)*(x351)))+(x349)+(((IkReal(-0.500000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(sj5)*(x353)))+(((IkReal(-1.00000000000000))*(x350)*(x355))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npx)*(x351)*(x356)))+(((IkReal(-1.00000000000000))*(sj5)*(x348)*(x352)))+(((IkReal(-1.00000000000000))*(x347)*(x354)))+(((x349)*(x356)))+(((IkReal(-1.00000000000000))*(npy)*(x347)*(x351))));
evalcond[4]=((((IkReal(-1.00000000000000))*(npx)*(x351)*(x355)))+(((IkReal(-1.00000000000000))*(x350)))+(((cj6)*(npy)*(x348)))+(((npx)*(sj6)*(x348)))+(((x349)*(x355)))+(((IkReal(-1.00000000000000))*(x352)*(x357))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x358=((cj6)*(npy));
IkReal x359=((npx)*(sj6));
IkReal x360=((IkReal(180.000000000000))*(cj5)*(sj3));
if( IKabs(((IkReal(0.111111111111111))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(20.0000000000000))*(x359)))+(((IkReal(20.0000000000000))*(x358))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((npy)*(sj6)*(x360)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(x360)))+(((IkReal(-180.000000000000))*(npz)*(sj3)*(sj5))))) != 0)?((IkReal)1/(((((npy)*(sj6)*(x360)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(x360)))+(((IkReal(-180.000000000000))*(npz)*(sj3)*(sj5)))))):(IkReal)1.0e30))*(((((IkReal(-400.000000000000))*((x359)*(x359))))+(((IkReal(-400.000000000000))*((x358)*(x358))))+(((IkReal(81.0000000000000))*((sj3)*(sj3))))+(((IkReal(-800.000000000000))*(x358)*(x359))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.111111111111111))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(20.0000000000000))*(x359)))+(((IkReal(20.0000000000000))*(x358)))))))+IKsqr(((((IKabs(((((npy)*(sj6)*(x360)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(x360)))+(((IkReal(-180.000000000000))*(npz)*(sj3)*(sj5))))) != 0)?((IkReal)1/(((((npy)*(sj6)*(x360)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(x360)))+(((IkReal(-180.000000000000))*(npz)*(sj3)*(sj5)))))):(IkReal)1.0e30))*(((((IkReal(-400.000000000000))*((x359)*(x359))))+(((IkReal(-400.000000000000))*((x358)*(x358))))+(((IkReal(81.0000000000000))*((sj3)*(sj3))))+(((IkReal(-800.000000000000))*(x358)*(x359)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(0.111111111111111))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(20.0000000000000))*(x359)))+(((IkReal(20.0000000000000))*(x358)))))), ((((IKabs(((((npy)*(sj6)*(x360)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(x360)))+(((IkReal(-180.000000000000))*(npz)*(sj3)*(sj5))))) != 0)?((IkReal)1/(((((npy)*(sj6)*(x360)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(x360)))+(((IkReal(-180.000000000000))*(npz)*(sj3)*(sj5)))))):(IkReal)1.0e30))*(((((IkReal(-400.000000000000))*((x359)*(x359))))+(((IkReal(-400.000000000000))*((x358)*(x358))))+(((IkReal(81.0000000000000))*((sj3)*(sj3))))+(((IkReal(-800.000000000000))*(x358)*(x359)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x361=IKcos(j4);
IkReal x362=IKsin(j4);
IkReal x363=((npy)*(sj6));
IkReal x364=((IkReal(0.450000000000000))*(sj3));
IkReal x365=((IkReal(1.00000000000000))*(cj6));
IkReal x366=((IkReal(1.00000000000000))*(npz));
IkReal x367=((IkReal(0.450000000000000))*(cj3));
IkReal x368=((IkReal(1.00000000000000))*(npx)*(sj6));
IkReal x369=((cj5)*(x361));
IkReal x370=((cj5)*(x362));
IkReal x371=((sj5)*(x361));
evalcond[0]=((((IkReal(-1.00000000000000))*(x368)))+(((IkReal(-1.00000000000000))*(npy)*(x365)))+(((x362)*(x364))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x366)))+(((cj5)*(x367)))+(((IkReal(0.500000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(x364)*(x371))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj5)*(x367)))+(x363)+(((IkReal(-1.00000000000000))*(x364)*(x369)))+(((IkReal(-0.500000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(npx)*(x365))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x361)*(x368)))+(((IkReal(-1.00000000000000))*(sj5)*(x362)*(x366)))+(((IkReal(-1.00000000000000))*(npx)*(x365)*(x370)))+(((IkReal(-1.00000000000000))*(npy)*(x361)*(x365)))+(((x363)*(x370))));
evalcond[4]=((((npx)*(sj6)*(x362)))+(((IkReal(-1.00000000000000))*(x364)))+(((cj6)*(npy)*(x362)))+(((IkReal(-1.00000000000000))*(x366)*(x371)))+(((IkReal(-1.00000000000000))*(npx)*(x365)*(x369)))+(((x363)*(x369))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j6array[2], cj6array[2], sj6array[2];
bool j6valid[2]={false};
_nj6 = 2;
IkReal x372=(sj5)*(sj5);
if( IKabs(((npx)*(sj5))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(npy)*(sj5))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x373=((IkReal(1.00000000000000))*(IKatan2(((npx)*(sj5)), ((IkReal(-1.00000000000000))*(npy)*(sj5)))));
if( (((((x372)*((npx)*(npx))))+(((x372)*((npy)*(npy)))))) < (IkReal)-0.00001 )
    continue;
if( (((((IKabs(IKabs(IKsqrt(((((x372)*((npx)*(npx))))+(((x372)*((npy)*(npy)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x372)*((npx)*(npx))))+(((x372)*((npy)*(npy))))))))):(IkReal)1.0e30))*(((IkReal(0.500000000000000))+(((IkReal(-1.00000000000000))*(cj5)*(npz)))+(((IkReal(0.450000000000000))*(cj3))))))) < -1-IKFAST_SINCOS_THRESH || (((((IKabs(IKabs(IKsqrt(((((x372)*((npx)*(npx))))+(((x372)*((npy)*(npy)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x372)*((npx)*(npx))))+(((x372)*((npy)*(npy))))))))):(IkReal)1.0e30))*(((IkReal(0.500000000000000))+(((IkReal(-1.00000000000000))*(cj5)*(npz)))+(((IkReal(0.450000000000000))*(cj3))))))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x374=IKasin(((((IKabs(IKabs(IKsqrt(((((x372)*((npx)*(npx))))+(((x372)*((npy)*(npy)))))))) != 0)?((IkReal)1/(IKabs(IKsqrt(((((x372)*((npx)*(npx))))+(((x372)*((npy)*(npy))))))))):(IkReal)1.0e30))*(((IkReal(0.500000000000000))+(((IkReal(-1.00000000000000))*(cj5)*(npz)))+(((IkReal(0.450000000000000))*(cj3)))))));
j6array[0]=((((IkReal(-1.00000000000000))*(x374)))+(((IkReal(-1.00000000000000))*(x373))));
sj6array[0]=IKsin(j6array[0]);
cj6array[0]=IKcos(j6array[0]);
j6array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x373)))+(x374));
sj6array[1]=IKsin(j6array[1]);
cj6array[1]=IKcos(j6array[1]);
if( j6array[0] > IKPI )
{
    j6array[0]-=IK2PI;
}
else if( j6array[0] < -IKPI )
{    j6array[0]+=IK2PI;
}
j6valid[0] = true;
if( j6array[1] > IKPI )
{
    j6array[1]-=IK2PI;
}
else if( j6array[1] < -IKPI )
{    j6array[1]+=IK2PI;
}
j6valid[1] = true;
for(int ij6 = 0; ij6 < 2; ++ij6)
{
if( !j6valid[ij6] )
{
    continue;
}
_ij6[0] = ij6; _ij6[1] = -1;
for(int iij6 = ij6+1; iij6 < 2; ++iij6)
{
if( j6valid[iij6] && IKabs(cj6array[ij6]-cj6array[iij6]) < IKFAST_SOLUTION_THRESH && IKabs(sj6array[ij6]-sj6array[iij6]) < IKFAST_SOLUTION_THRESH )
{
    j6valid[iij6]=false; _ij6[1] = iij6; break; 
}
}
j6 = j6array[ij6]; cj6 = cj6array[ij6]; sj6 = sj6array[ij6];

{
IkReal dummyeval[2];
IkReal x375=((cj5)*(sj3));
dummyeval[0]=sj3;
dummyeval[1]=((((npy)*(sj6)*(x375)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(x375)))+(((IkReal(-1.00000000000000))*(npz)*(sj3)*(sj5))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
IkReal x376=((IkReal(1.00000000000000))*(sj3));
dummyeval[0]=sj3;
dummyeval[1]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x376)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x376))));
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal dummyeval[2];
dummyeval[0]=sj3;
dummyeval[1]=sj5;
if( IKabs(dummyeval[0]) < 0.0000010000000000  || IKabs(dummyeval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x377=((IkReal(1.00000000000000))*(npy));
IkReal x378=((IkReal(1.00000000000000))*(npx));
IkReal x379=((IkReal(1.00000000000000))*(npz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.902500000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(x377)))+(((IkReal(-1.00000000000000))*(sj6)*(x378))));
evalcond[3]=((((IkReal(0.950000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(x379))));
evalcond[4]=((IkReal(0.950000000000000))+(((IkReal(-1.00000000000000))*(cj5)*(x379)))+(((cj6)*(npx)*(sj5)))+(((IkReal(-1.00000000000000))*(sj5)*(sj6)*(x377))));
evalcond[5]=((((IkReal(-0.950000000000000))*(sj5)))+(((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(x378))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x380=IKatan2(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))), ((((cj6)*(npy)))+(((npx)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x380));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x380))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x381=IKsin(j4);
IkReal x382=IKcos(j4);
IkReal x383=((IkReal(1.00000000000000))*(x382));
IkReal x384=((IkReal(1.00000000000000))*(x381));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)*(x384)))+(((IkReal(-1.00000000000000))*(npz)*(sj5)*(x384)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x383)))+(((cj5)*(npy)*(sj6)*(x381)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x383))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x385=((IkReal(1.00000000000000))*(npy));
IkReal x386=((IkReal(1.00000000000000))*(npx));
IkReal x387=((IkReal(1.00000000000000))*(npz));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.00250000000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(x385)))+(((IkReal(-1.00000000000000))*(sj6)*(x386))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x387)))+(((IkReal(0.0500000000000000))*(cj5))));
evalcond[4]=((IkReal(0.0500000000000000))+(((IkReal(-1.00000000000000))*(cj5)*(x387)))+(((IkReal(-1.00000000000000))*(sj5)*(sj6)*(x385)))+(((cj6)*(npx)*(sj5))));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x386)))+(((IkReal(-0.0500000000000000))*(sj5)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x388=IKatan2(((((IkReal(-1.00000000000000))*(npz)*(sj5)))+(((cj5)*(npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)))), ((((cj6)*(npy)))+(((npx)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x388));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x388))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x389=IKsin(j4);
IkReal x390=IKcos(j4);
IkReal x391=((IkReal(1.00000000000000))*(x390));
IkReal x392=((IkReal(1.00000000000000))*(x389));
evalcond[0]=((((cj5)*(npy)*(sj6)*(x389)))+(((IkReal(-1.00000000000000))*(cj5)*(cj6)*(npx)*(x392)))+(((IkReal(-1.00000000000000))*(npz)*(sj5)*(x392)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x391)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x391))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x393=((IkReal(0.450000000000000))*(cj3));
IkReal x394=((IkReal(0.500000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(x393));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.452500000000000))+(((IkReal(-1.00000000000000))*(x393)))+(pp));
evalcond[2]=x394;
evalcond[3]=x394;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst3;
gconst3=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x395=((IkReal(0.950000000000000))+(((IkReal(-1.00000000000000))*(npz))));
IkReal x396=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.902500000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x396))));
evalcond[3]=x395;
evalcond[4]=x395;
evalcond[5]=((((npy)*(sj6)))+(((IkReal(-1.00000000000000))*(cj6)*(x396))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x397=IKatan2(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))), ((((cj6)*(npy)))+(((npx)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x397));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x397))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x398=IKcos(j4);
IkReal x399=IKsin(j4);
IkReal x400=((IkReal(1.00000000000000))*(x398));
evalcond[0]=((((npy)*(sj6)*(x399)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x400)))+(((IkReal(-1.00000000000000))*(cj6)*(npx)*(x399)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x400))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x401=((IkReal(0.0500000000000000))+(((IkReal(-1.00000000000000))*(npz))));
IkReal x402=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.00250000000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x402))));
evalcond[3]=x401;
evalcond[4]=x401;
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x402)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x403=IKatan2(((((IkReal(-1.00000000000000))*(cj6)*(npx)))+(((npy)*(sj6)))), ((((cj6)*(npy)))+(((npx)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x403));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x403))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x404=IKcos(j4);
IkReal x405=IKsin(j4);
IkReal x406=((IkReal(1.00000000000000))*(x404));
evalcond[0]=((((IkReal(-1.00000000000000))*(cj6)*(npx)*(x405)))+(((npy)*(sj6)*(x405)))+(((IkReal(-1.00000000000000))*(npx)*(sj6)*(x406)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x406))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x407=((IkReal(20.0000000000000))*(npy));
IkReal x408=((IkReal(20.0000000000000))*(npx));
if( IKabs(((gconst3)*(((((sj6)*(x408)))+(((cj6)*(x407))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst3)*(((((IkReal(-1.00000000000000))*(cj6)*(x408)))+(((sj6)*(x407))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst3)*(((((sj6)*(x408)))+(((cj6)*(x407)))))), ((gconst3)*(((((IkReal(-1.00000000000000))*(cj6)*(x408)))+(((sj6)*(x407)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x409=IKsin(j4);
IkReal x410=IKcos(j4);
IkReal x411=((IkReal(1.00000000000000))*(cj6));
IkReal x412=((IkReal(0.450000000000000))*(sj3));
IkReal x413=((npy)*(sj6));
IkReal x414=((IkReal(1.00000000000000))*(npx)*(sj6));
IkReal x415=((npx)*(x409));
evalcond[0]=((((x409)*(x412)))+(((IkReal(-1.00000000000000))*(npy)*(x411)))+(((IkReal(-1.00000000000000))*(x414))));
evalcond[1]=((x413)+(((IkReal(-1.00000000000000))*(npx)*(x411)))+(((IkReal(-1.00000000000000))*(x410)*(x412))));
evalcond[2]=((((x409)*(x413)))+(((IkReal(-1.00000000000000))*(npy)*(x410)*(x411)))+(((IkReal(-1.00000000000000))*(x411)*(x415)))+(((IkReal(-1.00000000000000))*(x410)*(x414))));
evalcond[3]=((((x410)*(x413)))+(((cj6)*(npy)*(x409)))+(((sj6)*(x415)))+(((IkReal(-1.00000000000000))*(x412)))+(((IkReal(-1.00000000000000))*(npx)*(x410)*(x411))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
IkReal x416=((IkReal(0.450000000000000))*(cj3));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j5)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.452500000000000))+(pp)+(((IkReal(-1.00000000000000))*(x416))));
evalcond[2]=((IkReal(-0.500000000000000))+(((IkReal(-1.00000000000000))*(npz)))+(((IkReal(-1.00000000000000))*(x416))));
evalcond[3]=((IkReal(0.500000000000000))+(npz)+(x416));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst4;
gconst4=IKsign(sj3);
dummyeval[0]=sj3;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[6];
IkReal x417=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.902500000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj6)*(x417)))+(((IkReal(-1.00000000000000))*(cj6)*(npy))));
evalcond[3]=((IkReal(-0.950000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[4]=((IkReal(0.950000000000000))+(npz));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x417)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x418=IKatan2(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))), ((((cj6)*(npy)))+(((npx)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x418));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x418))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x419=IKsin(j4);
IkReal x420=IKcos(j4);
IkReal x421=((IkReal(1.00000000000000))*(x420));
evalcond[0]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x421)))+(((cj6)*(npx)*(x419)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x421)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x419))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
IkReal x422=((IkReal(1.00000000000000))*(npx));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j3)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-0.00250000000000000))+(pp));
evalcond[2]=((((IkReal(-1.00000000000000))*(cj6)*(npy)))+(((IkReal(-1.00000000000000))*(sj6)*(x422))));
evalcond[3]=((IkReal(-0.0500000000000000))+(((IkReal(-1.00000000000000))*(npz))));
evalcond[4]=((IkReal(0.0500000000000000))+(npz));
evalcond[5]=((((IkReal(-1.00000000000000))*(cj6)*(x422)))+(((npy)*(sj6))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  )
{
{
IkReal j4array[2], cj4array[2], sj4array[2];
bool j4valid[2]={false};
_nj4 = 2;
if( IKabs(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((cj6)*(npy)))+(((npx)*(sj6))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x423=IKatan2(((((cj6)*(npx)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)))), ((((cj6)*(npy)))+(((npx)*(sj6)))));
j4array[0]=((IkReal(-1.00000000000000))*(x423));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
j4array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x423))));
sj4array[1]=IKsin(j4array[1]);
cj4array[1]=IKcos(j4array[1]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
if( j4array[1] > IKPI )
{
    j4array[1]-=IK2PI;
}
else if( j4array[1] < -IKPI )
{    j4array[1]+=IK2PI;
}
j4valid[1] = true;
for(int ij4 = 0; ij4 < 2; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 2; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[1];
IkReal x424=IKsin(j4);
IkReal x425=IKcos(j4);
IkReal x426=((IkReal(1.00000000000000))*(x425));
evalcond[0]=((((IkReal(-1.00000000000000))*(npx)*(sj6)*(x426)))+(((cj6)*(npx)*(x424)))+(((IkReal(-1.00000000000000))*(cj6)*(npy)*(x426)))+(((IkReal(-1.00000000000000))*(npy)*(sj6)*(x424))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x427=((IkReal(20.0000000000000))*(npy));
IkReal x428=((IkReal(20.0000000000000))*(npx));
if( IKabs(((gconst4)*(((((sj6)*(x428)))+(((cj6)*(x427))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((gconst4)*(((((cj6)*(x428)))+(((IkReal(-1.00000000000000))*(sj6)*(x427))))))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j4array[0]=IKatan2(((gconst4)*(((((sj6)*(x428)))+(((cj6)*(x427)))))), ((gconst4)*(((((cj6)*(x428)))+(((IkReal(-1.00000000000000))*(sj6)*(x427)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[4];
IkReal x429=IKsin(j4);
IkReal x430=IKcos(j4);
IkReal x431=((IkReal(1.00000000000000))*(cj6));
IkReal x432=((npy)*(sj6));
IkReal x433=((IkReal(0.450000000000000))*(sj3));
IkReal x434=((cj6)*(npx));
IkReal x435=((npx)*(sj6));
IkReal x436=((IkReal(1.00000000000000))*(x430));
evalcond[0]=((((x429)*(x433)))+(((IkReal(-1.00000000000000))*(x435)))+(((IkReal(-1.00000000000000))*(npy)*(x431))));
evalcond[1]=((((IkReal(-1.00000000000000))*(npx)*(x431)))+(x432)+(((x430)*(x433))));
evalcond[2]=((((x429)*(x434)))+(((IkReal(-1.00000000000000))*(x429)*(x432)))+(((IkReal(-1.00000000000000))*(x435)*(x436)))+(((IkReal(-1.00000000000000))*(npy)*(x430)*(x431))));
evalcond[3]=((((x429)*(x435)))+(((IkReal(-1.00000000000000))*(x433)))+(((IkReal(-1.00000000000000))*(x432)*(x436)))+(((cj6)*(npy)*(x429)))+(((x430)*(x434))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}
}
}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x437=((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30);
IkReal x438=((IkReal(0.111111111111111))*(x437));
if( IKabs(((x438)*(((((IkReal(20.0000000000000))*(npx)*(sj6)))+(((IkReal(20.0000000000000))*(cj6)*(npy))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x438)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(10.0000000000000))*(cj5)))+(((IkReal(-20.0000000000000))*(npz)))+(((IkReal(9.00000000000000))*(cj3)*(cj5))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x438)*(((((IkReal(20.0000000000000))*(npx)*(sj6)))+(((IkReal(20.0000000000000))*(cj6)*(npy)))))))+IKsqr(((x438)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(10.0000000000000))*(cj5)))+(((IkReal(-20.0000000000000))*(npz)))+(((IkReal(9.00000000000000))*(cj3)*(cj5)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((x438)*(((((IkReal(20.0000000000000))*(npx)*(sj6)))+(((IkReal(20.0000000000000))*(cj6)*(npy)))))), ((x438)*(((IKabs(sj5) != 0)?((IkReal)1/(sj5)):(IkReal)1.0e30))*(((((IkReal(10.0000000000000))*(cj5)))+(((IkReal(-20.0000000000000))*(npz)))+(((IkReal(9.00000000000000))*(cj3)*(cj5)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x439=IKcos(j4);
IkReal x440=IKsin(j4);
IkReal x441=((npy)*(sj6));
IkReal x442=((IkReal(0.450000000000000))*(sj3));
IkReal x443=((IkReal(1.00000000000000))*(cj6));
IkReal x444=((IkReal(1.00000000000000))*(npz));
IkReal x445=((IkReal(0.450000000000000))*(cj3));
IkReal x446=((IkReal(1.00000000000000))*(npx)*(sj6));
IkReal x447=((cj5)*(x439));
IkReal x448=((cj5)*(x440));
IkReal x449=((sj5)*(x439));
evalcond[0]=((((IkReal(-1.00000000000000))*(x446)))+(((IkReal(-1.00000000000000))*(npy)*(x443)))+(((x440)*(x442))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x444)))+(((cj5)*(x445)))+(((IkReal(0.500000000000000))*(cj5)))+(((IkReal(-1.00000000000000))*(x442)*(x449))));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj5)*(x445)))+(((IkReal(-1.00000000000000))*(npx)*(x443)))+(x441)+(((IkReal(-0.500000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(x442)*(x447))));
evalcond[3]=((((IkReal(-1.00000000000000))*(x439)*(x446)))+(((IkReal(-1.00000000000000))*(npx)*(x443)*(x448)))+(((IkReal(-1.00000000000000))*(npy)*(x439)*(x443)))+(((x441)*(x448)))+(((IkReal(-1.00000000000000))*(sj5)*(x440)*(x444))));
evalcond[4]=((((npx)*(sj6)*(x440)))+(((IkReal(-1.00000000000000))*(x442)))+(((IkReal(-1.00000000000000))*(x444)*(x449)))+(((cj6)*(npy)*(x440)))+(((IkReal(-1.00000000000000))*(npx)*(x443)*(x447)))+(((x441)*(x447))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x450=((cj6)*(npy));
IkReal x451=((IkReal(9.00000000000000))*(sj3));
IkReal x452=((IkReal(20.0000000000000))*(npx));
IkReal x453=((cj5)*(npy));
IkReal x454=((npx)*(sj6));
IkReal x455=((IkReal(20.0000000000000))*(npz)*(sj5));
IkReal x456=((IkReal(20.0000000000000))*(cj5)*(cj6)*(sj6));
if( IKabs(((IkReal(0.111111111111111))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((sj6)*(x452)))+(((IkReal(20.0000000000000))*(x450))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(x450)*(x451)))+(((IkReal(-1.00000000000000))*(x451)*(x454))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x450)*(x451)))+(((IkReal(-1.00000000000000))*(x451)*(x454)))))):(IkReal)1.0e30))*(((((cj5)*(cj6)*(x452)*(x454)))+(((npz)*(sj5)*(sj6)*(x452)))+(((cj5)*(cj6)*(x450)*(x452)))+(((x450)*(x455)))+(((IkReal(-1.00000000000000))*(x452)*(x453)*((sj6)*(sj6))))+(((IkReal(-20.0000000000000))*(sj6)*(x450)*(x453))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.111111111111111))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((sj6)*(x452)))+(((IkReal(20.0000000000000))*(x450)))))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(x450)*(x451)))+(((IkReal(-1.00000000000000))*(x451)*(x454))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x450)*(x451)))+(((IkReal(-1.00000000000000))*(x451)*(x454)))))):(IkReal)1.0e30))*(((((cj5)*(cj6)*(x452)*(x454)))+(((npz)*(sj5)*(sj6)*(x452)))+(((cj5)*(cj6)*(x450)*(x452)))+(((x450)*(x455)))+(((IkReal(-1.00000000000000))*(x452)*(x453)*((sj6)*(sj6))))+(((IkReal(-20.0000000000000))*(sj6)*(x450)*(x453)))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(0.111111111111111))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((sj6)*(x452)))+(((IkReal(20.0000000000000))*(x450)))))), ((((IKabs(((((IkReal(-1.00000000000000))*(x450)*(x451)))+(((IkReal(-1.00000000000000))*(x451)*(x454))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(x450)*(x451)))+(((IkReal(-1.00000000000000))*(x451)*(x454)))))):(IkReal)1.0e30))*(((((cj5)*(cj6)*(x452)*(x454)))+(((npz)*(sj5)*(sj6)*(x452)))+(((cj5)*(cj6)*(x450)*(x452)))+(((x450)*(x455)))+(((IkReal(-1.00000000000000))*(x452)*(x453)*((sj6)*(sj6))))+(((IkReal(-20.0000000000000))*(sj6)*(x450)*(x453)))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x457=IKcos(j4);
IkReal x458=IKsin(j4);
IkReal x459=((npy)*(sj6));
IkReal x460=((IkReal(0.450000000000000))*(sj3));
IkReal x461=((IkReal(1.00000000000000))*(cj6));
IkReal x462=((IkReal(1.00000000000000))*(npz));
IkReal x463=((IkReal(0.450000000000000))*(cj3));
IkReal x464=((IkReal(1.00000000000000))*(npx)*(sj6));
IkReal x465=((cj5)*(x457));
IkReal x466=((cj5)*(x458));
IkReal x467=((sj5)*(x457));
evalcond[0]=((((IkReal(-1.00000000000000))*(x464)))+(((x458)*(x460)))+(((IkReal(-1.00000000000000))*(npy)*(x461))));
evalcond[1]=((((cj5)*(x463)))+(((IkReal(-1.00000000000000))*(x460)*(x467)))+(((IkReal(-1.00000000000000))*(x462)))+(((IkReal(0.500000000000000))*(cj5))));
evalcond[2]=((((IkReal(-1.00000000000000))*(npx)*(x461)))+(((IkReal(-1.00000000000000))*(sj5)*(x463)))+(((IkReal(-1.00000000000000))*(x460)*(x465)))+(x459)+(((IkReal(-0.500000000000000))*(sj5))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npx)*(x461)*(x466)))+(((x459)*(x466)))+(((IkReal(-1.00000000000000))*(npy)*(x457)*(x461)))+(((IkReal(-1.00000000000000))*(x457)*(x464)))+(((IkReal(-1.00000000000000))*(sj5)*(x458)*(x462))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x462)*(x467)))+(((cj6)*(npy)*(x458)))+(((IkReal(-1.00000000000000))*(npx)*(x461)*(x465)))+(((IkReal(-1.00000000000000))*(x460)))+(((npx)*(sj6)*(x458)))+(((x459)*(x465))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j4array[1], cj4array[1], sj4array[1];
bool j4valid[1]={false};
_nj4 = 1;
IkReal x468=((cj6)*(npy));
IkReal x469=((npx)*(sj6));
IkReal x470=((IkReal(180.000000000000))*(cj5)*(sj3));
if( IKabs(((IkReal(0.111111111111111))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(20.0000000000000))*(x469)))+(((IkReal(20.0000000000000))*(x468))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)*(x470)))+(((npy)*(sj6)*(x470)))+(((IkReal(-180.000000000000))*(npz)*(sj3)*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npx)*(x470)))+(((npy)*(sj6)*(x470)))+(((IkReal(-180.000000000000))*(npz)*(sj3)*(sj5)))))):(IkReal)1.0e30))*(((((IkReal(-800.000000000000))*(x468)*(x469)))+(((IkReal(81.0000000000000))*((sj3)*(sj3))))+(((IkReal(-400.000000000000))*((x468)*(x468))))+(((IkReal(-400.000000000000))*((x469)*(x469)))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((IkReal(0.111111111111111))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(20.0000000000000))*(x469)))+(((IkReal(20.0000000000000))*(x468)))))))+IKsqr(((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)*(x470)))+(((npy)*(sj6)*(x470)))+(((IkReal(-180.000000000000))*(npz)*(sj3)*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npx)*(x470)))+(((npy)*(sj6)*(x470)))+(((IkReal(-180.000000000000))*(npz)*(sj3)*(sj5)))))):(IkReal)1.0e30))*(((((IkReal(-800.000000000000))*(x468)*(x469)))+(((IkReal(81.0000000000000))*((sj3)*(sj3))))+(((IkReal(-400.000000000000))*((x468)*(x468))))+(((IkReal(-400.000000000000))*((x469)*(x469))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j4array[0]=IKatan2(((IkReal(0.111111111111111))*(((IKabs(sj3) != 0)?((IkReal)1/(sj3)):(IkReal)1.0e30))*(((((IkReal(20.0000000000000))*(x469)))+(((IkReal(20.0000000000000))*(x468)))))), ((((IKabs(((((IkReal(-1.00000000000000))*(cj6)*(npx)*(x470)))+(((npy)*(sj6)*(x470)))+(((IkReal(-180.000000000000))*(npz)*(sj3)*(sj5))))) != 0)?((IkReal)1/(((((IkReal(-1.00000000000000))*(cj6)*(npx)*(x470)))+(((npy)*(sj6)*(x470)))+(((IkReal(-180.000000000000))*(npz)*(sj3)*(sj5)))))):(IkReal)1.0e30))*(((((IkReal(-800.000000000000))*(x468)*(x469)))+(((IkReal(81.0000000000000))*((sj3)*(sj3))))+(((IkReal(-400.000000000000))*((x468)*(x468))))+(((IkReal(-400.000000000000))*((x469)*(x469))))))));
sj4array[0]=IKsin(j4array[0]);
cj4array[0]=IKcos(j4array[0]);
if( j4array[0] > IKPI )
{
    j4array[0]-=IK2PI;
}
else if( j4array[0] < -IKPI )
{    j4array[0]+=IK2PI;
}
j4valid[0] = true;
for(int ij4 = 0; ij4 < 1; ++ij4)
{
if( !j4valid[ij4] )
{
    continue;
}
_ij4[0] = ij4; _ij4[1] = -1;
for(int iij4 = ij4+1; iij4 < 1; ++iij4)
{
if( j4valid[iij4] && IKabs(cj4array[ij4]-cj4array[iij4]) < IKFAST_SOLUTION_THRESH && IKabs(sj4array[ij4]-sj4array[iij4]) < IKFAST_SOLUTION_THRESH )
{
    j4valid[iij4]=false; _ij4[1] = iij4; break; 
}
}
j4 = j4array[ij4]; cj4 = cj4array[ij4]; sj4 = sj4array[ij4];
{
IkReal evalcond[5];
IkReal x471=IKcos(j4);
IkReal x472=IKsin(j4);
IkReal x473=((npy)*(sj6));
IkReal x474=((IkReal(0.450000000000000))*(sj3));
IkReal x475=((IkReal(1.00000000000000))*(cj6));
IkReal x476=((IkReal(1.00000000000000))*(npz));
IkReal x477=((IkReal(0.450000000000000))*(cj3));
IkReal x478=((IkReal(1.00000000000000))*(npx)*(sj6));
IkReal x479=((cj5)*(x471));
IkReal x480=((cj5)*(x472));
IkReal x481=((sj5)*(x471));
evalcond[0]=((((x472)*(x474)))+(((IkReal(-1.00000000000000))*(npy)*(x475)))+(((IkReal(-1.00000000000000))*(x478))));
evalcond[1]=((((cj5)*(x477)))+(((IkReal(-1.00000000000000))*(x474)*(x481)))+(((IkReal(-1.00000000000000))*(x476)))+(((IkReal(0.500000000000000))*(cj5))));
evalcond[2]=((((IkReal(-1.00000000000000))*(npx)*(x475)))+(((IkReal(-1.00000000000000))*(sj5)*(x477)))+(x473)+(((IkReal(-0.500000000000000))*(sj5)))+(((IkReal(-1.00000000000000))*(x474)*(x479))));
evalcond[3]=((((IkReal(-1.00000000000000))*(npy)*(x471)*(x475)))+(((IkReal(-1.00000000000000))*(npx)*(x475)*(x480)))+(((IkReal(-1.00000000000000))*(sj5)*(x472)*(x476)))+(((IkReal(-1.00000000000000))*(x471)*(x478)))+(((x473)*(x480))));
evalcond[4]=((((IkReal(-1.00000000000000))*(x476)*(x481)))+(((x473)*(x479)))+(((IkReal(-1.00000000000000))*(x474)))+(((IkReal(-1.00000000000000))*(npx)*(x475)*(x479)))+(((npx)*(sj6)*(x472)))+(((cj6)*(npy)*(x472))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x76=((IkReal(1.00000000000000))*(cj3));
IkReal x77=((IkReal(1.00000000000000))*(sj6));
IkReal x78=((IkReal(1.00000000000000))*(sj3));
IkReal x79=((IkReal(1.00000000000000))*(cj5));
IkReal x80=((IkReal(-1.00000000000000))*(sj4));
IkReal x81=((IkReal(-1.00000000000000))*(cj5));
IkReal x82=((((IkReal(-1.00000000000000))*(r01)*(x77)))+(((cj6)*(r00))));
IkReal x83=((((r00)*(sj6)))+(((cj6)*(r01))));
IkReal x84=((((cj6)*(r10)))+(((IkReal(-1.00000000000000))*(r11)*(x77))));
IkReal x85=((((r10)*(sj6)))+(((cj6)*(r11))));
IkReal x86=((((IkReal(-1.00000000000000))*(r21)*(x77)))+(((cj6)*(r20))));
IkReal x87=((((cj6)*(r21)))+(((r20)*(sj6))));
IkReal x88=((sj5)*(x84));
IkReal x89=((sj5)*(x86));
IkReal x90=((sj4)*(x87));
IkReal x91=((((r02)*(sj5)))+(((cj5)*(x82))));
IkReal x92=((((IkReal(-1.00000000000000))*(r02)*(x79)))+(((sj5)*(x82))));
IkReal x93=((((cj5)*(x84)))+(((r12)*(sj5))));
IkReal x94=((((r22)*(sj5)))+(((cj5)*(x86))));
IkReal x95=((cj4)*(x93));
IkReal x96=((cj4)*(x94));
IkReal x97=((IkReal(1.00000000000000))*(x92));
IkReal x98=((((cj4)*(x91)))+(((x80)*(x83))));
new_r00=((((cj3)*(x98)))+(((IkReal(-1.00000000000000))*(x78)*(x92))));
new_r01=((((sj4)*(x91)))+(((cj4)*(x83))));
new_r02=((((IkReal(-1.00000000000000))*(x78)*(x98)))+(((IkReal(-1.00000000000000))*(x76)*(x92))));
new_r10=((((IkReal(-1.00000000000000))*(x78)*(((((r12)*(x81)))+(x88)))))+(((cj3)*(((((IkReal(-1.00000000000000))*(sj4)*(x85)))+(x95))))));
new_r11=((((sj4)*(x93)))+(((cj4)*(x85))));
new_r12=((((IkReal(-1.00000000000000))*(x76)*(((x88)+(((IkReal(-1.00000000000000))*(r12)*(x79)))))))+(((IkReal(-1.00000000000000))*(x78)*(((x95)+(((x80)*(x85))))))));
new_r20=((((IkReal(-1.00000000000000))*(x78)*(((x89)+(((r22)*(x81)))))))+(((cj3)*(((x96)+(((IkReal(-1.00000000000000))*(x90))))))));
new_r21=((((sj4)*(x94)))+(((cj4)*(x87))));
new_r22=((((IkReal(-1.00000000000000))*(x78)*(((x96)+(((x80)*(x87)))))))+(((IkReal(-1.00000000000000))*(x76)*(((((IkReal(-1.00000000000000))*(r22)*(x79)))+(x89))))));
{
IkReal j1array[2], cj1array[2], sj1array[2];
bool j1valid[2]={false};
_nj1 = 2;
cj1array[0]=new_r22;
if( cj1array[0] >= -1-IKFAST_SINCOS_THRESH && cj1array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j1valid[0] = j1valid[1] = true;
    j1array[0] = IKacos(cj1array[0]);
    sj1array[0] = IKsin(j1array[0]);
    cj1array[1] = cj1array[0];
    j1array[1] = -j1array[0];
    sj1array[1] = -sj1array[0];
}
else if( isnan(cj1array[0]) )
{
    // probably any value will work
    j1valid[0] = true;
    cj1array[0] = 1; sj1array[0] = 0; j1array[0] = 0;
}
for(int ij1 = 0; ij1 < 2; ++ij1)
{
if( !j1valid[ij1] )
{
    continue;
}
_ij1[0] = ij1; _ij1[1] = -1;
for(int iij1 = ij1+1; iij1 < 2; ++iij1)
{
if( j1valid[iij1] && IKabs(cj1array[ij1]-cj1array[iij1]) < IKFAST_SOLUTION_THRESH && IKabs(sj1array[ij1]-sj1array[iij1]) < IKFAST_SOLUTION_THRESH )
{
    j1valid[iij1]=false; _ij1[1] = iij1; break; 
}
}
j1 = j1array[ij1]; cj1 = cj1array[ij1]; sj1 = sj1array[ij1];

{
IkReal dummyeval[1];
IkReal gconst10;
gconst10=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal dummyeval[1];
IkReal gconst9;
gconst9=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[7];
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[5]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[6]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x99=IKatan2(new_r02, new_r12);
j0array[0]=((IkReal(-1.00000000000000))*(x99));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x99))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j0))))+(((new_r12)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj0)))+(((cj0)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))))+IKsqr(((((new_r10)*(sj0)))+(((cj0)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))), ((((new_r10)*(sj0)))+(((cj0)*(new_r00)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x100=IKsin(j2);
IkReal x101=((IkReal(1.00000000000000))*(sj0));
IkReal x102=((IkReal(1.00000000000000))*(IKcos(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x101)))+(((cj0)*(new_r10)))+(((IkReal(-1.00000000000000))*(x100))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x101)))+(((IkReal(-1.00000000000000))*(x102)))+(((cj0)*(new_r11))));
evalcond[2]=((((new_r11)*(sj0)))+(x100)+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(((IkReal(-1.00000000000000))*(x102)))+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
IkReal x103=((IkReal(1.00000000000000))+(new_r22));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x103;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=new_r20;
evalcond[5]=new_r21;
evalcond[6]=x103;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  )
{
{
IkReal j0array[2], cj0array[2], sj0array[2];
bool j0valid[2]={false};
_nj0 = 2;
if( IKabs(new_r02) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r12) < IKFAST_ATAN2_MAGTHRESH )
    continue;
IkReal x104=IKatan2(new_r02, new_r12);
j0array[0]=((IkReal(-1.00000000000000))*(x104));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
j0array[1]=((IkReal(3.14159265358979))+(((IkReal(-1.00000000000000))*(x104))));
sj0array[1]=IKsin(j0array[1]);
cj0array[1]=IKcos(j0array[1]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
if( j0array[1] > IKPI )
{
    j0array[1]-=IK2PI;
}
else if( j0array[1] < -IKPI )
{    j0array[1]+=IK2PI;
}
j0valid[1] = true;
for(int ij0 = 0; ij0 < 2; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 2; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[1];
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(IKsin(j0))))+(((new_r12)*(IKcos(j0)))));
if( IKabs(evalcond[0]) > 0.000001  )
{
continue;
}
}

{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((new_r11)*(sj0)))+(((cj0)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x105=IKcos(j2);
IkReal x106=((IkReal(1.00000000000000))*(sj0));
IkReal x107=((IkReal(1.00000000000000))*(IKsin(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x106)))+(((IkReal(-1.00000000000000))*(x107)))+(((cj0)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x106)))+(((cj0)*(new_r11)))+(((IkReal(-1.00000000000000))*(x105))));
evalcond[2]=((((new_r11)*(sj0)))+(((IkReal(-1.00000000000000))*(x107)))+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(x105)+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x108=((gconst9)*(sj1));
if( IKabs(((new_r12)*(x108))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x108))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r12)*(x108)), ((new_r02)*(x108)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[6];
IkReal x109=IKcos(j0);
IkReal x110=IKsin(j0);
IkReal x111=((IkReal(1.00000000000000))*(cj1));
IkReal x112=((IkReal(1.00000000000000))*(sj1));
IkReal x113=((new_r12)*(x110));
IkReal x114=((new_r02)*(x109));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r02)*(x110)))+(((new_r12)*(x109))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x112)))+(x113)+(x114));
evalcond[2]=((((cj1)*(x113)))+(((cj1)*(x114)))+(((IkReal(-1.00000000000000))*(new_r22)*(x112))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r00)*(x109)*(x112)))+(((IkReal(-1.00000000000000))*(new_r20)*(x111)))+(((IkReal(-1.00000000000000))*(new_r10)*(x110)*(x112))));
evalcond[4]=((((IkReal(-1.00000000000000))*(new_r01)*(x109)*(x112)))+(((IkReal(-1.00000000000000))*(new_r11)*(x110)*(x112)))+(((IkReal(-1.00000000000000))*(new_r21)*(x111))));
evalcond[5]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x112)*(x113)))+(((IkReal(-1.00000000000000))*(x112)*(x114)))+(((IkReal(-1.00000000000000))*(new_r22)*(x111))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst11;
gconst11=IKsign(sj1);
dummyeval[0]=sj1;
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[11];
IkReal x115=((((IkReal(-1.00000000000000))*(new_r02)*(sj0)))+(((cj0)*(new_r12))));
IkReal x116=((((new_r12)*(sj0)))+(((cj0)*(new_r02))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(3.14159265358979))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=((IkReal(-1.00000000000000))+(new_r22));
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x115;
evalcond[5]=x115;
evalcond[6]=x116;
evalcond[7]=x116;
evalcond[8]=((IkReal(-1.00000000000000))*(new_r20));
evalcond[9]=((IkReal(-1.00000000000000))*(new_r21));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(new_r22))));
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((new_r10)*(sj0)))+(((cj0)*(new_r00))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))))+IKsqr(((((new_r10)*(sj0)))+(((cj0)*(new_r00)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((IkReal(-1.00000000000000))*(cj0)*(new_r01)))+(((IkReal(-1.00000000000000))*(new_r11)*(sj0)))), ((((new_r10)*(sj0)))+(((cj0)*(new_r00)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x117=IKsin(j2);
IkReal x118=((IkReal(1.00000000000000))*(sj0));
IkReal x119=((IkReal(1.00000000000000))*(IKcos(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x118)))+(((IkReal(-1.00000000000000))*(x117)))+(((cj0)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x118)))+(((IkReal(-1.00000000000000))*(x119)))+(((cj0)*(new_r11))));
evalcond[2]=((((new_r11)*(sj0)))+(x117)+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(((IkReal(-1.00000000000000))*(x119)))+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
IkReal x120=((IkReal(1.00000000000000))+(new_r22));
IkReal x121=((new_r12)*(sj0));
IkReal x122=((cj0)*(new_r02));
IkReal x123=((((IkReal(-1.00000000000000))*(new_r02)*(sj0)))+(((cj0)*(new_r12))));
evalcond[0]=((IkReal(-3.14159265358979))+(IKfmod(((IkReal(1.11022302462516e-16))+(j1)), IkReal(6.28318530717959))));
evalcond[1]=x120;
evalcond[2]=new_r20;
evalcond[3]=new_r21;
evalcond[4]=x123;
evalcond[5]=x123;
evalcond[6]=((x122)+(x121));
evalcond[7]=((((IkReal(-1.00000000000000))*(x122)))+(((IkReal(-1.00000000000000))*(x121))));
evalcond[8]=new_r20;
evalcond[9]=new_r21;
evalcond[10]=x120;
if( IKabs(evalcond[0]) < 0.0000010000000000  && IKabs(evalcond[1]) < 0.0000010000000000  && IKabs(evalcond[2]) < 0.0000010000000000  && IKabs(evalcond[3]) < 0.0000010000000000  && IKabs(evalcond[4]) < 0.0000010000000000  && IKabs(evalcond[5]) < 0.0000010000000000  && IKabs(evalcond[6]) < 0.0000010000000000  && IKabs(evalcond[7]) < 0.0000010000000000  && IKabs(evalcond[8]) < 0.0000010000000000  && IKabs(evalcond[9]) < 0.0000010000000000  && IKabs(evalcond[10]) < 0.0000010000000000  )
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((((new_r11)*(sj0)))+(((cj0)*(new_r01))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))))+IKsqr(((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j2array[0]=IKatan2(((((new_r11)*(sj0)))+(((cj0)*(new_r01)))), ((((IkReal(-1.00000000000000))*(cj0)*(new_r00)))+(((IkReal(-1.00000000000000))*(new_r10)*(sj0)))));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[4];
IkReal x124=IKcos(j2);
IkReal x125=((IkReal(1.00000000000000))*(sj0));
IkReal x126=((IkReal(1.00000000000000))*(IKsin(j2)));
evalcond[0]=((((IkReal(-1.00000000000000))*(new_r00)*(x125)))+(((IkReal(-1.00000000000000))*(x126)))+(((cj0)*(new_r10))));
evalcond[1]=((((IkReal(-1.00000000000000))*(new_r01)*(x125)))+(((IkReal(-1.00000000000000))*(x124)))+(((cj0)*(new_r11))));
evalcond[2]=((((new_r11)*(sj0)))+(((IkReal(-1.00000000000000))*(x126)))+(((cj0)*(new_r01))));
evalcond[3]=((((new_r10)*(sj0)))+(x124)+(((cj0)*(new_r00))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
if( 1 )
{
continue;

} else
{
}
}
}
}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst11)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst11)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst11)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst11)*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[8];
IkReal x127=IKsin(j2);
IkReal x128=IKcos(j2);
IkReal x129=((IkReal(1.00000000000000))*(sj0));
IkReal x130=((IkReal(1.00000000000000))*(sj1));
IkReal x131=((cj0)*(new_r01));
IkReal x132=((cj0)*(new_r00));
IkReal x133=((new_r11)*(sj0));
IkReal x134=((new_r10)*(sj0));
IkReal x135=((IkReal(1.00000000000000))*(x128));
evalcond[0]=((new_r20)+(((sj1)*(x128))));
evalcond[1]=((new_r21)+(((IkReal(-1.00000000000000))*(x127)*(x130))));
evalcond[2]=((((IkReal(-1.00000000000000))*(new_r00)*(x129)))+(((IkReal(-1.00000000000000))*(x127)))+(((cj0)*(new_r10))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x129)))+(((IkReal(-1.00000000000000))*(x135)))+(((cj0)*(new_r11))));
evalcond[4]=((((cj1)*(x127)))+(x131)+(x133));
evalcond[5]=((x134)+(x132)+(((IkReal(-1.00000000000000))*(cj1)*(x135))));
evalcond[6]=((x127)+(((IkReal(-1.00000000000000))*(new_r21)*(x130)))+(((cj1)*(x131)))+(((cj1)*(x133))));
evalcond[7]=((((IkReal(-1.00000000000000))*(new_r20)*(x130)))+(((IkReal(-1.00000000000000))*(x135)))+(((cj1)*(x134)))+(((cj1)*(x132))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j2array[1], cj2array[1], sj2array[1];
bool j2valid[1]={false};
_nj2 = 1;
if( IKabs(((gconst10)*(new_r21))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((IkReal(-1.00000000000000))*(gconst10)*(new_r20))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j2array[0]=IKatan2(((gconst10)*(new_r21)), ((IkReal(-1.00000000000000))*(gconst10)*(new_r20)));
sj2array[0]=IKsin(j2array[0]);
cj2array[0]=IKcos(j2array[0]);
if( j2array[0] > IKPI )
{
    j2array[0]-=IK2PI;
}
else if( j2array[0] < -IKPI )
{    j2array[0]+=IK2PI;
}
j2valid[0] = true;
for(int ij2 = 0; ij2 < 1; ++ij2)
{
if( !j2valid[ij2] )
{
    continue;
}
_ij2[0] = ij2; _ij2[1] = -1;
for(int iij2 = ij2+1; iij2 < 1; ++iij2)
{
if( j2valid[iij2] && IKabs(cj2array[ij2]-cj2array[iij2]) < IKFAST_SOLUTION_THRESH && IKabs(sj2array[ij2]-sj2array[iij2]) < IKFAST_SOLUTION_THRESH )
{
    j2valid[iij2]=false; _ij2[1] = iij2; break; 
}
}
j2 = j2array[ij2]; cj2 = cj2array[ij2]; sj2 = sj2array[ij2];
{
IkReal evalcond[2];
evalcond[0]=((((sj1)*(IKcos(j2))))+(new_r20));
evalcond[1]=((((IkReal(-1.00000000000000))*(sj1)*(IKsin(j2))))+(new_r21));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  )
{
continue;
}
}

{
IkReal dummyeval[1];
IkReal gconst12;
gconst12=IKsign((((new_r12)*(new_r12))+((new_r02)*(new_r02))));
dummyeval[0]=(((new_r12)*(new_r12))+((new_r02)*(new_r02)));
if( IKabs(dummyeval[0]) < 0.0000010000000000  )
{
continue;

} else
{
{
IkReal j0array[1], cj0array[1], sj0array[1];
bool j0valid[1]={false};
_nj0 = 1;
IkReal x136=((gconst12)*(sj1));
if( IKabs(((new_r12)*(x136))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((new_r02)*(x136))) < IKFAST_ATAN2_MAGTHRESH )
    continue;
j0array[0]=IKatan2(((new_r12)*(x136)), ((new_r02)*(x136)));
sj0array[0]=IKsin(j0array[0]);
cj0array[0]=IKcos(j0array[0]);
if( j0array[0] > IKPI )
{
    j0array[0]-=IK2PI;
}
else if( j0array[0] < -IKPI )
{    j0array[0]+=IK2PI;
}
j0valid[0] = true;
for(int ij0 = 0; ij0 < 1; ++ij0)
{
if( !j0valid[ij0] )
{
    continue;
}
_ij0[0] = ij0; _ij0[1] = -1;
for(int iij0 = ij0+1; iij0 < 1; ++iij0)
{
if( j0valid[iij0] && IKabs(cj0array[ij0]-cj0array[iij0]) < IKFAST_SOLUTION_THRESH && IKabs(sj0array[ij0]-sj0array[iij0]) < IKFAST_SOLUTION_THRESH )
{
    j0valid[iij0]=false; _ij0[1] = iij0; break; 
}
}
j0 = j0array[ij0]; cj0 = cj0array[ij0]; sj0 = sj0array[ij0];
{
IkReal evalcond[12];
IkReal x137=IKcos(j0);
IkReal x138=IKsin(j0);
IkReal x139=((IkReal(1.00000000000000))*(cj2));
IkReal x140=((IkReal(1.00000000000000))*(sj1));
IkReal x141=((IkReal(1.00000000000000))*(cj1));
IkReal x142=((new_r10)*(x138));
IkReal x143=((new_r01)*(x137));
IkReal x144=((new_r00)*(x137));
IkReal x145=((IkReal(1.00000000000000))*(x138));
IkReal x146=((new_r11)*(x138));
IkReal x147=((new_r12)*(x138));
IkReal x148=((new_r02)*(x137));
evalcond[0]=((((new_r12)*(x137)))+(((IkReal(-1.00000000000000))*(new_r02)*(x145))));
evalcond[1]=((((IkReal(-1.00000000000000))*(x140)))+(x147)+(x148));
evalcond[2]=((((IkReal(-1.00000000000000))*(sj2)))+(((new_r10)*(x137)))+(((IkReal(-1.00000000000000))*(new_r00)*(x145))));
evalcond[3]=((((IkReal(-1.00000000000000))*(new_r01)*(x145)))+(((IkReal(-1.00000000000000))*(x139)))+(((new_r11)*(x137))));
evalcond[4]=((((cj1)*(sj2)))+(x143)+(x146));
evalcond[5]=((x142)+(x144)+(((IkReal(-1.00000000000000))*(cj1)*(x139))));
evalcond[6]=((((IkReal(-1.00000000000000))*(new_r22)*(x140)))+(((cj1)*(x147)))+(((cj1)*(x148))));
evalcond[7]=((((IkReal(-1.00000000000000))*(x140)*(x142)))+(((IkReal(-1.00000000000000))*(x140)*(x144)))+(((IkReal(-1.00000000000000))*(new_r20)*(x141))));
evalcond[8]=((((IkReal(-1.00000000000000))*(x140)*(x143)))+(((IkReal(-1.00000000000000))*(x140)*(x146)))+(((IkReal(-1.00000000000000))*(new_r21)*(x141))));
evalcond[9]=((sj2)+(((IkReal(-1.00000000000000))*(new_r21)*(x140)))+(((cj1)*(x146)))+(((cj1)*(x143))));
evalcond[10]=((IkReal(1.00000000000000))+(((IkReal(-1.00000000000000))*(x140)*(x148)))+(((IkReal(-1.00000000000000))*(x140)*(x147)))+(((IkReal(-1.00000000000000))*(new_r22)*(x141))));
evalcond[11]=((((IkReal(-1.00000000000000))*(new_r20)*(x140)))+(((IkReal(-1.00000000000000))*(x139)))+(((cj1)*(x142)))+(((cj1)*(x144))));
if( IKabs(evalcond[0]) > 0.000001  || IKabs(evalcond[1]) > 0.000001  || IKabs(evalcond[2]) > 0.000001  || IKabs(evalcond[3]) > 0.000001  || IKabs(evalcond[4]) > 0.000001  || IKabs(evalcond[5]) > 0.000001  || IKabs(evalcond[6]) > 0.000001  || IKabs(evalcond[7]) > 0.000001  || IKabs(evalcond[8]) > 0.000001  || IKabs(evalcond[9]) > 0.000001  || IKabs(evalcond[10]) > 0.000001  || IKabs(evalcond[11]) > 0.000001  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j0;
vinfos[0].indices[0] = _ij0[0];
vinfos[0].indices[1] = _ij0[1];
vinfos[0].maxsolutions = _nj0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j1;
vinfos[1].indices[0] = _ij1[0];
vinfos[1].indices[1] = _ij1[1];
vinfos[1].maxsolutions = _nj1;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j2;
vinfos[2].indices[0] = _ij2[0];
vinfos[2].indices[1] = _ij2[1];
vinfos[2].maxsolutions = _nj2;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j3;
vinfos[3].indices[0] = _ij3[0];
vinfos[3].indices[1] = _ij3[1];
vinfos[3].maxsolutions = _nj3;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j4;
vinfos[4].indices[0] = _ij4[0];
vinfos[4].indices[1] = _ij4[1];
vinfos[4].maxsolutions = _nj4;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j5;
vinfos[5].indices[0] = _ij5[0];
vinfos[5].indices[1] = _ij5[1];
vinfos[5].maxsolutions = _nj5;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j6;
vinfos[6].indices[0] = _ij6[0];
vinfos[6].indices[1] = _ij6[1];
vinfos[6].maxsolutions = _nj6;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots6(IkReal rawcoeffs[6+1], IkReal rawroots[6], int& numroots)
{
    using std::complex;
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[6];
    const int maxsteps = 110;
    for(int i = 0; i < 6; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[6];
    IkReal err[6];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 6; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 6; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 6; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 6; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[6] = {false};
    for(int i = 0; i < 6; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 6; ++j) {
                if( abs(roots[i]-roots[j]) < 8*tolsqrt ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "a3fc2a58c084beca1a6f29736b224a40"; }

IKFAST_API const char* GetIkFastVersion() { return IKFAST_STRINGIZE(IKFAST_VERSION); }

#ifdef IKFAST_NAMESPACE

int ik_solve(IkReal eerot[9], IkReal eetrans[3], std::vector<std::vector<IkReal> >& sol_joint, std::vector<IkReal> free_joint)
{
    IkSolutionList<IkReal> solutions;
	
    std::vector<IkReal> vfree(GetNumFreeParameters());
	for(std::size_t i = 0; i < vfree.size(); ++i)
		vfree[i] = free_joint[i];
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);
    if( !bSuccess ) {
        return -1;
    }

	sol_joint.resize(solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
		sol_joint[i].resize(solvalues.size());
        for( std::size_t j = 0; j < solvalues.size(); ++j)
			sol_joint[i][j] = solvalues[j];
    }
    return 0;
}

} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
